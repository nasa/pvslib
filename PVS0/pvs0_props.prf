(|pvs0_props| (|subterm_transitive| 0 (|subterm_transitive-1| |nil| 3642153545 ("" (INDUCT "exc") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (SKEEP) (("3" (EXPAND "subterm" -3) (("3" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "subterm" 1) (("2" (FLATTEN) (("2" (INST -2 "exa" "exb") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) (("4" (SKEEP) (("4" (EXPAND "subterm" -4) (("4" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "subterm" 1) (("2" (FLATTEN) (("2" (INST -3 "exa" "exb") (("2" (ASSERT) (("2" (INST -2 "exa" "exb") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "subterm" 1) (("3" (FLATTEN) (("3" (INST -3 "exa" "exb") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) (("5" (SKEEP) (("5" (EXPAND "subterm" -3) (("5" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "subterm" 1) (("2" (FLATTEN) (("2" (INST -2 "exa" "exb") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) (("6" (SKEEP) (("6" (EXPAND "subterm" -5) (("6" (EXPAND "subterm" 1) (("6" (PROP) (("1" (EXPAND "subterm" -5) (("1" (ASSERT) (("1" (REPLACE -1 -5) (("1" (HIDE-ALL-BUT (-5 2 3 4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "exa" "exb") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST -3 "exa" "exb") (("3" (ASSERT) NIL NIL)) NIL) ("4" (ASSERT) (("4" (INST -4 "exa" "exb") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PVS0Expr_induction| FORMULA-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL)) SHOSTAK)) (|null_path| 0 (|null_path-1| |nil| 3642276868 ("" (SKEEP) (("" (EXPAND "valid_path") (("" (LIFT-IF 1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|valid_path| DEF-DECL "bool" |pvs0_cc| NIL)) SHOSTAK)) (|valid_paths_subexpr| 0 (|valid_paths_subexpr-2| "" 3885322350 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (SKEEP) (("" (EXPAND "valid_path" 1) (("" (LIFT-IF) (("" (SPLIT) (("1" (TYPEPRED "path2") (("1" (HIDE -3) (("1" (EXPAND "subterm_at") (("1" (ASSERT) (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "valid_path") (("2" (USE "length_append[nat]") (("2" (GRIND) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "path2" "x!2") (("1" (HIDE -6) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (TYPEPRED "x!2") (("1" (TYPEPRED "path2") (("1" (REPLACE -5) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (INST -2 "get_arg(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (TYPEPRED "x!2" "path2") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 6)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE 1) (("1" (CASE "null?(x!2)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (USE "reverse_reverse[nat]") (("2" (REPLACE -1 1 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (HIDE -3) (("1" (TYPEPRED "path2") (("1" (REPLACE -3) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) (("1" (REPLACE 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (CASE "rac(x!2)=0") (("1" (INST -3 "get_arg1(x!1)" " rdc(x!2)") (("1" (INST -3 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 8)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "rac(x!2)=1") (("1" (INST -3 "get_arg2(x!1)" " rdc(x!2)") (("1" (INST -3 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (2 9)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (TYPEPRED "path2") (("1" (REPLACE -3) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (INST -2 "get_arg(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (TYPEPRED "x!2") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 8)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (TYPEPRED "path2") (("1" (REPLACE -3) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (REPLACE 3) (("1" (REPLACE 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (CASE "rac(x!2)=0") (("1" (ASSERT) (("1" (INST -2 "get_cond(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 11)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rac(x!2)=1") (("1" (ASSERT) (("1" (INST -2 "get_if(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (2 12)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rac(x!2)=2") (("1" (INST -2 "get_else(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (3 13)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|valid_paths_subexpr-1| |nil| 3642953208 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (SKEEP) (("" (EXPAND "valid_path" 1) (("" (LIFT-IF) (("" (SPLIT) (("1" (TYPEPRED "path2") (("1" (HIDE -3) (("1" (EXPAND "subterm_at") (("1" (ASSERT) (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "valid_path") (("2" (USE "length_append[nat]") (("2" (GRIND) (("2" (TYPEPRED X!2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (TYPEPRED "path2" "x!2") (("1" (HIDE -6) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (TYPEPRED "x!2") (("1" (TYPEPRED "path2") (("1" (REPLACE -5) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (INST -2 "get_arg(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (TYPEPRED "x!2" "path2") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 6)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE 1) (("1" (CASE "null?(x!2)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (USE "reverse_reverse[nat]") (("2" (REPLACE -1 1 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (HIDE -3) (("1" (TYPEPRED "path2") (("1" (REPLACE -3) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) (("1" (REPLACE 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (CASE "rac(x!2)=0") (("1" (INST -3 "get_arg1(x!1)" " rdc(x!2)") (("1" (INST -3 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 8)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "rac(x!2)=1") (("1" (INST -3 "get_arg2(x!1)" " rdc(x!2)") (("1" (INST -3 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (2 9)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (TYPEPRED "path2") (("1" (REPLACE -3) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (INST -2 "get_arg(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (TYPEPRED "x!2") (("1" (EXPAND "valid_path" -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 8)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "x!2=null") (("1" (REPLACE -1) (("1" (REWRITE "append_null") (("1" (TYPEPRED "path2") (("1" (REPLACE -3) (("1" (EXPAND "subterm_at") (("1" (EXPAND "valid_path" -2) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (REPLACE 3) (("1" (REPLACE 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (CASE "rac(x!2)=0") (("1" (ASSERT) (("1" (INST -2 "get_cond(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 11)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rac(x!2)=1") (("1" (ASSERT) (("1" (INST -2 "get_if(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (2 12)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "rac(x!2)=2") (("1" (INST -2 "get_else(x!1)" "rdc(x!2)") (("1" (INST -2 "path2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (3 13)) (("1" (EXPAND "rdc") (("1" (REWRITE "length_reverse") (("1" (USE "length_reverse[nat]") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "length" 2 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path2") (("2" (EXPAND "subterm_at" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!2") (("2" (EXPAND "valid_path" -2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_else| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|get_if| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|get_arg1| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|op2?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_arg2| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|x!1| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|x!2| SKOLEM-CONST-DECL "(valid_path(x!1))" |pvs0_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|path2| SKOLEM-CONST-DECL "(valid_path(subterm_at(x!1, x!2)))" |pvs0_props| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|length_null| FORMULA-DECL NIL |more_list_props| |structures|) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|subterm_append_TCC1| 0 (|subterm_append_TCC1-1| |nil| 3642276301 ("" (SKEEP) (("" (USE "valid_paths_subexpr") (("" (BETA) (("" (SKEEP) (("" (INST?) (("" (TYPEPRED "path2") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|valid_paths_subexpr| FORMULA-DECL NIL |pvs0_props| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path[Val](expr))" |pvs0_props| NIL) (|sterm| SKOLEM-CONST-DECL "({res: PVS0Expr[Val] | subterm[Val](res, expr)})" |pvs0_props| NIL) (|path2| SKOLEM-CONST-DECL "(valid_path[Val](sterm))" |pvs0_props| NIL)) NIL (|subterm_append| SUBTYPE "list_props[nat].append(pvs0_props.path2, pvs0_props.path)" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|subterm_append| 0 (|subterm_append-2| |nil| 3651337775 ("" (INDUCT "expr") (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED "path" "path2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "path" "path2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) (("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "path") (("4" (EXPAND "valid_path" -2) (("4" (SPLIT) (("1" (EXPAND "subterm_at" 1 3) (("1" (ASSERT) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) (("1" (LEMMA "length_append[nat]") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "rdc_append[nat]") (("2" (REPLACE -1) (("2" (INST -5 "rdc(path)") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE -6 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) (("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "path") (("5" (EXPAND "valid_path" -2) (("5" (PROP) (("1" (EXPAND "subterm_at" 1 3) (("1" (ASSERT) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE -4 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (USE "rdc_append[nat]") (("2" (REPLACE -1) (("2" (HIDE -7) (("2" (INST -6 "rdc(path)") (("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (USE "rac_append[nat]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -6 -7 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (USE "rac_append[nat]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "rdc_append[nat]") (("3" (REPLACE -1) (("3" (HIDE -5) (("3" (INST -5 "rdc(path)") (("3" (INST -5 "path2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "path") (("6" (EXPAND "valid_path" -2) (("6" (SPLIT) (("1" (EXPAND "subterm_at" 1 3) (("1" (ASSERT) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA "length_append[nat]") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "rdc_append[nat]") (("2" (REPLACE -1) (("2" (INST -5 "rdc(path)") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE -6 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (ASSERT) (("7" (LABEL "ihc" -1) (("7" (LABEL "iht" -2) (("7" (LABEL "ihe" -3) (("7" (HIDE -) (("7" (SKEEP) (("7" (SKEEP) (("7" (EXPAND "subterm_at" 1 3) (("7" (LIFT-IF) (("7" (PROP) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "rac_append[nat]") (("2" (EXPAND "subterm_at" 1 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL "ihc") (("2" (INST -1 "rdc(path)") (("2" (INST? -1) (("2" (USE "rdc_append[nat]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (USE "rac_append[nat]") (("3" (EXPAND "subterm_at" 1 1) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL "iht") (("2" (INST -1 "rdc(path)") (("2" (INST? -1) (("2" (USE "rdc_append[nat]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (USE "rac_append[nat]") (("4" (EXPAND "subterm_at" 2 1) (("4" (ASSERT) (("4" (LIFT-IF) (("4" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL "ihe") (("2" (INST -1 "rdc(path)") (("2" (INST? -1) (("2" (USE "rdc_append[nat]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (LEMMA "valid_paths_subexpr") (("8" (HIDE 2) (("8" (SKEEP) (("8" (SKEEP) (("8" (INST -1 "expr" "path") (("8" (BETA) (("8" (INST -1 "path2") (("8" (TYPEPRED "path2") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|valid_paths_subexpr| FORMULA-DECL NIL |pvs0_props| NIL) (|path2| SKOLEM-CONST-DECL "(valid_path[Val](sterm))" |pvs0_props| NIL) (|sterm| SKOLEM-CONST-DECL "({res: PVS0Expr[Val] | subterm[Val](res, expr)})" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path[Val](expr))" |pvs0_props| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|ite| ADT-CONSTRUCTOR-DECL "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" |PVS0Expr_adt| NIL) (|rec| ADT-CONSTRUCTOR-DECL "[PVS0Expr -> (rec?)]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|op2| ADT-CONSTRUCTOR-DECL "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" |PVS0Expr_adt| NIL) (|op2?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|op1| ADT-CONSTRUCTOR-DECL "[[nat, PVS0Expr] -> (op1?)]" |PVS0Expr_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vr| ADT-CONSTRUCTOR-DECL "(vr?)" |PVS0Expr_adt| NIL) (|vr?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|cnst| ADT-CONSTRUCTOR-DECL "[T -> (cnst?)]" |PVS0Expr_adt| NIL) (|cnst?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|PVS0Expr_induction| FORMULA-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL)) NIL) (|subterm_append-1| |nil| 3642897817 ("" (INDUCT "expr") (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "expr!1") (("2" (GRIND) NIL NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) (("3" (SPLIT) (("1" (SKEEP) (("1" (SKEEP) (("1" (TYPEPRED "path" "path2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROP) (("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "path" "path2") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) (("5" (PROP) (("1" (SKEEP) (("1" (SKEEP) (("1" (TYPEPRED "path") (("1" (EXPAND "valid_path" -2) (("1" (SPLIT) (("1" (EXPAND "subterm_at" 1 3) (("1" (ASSERT) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) (("1" (LEMMA "length_append[nat]") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "rdc_append") (("2" (REPLACE -1) (("2" (INST -5 "rdc(path)") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE -6 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "op12_var") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) (("6" (PROP) (("1" (SKEEP) (("1" (SKEEP) (("1" (TYPEPRED "path") (("1" (EXPAND "valid_path" -2) (("1" (PROP) (("1" (EXPAND "subterm_at" 1 3) (("1" (ASSERT) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE -4 -5 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (USE "rdc_append") (("2" (REPLACE -1) (("2" (HIDE -6) (("2" (INST -6 "rdc(path)") (("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (USE "rac_append") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -6 -7 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (USE "rac_append") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "rdc_append") (("3" (REPLACE -1) (("3" (HIDE -6) (("3" (INST -5 "rdc(path)") (("3" (INST -5 "path2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "op23_var") (("2" (ASSERT) NIL NIL)) NIL) ("3" (TYPEPRED "op22_var") (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "op23_var") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (ASSERT) (("7" (PROP) (("1" (SKEEP) (("1" (SKEEP) (("1" (TYPEPRED "path") (("1" (EXPAND "valid_path" -2) (("1" (SPLIT) (("1" (EXPAND "subterm_at" 1 3) (("1" (ASSERT) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "NOT null?(path)") (("1" (EXPAND "subterm_at" 2 3) (("1" (ASSERT) (("1" (EXPAND "subterm_at" 2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (LEMMA "length_append[nat]") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "rdc_append") (("2" (REPLACE -1) (("2" (INST -5 "rdc(path)") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1 3) (("2" (ASSERT) (("2" (LEMMA "append_null[nat]") (("2" (INST -1 "path2") (("2" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE -6 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "rec1_var") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (ASSERT) (("8" (PROP) (("1" (LABEL "ihc" -3) (("1" (LABEL "iht" -2) (("1" (LABEL "ihe" -1) (("1" (HIDE -) (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "subterm_at" 1 3) (("1" (LIFT-IF) (("1" (PROP) (("1" (LEMMA "append_null[nat]") (("1" (INST -1 "path2") (("1" (CASE "append(path2, path) = path2") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "rac_append") (("2" (EXPAND "subterm_at" 1 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL "ihc") (("2" (INST -1 "rdc(path)") (("2" (INST? -1) (("2" (USE "rdc_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (USE "rac_append") (("3" (EXPAND "subterm_at" 1 1) (("3" (ASSERT) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL "iht") (("2" (INST -1 "rdc(path)") (("2" (INST? -1) (("2" (USE "rdc_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (USE "rac_append") (("4" (EXPAND "subterm_at" 2 1) (("4" (ASSERT) (("4" (LIFT-IF) (("4" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "length_append[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REVEAL "ihe") (("2" (INST -1 "rdc(path)") (("2" (INST? -1) (("2" (USE "rdc_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "ite3_var") (("2" (ASSERT) NIL NIL)) NIL) ("3" (TYPEPRED "ite2_var") (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "ite2_var") (("4" (ASSERT) NIL NIL)) NIL) ("5" (TYPEPRED "ite1_var") (("5" (ASSERT) NIL NIL)) NIL) ("6" (TYPEPRED "ite1_var") (("6" (ASSERT) NIL NIL)) NIL) ("7" (TYPEPRED "ite1_var") (("7" (ASSERT) NIL NIL)) NIL) ("8" (TYPEPRED "ite1_var") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (SKEEP) (("9" (ASSERT) NIL NIL)) NIL) ("10" (LEMMA "valid_paths_subexpr") (("10" (HIDE 2) (("10" (SKEEP) (("10" (SKEEP) (("10" (SKEEP) (("10" (INST -1 "expr" "path") (("10" (BETA) (("10" (INST -1 "path2") (("10" (TYPEPRED "path2") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|valid_0_path_ext| 0 (|valid_0_path_ext-1| |nil| 3642898469 ("" (SKEEP) (("" (BETA) (("" (FLATTEN) (("" (LEMMA "subterm_append") (("" (INST? -1) (("" (BETA) (("" (INST -1 "cons(0, null)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (LEMMA "valid_paths_subexpr") (("1" (INST -1 "expr" "path") (("1" (BETA) (("1" (INST -1 "cons(0, null)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (PROP) (("1" (EXPAND "valid_path") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GRIND) (("1" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE 2) (("2" (GRIND) (("2" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "valid_path") (("3" (ASSERT) (("3" (GRIND) (("3" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "valid_path") (("4" (ASSERT) (("4" (FLATTEN) (("4" (HIDE 2 3) (("4" (GRIND) (("4" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_append| FORMULA-DECL NIL |pvs0_props| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|op2?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_arg1| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|valid_paths_subexpr| FORMULA-DECL NIL |pvs0_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL)) SHOSTAK)) (|valid_1_path_ext| 0 (|valid_1_path_ext-1| |nil| 3643165116 ("" (SKEEP) (("" (BETA) (("" (FLATTEN) (("" (LEMMA "subterm_append") (("" (INST? -1) (("" (BETA) (("" (INST -1 "cons(1, null)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (LEMMA "valid_paths_subexpr") (("1" (INST -1 "expr" "path") (("1" (BETA) (("1" (INST -1 "cons(1, null)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (HIDE 2) (("1" (GRIND) (("1" (USE "null_path") NIL NIL) ("2" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) (("1" (USE "null_path") NIL NIL) ("2" (USE "null_path") NIL NIL) ("3" (USE "null_path") NIL NIL) ("4" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_append| FORMULA-DECL NIL |pvs0_props| NIL) (|get_arg2| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|get_arg1| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|op2?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|get_if| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|valid_paths_subexpr| FORMULA-DECL NIL |pvs0_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL)) SHOSTAK)) (|valid_2_path_ext| 0 (|valid_2_path_ext-1| |nil| 3643207021 ("" (SKEEP) (("" (BETA) (("" (FLATTEN) (("" (LEMMA "subterm_append") (("" (INST? -1) (("" (BETA) (("" (INST -1 "cons(2, null)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (LEMMA "valid_paths_subexpr") (("1" (INST -1 "expr" "path") (("1" (BETA) (("1" (INST -1 "cons(2, null)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) (("1" (USE "null_path") NIL NIL) ("2" (USE "null_path") NIL NIL) ("3" (USE "null_path") NIL NIL) ("4" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_append| FORMULA-DECL NIL |pvs0_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|get_if| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|get_else| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|valid_paths_subexpr| FORMULA-DECL NIL |pvs0_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL)) SHOSTAK)) (|app_prefix_of_path_ext| 0 (|app_prefix_of_path_ext-3| |nil| 3651337824 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (SKEEP) (("" (CASE "x!2 = null") (("1" (REPLACE -1) (("1" (INST 1 "path_ext") (("1" (REWRITE "append_null") NIL NIL) ("2" (REPLACE -1) (("2" (EXPAND "subterm_at") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vr?(x!1) OR cnst?(x!1) OR op1?(x!1) OR op2?(x!1) OR rec?(x!1) OR ite?(x!1)") (("1" (PROP) (("1" (HIDE -2) (("1" (TYPEPRED "x!2") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (EXPAND "valid_path" -2) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -5 "get_arg(x!1)" "rdc(x!2)") (("3" (TYPEPRED "path_ext") (("3" (EXPAND "valid_path" -2) (("3" (CASE "path_ext=null") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (INST 3 "p") (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1 3 :DIR RL) (("1" (REPLACE -4) (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (REPLACE -8 3 :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 3 :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE 1) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -4) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "x!2" "path_ext") (("4" (CASE "path_ext=null") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-6 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -2) (("2" (ASSERT) (("2" (EXPAND "suffix?") (("2" (SPLIT -5) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (HIDE -2) (("1" (EXPAND "valid_path" -7) (("1" (ASSERT) (("1" (INST -9 "get_arg1(x!1)" "rdc(x!2)") (("1" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (TYPEPRED "p") (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 6 :DIR RL) (("1" (LEMMA "rdc_rac[nat]") (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND "rdc" 1) (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (REVEAL 1 3 4) (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (INST -10 "get_arg2(x!1)" "rdc(x!2)") (("1" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (EXPAND "valid_path" -10) (("1" (ASSERT) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (REPLACE -3 :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 6 :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (ASSERT) (("2" (EXPAND "valid_path" -8) (("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "path_ext" "x!2") (("5" (CASE "path_ext=null") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -5) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "valid_path" -2) (("2" (FLATTEN) (("2" (INST -9 "get_arg(x!1)" "rdc(x!2)") (("2" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (EXPAND "suffix?" -5) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (SKEEP) (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1 :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -4) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (TYPEPRED "path_ext" "x!2") (("6" (CASE "path_ext=null") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "suffix?") (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -6) (("2" (ASSERT) (("2" (CASE "rac(x!2) =rac(path_ext)") (("1" (PROP) (("1" (EXPAND "valid_path" -7) (("1" (ASSERT) (("1" (INST -10 "get_cond(x!1)" "rdc(x!2)") (("1" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -7) (("2" (ASSERT) (("2" (INST -10 "get_if(x!1)" "rdc(x!2)") (("2" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "valid_path" -7) (("3" (ASSERT) (("3" (INST -10 "get_else(x!1)" "rdc(x!2)") (("3" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append[nat]" :DIR RL) (("1" (LEMMA "rac_append[nat]") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac[nat]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (EXPAND "rac") (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|op2?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|cnst?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|vr?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_cond(x!1), rdc(x!2))))" |pvs0_props| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_if(x!1), rdc(x!2))))" |pvs0_props| NIL) (|get_if| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_else(x!1), rdc(x!2))))" |pvs0_props| NIL) (|get_else| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_arg(x!1), rdc(x!2))))" |pvs0_props| NIL) (|get_arg2| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_arg2(x!1), rdc(x!2))))" |pvs0_props| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|get_arg1| ADT-ACCESSOR-DECL "[(op2?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_arg1(x!1), rdc(x!2))))" |pvs0_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|reverse_def| FORMULA-DECL NIL |more_list_props| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|p| SKOLEM-CONST-DECL "(valid_path(subterm_at(get_arg(x!1), rdc(x!2))))" |pvs0_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|x!1| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|x!2| SKOLEM-CONST-DECL "(valid_path(x!1))" |pvs0_props| NIL) (|path_ext| SKOLEM-CONST-DECL "{path_ext: (valid_path(x!1)) | suffix?(x!2, path_ext)}" |pvs0_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL) (|app_prefix_of_path_ext-2| |nil| 3643729922 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (SKEEP) (("" (CASE "x!2 = null") (("1" (REPLACE -1) (("1" (INST 1 "path_ext") (("1" (REWRITE "append_null") NIL NIL) ("2" (REPLACE -1) (("2" (EXPAND "subterm_at") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROP) (("1" (HIDE -2) (("1" (TYPEPRED "x!2") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (EXPAND "valid_path" -2) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -5 "get_arg(x!1)" "rdc(x!2)") (("3" (TYPEPRED "path_ext") (("3" (EXPAND "valid_path" -2) (("3" (CASE "path_ext=null") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (INST 3 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1 3 :DIR RL) (("1" (REPLACE -4) (("1" (REWRITE "rdc_append" :DIR RL) (("1" (REPLACE -8 3 :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 3 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE 1) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -4) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "x!2" "path_ext") (("4" (CASE "path_ext=null") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-6 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -2) (("2" (ASSERT) (("2" (EXPAND "suffix?") (("2" (SPLIT -5) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (HIDE -2) (("1" (EXPAND "valid_path" -7) (("1" (ASSERT) (("1" (INST -9 "get_arg1(x!1)" "rdc(x!2)") (("1" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (TYPEPRED "p") (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 6 :DIR RL) (("1" (LEMMA "rdc_rac") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND "rdc" 1) (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (REVEAL 1 3 4) (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (INST -10 "get_arg2(x!1)" "rdc(x!2)") (("1" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (EXPAND "valid_path" -10) (("1" (ASSERT) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REWRITE "rdc_append" :DIR RL) (("1" (REPLACE -3 :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 6 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (ASSERT) (("2" (EXPAND "valid_path" -8) (("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "path_ext" "x!2") (("5" (CASE "path_ext=null") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -5) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "valid_path" -2) (("2" (FLATTEN) (("2" (INST -9 "get_arg(x!1)" "rdc(x!2)") (("2" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (EXPAND "suffix?" -5) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (SKEEP) (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -4) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (TYPEPRED "path_ext" "x!2") (("6" (CASE "path_ext=null") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "suffix?") (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -6) (("2" (ASSERT) (("2" (CASE "rac(x!2) =rac(path_ext)") (("1" (PROP) (("1" (EXPAND "valid_path" -7) (("1" (ASSERT) (("1" (INST -10 "get_cond(x!1)" "rdc(x!2)") (("1" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -7) (("2" (ASSERT) (("2" (INST -10 "get_if(x!1)" "rdc(x!2)") (("2" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "valid_path" -7) (("3" (ASSERT) (("3" (INST -10 "get_else(x!1)" "rdc(x!2)") (("3" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (EXPAND "rac") (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|app_prefix_of_path_ext-1| |nil| 3643563298 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (SKEEP) (("" (CASE "x!2 = null") (("1" (REPLACE -1) (("1" (INST 1 "path_ext") (("1" (REWRITE "append_null") NIL NIL) ("2" (REPLACE -1) (("2" (EXPAND "subterm_at") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROP) (("1" (HIDE -2) (("1" (TYPEPRED "x!2") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (TYPEPRED "x!2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (EXPAND "valid_path" -2) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -5 "get_arg(x!1)" "rdc(x!2)") (("3" (TYPEPRED "path_ext") (("3" (EXPAND "valid_path" -2) (("3" (CASE "path_ext=null") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (INST 3 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1 3 :DIR RL) (("1" (REPLACE -4) (("1" (REWRITE "rdc_append" :DIR RL) (("1" (REPLACE -8 3 :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 3 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE 1) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -4) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "x!2" "path_ext") (("4" (CASE "path_ext=null") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-6 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -2) (("2" (ASSERT) (("2" (EXPAND "suffix?") (("2" (SPLIT -5) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (HIDE -2) (("1" (EXPAND "valid_path" -7) (("1" (ASSERT) (("1" (INST -9 "get_arg1(x!1)" "rdc(x!2)") (("1" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (TYPEPRED "p") (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -4 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 6 :DIR RL) (("1" (LEMMA "rdc_rac") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND "rdc" 1) (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (REVEAL 1 3 4) (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (INST -10 "get_arg2(x!1)" "rdc(x!2)") (("1" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (EXPAND "valid_path" -10) (("1" (ASSERT) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REWRITE "rdc_append" :DIR RL) (("1" (REPLACE -3 :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 6 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (ASSERT) (("2" (EXPAND "valid_path" -8) (("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "path_ext" "x!2") (("5" (CASE "path_ext=null") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (-4 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -5) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "valid_path" -2) (("2" (FLATTEN) (("2" (INST -9 "get_arg(x!1)" "rdc(x!2)") (("2" (INST -9 "rdc(path_ext)") (("1" (PROP) (("1" (EXPAND "suffix?" -5) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "rac(x!2) = rac(path_ext)") (("1" (SKEEP) (("1" (INST 6 "p") (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -5 :DIR RL) (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -2 :DIR RL) (("1" (REPLACE -1 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2 3 5 6)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST-CP -1 "x!2" "0") (("2" (INST -1 "path_ext" "0") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -4) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 5)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (TYPEPRED "path_ext" "x!2") (("6" (CASE "path_ext=null") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "suffix?") (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 4)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -6) (("2" (ASSERT) (("2" (CASE "rac(x!2) =rac(path_ext)") (("1" (PROP) (("1" (EXPAND "valid_path" -7) (("1" (ASSERT) (("1" (INST -10 "get_cond(x!1)" "rdc(x!2)") (("1" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -7) (("2" (ASSERT) (("2" (INST -10 "get_if(x!1)" "rdc(x!2)") (("2" (INST -10 "rdc(path_ext)") (("1" (PROP) (("1" (SKEEP) (("1" (LEMMA "rdc_rac") (("1" (INST -1 "path_ext") (("1" (REPLACE -5 -1 :DIR RL) (("1" (REPLACE -2 -1 :DIR RL) (("1" (INST 6 "p") (("1" (REWRITE "rdc_append" :DIR RL) (("1" (LEMMA "rac_append") (("1" (INST -1 "p" "x!2") (("1" (REPLACE -1 -2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "rdc_rac") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "p") (("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 6)) (("2" (EXPAND "rdc") (("2" (REWRITE "length_reverse") (("2" (USE "length_reverse[nat]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rdc") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|cnst_vr_path_ext| 0 (|cnst_vr_path_ext-1| |nil| 3643210892 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE " app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (EXPAND "valid_path" -2) (("" (PROP) (("1" (ASSERT) (("1" (EXPAND "append" -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "append" -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|app_prefix_of_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|path_ext| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL)) SHOSTAK)) (|op1_rec_path_ext| 0 (|op1_rec_path_ext-2| |nil| 3645893583 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE "app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (CASE "p=null") (("1" (REPLACES -1) (("1" (EXPAND "append" -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (REWRITE "cons_append") (("2" (REWRITE "suffix_app") (("2" (CASE "rac(p)=0") (("1" (EXPAND "suffix?" 3) (("1" (LIFT-IF) (("1" (SPLIT 3) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (REWRITE "length_null_list" :DIR RL) (("1" (REWRITE "length_reverse") (("1" (REWRITE "length_null_list") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "reverse" 2 1) (("2" (EXPAND "reverse" 2 1) (("2" (EXPAND "append" 2) (("2" (EXPAND "reverse" 2 2) (("2" (SPLIT 2) (("1" (EXPAND "rac" -1) (("1" (LEMMA "reverse_def[nat]") (("1" (INST -1 "p" "0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|suffix_app| FORMULA-DECL NIL |more_list_props| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|length_null_list| FORMULA-DECL NIL |more_list_props| |structures|) (|reverse_def| FORMULA-DECL NIL |more_list_props| |structures|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|cons_append| FORMULA-DECL NIL |more_list_props| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|app_prefix_of_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|path_ext| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL)) NIL) (|op1_rec_path_ext-1| |nil| 3643216154 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE " app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (EXPAND "valid_path" -2) (("" (PROP) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (EXPAND "append") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" 2) (("2" (PROP) (("1" (REPLACE -6 -1 RL) (("1" (USE "length_append[nat]") (("1" (EXPAND "length" -2 2) (("1" (REPLACE -1 -2) (("1" (ASSERT) (("1" (CASE "null?(p)") (("1" (EXPAND "append" -8) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (USE "length_reverse[nat]") (("1" (USE "length_append[nat]") (("1" (HIDE-ALL-BUT (-1 -2 -3 -8 3)) (("1" (USE "length_null[nat]") (("1" (CASE "null?(p)") (("1" (EXPAND "append" -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" -3 1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (LEMMA "length_reverse[nat]") (("2" (INST -1 "cons(0, path)") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "suffix?" -9) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (CASE "path=null") (("1" (REPLACE -1) (("1" (CASE "null?(p)") (("1" (HIDE-ALL-BUT (-1 -9 7)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4 -8 -4)) (("2" (REWRITE "append_null") (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "reverse" 2 1) (("2" (EXPAND "reverse" 2 1) (("2" (EXPAND "append") (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST -1 "p" "0") (("2" (ASSERT) (("2" (EXPAND "nth" -1 1) (("2" (HIDE -1 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (USE "reverse_reverse[nat]") (("2" (REPLACES -1 1 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(path)") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "reverse" 5 1) (("2" (EXPAND "append" 5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -9) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "reverse" 3 2) (("1" (EXPAND "append" 3 1) (("1" (ASSERT) (("1" (EXPAND "reverse" 3 1) (("1" (EXPAND "suffix?" 3) (("1" (PROP) (("1" (REWRITE "length_reverse") (("1" (EXPAND "length" -1 2) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse" 2 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "preffix_rev_suffix" :DIR RL) (("2" (REWRITE "preffix_rev_suffix" :DIR RL) (("2" (EXPAND "reverse" 4 1) (("2" (REPLACE -8 :DIR RL) (("2" (REWRITE "reverse_append") (("2" (EXPAND "append" 4 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "append" 4 2) (("2" (REWRITE "prefix_app") (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST -1 "p" "0") (("2" (PROP) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "prefix?" 4) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 7)) (("1" (GRIND) (("1" (EXPAND LENGTH) (("1" (GRIND) (("1" (USE "length_reverse[nat]") (("1" (GRIND) (("1" (EXPAND "append") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND "nth") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 9)) (("2" (GRIND) (("2" (EXPAND "append") (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (EXPAND "append") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" 2) (("2" (PROP) (("1" (REPLACE -6 -1 RL) (("1" (USE "length_append[nat]") (("1" (EXPAND "length" -2 2) (("1" (REPLACE -1 -2) (("1" (ASSERT) (("1" (CASE "null?(p)") (("1" (EXPAND "append" -8) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (USE "length_reverse[nat]") (("1" (USE "length_append[nat]") (("1" (HIDE-ALL-BUT (-1 -2 -3 -8 3)) (("1" (USE "length_null[nat]") (("1" (CASE "null?(p)") (("1" (EXPAND "append" -6) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" -3 1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (LEMMA "length_reverse[nat]") (("2" (INST -1 "cons(0, path)") (("2" (EXPAND "length" -1 2) (("2" (ASSERT) (("2" (PROP) (("1" (EXPAND "suffix?" -9) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (CASE "path=null") (("1" (REPLACE -1) (("1" (CASE "null?(p)") (("1" (HIDE-ALL-BUT (-1 -9 7)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4 -8 -4)) (("2" (REWRITE "append_null") (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "reverse" 2 1) (("2" (EXPAND "reverse" 2 1) (("2" (EXPAND "append") (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST -1 "p" "0") (("2" (ASSERT) (("2" (EXPAND "nth" -1 1) (("2" (HIDE -1 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (USE "reverse_reverse[nat]") (("2" (REPLACES -1 1 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(path)") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "reverse" 5 1) (("2" (EXPAND "append" 5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "suffix?" -9) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "reverse" 3 2) (("1" (EXPAND "append" 3 1) (("1" (ASSERT) (("1" (EXPAND "reverse" 3 1) (("1" (EXPAND "suffix?" 3) (("1" (PROP) (("1" (REWRITE "length_reverse") (("1" (EXPAND "length" -1 2) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse" 2 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "preffix_rev_suffix" :DIR RL) (("2" (REWRITE "preffix_rev_suffix" :DIR RL) (("2" (EXPAND "reverse" 4 1) (("2" (REPLACE -8 :DIR RL) (("2" (REWRITE "reverse_append") (("2" (EXPAND "append" 4 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "append" 4 2) (("2" (REWRITE "prefix_app") (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST -1 "p" "0") (("2" (PROP) (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "prefix?" 4) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 7)) (("1" (GRIND) (("1" (EXPAND LENGTH) (("1" (GRIND) (("1" (USE "length_reverse[nat]") (("1" (GRIND) (("1" (EXPAND "append") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-4 1)) (("2" (EXPAND "nth") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 9)) (("2" (GRIND) (("2" (EXPAND "append") (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|op2_path_ext| 0 (|op2_path_ext-2| "" 3790336281 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE "app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (CASE "null?(p)") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (REPLACE -4 :DIR RL) (("1" (LEMMA "suffix_app[nat]") (("1" (INST -1 "p" "(:0:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (USE "reverse_def[nat]") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "suffix_app[nat]") (("2" (INST -1 "p" "(:1:)" "path") (("2" (EXPAND "append" -1 1) (("2" (EXPAND "append" -1 1) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST -1 "p" "0") (("2" (ASSERT) (("2" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|reverse_def| FORMULA-DECL NIL |more_list_props| |structures|) (|suffix_app| FORMULA-DECL NIL |more_list_props| |structures|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|app_prefix_of_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|path_ext| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL)) SHOSTAK) (|op2_path_ext-1| |nil| 3643560964 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE "app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (CASE "null?(p)") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (PROP) (("1" (REPLACE -4 :DIR RL) (("1" (LEMMA "suffix_app[nat]") (("1" (INST -1 "p" "(:0:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (USE "reverse_def[nat]") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "suffix_app[nat]") (("2" (INST -1 "p" "(:1:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (LEMMA "reverse_def[nat]") (("1" (INST -1 "p" "0") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|ite_path_ext| 0 (|ite_path_ext-2| "" 3790336283 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE "app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (CASE "null?(p)") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -3 :DIR RL) (("2" (PROP) (("1" (LEMMA "suffix_app[nat]") (("1" (INST -1 "p" "(:0:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (USE "reverse_def[nat]") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "suffix_app[nat]") (("2" (INST -1 "p" "(:1:)" "path") (("2" (EXPAND "append" -1 1) (("2" (EXPAND "append" -1 1) (("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "rac") (("2" (LEMMA "reverse_def[nat]") (("2" (INST -1 "p" "0") (("2" (ASSERT) (("2" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_app[nat]") (("3" (INST -1 "p" "(:2:)" "path") (("3" (EXPAND "append" -1 1) (("3" (EXPAND "append" -1 1) (("3" (HIDE-ALL-BUT (-1 1 2)) (("3" (EXPAND "rac") (("3" (LEMMA "reverse_def[nat]") (("3" (INST -1 "p" "0") (("3" (ASSERT) (("3" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse_reverse| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|reverse_def| FORMULA-DECL NIL |more_list_props| |structures|) (|suffix_app| FORMULA-DECL NIL |more_list_props| |structures|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|app_prefix_of_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|path_ext| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL)) SHOSTAK) (|ite_path_ext-1| |nil| 3643562518 ("" (SKEEP) (("" (BETA) (("" (TYPEPRED "path_ext") (("" (FLATTEN) (("" (USE "app_prefix_of_path_ext") (("" (BETA) (("" (SKEEP) (("" (TYPEPRED "p") (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (CASE "null?(p)") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -3 :DIR RL) (("2" (PROP) (("1" (LEMMA "suffix_app[nat]") (("1" (INST -1 "p" "(:0:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (USE "reverse_def[nat]") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "suffix_app[nat]") (("2" (INST -1 "p" "(:1:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (LEMMA "reverse_def[nat]") (("1" (INST -1 "p" "0") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_app[nat]") (("3" (INST -1 "p" "(:2:)" "path") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (EXPAND "rac") (("1" (LEMMA "reverse_def[nat]") (("1" (INST -1 "p" "0") (("1" (ASSERT) (("1" (PROP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "suffix?" 1) (("1" (PROP) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 3)) (("1" (USE "reverse_reverse[nat]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|valid_paths_TCC1| 0 (|valid_paths_TCC1-3| |nil| 3644072003 ("" (SKEEP) (("" (REWRITE "null_path") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL)) NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC1-2| |nil| 3644071995 ("" (EXPAND "restrict") (("" (LEMMA "PVS0Expr_well_founded") (("" (EXPAND "strict_well_founded?") (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "well_founded_restrict[PVS0Expr, PVS0Expr]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "restrict") (("" (PROPAX) NIL)))))))))))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC1-1| |nil| 3642412740 ("" (EXPAND "restrict") (("" (LEMMA "PVS0Expr_well_founded") (("" (EXPAND "strict_well_founded?") (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "well_founded_restrict[PVS0Expr, PVS0Expr]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "restrict") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|valid_paths_TCC2| 0 (|valid_paths_TCC2-5| |nil| 3651339447 ("" (TYPEPRED "restrict
                              [[PVS0Expr[Val[Val]], PVS0Expr[Val[Val]]],
                               [PVS0Expr[Val[Val]], PVS0Expr[Val[Val]]], boolean]
                              (<<)") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|strict_order_restrict| APPLICATION-JUDGEMENT "(strict_order?[S])" |restrict_order_props| NIL) (|well_founded_restrict| APPLICATION-JUDGEMENT "(well_founded?[S])" |restrict_order_props| NIL)) NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC2-4| |nil| 3644072174 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "restrict") (("" (EXPAND "<<") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC2-3| |nil| 3644072168 ("" (EXPAND "restrict") (("" (LEMMA "PVS0Expr_well_founded") (("" (EXPAND "strict_well_founded?") (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "well_founded_restrict[PVS0Expr, PVS0Expr]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "restrict") (("" (PROPAX) NIL)))))))))))))))))) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC2-2| |nil| 3644072074 (";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (EXPAND "restrict") ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (LEMMA "PVS0Expr_well_founded") ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (EXPAND "strict_well_founded?") ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (ASSERT) ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (FLATTEN) ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (LEMMA "well_founded_restrict[PVS0Expr, PVS0Expr]") ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (INST?) ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (ASSERT) ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (EXPAND "restrict") ((";;; Proof valid_paths_TCC2-1 for formula eval_props.valid_paths_TCC2" (PROPAX) NIL)))))))))))))))))) ";;; developed with shostak decision procedures") NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC2-1| |nil| 3642412740 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "valid_path") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL"))) (|valid_paths_TCC3| 0 (|valid_paths_TCC3-4| "" 3790336286 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC3-3| |nil| 3769264951 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL))))))))) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC3-2| |nil| 3651339481 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC3-1| |nil| 3642412740 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]"))) (|valid_paths_TCC4| 0 (|valid_paths_TCC4-7| "" 3790336288 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) =>
                                     every[list[number]]
                                         (LAMBDA (x1: list[number]):
                                            every[number]
                                                (LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (x1)
                                             AND valid_path(expr)(x1))
                                         (map[list[nat], list[nat]]
                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("2" (EXPAND "every" -2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                      (LAMBDA (x: number):
                                                                              number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                          AND integer_pred(x) AND x >= 0)
                                                                      (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("2" (EXPAND "every" 1) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|op1| ADT-CONSTRUCTOR-DECL "[[nat, PVS0Expr] -> (op1?)]" |PVS0Expr_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|a| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) SHOSTAK (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC4-6| |nil| 3769264952 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) =>
                                     every[list[number]]
                                         (LAMBDA (x1: list[number]):
                                            every[number]
                                                (LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (x1)
                                             AND valid_path(expr)(x1))
                                         (map[list[nat], list[nat]]
                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL))))))))))))))))))))) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))))) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL))))))) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                      (LAMBDA (x: number):
                                                                              number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                          AND integer_pred(x) AND x >= 0)
                                                                      (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL))))) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE 2) (("2" (GRIND) NIL))))))))) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))))))))))))))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC4-5| |nil| 3665517061 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC4-4| |nil| 3651339505 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC4-3| |nil| 3648388907 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC4-2| |nil| 3644072525 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC4-1| |nil| 3642412740 ("" (GRIND) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}"))) (|valid_paths_TCC5| 0 (|valid_paths_TCC10-6| |nil| 3769264953 ("" (SKEEP) (("" (REWRITE "null_path") (("" (EXPAND "every") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL)) NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC10-5| |nil| 3665517190 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) and every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(b)(x1))
                                              (l2)) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(op2(op, a, b))(x1))
                                             (append[list[nat]]
                                                  (map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                                                   map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                                           number_field_pred(x) AND real_pred(x)
                                                                       AND rational_pred(x) AND integer_pred(x)
                                                                       AND x >= 0)
                                                                   (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC10-4| |nil| 3651339623 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC10-3| |nil| 3648389182 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC10-2| |nil| 3645264052 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "<<") (("" (ASSERT) (("" (EXPAND "restrict") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC10-1| |nil| 3642412740 ("" (SKEEP) (("" (LEMMA "every_append[list[nat]]") (("" (INST?) (("1" (INST?) (("1" (PROP) (("1" (ASSERT) (("1" (LEMMA "valid_paths_subexpr") (("1" (REPLACE -5 1) (("1" (EXPAND "valid_path" 1) (("1" (EXPAND "every" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND EVERY 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|valid_paths_TCC6| 0 (|valid_paths_TCC6-8| "" 3790336288 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "<<") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL)) SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-7| |nil| 3769264953 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "<<") (("" (PROPAX) NIL)))))) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-6| |nil| 3665517111 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-5| |nil| 3651339551 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(a)(x1))
                                (l1) =>
                              every[list[number]]
                                  (LAMBDA (x1: list[number]):
                                     every[number]
                                         (LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                         (x1)
                                      AND valid_path(expr)(x1))
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                        map[list[nat], list[nat]]
                                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                           AND integer_pred(x) AND x >= 0)
                                                       (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-4| |nil| 3648052040 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-3| |nil| 3643733623 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "valid_path") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-2| |nil| 3643733558 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC6-1| |nil| 3642412740 ("" (TERMINATION-TCC) NIL NIL) NIL SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL"))) (|valid_paths_TCC7| 0 (|valid_paths_TCC7-3| |nil| 3665517140 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "<<") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL)) NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC7-2| |nil| 3651339572 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC7-1| |nil| 3642412740 ("" (SKEEP) (("" (EXPAND "restrict") (("" (REPLACE -1) (("" (EXPAND "<<") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL"))) (|valid_paths_TCC8| 0 (|valid_paths_TCC8-5| "" 3790336291 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) and every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(b)(x1))
                                              (l2)) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(op2(op, a, b))(x1))
                                             (append[list[nat]]
                                                  (map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                                                   map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                                           number_field_pred(x) AND real_pred(x)
                                                                       AND rational_pred(x) AND integer_pred(x)
                                                                       AND x >= 0)
                                                                   (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op2| ADT-CONSTRUCTOR-DECL "[[nat, PVS0Expr, PVS0Expr] -> (op2?)]" |PVS0Expr_adt| NIL) (|op2?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|x!2| SKOLEM-CONST-DECL "list[list[nat]]" |pvs0_props| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x!1| SKOLEM-CONST-DECL "list[nat]" |pvs0_props| NIL)) SHOSTAK (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC8-4| |nil| 3769264952 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) and every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(b)(x1))
                                              (l2)) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(op2(op, a, b))(x1))
                                             (append[list[nat]]
                                                  (map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                                                   map[list[nat], list[nat]]
                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                                           number_field_pred(x) AND real_pred(x)
                                                                       AND rational_pred(x) AND integer_pred(x)
                                                                       AND x >= 0)
                                                                   (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL))))))))))))))))))))) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL))))))))) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL))) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL))))))))))))))))))))))))))))))))) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL))))) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL))) ("2" (GRIND) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC8-3| |nil| 3665517153 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC8-2| |nil| 3651339589 ("" (SKEEP) (("" (EXPAND "restrict") (("" (REPLACE -1) (("" (EXPAND "<<") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC8-1| |nil| 3642412740 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b)))" "list[(valid_path[Val](expr))]"))) (|valid_paths_TCC9| 0 (|valid_paths_TCC9-1| |nil| 3792255298 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x)
                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                       (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                                  every(LAMBDA (x: number):
                                                                               number_field_pred(x) AND real_pred(x)
                                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                       (x1)
                                                                   AND valid_path(a)(x1))
                                                               (l1) and  every(LAMBDA (x1: list[number]):
                                                                  every(LAMBDA (x: number):
                                                                               number_field_pred(x) AND real_pred(x)
                                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                       (x1)
                                                                   AND valid_path(b)(x1))
                                                               (l2)) =>  every(LAMBDA (x1: list[number]):
                                                                  every(LAMBDA (x: number):
                                                                               number_field_pred(x) AND real_pred(x)
                                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                       (x1)
                                                                   AND valid_path(expr)(x1))
                                                               ( append[list[nat]]
                                                                     (map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                          (l1),
                                                                      map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                          (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                                                           append[list[nat]]
                                                                                               (map[list[nat], list[nat]]
                                                                                                    (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                                                    (l1),
                                                                                                map[list[nat], list[nat]]
                                                                                                    (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                                                    (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST? -5) (("3" (TYPEPRED "x!1`1" "x!1`2") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST?) (("4" (TYPEPRED "y!1`1" "y!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (INST?) (("5" (TYPEPRED "l1!1" "l2!1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                                                           append[list[nat]]
                                                                                               (map[list[nat], list[nat]]
                                                                                                    (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                                                    (l1),
                                                                                                map[list[nat], list[nat]]
                                                                                                    (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                                                    (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (INST? -5) (("3" (TYPEPRED "x!1`1" "x!1`2") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "y!1`1" "y!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (INST?) (("5" (TYPEPRED "l1!1" "l2!1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("2" (EXPAND "every" -2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|x!1| SKOLEM-CONST-DECL "list[nat]" |pvs0_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|a| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|b| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-9| |nil| 3769264952 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-8| |nil| 3665517094 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) =>
                                     every[list[number]]
                                         (LAMBDA (x1: list[number]):
                                            every[number]
                                                (LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (x1)
                                             AND valid_path(expr)(x1))
                                         (map[list[nat], list[nat]]
                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                      (LAMBDA (x: number):
                                                                              number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                          AND integer_pred(x) AND x >= 0)
                                                                      (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-7| |nil| 3651339531 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(expr)(x1))
                                             (map[list[nat], list[nat]]
                                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (l) =>  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-6| |nil| 3651337448 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) =>
                       every[list[number]]
                           (LAMBDA (x1: list[number]):
                              every[number]
                                  (LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (x1)
                               AND valid_path(expr)(x1))
                           (map[list[nat], list[nat]]
                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                        (LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                            AND integer_pred(x) AND x >= 0)
                                        (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-5| |nil| 3648389010 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) =>
                every[list[number]]
                    (LAMBDA (x1: list[number]):
                       every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (x1)
                        AND valid_path(expr)(x1))
                    (map[list[nat], list[nat]]
                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                      map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                         (LAMBDA (x: number):
                                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                             AND integer_pred(x) AND x >= 0)
                         (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-4| |nil| 3648051891 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-3| |nil| 3643733447 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l1) =>
         every[list[number]]
             (LAMBDA (x1: list[number]):
                every[number]
                    (LAMBDA (x: number):
                            number_field_pred(x) AND real_pred(x)
                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                    (x1)
                 AND valid_path(expr)(x1))
             (map[list[nat], list[nat]]
                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
             map[list[nat], list[nat]]
                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
          (LAMBDA (x: number):
                  number_field_pred(x) AND real_pred(x) AND rational_pred(x)
              AND integer_pred(x) AND x >= 0)
          (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-2| |nil| 3643732536 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -4) (("" (ASSERT) (("" (FLATTEN) (("" (INST -2 "rdc(p)") (("" (CASE " member[(valid_path(expr))](p,
                    map[list[nat], list[nat]]
                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(v(a)))") (("1" (PROPAX) NIL) ("2" (HIDE 3) (("2" (CASE "member[(valid_path(a))](rdc(p), v(a))") (("1" (HIDE -3) (("1" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                         every(LAMBDA (x: number):
                                      number_field_pred(x) AND real_pred(x)
                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                              (x1)
                          AND valid_path(a)(x1))
                      (l) => every[list[number]]
                     (LAMBDA (x1: list[number]):
                        every[number]
                            (LAMBDA (x: number):
                                    number_field_pred(x) AND real_pred(x)
                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                            (x1)
                         AND (null?(x1) OR (rac(x1) = 0 AND valid_path(a)(rdc(x1)))))
                     (map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (CASE "forall(l:list[list[nat]]| every(LAMBDA (x1: list[number]):
                           every(LAMBDA (x: number):
                                        number_field_pred(x) AND real_pred(x)
                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                (x1)
                            AND valid_path(a)(x1))
                        (l)): (member[(valid_path(a))](rdc(p), l) and rac(p) = 0 and not p = null[nat])=>  member[(valid_path(expr))]
                       (p,
                        map[list[nat], list[nat]]
                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (INST?) (("1" (ASSERT) NIL))))) ("2" (HIDE-ALL-BUT (-1 -7 1)) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "map" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (GRIND) NIL))) ("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (EXPAND "member" -2) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1 2 4)) (("1" (CASE "forall(l :list[nat]|not null?(l)): l = append(rdc(l),(: rac(l) :))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND* "rdc" "rac") (("2" (CASE "(: nth(l, length(l) - 1) :) = reverse((: nth(l, length(l) - 1) :))") (("1" (REPLACES -1) (("1" (CASE "reverse(l) = reverse( append(reverse(cdr(reverse(l))),
                                       reverse((: nth(l, length(l) - 1) :))))") (("1" (USE "reverse_reverse[nat]") (("1" (REPLACE -2 -1) (("1" (REWRITE "reverse_reverse") (("1" (ASSERT) NIL))))))) ("2" (HIDE 2) (("2" (CASE "null?(reverse(l))") (("1" (TYPEPRED "l") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 1 :DIR RL) (("1" (GRIND) NIL))))))))) ("2" (REWRITE "reverse_append") (("2" (REWRITE "reverse_reverse") (("2" (REWRITE "reverse_reverse") (("2" (CASE "nth(l, length(l) - 1) = nth(reverse(l), 0)") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2) (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (DECOMPOSE-EQUALITY) NIL))))))))) ("2" (HIDE 3) (("2" (EXPAND "nth" 1 2) (("2" (GENERALIZE "l" "l") (("1" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "nth" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "reverse" 1) (("1" (EXPAND "length" -1) (("1" (EXPAND "reverse" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append " 1) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL))))))))))))) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 2) (("2" (POSTPONE) NIL))))))))))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))))) ("3" (POSTPONE) NIL))))))))))))))))) ("2" (POSTPONE) NIL) ("3" (POSTPONE) NIL))))))))))))) ("2" (POSTPONE) NIL))))))))))))))))) ("2" (REPLACE -4) (("2" (EXPAND "valid_path" 1) (("2" (TYPEPRED "l!1") (("2" (INST?) (("2" (ASSERT) NIL))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (TYPEPRED "p") (("4" (REPLACE -4) (("4" (EXPAND "valid_path" -2) (("4" (ASSERT) NIL))))))))))) ("3" (REPLACE -7) (("3" (EXPAND "valid_path" 1) (("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) NIL))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -2 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "forall(l:list[nat]): every(LAMBDA (x: number):
                                      number_field_pred(x) AND real_pred(x)
                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                              (l) =>  every[number]
                             (LAMBDA (x: number):
                                     number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                 AND integer_pred(x) AND x >= 0)
                             (append[nat](l, (: 0 :)))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!2)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))) ("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "every" -2 1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL))))))))))))))))))))))))) ("3" (EXPAND "every" -2 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST?) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))) ("2" (PROPAX) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))))))))))))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC5-1| |nil| 3642412740 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -4) (("" (ASSERT) (("" (FLATTEN) (("" (INST -2 "rdc(p)") (("" (CASE " member[(valid_path(expr))](p,
             map[list[nat], list[nat]]
                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(v(a)))") (("1" (PROPAX) NIL NIL) ("2" (HIDE 3) (("2" (CASE "member[(valid_path(a))](rdc(p), v(a))") (("1" (HIDE -3) (("1" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l) => every[list[number]]
          (LAMBDA (x1: list[number]):
             every[number]
                 (LAMBDA (x: number):
                         number_field_pred(x) AND real_pred(x)
                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                 (x1)
              AND (null?(x1) OR (rac(x1) = 0 AND valid_path(a)(rdc(x1)))))
          (map[list[nat], list[nat]]
               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (CASE "forall(l:list[list[nat]]| every(LAMBDA (x1: list[number]):
              every(LAMBDA (x: number):
                           number_field_pred(x) AND real_pred(x)
                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                   (x1)
               AND valid_path(a)(x1))
           (l)): (member[(valid_path(a))](rdc(p), l) and rac(p) = 0 and not p = null[nat])=>  member[(valid_path(expr))]
          (p,
           map[list[nat], list[nat]]
               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -7 1)) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "map" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (EXPAND "member" -2) (("2" (ASSERT) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 -3 1 2 4)) (("1" (CASE "forall(l :list[nat]|not null?(l)): l = append(rdc(l),(: rac(l) :))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND* "rdc" "rac") (("2" (CASE "(: nth(l, length(l) - 1) :) = reverse((: nth(l, length(l) - 1) :))") (("1" (REPLACES -1) (("1" (CASE "reverse(l) = reverse( append(reverse(cdr(reverse(l))),
              reverse((: nth(l, length(l) - 1) :))))") (("1" (USE "reverse_reverse[nat]") (("1" (REPLACE -2 -1) (("1" (REWRITE "reverse_reverse") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "null?(reverse(l))") (("1" (TYPEPRED "l") (("1" (HIDE-ALL-BUT (-2 1)) (("1" (USE "reverse_reverse[nat]") (("1" (REPLACES -1 1 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "reverse_append") (("2" (REWRITE "reverse_reverse") (("2" (REWRITE "reverse_reverse") (("2" (CASE "nth(l, length(l) - 1) = nth(reverse(l), 0)") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2) (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (DECOMPOSE-EQUALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "nth" 1 2) (("2" (GENERALIZE "l" "l") (("1" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "nth" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "reverse" 1) (("1" (EXPAND "length" -1) (("1" (EXPAND "reverse" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append " 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (EXPAND "length" 2) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4) (("2" (EXPAND "valid_path" 1) (("2" (TYPEPRED "l!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (TYPEPRED "p") (("4" (REPLACE -4) (("4" (EXPAND "valid_path" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -7) (("3" (EXPAND "valid_path" 1) (("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -2 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "forall(l:list[nat]): every(LAMBDA (x: number):
                   number_field_pred(x) AND real_pred(x)
               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
           (l) =>  every[number]
          (LAMBDA (x: number):
                  number_field_pred(x) AND real_pred(x) AND rational_pred(x)
              AND integer_pred(x) AND x >= 0)
          (append[nat](l, (: 0 :)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!2)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "every" -2 1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every" -2 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST?) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}"))) (|valid_paths_TCC10| 0 (|valid_paths_TCC9-2| |nil| 3769264952 ("" (SKEEP) (("" (AUTO-REWRITE "null_path") (("" (ASSERT) (("" (EXPAND "every") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|null_path| FORMULA-DECL NIL |pvs0_props| NIL)) NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC9-1| |nil| 3642412740 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|valid_paths_TCC11| 0 (|valid_paths_TCC11-9| "" 3790336292 ("" (SKEEP*) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-8| |nil| 3769264953 ("" (SKEEP*) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL)))) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-7| |nil| 3665517212 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                         every(LAMBDA (x: number):
                                                                      number_field_pred(x) AND real_pred(x)
                                                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                              (x1)
                                                          AND valid_path(a)(x1))
                                                      (l1) and  every(LAMBDA (x1: list[number]):
                                                         every(LAMBDA (x: number):
                                                                      number_field_pred(x) AND real_pred(x)
                                                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                              (x1)
                                                          AND valid_path(b)(x1))
                                                      (l2)) =>  every(LAMBDA (x1: list[number]):
                                                         every(LAMBDA (x: number):
                                                                      number_field_pred(x) AND real_pred(x)
                                                                  AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                              (x1)
                                                          AND valid_path(expr)(x1))
                                                      ( append[list[nat]]
                                                            (map[list[nat], list[nat]]
                                                                 (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                 (l1),
                                                             map[list[nat], list[nat]]
                                                                 (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                 (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                                              append[list[nat]]
                                                                                  (map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                                       (l1),
                                                                                   map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                                       (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                                              append[list[nat]]
                                                                                  (map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                                       (l1),
                                                                                   map[list[nat], list[nat]]
                                                                                       (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                                       (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-6| |nil| 3651339641 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(a)(x1))
                                (l1) and every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(b)(x1))
                                (l2)) =>  every[list[number]]
                               (LAMBDA (x1: list[number]):
                                  every[number]
                                      (LAMBDA (x: number):
                                              number_field_pred(x) AND real_pred(x)
                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                      (x1)
                                   AND valid_path(op2(o, a, b))(x1))
                               (append[list[nat]]
                                    (map[list[nat], list[nat]]
                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                                     map[list[nat], list[nat]]
                                         (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                         number_field_pred(x) AND real_pred(x)
                                                     AND rational_pred(x) AND integer_pred(x)
                                                     AND x >= 0)
                                                 (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-5| |nil| 3651337558 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                       every(LAMBDA (x: number):
                                                    number_field_pred(x) AND real_pred(x)
                                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                            (x1)
                                        AND valid_path(a)(x1))
                                    (l1) and  every(LAMBDA (x1: list[number]):
                                       every(LAMBDA (x: number):
                                                    number_field_pred(x) AND real_pred(x)
                                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                            (x1)
                                        AND valid_path(b)(x1))
                                    (l2)) =>  every(LAMBDA (x1: list[number]):
                                       every(LAMBDA (x: number):
                                                    number_field_pred(x) AND real_pred(x)
                                                AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                            (x1)
                                        AND valid_path(expr)(x1))
                                    ( append[list[nat]]
                                          (map[list[nat], list[nat]]
                                               (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                               (l1),
                                           map[list[nat], list[nat]]
                                               (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                               (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                    append[list[nat]]
                                                        (map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                             (l1),
                                                         map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                             (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                    append[list[nat]]
                                                        (map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                             (l1),
                                                         map[list[nat], list[nat]]
                                                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                             (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-4| |nil| 3648389303 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(a)(x1))
                           (l1) and  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(b)(x1))
                           (l2)) =>  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(expr)(x1))
                           ( append[list[nat]]
                                 (map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                      (l1),
                                  map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                      (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-3| |nil| 3648052387 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-2| |nil| 3648052315 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(a)(x1))
                           (l1) and  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(b)(x1))
                           (l2)) =>  every(LAMBDA (x1: list[number]):
                              every(LAMBDA (x: number):
                                           number_field_pred(x) AND real_pred(x)
                                       AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                   (x1)
                               AND valid_path(expr)(x1))
                           ( append[list[nat]]
                                 (map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                      (l1),
                                  map[list[nat], list[nat]]
                                      (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                      (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL))))) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))))))) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL))))) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL))) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL))))) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL))) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL))))) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL))))))) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (PROPAX) NIL))) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                       append[list[nat]]
                                           (map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                (l1),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL))))) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))))) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))))))))))))))))))) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL))))) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL))) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL))))) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL))) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL))))) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL))))))) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (PROPAX) NIL))))) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))))))))))))))) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL) ("2" (ASSERT) NIL)))))))))))))))))))))))))))))))))) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC11-1| |nil| 3642412740 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                            number_field_pred(x) AND real_pred(x)
                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                    (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) and  every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(b)(x1))
                  (l2)) =>  every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(expr)(x1))
                  ( append[list[nat]]
                        (map[list[nat], list[nat]]
                             (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                             (l1),
                         map[list[nat], list[nat]]
                             (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                             (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                          append[list[nat]]
                              (map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                   (l1),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                   (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                          append[list[nat]]
                              (map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                   (l1),
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                   (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL"))) (|valid_paths_TCC12| 0 (|valid_paths_TCC12-8| "" 3790336294 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-7| |nil| 3769264953 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL))))))))) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-6| |nil| 3665517242 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-5| |nil| 3651339663 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "p") (("" (REPLACE -7) (("" (EXPAND "valid_path" -6) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (ASSERT) (("" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                         (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                                every(LAMBDA (x: number):
                                                             number_field_pred(x) AND real_pred(x)
                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                     (x1)
                                                 AND valid_path(a)(x1))
                                             (l1) and  every(LAMBDA (x1: list[number]):
                                                every(LAMBDA (x: number):
                                                             number_field_pred(x) AND real_pred(x)
                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                     (x1)
                                                 AND valid_path(b)(x1))
                                             (l2)) =>  every(LAMBDA (x1: list[number]):
                                                every(LAMBDA (x: number):
                                                             number_field_pred(x) AND real_pred(x)
                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                     (x1)
                                                 AND valid_path(expr)(x1))
                                             ( append[list[nat]]
                                                   (map[list[nat], list[nat]]
                                                        (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                        (l1),
                                                    map[list[nat], list[nat]]
                                                        (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                        (l2)))") (("1" (PROP) (("1" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                                 append[list[nat]]
                                                                     (map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                          (l1),
                                                                      map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                          (l2)))") (("1" (INST?) (("1" (INST -7 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (2 4 -1 -3 -4)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL) ("2" (CASE "forall(l1 : list[(valid_path(a))], l2 : list[(valid_path(b))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p,
                                                                 append[list[nat]]
                                                                     (map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                                          (l1),
                                                                      map[list[nat], list[nat]]
                                                                          (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                                          (l2)))") (("1" (INST?) (("1" (INST -9 "rdc(p)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3 -5 -6 -7 -8 -9) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -4 -1)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)") (("2" (ASSERT) (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 1) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "y!1" "y!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (INST? -5) (("4" (TYPEPRED "x!1`1" "x!1`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL) ("6" (INST?) (("6" (TYPEPRED "y!1`1" "y!1`2") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (INST?) (("8" (TYPEPRED "l1!1" "l2!1") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2") (("3" (INST? -6) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1) +length(l2)" ("l1" "l2")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!2)" "1") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -6 "car(x!1)" "0") NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse" 1) (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-4| |nil| 3648052612 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-3| |nil| 3648052564 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL))))))))))))))))))))) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL))))))))) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL))) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL))))))))))))))))))))))))))))))))) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL))))) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL))) ("2" (GRIND) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-2| |nil| 3648052519 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)") (("" (REPLACE -5) (("" (CASE "forall (l1, l2 : list[list[nat]]): (every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) and every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(b)(x1))
                         (l2)) =>  every[list[number]]
                        (LAMBDA (x1: list[number]):
                           every[number]
                               (LAMBDA (x: number):
                                       number_field_pred(x) AND real_pred(x)
                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                               (x1)
                            AND valid_path(op2(o, a, b))(x1))
                        (append[list[nat]]
                             (map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1),
                              map[list[nat], list[nat]]
                                  (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))(l2)))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l3 : list[nat], n : nat): every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x)
                                            AND x >= 0)
                                        (append[nat](l3, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1) + length(l2)" ("l1" "l2")) (("1" (EXPAND "append" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2 1) (("2" (INST -5 "car(x!2)" "1") (("1" (ASSERT) (("1" (EXPAND "every" -4 1) (("1" (FLATTEN) (("1" (INST -2 "null" "cdr(x!2)") (("1" (ASSERT) (("1" (EXPAND "every" -2 1) (("1" (EXPAND "map" -2 1) (("1" (EXPAND "append" -2 1) (("1" (SPLIT) (("1" (EXPAND "valid_path" 1) (("1" (FLATTEN) (("1" (HIDE 2 1) (("1" (SPLIT) (("1" (REWRITE "rac_append") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") NIL))))))))))))))))))))) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (INST -4 "car(x!1)" "0") NIL))))))))) ("2" (EXPAND "map" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (EXPAND "valid_path" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (PROP) (("1" (REWRITE "rac_append") (("1" (GRIND) NIL))) ("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") NIL))))))))))))))))))))))))))))))))) ("3" (EXPAND "map" 1 1) (("3" (LIFT-IF) (("3" (PROP) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL))) ("2" (ASSERT) (("2" (INST -1 "cdr(x!1)" "x!2") (("2" (EXPAND "every" -2 1) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL))))) ("2" (HIDE 2) (("2" (MEASURE-INDUCT+ "length(l3)" "l3") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) NIL))) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (ASSERT) (("1" (PROP) (("1" (HIDE -1) (("1" (GRIND) NIL))) ("2" (GRIND) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC12-1| |nil| 3642412740 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "valid_path") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| SUBTYPE "list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a))" "list[(valid_path[Val](expr))]"))) (|valid_paths_TCC13| 0 (|valid_paths_TCC13-5| "" 3790336299 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) =>
                                            every[list[number]]
                                                (LAMBDA (x1: list[number]):
                                                   every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x)
                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                       (x1)
                                                    AND valid_path(expr)(x1))
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                          map[list[nat], list[nat]]
                                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("2" (EXPAND "every" -2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                                     (LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                                         AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("2" (EXPAND "every" 1) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|rec| ADT-CONSTRUCTOR-DECL "[PVS0Expr -> (rec?)]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|a| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) SHOSTAK (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC13-4| |nil| 3769264951 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) =>
                                            every[list[number]]
                                                (LAMBDA (x1: list[number]):
                                                   every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x)
                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                       (x1)
                                                    AND valid_path(expr)(x1))
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                          map[list[nat], list[nat]]
                                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL))))))))))))) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL))))))))))))))))))))) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))))) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))))) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL))))))) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                                     (LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                                         AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL))))) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE 2) (("2" (GRIND) NIL))))))))) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL)))))))))))))))))))))))))) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC13-3| |nil| 3665517257 ("" (SKEEP*) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC13-2| |nil| 3651339692 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC13-1| |nil| 3642412740 ("" (SKEEP*) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}"))) (|valid_paths_TCC14| 0 (|valid_paths_TCC14-4| |nil| 3769264951 ("" (SKEEP) (("" (AUTO-REWRITE "null_path") (("" (ASSERT) (("" (EXPAND "every") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|null_path| FORMULA-DECL NIL |pvs0_props| NIL)) NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC14-3| |nil| 3665517275 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC14-2| |nil| 3651339706 ("" (SKEEP*) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))")) (|valid_paths_TCC14-1| |nil| 3642412740 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[nat].null" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|valid_paths_TCC15| 0 (|valid_paths_TCC15-7| "" 3790336299 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL)) SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC15-6| |nil| 3769264951 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL)))) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC15-5| |nil| 3665517291 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                        every(LAMBDA (x: number):
                                                                     number_field_pred(x) AND real_pred(x)
                                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                             (x1)
                                                         AND valid_path(a)(x1))
                                                     (l) =>  every[list[number]]
                                                    (LAMBDA (x1: list[number]):
                                                       every[number]
                                                           (LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                           (x1)
                                                        AND valid_path(expr)(x1))
                                                    (map[list[nat], list[nat]]
                                                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (l) =>  every(LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x)
                                                                                         AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC15-4| |nil| 3651339727 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC15-3| |nil| 3648391689 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC15-2| |nil| 3644074276 ("" (GRIND) NIL NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL")) (|valid_paths_TCC15-1| |nil| 3642412740 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.a)" "NIL"))) (|valid_paths_TCC16| 0 (|valid_paths_TCC16-8| |nil| 3769264953 ("" (TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL)) NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-7| |nil| 3665517310 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l1) =>
                                            every[list[number]]
                                                (LAMBDA (x1: list[number]):
                                                   every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x)
                                                           AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                       (x1)
                                                    AND valid_path(expr)(x1))
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                          map[list[nat], list[nat]]
                                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                                     (LAMBDA (x: number):
                                                                                             number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                                         AND integer_pred(x) AND x >= 0)
                                                                                     (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-6| |nil| 3651339742 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                                 every(LAMBDA (x: number):
                                                              number_field_pred(x) AND real_pred(x)
                                                          AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                      (x1)
                                                  AND valid_path(a)(x1))
                                              (l) =>  every[list[number]]
                                             (LAMBDA (x1: list[number]):
                                                every[number]
                                                    (LAMBDA (x: number):
                                                            number_field_pred(x) AND real_pred(x)
                                                        AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                    (x1)
                                                 AND valid_path(expr)(x1))
                                             (map[list[nat], list[nat]]
                                                  (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (l) =>  every(LAMBDA (x: number):
                                                                                  number_field_pred(x) AND real_pred(x)
                                                                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                                          (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-5| |nil| 3651337618 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                   every(LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x)
                                            AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                        (x1)
                                    AND valid_path(a)(x1))
                                (l1) =>
                              every[list[number]]
                                  (LAMBDA (x1: list[number]):
                                     every[number]
                                         (LAMBDA (x: number):
                                                 number_field_pred(x) AND real_pred(x)
                                             AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                         (x1)
                                      AND valid_path(expr)(x1))
                                  (map[list[nat], list[nat]]
                                       (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                        map[list[nat], list[nat]]
                                            (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                       (LAMBDA (x: number):
                                                               number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                           AND integer_pred(x) AND x >= 0)
                                                       (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-4| |nil| 3648391795 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                            every(LAMBDA (x: number):
                                         number_field_pred(x) AND real_pred(x)
                                     AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                 (x1)
                             AND valid_path(a)(x1))
                         (l1) =>
                       every[list[number]]
                           (LAMBDA (x1: list[number]):
                              every[number]
                                  (LAMBDA (x: number):
                                          number_field_pred(x) AND real_pred(x)
                                      AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                  (x1)
                               AND valid_path(expr)(x1))
                           (map[list[nat], list[nat]]
                                (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                               map[list[nat], list[nat]]
                                   (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                        (LAMBDA (x: number):
                                                number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                            AND integer_pred(x) AND x >= 0)
                                        (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-3| |nil| 3648052790 ("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (CASE "forall(l:list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (map[list[nat], list[nat]]
                                           (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (CASE "forall(l:list[nat]):  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (l) =>  every(LAMBDA (x: number):
                                                                       number_field_pred(x) AND real_pred(x)
                                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                               (append[nat](l, (: 0 :)))") (("1" (EXPAND "map" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2 1) (("2" (SPLIT) (("1" (EXPAND "every" -3 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -4) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (SPLIT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "rdc" 1) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse" 1) (("2" (REWRITE "append_null") (("2" (EXPAND "every" -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -4) (("3" (REPLACES -1) (("3" (EXPAND "valid_path" 1) (("3" (EXPAND "every" -3 1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (INST -2 "cdr(x!1)") (("3" (ASSERT) (("3" (EXPAND "valid_path" -2) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("1" (EXPAND "append" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (INST -1 "cdr(x!2)") (("2" (EXPAND "every" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (2 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-2| |nil| 3645281850 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                     every(LAMBDA (x: number):
                                  number_field_pred(x) AND real_pred(x)
                              AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                          (x1)
                      AND valid_path(a)(x1))
                  (l1) =>
                every[list[number]]
                    (LAMBDA (x1: list[number]):
                       every[number]
                           (LAMBDA (x: number):
                                   number_field_pred(x) AND real_pred(x)
                               AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                           (x1)
                        AND valid_path(expr)(x1))
                    (map[list[nat], list[nat]]
                         (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                      map[list[nat], list[nat]]
                          (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                         (LAMBDA (x: number):
                                 number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                             AND integer_pred(x) AND x >= 0)
                         (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL")) (|valid_paths_TCC16-1| |nil| 3642412740 ("" (TERMINATION-TCC) NIL NIL) NIL SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.b)" "NIL"))) (|valid_paths_TCC17| 0 (|valid_paths_TCC17-5| |nil| 3769264953 ("" (TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL)) NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.c)" "NIL")) (|valid_paths_TCC17-4| |nil| 3665517327 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.c)" "NIL")) (|valid_paths_TCC17-3| |nil| 3651339765 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(a)") (("" (TYPEPRED "p") (("" (REPLACE -5) (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (EXPAND "valid_path" -2) (("" (ASSERT) (("" (FLATTEN) (("" (INST -5 "rdc(p)") (("" (CASE "FORALL (l1: list[list[nat]]): every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) =>
                                     every[list[number]]
                                         (LAMBDA (x1: list[number]):
                                            every[number]
                                                (LAMBDA (x: number):
                                                        number_field_pred(x) AND real_pred(x)
                                                    AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                                (x1)
                                             AND valid_path(expr)(x1))
                                         (map[list[nat], list[nat]]
                                              (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (CASE "forall(l1: list[(valid_path(a))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p,
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))(l1))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3 -5) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (TYPEPRED "l1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "l1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (CASE "forall(l1 : list[nat]): every[number]
                                                                      (LAMBDA (x: number):
                                                                              number_field_pred(x) AND real_pred(x) AND rational_pred(x)
                                                                          AND integer_pred(x) AND x >= 0)
                                                                      (append[nat](l1, (: 0 :)))") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l1)" "l1") (("1" (EXPAND "every" 1) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "append" 2) (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (HIDE -2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "cdr(x!2)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 2 3)) (("2" (REWRITE "rac_append[nat]") (("1" (REWRITE "rdc_append[nat]") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.c)" "NIL")) (|valid_paths_TCC17-2| |nil| 3648052910 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.c)" "NIL")) (|valid_paths_TCC17-1| |nil| 3642412740 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "valid_path") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| TERMINATION "pvs0_props.valid_paths(pvs0_props.c)" "NIL"))) (|valid_paths_TCC18| 0 (|valid_paths_TCC18-6| "" 3834039861 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "v(c)") (("" (NAME-REPLACE "bla1" "LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (x1) AND valid_path(a)(x1)") (("" (NAME-REPLACE "bla2" "LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (x1) AND valid_path(b)(x1)") (("" (NAME-REPLACE "bla3" "LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (x1) AND valid_path(c)(x1)") (("" (NAME-REPLACE "bla4" "LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND (x >= 0)) (x1) AND valid_path(expr)(x1)") (("" (CASE "FORALL (l1, l2, l3: list[list[nat]]): (every(bla1)(l1) AND every(bla2)(l2) AND every(bla3)(l3)) => every[list[number]] (bla4) (append[list[nat]] (append[list[nat]] (map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 0 :))) (l1), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 1 :))) (l2)), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 2 :))) (l3)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND* ("bla1" "bla2" "bla3" "bla4")) (("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0) (append[nat](l, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -4 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (SPLIT 2) (("1" (INST -7 "car(x!3)" "2") NIL NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2 3) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -6 "null" "null" "cdr(x!3)") (("3" (EXPAND "every" -6 (1 3)) (("3" (EXPAND "map" -6 (1 2)) (("3" (EXPAND "append" -6 2) (("3" (EXPAND "append" -6 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -7 "car(x!2)" 1) NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-1 3 5)) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -9) (("3" (REPLACE -1 :HIDE? T) (("3" (INST -5 "null" "cdr(x!2)" "x!3") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 2) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -7 "car(x!1)" "0") NIL NIL) ("2" (HIDE-ALL-BUT (-2 1 2)) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3 4) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2" "x!3") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member| DEF-DECL "bool" |list_props| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bla4| SKOLEM-CONST-DECL "[list[number] -> boolean]" |pvs0_props| NIL) (|bla3| SKOLEM-CONST-DECL "[list[number] -> boolean]" |pvs0_props| NIL) (|bla2| SKOLEM-CONST-DECL "[list[number] -> boolean]" |pvs0_props| NIL) (|bla1| SKOLEM-CONST-DECL "[list[number] -> boolean]" |pvs0_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x!1| SKOLEM-CONST-DECL "list[nat]" |pvs0_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC18-5| "" 3790336304 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "v(c)") (("" (CASE "forall(l1,l2,l3 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) and  every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(b)(x1))
                                       (l2) and every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(c)(x1))
                                       (l3)) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (append[list[nat]]
                                           (append[list[nat]]
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                     (l1),
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                     (l2)),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))(l3)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x)
                                                               AND x >= 0)
                                                           (append[nat](l, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -4 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (SPLIT 2) (("1" (INST -7 "car(x!3)" "2") NIL NIL) ("2" (HIDE-ALL-BUT (-2 1 2)) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2 3) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -6 "null" "null" "cdr(x!3)") (("3" (EXPAND "every" -6 (1 3)) (("3" (EXPAND "map" -6 (1 2)) (("3" (EXPAND "append" -6 2) (("3" (EXPAND "append" -6 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -7 "car(x!2)" 1) NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 3 5)) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -9) (("3" (REPLACES -1) (("3" (INST -5 "null" "cdr(x!2)" "x!3") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 2) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -7 "car(x!1)" "0") NIL NIL) ("2" (HIDE-ALL-BUT (-2 1 2)) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3 4) (("2" (REWRITE "rac_append") (("2" (REWRITE "rdc_append") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2" "x!3") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC18-4| |nil| 3769264952 ("" (SKEEP) (("" (TYPEPRED "v(a)" "v(b)" "v(c)") (("" (CASE "forall(l1,l2,l3 :list[list[nat]]): (every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(a)(x1))
                                       (l1) and  every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(b)(x1))
                                       (l2) and every(LAMBDA (x1: list[number]):
                                          every(LAMBDA (x: number):
                                                       number_field_pred(x) AND real_pred(x)
                                                   AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                               (x1)
                                           AND valid_path(c)(x1))
                                       (l3)) =>  every[list[number]]
                                      (LAMBDA (x1: list[number]):
                                         every[number]
                                             (LAMBDA (x: number):
                                                     number_field_pred(x) AND real_pred(x)
                                                 AND rational_pred(x) AND integer_pred(x) AND x >= 0)
                                             (x1)
                                          AND valid_path(expr)(x1))
                                      (append[list[nat]]
                                           (append[list[nat]]
                                                (map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 0 :)))
                                                     (l1),
                                                 map[list[nat], list[nat]]
                                                     (LAMBDA (l: list[nat]): append[nat](l, (: 1 :)))
                                                     (l2)),
                                            map[list[nat], list[nat]]
                                                (LAMBDA (l: list[nat]): append[nat](l, (: 2 :)))(l3)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall(l :list[nat], n :nat): every(LAMBDA (x: number):
                                                                   number_field_pred(x) AND real_pred(x)
                                                               AND rational_pred(x) AND integer_pred(x)
                                                               AND x >= 0)
                                                           (append[nat](l, (: n :)))") (("1" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("1" (EXPAND "every" -2 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -4 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (SPLIT 2) (("1" (INST -7 "car(x!3)" "2") NIL NIL) ("2" (HIDE-ALL-BUT (-2 1 2)) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 2 3) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -6 "null" "null" "cdr(x!3)") (("3" (EXPAND "every" -6 (1 3)) (("3" (EXPAND "map" -6 (1 2)) (("3" (EXPAND "append" -6 2) (("3" (EXPAND "append" -6 1) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -7 "car(x!2)" 1) NIL NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-2 3 5)) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -9) (("3" (REPLACES -1) (("3" (INST -5 "null" "cdr(x!2)" "x!3") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 2) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -9) (("2" (REPLACES -1) (("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST -7 "car(x!1)" "0") NIL NIL) ("2" (HIDE-ALL-BUT (-2 1 2)) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE 1 3 4) (("2" (REWRITE "rac_append") (("1" (REWRITE "rdc_append") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "reverse") (("1" (REWRITE "append_null") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2" "x!3") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC18-3| |nil| 3665517345 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC18-2| |nil| 3651339784 ("" (AUTO-REWRITE "null_path") (("" (ASSERT) NIL NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c)))" "list[(valid_path[Val](expr))]")) (|valid_paths_TCC18-1| |nil| 3642412740 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) NIL SHOSTAK (|valid_paths| SUBTYPE "list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c)))" "list[(valid_path[Val](expr))]"))) (|valid_paths_TCC19| 0 (|valid_paths_TCC19-4| |nil| 3769264952 ("" (SKEEP*) (("" (TYPEPRED "p" "v(a)" "v(b)" "v(c)") (("" (EXPAND "member" 1) (("" (FLATTEN) (("" (CASE "forall(l : list[nat], n : nat): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0) (append[nat](l, (: n :)))") (("1" (CASE "forall(l1,l2,l3 : list[list[nat]]): (every(LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0) (x1) AND valid_path(a)(x1)) (l1) and every(LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0) (x1) AND valid_path(b)(x1)) (l2) and every(LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0) (x1) AND valid_path(c)(x1)) (l3)) => every(LAMBDA (x1: list[number]): every(LAMBDA (x: number): number_field_pred(x) AND real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0) (x1) AND valid_path(ite(a, b, c))(x1)) (append[list[nat]] (append[list[nat]] (map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 0 :))) (l1), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 1 :))) (l2)), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 2 :))) (l3)))") (("1" (REPLACE -11) (("1" (EXPAND "valid_path" -4) (("1" (ASSERT) (("1" (PROP) (("1" (INST -7 "rdc(p)") (("1" (CASE "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(a))](rdc(p), l1) => member[(valid_path(expr))](p, append[list[nat]] (append[list[nat]] (map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 0 :))) (l1), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 1 :))) (l2)), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 2 :))) (l3)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE (3 -11 -10 -9 -8 -7 -6)) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("1" (EXPAND "member" -2) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 2) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 -3 1 2 4)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "cdr(x!1)" "x!2" "x!3") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "y!1" "y!2" "y!3") (("2" (REPLACE -13) (("2" (INST? -10) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "x!1`1" "x!1`2" "x!1`3") (("3" (REPLACE -13) (("3" (INST? -10) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "y!1`1" "y!1`2" "y!1`3") (("4" (REPLACE -11) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "l1!1" "l2!1" "l3!1") (("5" (REPLACE -10) (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2" "l3") (("3" (INST?) (("3" (REPLACE -16) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -9 "rdc(p)") (("2" (CASE "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(b))](rdc(p), l2) => member[(valid_path(expr))](p, append[list[nat]] (append[list[nat]] (map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 0 :))) (l1), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 1 :))) (l2)), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 2 :))) (l3)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE (3 -11 -10 -9 -8 -7 -6)) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "member" -3) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2 1) (("1" (ASSERT) (("1" (EXPAND "append" 2 1) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 -4 1 2 4)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -3 "null" "cdr(x!2)" "x!3") (("2" (EXPAND "map" -3 1) (("2" (EXPAND "append" -3 2) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2" "x!3") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!1" "y!2" "y!3") (("2" (INST?) (("2" (REPLACE -11) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x!1`1" "x!1`2" "x!1`3") (("3" (REPLACE -11) (("3" (INST? -8) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "y!1`1" "y!1`2" "y!1`3") (("4" (REPLACE -11) (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "l1!1" "l2!1" "l3!1") (("5" (INST?) (("5" (REPLACE -10) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2" "l3") (("3" (INST?) (("3" (REPLACE -16) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -11 "rdc(p)") (("3" (CASE "forall(l1 : list[(valid_path(a))],l2 :list[(valid_path(b))], l3 : list[(valid_path(c))]): member[(valid_path(c))](rdc(p), l3) => member[(valid_path(expr))](p, append[list[nat]] (append[list[nat]] (map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 0 :))) (l1), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 1 :))) (l2)), map[list[nat], list[nat]] (LAMBDA (l: list[nat]): append[nat](l, (: 2 :))) (l3)))") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("1" (HIDE 3 -13 -12 -11 -10 -9 -8 -7 -6) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "map" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "member" -4) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 2) (("1" (ASSERT) (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 2 4 -1 -5)) (("1" (LEMMA "rdc_rac[nat]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -4 "null" "null" "cdr(x!3)") (("2" (EXPAND "map" -4 1) (("2" (EXPAND "append" -4 2) (("2" (EXPAND "map" -4 1) (("2" (EXPAND "append" -4 1) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2) (("2" (FLATTEN) (("2" (INST -2 "null" "cdr(x!2)" "x!3") (("2" (EXPAND "map" -2 1) (("2" (EXPAND "append" -2 2) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "member" 2 1) (("2" (FLATTEN) (("2" (INST -1 "cdr(x!1)" "x!2" "x!3") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!1" "y!2" "y!3") (("2" (REPLACE -17) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "x!1`1" "x!1`2" "x!1`3") (("3" (REPLACE -17) (("3" (INST? -8) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (TYPEPRED "y!1`1" "y!1`2" "y!1`3") (("4" (INST?) (("4" (REPLACE -17) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "l1!1" "l2!1" "l3!1") (("5" (INST?) (("5" (REPLACE -16) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "l1" "l2" "l3") (("3" (INST?) (("3" (REPLACE -16) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (MEASURE-INDUCT+ "length(l1)+length(l2)+length(l3)" ("l1" "l2" "l3")) (("2" (EXPAND "every" -2 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 2) (("1" (EXPAND "every" -3 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "map" 1 1) (("1" (ASSERT) (("1" (EXPAND "append" 1 1) (("1" (EXPAND "every" -4 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE-ALL-BUT (1 -1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (ASSERT) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST? -7) NIL NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (4 5 -2)) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -6 "null" "null" "cdr(x!3)") (("3" (EXPAND "every" -6 (1 3)) (("3" (EXPAND "map" -6 (1 2)) (("3" (EXPAND "append" -6 (1 2)) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST? -7) NIL NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (5 3 -2)) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -5 "null" "cdr(x!2)" "x!3") (("3" (EXPAND "every" -5 1) (("3" (EXPAND "map" -5 1) (("3" (EXPAND "append" -5 2) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2 1) (("2" (ASSERT) (("2" (EXPAND "append" 2 2) (("2" (EXPAND "append" 2 1) (("2" (EXPAND "every" 2 1) (("2" (PROP) (("1" (INST? -7) NIL NIL) ("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (2 5 -2)) (("2" (REWRITE "rac_append[nat]") (("2" (REWRITE "rdc_append[nat]") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1 2) (("2" (EXPAND "reverse") (("2" (REWRITE "append_null") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST -4 "cdr(x!1)" "x!2" "x!3") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (2 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (MEASURE-INDUCT+ "length(l)" "l") (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "every" 2) (("2" (INST -1 "cdr(x!1)") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|strict_well_founded?| CONST-DECL "bool" |orders| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[PVS0Expr])" |PVS0Expr_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|x!1| SKOLEM-CONST-DECL "list[nat]" |pvs0_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|ite| ADT-CONSTRUCTOR-DECL "[[PVS0Expr, PVS0Expr, PVS0Expr] -> (ite?)]" |PVS0Expr_adt| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|c| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|b| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|) (|a| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|p| SKOLEM-CONST-DECL "(valid_path(expr))" |pvs0_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rdc_append| FORMULA-DECL NIL |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|rac_append| FORMULA-DECL NIL |more_list_props| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC19-3| |nil| 3665517362 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC19-2| |nil| 3651339800 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND* "restrict" "<<") NIL NIL)) NIL)) NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}")) (|valid_paths_TCC19-1| |nil| 3642412740 ("" (TCC) NIL NIL) NIL NIL (|valid_paths| SUBTYPE "list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].cons(list_adt[nat].null, list_props[list[nat]].append(list_props[list[nat]].append(list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 0 :)))(pvs0_props.valid_paths(pvs0_props.a)), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 1 :)))(pvs0_props.valid_paths(pvs0_props.b))), list_adt_map[list[nat], list[nat]].map(LAMBDA (l: list_adt[nat].list): list_props[nat].append(l, (: 2 :)))(pvs0_props.valid_paths(pvs0_props.c))))" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}"))) (|valid_paths_TCC20| 0 (|valid_paths_TCC20-1| |nil| 3642412740 ("" (TCC) NIL NIL) ((|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|valid_paths| SUBTYPE "(: list_adt[nat].null :)" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}"))) (|valid_paths_TCC21| 0 (|valid_paths_TCC21-1| |nil| 3642412740 ("" (TCC) NIL NIL) ((|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) NIL (|valid_paths| SUBTYPE "(: list_adt[nat].null :)" "{res: list_adt[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].list | FORALL (p: (pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))): list_props[(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))].member(p, res)}"))) (|subset_member_sl| 0 (|subset_member_sl-2| "" 3885322381 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" ("l1" "l2")) (("" (PROP) (("1" (SKEEP) (("1" (EXPAND "subset_sl?" -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "member" -3) (("2" (ASSERT) (("2" (INST -4 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (EXPAND "length" -4 3) (("2" (INST -4 "e") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subset_sl?" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) (("1" (EXPAND "member" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "cdr(x!1)" "x!2") (("2" (EXPAND "length" -2 3) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "member" 3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|subset_member_sl-1| |nil| 3647694155 ("" (MEASURE-INDUCT+ "length(l1)+length(l2)" (L1 L2)) (("" (PROP) (("1" (SKEEP) (("1" (EXPAND "subset_sl?" -1) (("1" (LIFT-IF) (("1" (PROP) (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "member" -3) (("2" (ASSERT) (("2" (INST -4 "cdr(x!1)" "x!2") (("2" (ASSERT) (("2" (EXPAND "length" -4 3) (("2" (INST -4 "e") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subset_sl?" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -1 "car(x!1)") (("1" (ASSERT) (("1" (EXPAND "member" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "cdr(x!1)" "x!2") (("2" (EXPAND "length" -2 3) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "member" 3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset_sl_is_preorder| NAME-JUDGEMENT "(preorder?[list[T]])" |set_as_list_props| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|subset_sl?| DEF-DECL "{b: bool | b IFF FORALL x: member(x, l1) => member(x, l2)}" |set_as_list| |structures|) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|suffix_subset_sl| 0 (|suffix_subset_sl-1| |nil| 3649423687 ("" (SKEEP) (("" (REWRITE "suffix_supl") (("" (REWRITE "subset_member_sl") (("" (SKEEP -1) (("" (REPLACES -1 :DIR RL) (("" (SKEEP) (("" (REWRITE "member_append_r") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|subset_member_sl| FORMULA-DECL NIL |pvs0_props| NIL)) SHOSTAK)) (|path_conditions_cons_TCC1| 0 (|path_conditions_cons_TCC1-2| |nil| 3743026608 ("" (SKEEP) (("" (TYPEPRED "path") (("" (LEMMA "valid_paths_subexpr") (("" (INST -1 "expr" "path") (("" (BETA) (("" (INST -1 "(: n :)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -5 -6 1)) (("2" (EXPAND "valid_path") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "reverse" 3 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "reverse" 3 2) (("2" (EXPAND "append" 1) (("2" (EXPAND "append" 2) (("2" (EXPAND "append" 3) (("2" (EXPAND "reverse") (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "valid_path" 1) (("2" (SPLIT 1) (("1" (EXPAND "valid_path" 2) (("1" (SPLIT 2) (("1" (ASSERT) (("1" (EXPAND "valid_path") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|n| SKOLEM-CONST-DECL "nat" |pvs0_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|path| SKOLEM-CONST-DECL "(valid_path[Val](expr))" |pvs0_props| NIL) (|expr| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|valid_paths_subexpr| FORMULA-DECL NIL |pvs0_props| NIL)) NIL (|path_conditions_cons| SUBTYPE "list_adt[nat].cons(pvs0_props.n, pvs0_props.path)" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|path_conditions_cons_TCC2| 0 (|path_conditions_cons_TCC2-1| |nil| 3647855252 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|path_conditions_cons| SUBTYPE "pvs0_props.n" "{n: integers.posnat | reals.<=(n, 2)}"))) (|path_conditions_cons| 0 (|path_conditions_cons-1| |nil| 3647794078 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (BETA) (("" (PROP) (("" (EXPAND "path_conditions" 1 1) (("" (ASSERT) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "path_conds_aux") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append") (("2" (EXPAND "append") (("2" (EXPAND "path_conds_aux") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|path_conds_aux| CONST-DECL "PVS0Bool" |pvs0_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK)) (|path_conditions_unmodified_TCC1| 0 (|path_conditions_unmodified_TCC1-1| |nil| 3648297002 ("" (SKEEP) (("" (REPLACES -1) (("" (LEMMA "valid_0_path_ext") (("" (INST?) (("" (ASSERT) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "sub_expr") (("" (REPLACE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|valid_0_path_ext| FORMULA-DECL NIL |pvs0_props| NIL)) NIL (|path_conditions_unmodified| SUBTYPE "list_adt[nat].cons(pvs0_props.n, pvs0_props.path)" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|path_conditions_unmodified| 0 (|path_conditions_unmodified-1| |nil| 3648297205 ("" (SKEEP*) (("" (BETA) (("" (PROP) (("" (EXPAND "path_conditions" 3 1) (("" (ASSERT) (("" (EXPAND "append") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|path_conditions_unmodified2_TCC1| 0 (|path_conditions_unmodified2_TCC1-1| |nil| 3648476299 ("" (SKEEP*) (("" (TYPEPRED "path") (("" (LEMMA "valid_1_path_ext") (("" (INST?) (("" (ASSERT) (("" (REPLACES -6 :DIR RL) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|valid_1_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|path_conditions_unmodified2| SUBTYPE "list_adt[nat].cons(pvs0_props.n, pvs0_props.path)" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.expr))"))) (|path_conditions_unmodified2| 0 (|path_conditions_unmodified2-1| |nil| 3648476342 ("" (SKEEP*) (("" (BETA) (("" (PROP) (("" (EXPAND "path_conditions" 1 1) (("" (ASSERT) (("" (EXPAND "append") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|suffix_path_cnds_suffix| 0 (|suffix_path_cnds_suffix-1| |nil| 3649079052 ("" (SKEEP*) (("" (REWRITE "suffix_supl" 1) (("" (REWRITE "suffix_supl") (("" (GENERALIZE-SKOLEM-CONSTANTS) (("" (MEASURE-INDUCT+ "length(path_1)+length(path_ext_1)" ("expr_1" "path_1" "path_ext_1")) (("" (SKEEP -2) (("" (REPLACE -2 1 :DIR RL) (("" (EXPAND "append" -2) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "append" 1 2) (("1" (ASSERT) (("1" (INST 1 "null") (("1" (EXPAND "append" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2 2) (("2" (ASSERT) (("2" (EXPAND "path_conditions" 2 2) (("2" (CASE "NOT ite?(subterm_at(x!1, append(cdr(L), x!2))) OR
                    car(L) = 0") (("1" (REPLACE -1) (("1" (EXPAND "append" 2 2) (("1" (INST -3 "x!1" "x!2" "append(cdr(L),x!2)") (("1" (REPLACE -2 :DIR RL) (("1" (SPLIT -3) (("1" (PROPAX) NIL NIL) ("2" (INST 1 "cdr(L)") NIL NIL) ("3" (EXPAND "length" 1 4) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!3") (("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "path_conditions_TCC1") (("2" (INST -1 "x!1" "cons(car(L), append(cdr(L), x!2))" "car(L)" "append(cdr(L), x!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (NAME-REPLACE "head" "IF car(L) = 1
                  THEN (: pvs0bool(get_cond(subterm_at
                                           (x!1, append(cdr(L), x!2)))) :)
                ELSE (: pvs0not(get_cond(subterm_at
                                        (x!1, append(cdr(L), x!2)))) :)
                ENDIF") (("2" (INST -3 "x!1" "x!2" "append(cdr(L),x!2)") (("2" (SPLIT) (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (INST 3 "append(head,L_1)") (("1" (REWRITE "append_assoc") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST?) NIL NIL) ("3" (REPLACE -2 :DIR RL) (("3" (HIDE-ALL-BUT (1 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x!3") (("3" (REPLACE -3 :DIR RL) (("3" (LEMMA "path_conditions_TCC1") (("3" (INST -1 "x!1" "cons(car(L), append(cdr(L), x!2))" "car(L)" "append(cdr(L), x!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_supl| FORMULA-DECL NIL |more_list_props| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|path_conditions_TCC1| SUBTYPE-TCC NIL |pvs0_cc| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (L SKOLEM-CONST-DECL "list[nat]" |pvs0_props| NIL) (|x!2| SKOLEM-CONST-DECL "(valid_path(x!1))" |pvs0_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|pvs0not| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0not?)]" |PVS0Bool_adt| NIL) (|pvs0not?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|pvs0bool| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0bool?)]" |PVS0Bool_adt| NIL) (|pvs0bool?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|suffix_path_cnds| 0 (|suffix_path_cnds-1| |nil| 3645971413 ("" (SKEEP*) (("" (USE "suffix_path_cnds_suffix") (("" (USE "suffix_subset_sl") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|suffix_path_cnds_suffix| FORMULA-DECL NIL |pvs0_props| NIL) (|subset_sl_is_preorder| NAME-JUDGEMENT "(preorder?[list[T]])" |set_as_list_props| |structures|) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|suffix_subset_sl| FORMULA-DECL NIL |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|condition_is_subterm| 0 (|condition_is_subterm-2| "" 3790336323 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (CASE "null?(x!2)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "path_conditions" -2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "append") (("1" (INST -2 "x!1" "cdr(x!2)") (("1" (INST -2 "e") (("1" (EXPAND "length" - 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append") (("2" (INST -3 "x!1" "cdr(x!2)") (("2" (INST -3 "e") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "append") (("3" (EXPAND "append") (("3" (INST -4 "x!1" "cdr(x!2)") (("3" (INST -4 "e") (("3" (EXPAND "length" - 2) (("3" (EXPAND "member" -2 1) (("3" (PROP) (("3" (HIDE 1) (("3" (DECOMPOSE-EQUALITY -1) (("3" (REPLACES -2) (("3" (INST 3 "cons(0,cdr(x!2))") (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (REPLACES -1) (("1" (EXPAND "subterm_at" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "valid_path") (("2" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (GRIND) (("1" (REWRITE "null_path") NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "append") (("4" (EXPAND "append") (("4" (INST -3 "x!1" "cdr(x!2)") (("4" (INST -3 "e") (("4" (EXPAND "length" - 2) (("4" (EXPAND "member" -1 1) (("4" (PROP) (("4" (HIDE 1) (("4" (DECOMPOSE-EQUALITY -1) (("4" (REPLACES -2) (("4" (INST 4 "cons(0,cdr(x!2))") (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (REPLACES -1) (("1" (EXPAND "subterm_at" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "valid_path") (("2" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (REPLACES -1) (("1" (HIDE 4) (("1" (GRIND) (("1" (REWRITE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|pvs0not| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0not?)]" |PVS0Bool_adt| NIL) (|pvs0not?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|pvs0bool| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0bool?)]" |PVS0Bool_adt| NIL) (|pvs0bool?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|x!2| SKOLEM-CONST-DECL "(valid_path(x!1))" |pvs0_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|subterm_append| FORMULA-DECL NIL |pvs0_props| NIL) (|valid_0_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|get_expr| SHARED-ADT-ACCESSOR-DECL "[PVS0Bool -> PVS0Expr[T]]" |PVS0Bool_adt| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|condition_is_subterm-1| |nil| 3707579021 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (CASE "null?(x!2)") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "path_conditions" -2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "append") (("1" (INST -2 "x!1" "cdr(x!2)") (("1" (INST -2 "e") (("1" (EXPAND "length" - 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append") (("2" (INST -3 "x!1" "cdr(x!2)") (("2" (INST -3 "e") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "append") (("3" (EXPAND "append") (("3" (INST -4 "x!1" "cdr(x!2)") (("3" (INST -4 "e") (("3" (EXPAND "length" - 2) (("3" (EXPAND "member" -2 1) (("3" (PROP) (("3" (HIDE 1) (("3" (DECOMPOSE-EQUALITY -1) (("3" (REPLACES -2) (("3" (INST 3 "cons(0,cdr(x!2))") (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (REPLACES -1) (("1" (EXPAND "subterm_at" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "valid_path") (("2" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (GRIND) (("1" (REWRITE "null_path") NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "append") (("4" (EXPAND "append") (("4" (INST -3 "x!1" "cdr(x!2)") (("4" (INST -3 "e") (("4" (EXPAND "length" - 2) (("4" (EXPAND "member" -1 1) (("4" (PROP) (("4" (HIDE 1) (("4" (DECOMPOSE-EQUALITY -1) (("4" (REPLACES -2) (("4" (INST 4 "cons(0,cdr(x!2))") (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (REPLACES -1) (("1" (EXPAND "subterm_at" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "valid_path") (("2" (CASE "rac((:0:)) = car((:0:))") (("1" (ASSERT) (("1" (CASE "rdc((:0:)) = cdr((:0:))") (("1" (REPLACES -1) (("1" (HIDE 4) (("1" (GRIND) (("1" (REWRITE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (PROP) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|condition_is_subterm_append| 0 (|condition_is_subterm_append-1| |nil| 3708106671 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (CASE "null?(x!2)") (("1" (HIDE -2) (("1" (GRIND) (("1" (REWRITE "null_append[PVS0Bool[Val]]") NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "cnds_pref = null") (("1" (REPLACE -1) (("1" (EXPAND "append" -3) (("1" (INST 2 "x!2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_conditions" -2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "append" -1 2) (("1" (INST -2 "x!1" "cdr(x!2)") (("1" (INST -2 "cnds_pref" "cnds_suff") (("1" (EXPAND "length" - 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -2 2) (("2" (INST -3 "x!1" "cdr(x!2)") (("2" (INST -3 "cnds_pref" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "append" -2 2) (("3" (EXPAND "append" -2 2) (("3" (EXPAND "append" -2) (("3" (DECOMPOSE-EQUALITY -2) (("3" (INST -5 "x!1" "cdr(x!2)") (("3" (INST -5 "cdr(cnds_pref)" "cnds_suff") (("3" (EXPAND "length" - 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "append" -1 2) (("4" (EXPAND "append" -1 2) (("4" (EXPAND "append" -1) (("4" (DECOMPOSE-EQUALITY -1) (("4" (INST -4 "x!1" "cdr(x!2)") (("4" (INST -4 "cdr(cnds_pref)" "cnds_suff") (("4" (EXPAND "length" - 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null_append| FORMULA-DECL NIL |more_list_props| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|pvs0bool| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0bool?)]" |PVS0Bool_adt| NIL) (|pvs0bool?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|pvs0not| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0not?)]" |PVS0Bool_adt| NIL) (|pvs0not?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|path_of_path_conditions| 0 (|path_of_path_conditions-1| "" 3790336328 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (CASE "null?(x!2)") (("1" (HIDE -2) (("1" (GRIND) (("1" (REWRITE "null_append[PVS0Bool[Val]]") NIL NIL) ("2" (REWRITE "null_append[PVS0Bool[Val]]") NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "path_conditions" -2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "append" -1 1) (("1" (INST -2 "x!1" "cdr(x!2)") (("1" (INST -2 "cnds_pref" "cnds_suff") (("1" (EXPAND "length" - 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -2 1) (("2" (INST -3 "x!1" "cdr(x!2)") (("2" (INST -3 "cnds_pref" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "append" -2 1) (("3" (EXPAND "append" -2 1) (("3" (CASE "cnds_pref = null") (("1" (REPLACES -1) (("1" (EXPAND "append" -2) (("1" (INST 3 "cons(0, cdr(x!2))") (("1" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 1 3)) (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE " rac((: 0 :)) = 0") (("1" (ASSERT) (("1" (CASE "null = rdc((: 0 :))") (("1" (EXPAND "subterm_at" -3 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (REWRITE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE " path_conditions_unmodified") (("2" (ASSERT) (("2" (ASSERT) (("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -2) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -5 "x!1" "cdr(x!2)") (("2" (INST -5 "cdr(cnds_pref)" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "append" -1 1) (("4" (EXPAND "append" -1 1) (("4" (CASE "cnds_pref = null") (("1" (REPLACES -1) (("1" (EXPAND "append" -1) (("1" (INST 4 "cons(0, cdr(x!2))") (("1" (SPLIT) (("1" (REPLACE -1 1 RL) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 1 4)) (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE " rac((: 0 :)) = 0") (("1" (ASSERT) (("1" (CASE "null = rdc((: 0 :))") (("1" (EXPAND "subterm_at" -3 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (REWRITE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE " path_conditions_unmodified") (("2" (ASSERT) (("2" (ASSERT) (("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -1) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -4 "x!1" "cdr(x!2)") (("2" (INST -4 "cdr(cnds_pref)" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null_append| FORMULA-DECL NIL |more_list_props| |structures|) (|pvs0not?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|pvs0not| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0not?)]" |PVS0Bool_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|valid_0_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|subterm_append| FORMULA-DECL NIL |pvs0_props| NIL) (|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|path_conditions_unmodified| FORMULA-DECL NIL |pvs0_props| NIL) (|x!1| SKOLEM-CONST-DECL "PVS0Expr[Val]" |pvs0_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|x!2| SKOLEM-CONST-DECL "(valid_path(x!1))" |pvs0_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|pvs0bool?| ADT-RECOGNIZER-DECL "[PVS0Bool -> boolean]" |PVS0Bool_adt| NIL) (|pvs0bool| ADT-CONSTRUCTOR-DECL "[PVS0Expr[T] -> (pvs0bool?)]" |PVS0Bool_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|get_expr| SHARED-ADT-ACCESSOR-DECL "[PVS0Bool -> PVS0Expr[T]]" |PVS0Bool_adt| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|path_of_path_conditions-2| |nil| 3742757882 ("" (MEASURE-INDUCT+ "length(path)" ("expr" "path")) (("" (CASE "null?(x!2)") (("1" (HIDE -2) (("1" (GRIND) (("1" (REWRITE "null_append[PVS0Bool[Val]]") NIL NIL) ("2" (REWRITE "null_append[PVS0Bool[Val]]") NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "path_conditions" -2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "append" -1 1) (("1" (INST -2 "x!1" "cdr(x!2)") (("1" (INST -2 "cnds_pref" "cnds_suff") (("1" (EXPAND "length" - 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -2 1) (("2" (INST -3 "x!1" "cdr(x!2)") (("2" (INST -3 "cnds_pref" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "append" -2 1) (("3" (EXPAND "append" -2 1) (("3" (CASE "cnds_pref = null") (("1" (REPLACES -1) (("1" (EXPAND "append" -2) (("1" (INST 3 "cons(0, cdr(x!2))") (("1" (SPLIT) (("1" (REPLACE -2 1 RL) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 1 3)) (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE " rac((: 0 :)) = 0") (("1" (ASSERT) (("1" (CASE "null = rdc((: 0 :))") (("1" (EXPAND "subterm_at" -3 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (REWRITE "null_path") NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE " path_conditions_unmodified") (("2" (ASSERT) (("2" (ASSERT) (("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -2) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -2) (("2" (INST -5 "x!1" "cdr(x!2)") (("2" (INST -5 "cdr(cnds_pref)" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "append" -1 1) (("4" (EXPAND "append" -1 1) (("4" (CASE "cnds_pref = null") (("1" (REPLACES -1) (("1" (EXPAND "append" -1) (("1" (INST 4 "cons(0, cdr(x!2))") (("1" (SPLIT) (("1" (REPLACE -1 1 RL) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 1 4)) (("1" (LEMMA "subterm_append") (("1" (INST -1 "x!1" "cdr(x!2)") (("1" (ASSERT) (("1" (INST -1 "(:0:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (EXPAND "subterm_at" -1 2) (("1" (CASE " rac((: 0 :)) = 0") (("1" (ASSERT) (("1" (CASE "null = rdc((: 0 :))") (("1" (EXPAND "subterm_at" -3 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (REWRITE "null_path") NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE " path_conditions_unmodified") (("2" (ASSERT) (("2" (ASSERT) (("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "x!2") (("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" -1) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (INST -4 "x!1" "cdr(x!2)") (("2" (INST -4 "cdr(cnds_pref)" "cnds_suff") (("2" (EXPAND "length" - 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|member_conds_rec| 0 (|member_conds_rec-2| "" 3885345120 ("" (SKEEP) (("" (MEASURE-INDUCT+ "length(cnds)" "cnds") (("" (SKEEP) (("" (EXPAND "member" -2) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "eval_conds" -3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (REPLACE -1 :DIR RL) (("1" (PROP) (("1" (EXPAND "eval_conds" 2) (("1" (ASSERT) (("1" (EXPAND "eval_conds" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "eval_conds" 3) (("2" (ASSERT) (("2" (EXPAND "eval_conds" 3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "eval_conds" -3) (("2" (ASSERT) (("2" (PROP) (("2" (INST -2 "cdr(x!1)") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|member_conds_rec-1| |nil| 3647695484 ("" (SKEEP) (("" (MEASURE-INDUCT+ "length(cnds)" CNDS) (("" (SKEEP) (("" (EXPAND "member" -2) (("" (LIFT-IF) (("" (PROP) (("1" (EXPAND "eval_conds" -3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (REPLACE -1 :DIR RL) (("1" (PROP) (("1" (EXPAND "eval_conds" 2) (("1" (ASSERT) (("1" (EXPAND "eval_conds" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "eval_conds" 3) (("2" (ASSERT) (("2" (EXPAND "eval_conds" 3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "eval_conds" -3) (("2" (ASSERT) (("2" (PROP) (("2" (INST -2 "cdr(x!1)") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|eval_conds| DEF-DECL "bool" |pvs0_cc| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|member_conds_rec2| 0 (|member_conds_rec2-2| |nil| 3742758143 ("" (SKEEP) (("" (MEASURE-INDUCT+ "length(cnds)" "cnds") (("" (EXPAND "eval_conds" 1) (("" (LIFT-IF) (("" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (INST-CP -2 "car(x!1)") (("1" (EXPAND "eval_conds" -3) (("1" (EXPAND "eval_conds" -3) (("1" (REPLACES -3) (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKEEP) (("1" (INST?) (("1" (TYPEPRED "e") (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 2)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|eval_conds| DEF-DECL "bool" |pvs0_cc| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|e| SKOLEM-CONST-DECL "{e: PVS0Bool | member(e, cdr(x!1))}" |pvs0_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|x!1| SKOLEM-CONST-DECL "list[PVS0Bool[Val[Val]]]" |pvs0_props| NIL)) NIL)) (|eval_conds_reverse| 0 (|eval_conds_reverse-2| |nil| 3707579207 ("" (SKEEP) (("" (IFF) (("" (PROP) (("1" (LEMMA "member_conds_rec") (("1" (LEMMA "member_conds_rec2") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) (("1" (HIDE 2) (("1" (SKEEP) (("1" (INSTEEP) (("1" (ASSERT) (("1" (TYPEPRED "e") (("1" (LEMMA "member_reverse[PVS0Bool[Val]]") (("1" (INST -1 "e" "cnds") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "member_conds_rec2") (("2" (INST? :WHERE 1) (("2" (ASSERT) (("2" (LEMMA "member_conds_rec") (("2" (HIDE 2) (("2" (SKEEP) (("2" (INST? -1 :WHERE 1) (("2" (INST -1 "reverse(cnds)") (("2" (ASSERT) (("2" (LEMMA "member_reverse[PVS0Bool[Val]]") (("2" (INST -1 "e" "cnds") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|member_conds_rec| FORMULA-DECL NIL |pvs0_props| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|) (|member_conds_rec2| FORMULA-DECL NIL |pvs0_props| NIL)) NIL)) (|suffix_conds_rec| 0 (|suffix_conds_rec-1| |nil| 3647692909 ("" (SKEEP*) (("" (REWRITE "subset_member_sl") (("" (LEMMA "member_conds_rec2") (("" (INST -1 "pvs0" "env" "suffcnds") (("" (ASSERT) (("" (SKEEP) (("" (INST?) (("" (TYPEPRED "e") (("" (ASSERT) (("" (LEMMA "member_conds_rec") (("" (INST?) (("" (INST -1 "cnds") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|subset_member_sl| FORMULA-DECL NIL |pvs0_props| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member_conds_rec| FORMULA-DECL NIL |pvs0_props| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|member_conds_rec2| FORMULA-DECL NIL |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|suffix_conds_valid_sub| 0 (|suffix_conds_valid_sub-2| |nil| 3665941590 ("" (SKEEP*) (("" (USE "suffix_path_cnds") (("" (ASSERT) (("" (LEMMA "suffix_conds_rec") (("" (INST -1 "pvs0" "env" "path_conditions(sub_expr, path)" " path_conditions(sub_expr, path_ext)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|suffix_path_cnds| FORMULA-DECL NIL |pvs0_props| NIL) (|suffix_conds_rec| FORMULA-DECL NIL |pvs0_props| NIL) (|subset_sl_is_preorder| NAME-JUDGEMENT "(preorder?[list[T]])" |set_as_list_props| |structures|) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|suffix_conds_valid| 0 (|suffix_conds_valid-2| |nil| 3665941671 ("" (SKEEP*) (("" (LEMMA "suffix_conds_valid_sub") (("" (INST -1 "env" "pvs0" "get_body(pvs0)" "path" "path_ext") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|suffix_conds_valid_sub| FORMULA-DECL NIL |pvs0_props| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|pvs0| SKOLEM-CONST-DECL "PVS0[Val]" |pvs0_props| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|rec_decreasing_TCC1| 0 (|rec_decreasing_TCC1-1| |nil| 3642264615 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL)) NIL (|rec_decreasing| SUBTYPE "pvs0_props.path_ext" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.body))"))) (|rec_decreasing_TCC2| 0 (|rec_decreasing_TCC2-1| |nil| 3642264615 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL)) NIL (|rec_decreasing| SUBTYPE "pvs0_props.path" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.body))"))) (|rec_decreasing_TCC3| 0 (|rec_decreasing_TCC3-1| |nil| 3742755483 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL)) NIL (|rec_decreasing| SUBTYPE "pvs0_props.subexpr" "{x: PVS0Expr_adt[pvs0_props.Val].PVS0Expr | booleans.OR(PVS0Expr_adt[pvs0_props.Val].op1?(x), PVS0Expr_adt[pvs0_props.Val].rec?(x))}"))) (|rec_decreasing_TCC4| 0 (|rec_decreasing_TCC4-2| "" 3885258230 ("" (SKEEP :PREDS? T) (("" (HIDE -2 -4) (("" (TYPEPRED "eval_expr[Val](pvs0)(n, get_arg[Val](subexpr), env)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|semantic_rel_expr| INDUCTIVE-DECL "bool" |pvs0_expr| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|eval_expr| DEF-DECL "Maybe[Val]" |pvs0_expr| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL)) SHOSTAK (|rec_decreasing| SUBTYPE "pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(pvs0_props.n, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)" "{x: {myv: Maybe[pvs0_props.Val].Maybe | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(myv), booleans.AND(reals.>(pvs0_props.n, 0), FORALL (m: integers.upfrom(pvs0_props.n)): myv = pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(m, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)))} | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(x), pvs0_expr[pvs0_props.Val].semantic_rel_expr(pvs0_props.pvs0)(PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env, Maybe[pvs0_props.Val].val(x)))}")) (|rec_decreasing_TCC4-1| |nil| 3885253571 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|rec_decreasing| SUBTYPE "pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(pvs0_props.n, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)" "{x: {myv: Maybe[pvs0_props.Val].Maybe | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(myv), booleans.AND(reals.>(pvs0_props.n, 0), FORALL (m: integers.upfrom(pvs0_props.n)): myv = pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(m, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)))} | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(x), pvs0_expr[pvs0_props.Val].semantic_rel_expr(pvs0_props.pvs0)(PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env, Maybe[pvs0_props.Val].val(x)))}"))) (|rec_decreasing_TCC5| 0 (|rec_decreasing_TCC4-1| |nil| 3742755483 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|rec_decreasing| SUBTYPE "(number_fields.-)(pvs0_props.n, 1)" "nat"))) (|rec_decreasing| 0 (|rec_decreasing-3| "" 3885311216 ("" (SKEEP) (("" (SKEEP) (("" (INDUCT "expr") (("1" (SKEEP) (("1" (SKEEP) (("1" (BETA) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (HIDE-ALL-BUT (-1 -3 -5)) (("2" (LEMMA "cnst_vr_path_ext") (("2" (INST?) (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP*) (("3" (HIDE-ALL-BUT (-1 -3 -5)) (("3" (LEMMA "cnst_vr_path_ext") (("3" (INST?) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP*) (("4" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "(: 0 :)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE 2) (("2" (GRIND) (("2" (CASE "null[nat] = (: :)") (("1" (REPLACE -1 :DIR RL :HIDE? T) (("1" (USE "null_path") NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -2) (("3" (LIFT-IF -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -1 -3 -5)) (("4" (LEMMA "op1_rec_path_ext") (("4" (INST?) (("4" (ASSERT) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (TYPEPRED "path") (("2" (HIDE -1) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOLEM 1 ("op_idx" "arg1_expr" "arg2_expr")) (("5" (FLATTEN) (("5" (LABEL "ih_arg2" -2) (("5" (HIDE "ih_arg2") (("5" (LABEL "ih_arg1" -1) (("5" (HIDE "ih_arg1") (("5" (SKEEP*) (("5" (USE "op2_path_ext") (("5" (ASSERT) (("5" (ASSERT) (("5" (SPLIT -1) (("1" (REVEAL "ih_arg1") (("1" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(0, null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -2 1 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1 1) (("2" (REPLACE -2 1 :DIR RL) (("2" (ASSERT) (("2" (CASE "reverse(cdr(reverse(cons[nat](0, null[real])))) = null") (("1" (FLATTEN) (("1" (EXPAND "rac" 1) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc" 1) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "valid_path" 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1) (("2" (EXPAND "reverse" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "reverse" 1) (("3" (EXPAND "reverse" 1) (("3" (EXPAND "append") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -3) (("3" (LIFT-IF -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "ih_arg2") (("2" (INST -1 "pvs0" "cons(1,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(1, null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -2 1 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 :DIR RL) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (EXPAND "rac" 2) (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc" 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path" 2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "eval_expr" -3) (("3" (LIFT-IF -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "/=") (("3" (REPLACE -1 :DIR RL) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKOLEM 1 "arg_expr") (("6" (FLATTEN) (("6" (SKEEP*) (("6" (CASE "path_ext = path") (("1" (REPLACE -1 :HIDE? T) (("1" (HIDE -1) (("1" (EXPAND "eval_expr" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(0,null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (EXPAND "subterm_at") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 :HIDE? T :DIR RL) (("2" (GRIND) (("2" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -2) (("3" (LIFT-IF -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -3 -1 2)) (("4" (LEMMA "op1_rec_path_ext") (("4" (INST?) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (TYPEPRED "path") (("2" (HIDE -1) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOLEM 1 ("cond_expr" "then_expr" "else_expr")) (("7" (FLATTEN) (("7" (SKEEP*) (("7" (LABEL "ih_cond" -1) (("7" (HIDE "ih_cond") (("7" (LABEL "ih_then" -1) (("7" (HIDE "ih_then") (("7" (LABEL "ih_else" -1) (("7" (HIDE "ih_else") (("7" (USE "ite_path_ext") (("7" (ASSERT) (("7" (ASSERT) (("7" (SPLIT) (("1" (REVEAL "ih_cond") (("1" (INST -1 "pvs0" "append((:0:),path)" "path_ext") (("1" (EXPAND "append" -1 2) (("1" (EXPAND "append" -1 2) (("1" (REPLACE 1) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:0:)") (("1" (REPLACES -1) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -3) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (HIDE 2 3) (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "valid_0_path_ext") (("2" (INST?) (("2" (EXPAND "append" 1) (("2" (EXPAND "append" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "suffix_conds_valid") (("2" (INST -1 "env" "pvs0" "cons(1,path)" "path_ext") (("1" (ASSERT) (("1" (USE "path_conditions_cons") (("1" (BETA) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "eval_conds" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "path_conds_aux") (("1" (SKEEP) (("1" (REPLACE -3 :DIR RL) (("1" (ASSERT) (("1" (REVEAL "ih_then") (("1" (INST -1 "pvs0" "cons(1,path)" "path_ext") (("1" (REPLACE 2) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:1:)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (REPLACES -1) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -4) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eval_expr_semantic_rel") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "n") (("1" (BETA) (("1" (ASSERT) (("1" (LEMMA "deterministic_expr") (("1" (INST -1 "pvs0" "env" "cond_expr" " val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_conds_valid") (("3" (INST -1 "env" "pvs0" "cons(2,path)" "path_ext") (("1" (ASSERT) (("1" (USE "path_conditions_cons") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "eval_conds" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "path_conds_aux") (("1" (SKEEP) (("1" (REPLACE -4 :DIR RL) (("1" (ASSERT) (("1" (REVEAL "ih_else") (("1" (INST -1 "pvs0" "cons(2,path)" "path_ext") (("1" (REPLACE 1) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:2:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (REPLACES -1) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -5) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eval_expr_semantic_rel") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "n") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "deterministic_expr") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deterministic_expr") (("2" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_2_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_2_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (SKEEP*) (("8" (TYPEPRED "eval_expr[Val](pvs0)(n, get_arg[Val](subexpr), env)") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE 2) (("9" (SKEEP*) NIL NIL)) NIL) ("10" (HIDE 2) (("10" (SKEEP*) (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (SKEEP*) (("11" (ASSERT) NIL NIL)) NIL)) NIL) ("12" (HIDE 2) (("12" (SKEEP*) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pvs0| SKOLEM-CONST-DECL "PVS0[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(pvs0`4))" |pvs0_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|path_conditions_cons| FORMULA-DECL NIL |pvs0_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|eval_expr_semantic_rel| FORMULA-DECL NIL |pvs0_expr| NIL) (|deterministic_expr| FORMULA-DECL NIL |pvs0_expr| NIL) (|cond_expr| SKOLEM-CONST-DECL "PVS0Expr[Val[Val]]" |pvs0_props| NIL) (|path_conds_aux| CONST-DECL "PVS0Bool" |pvs0_props| NIL) (|suffix_conds_valid| FORMULA-DECL NIL |pvs0_props| NIL) (|valid_2_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|ite_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|pvs0| SKOLEM-CONST-DECL "PVS0[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(pvs0`4))" |pvs0_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pvs0| SKOLEM-CONST-DECL "PVS0[Val]" |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(pvs0`4))" |pvs0_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|valid_1_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|op2_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|valid_0_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|op1_rec_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null_path| FORMULA-DECL NIL |pvs0_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rac| CONST-DECL "T" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|subterm_append| FORMULA-DECL NIL |pvs0_props| NIL) (|path| SKOLEM-CONST-DECL "(valid_path(pvs0`4))" |pvs0_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|pvs0| SKOLEM-CONST-DECL "PVS0[Val]" |pvs0_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cnst_vr_path_ext| FORMULA-DECL NIL |pvs0_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|PVS0Expr_induction| FORMULA-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|eval_expr| DEF-DECL "Maybe[Val]" |pvs0_expr| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|n| SKOLEM-CONST-DECL "posnat" |pvs0_props| NIL) (|env| SKOLEM-CONST-DECL "Val" |pvs0_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|eval_conds| DEF-DECL "bool" |pvs0_cc| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|semantic_rel_expr| INDUCTIVE-DECL "bool" |pvs0_expr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)) SHOSTAK) (|rec_decreasing-2| "" 3790336341 ("" (SKEEP) (("" (SKEEP) (("" (INDUCT "expr") (("1" (SKEEP) (("1" (SKEEP) (("1" (BETA) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (HIDE-ALL-BUT (-1 -3 -5)) (("2" (LEMMA "cnst_vr_path_ext") (("2" (INST?) (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP*) (("3" (HIDE-ALL-BUT (-1 -3 -5)) (("3" (LEMMA "cnst_vr_path_ext") (("3" (INST?) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP*) (("4" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "(: 0 :)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE 2) (("2" (GRIND) (("2" (CASE "null[nat] = (: :)") (("1" (REPLACE -1 :DIR RL :HIDE? T) (("1" (USE "null_path") NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -2) (("3" (LIFT-IF -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -1 -3 -5)) (("4" (LEMMA "op1_rec_path_ext") (("4" (INST?) (("4" (ASSERT) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (TYPEPRED "path") (("2" (HIDE -1) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOLEM 1 ("op_idx" "arg1_expr" "arg2_expr")) (("5" (FLATTEN) (("5" (LABEL "ih_arg2" -2) (("5" (HIDE "ih_arg2") (("5" (LABEL "ih_arg1" -1) (("5" (HIDE "ih_arg1") (("5" (SKEEP*) (("5" (USE "op2_path_ext") (("5" (ASSERT) (("5" (ASSERT) (("5" (SPLIT -1) (("1" (REVEAL "ih_arg1") (("1" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(0, null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -2 1 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1 1) (("2" (REPLACE -2 1 :DIR RL) (("2" (ASSERT) (("2" (CASE "reverse(cdr(reverse(cons[nat](0, null[real])))) = null") (("1" (FLATTEN) (("1" (EXPAND "rac" 1) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc" 1) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "valid_path" 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1) (("2" (EXPAND "reverse" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "reverse" 1) (("3" (EXPAND "reverse" 1) (("3" (EXPAND "append") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -3) (("3" (LIFT-IF -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "ih_arg2") (("2" (INST -1 "pvs0" "cons(1,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(1, null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -2 1 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 :DIR RL) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (EXPAND "rac" 2) (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc" 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path" 2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "eval_expr" -3) (("3" (LIFT-IF -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "/=") (("3" (REPLACE -1 :DIR RL) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKOLEM 1 "arg_expr") (("6" (FLATTEN) (("6" (SKEEP*) (("6" (CASE "path_ext = path") (("1" (REPLACE -1 :HIDE? T) (("1" (HIDE -1) (("1" (EXPAND "eval_expr" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(0,null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (EXPAND "subterm_at") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 :HIDE? T :DIR RL) (("2" (GRIND) (("2" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -2) (("3" (LIFT-IF -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -3 -1 2)) (("4" (LEMMA "op1_rec_path_ext") (("4" (INST?) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (TYPEPRED "path") (("2" (HIDE -1) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOLEM 1 ("cond_expr" "then_expr" "else_expr")) (("7" (FLATTEN) (("7" (SKEEP*) (("7" (LABEL "ih_cond" -1) (("7" (HIDE "ih_cond") (("7" (LABEL "ih_then" -1) (("7" (HIDE "ih_then") (("7" (LABEL "ih_else" -1) (("7" (HIDE "ih_else") (("7" (USE "ite_path_ext") (("7" (ASSERT) (("7" (ASSERT) (("7" (SPLIT) (("1" (REVEAL "ih_cond") (("1" (INST -1 "pvs0" "append((:0:),path)" "path_ext") (("1" (EXPAND "append" -1 2) (("1" (EXPAND "append" -1 2) (("1" (REPLACE 1) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:0:)") (("1" (REPLACES -1) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -3) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (HIDE 2 3) (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "valid_0_path_ext") (("2" (INST?) (("2" (EXPAND "append" 1) (("2" (EXPAND "append" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "suffix_conds_valid") (("2" (INST -1 "env" "pvs0" "cons(1,path)" "path_ext") (("1" (ASSERT) (("1" (USE "path_conditions_cons") (("1" (BETA) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "eval_conds" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "path_conds_aux") (("1" (SKEEP) (("1" (REPLACE -3 :DIR RL) (("1" (ASSERT) (("1" (REVEAL "ih_then") (("1" (INST -1 "pvs0" "cons(1,path)" "path_ext") (("1" (REPLACE 2) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:1:)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (REPLACES -1) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -4) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eval_expr_semantic_rel") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "n") (("1" (BETA) (("1" (ASSERT) (("1" (LEMMA "deterministic_expr") (("1" (INST -1 "pvs0" "env" "cond_expr" " val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_conds_valid") (("3" (INST -1 "env" "pvs0" "cons(2,path)" "path_ext") (("1" (ASSERT) (("1" (USE "path_conditions_cons") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "eval_conds" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "path_conds_aux") (("1" (SKEEP) (("1" (REPLACE -4 :DIR RL) (("1" (ASSERT) (("1" (REVEAL "ih_else") (("1" (INST -1 "pvs0" "cons(2,path)" "path_ext") (("1" (REPLACE 1) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:2:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (REPLACES -1) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -5) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eval_expr_semantic_rel") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "n") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "deterministic_expr") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deterministic_expr") (("2" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_2_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_2_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (SKEEP*) NIL NIL)) NIL) ("9" (HIDE 2) (("9" (SKEEP*) (("9" (ASSERT) NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (SKEEP*) (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (SKEEP*) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|rec_decreasing-1| "1130" 3742906834 ("" (SKEEP) (("" (SKEEP) (("" (INDUCT "expr") (("1" (SKEEP) (("1" (SKEEP) (("1" (BETA) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (HIDE-ALL-BUT (-1 -3 -5)) (("2" (LEMMA "cnst_vr_path_ext") (("2" (INST?) (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP*) (("3" (HIDE-ALL-BUT (-1 -3 -5)) (("3" (LEMMA "cnst_vr_path_ext") (("3" (INST?) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP*) (("4" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "(: 0 :)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE 2) (("2" (GRIND) (("2" (CASE "null[nat] = (: :)") (("1" (REPLACE -1 :DIR RL :HIDE? T) (("1" (USE "null_path") NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -2) (("3" (LIFT-IF -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -1 -3 -5)) (("4" (LEMMA "op1_rec_path_ext") (("4" (INST?) (("4" (ASSERT) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (TYPEPRED "path") (("2" (HIDE -1) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOLEM 1 ("op_idx" "arg1_expr" "arg2_expr")) (("5" (FLATTEN) (("5" (LABEL "ih_arg2" -2) (("5" (HIDE "ih_arg2") (("5" (LABEL "ih_arg1" -1) (("5" (HIDE "ih_arg1") (("5" (SKEEP*) (("5" (USE "op2_path_ext") (("5" (ASSERT) (("5" (ASSERT) (("5" (SPLIT -1) (("1" (REVEAL "ih_arg1") (("1" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(0, null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -2 1 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path" 1 1) (("2" (REPLACE -2 1 :DIR RL) (("2" (ASSERT) (("2" (CASE "reverse(cdr(reverse(cons[nat](0, null[real])))) = null") (("1" (FLATTEN) (("1" (EXPAND "rac" 1) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc" 1) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "valid_path" 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append" 1) (("2" (EXPAND "reverse" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "reverse" 1) (("3" (EXPAND "reverse" 1) (("3" (EXPAND "append") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -3) (("3" (LIFT-IF -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_0_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "ih_arg2") (("2" (INST -1 "pvs0" "cons(1,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(1, null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -2 1 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 :DIR RL) (("2" (EXPAND "valid_path" 1) (("2" (FLATTEN) (("2" (EXPAND "rac" 2) (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc" 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "reverse" 2 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path" 2) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "eval_expr" -3) (("3" (LIFT-IF -3) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "/=") (("3" (REPLACE -1 :DIR RL) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKOLEM 1 "arg_expr") (("6" (FLATTEN) (("6" (SKEEP*) (("6" (CASE "path_ext = path") (("1" (REPLACE -1 :HIDE? T) (("1" (HIDE -1) (("1" (EXPAND "eval_expr" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "pvs0" "cons(0,path)" "path_ext") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (LEMMA "subterm_append") (("2" (INST -1 "get_body(pvs0)" "path") (("2" (BETA) (("2" (INST -1 "cons(0,null)") (("1" (EXPAND "append" -1 1) (("1" (EXPAND "append" -1 1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (EXPAND "subterm_at") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 :HIDE? T :DIR RL) (("2" (GRIND) (("2" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "eval_expr" -2) (("3" (LIFT-IF -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -3 -1 2)) (("4" (LEMMA "op1_rec_path_ext") (("4" (INST?) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (TYPEPRED "path") (("2" (HIDE -1) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOLEM 1 ("cond_expr" "then_expr" "else_expr")) (("7" (FLATTEN) (("7" (SKEEP*) (("7" (LABEL "ih_cond" -1) (("7" (HIDE "ih_cond") (("7" (LABEL "ih_then" -1) (("7" (HIDE "ih_then") (("7" (LABEL "ih_else" -1) (("7" (HIDE "ih_else") (("7" (USE "ite_path_ext") (("7" (ASSERT) (("7" (ASSERT) (("7" (SPLIT) (("1" (REVEAL "ih_cond") (("1" (INST -1 "pvs0" "append((:0:),path)" "path_ext") (("1" (EXPAND "append" -1 2) (("1" (EXPAND "append" -1 2) (("1" (REPLACE 1) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:0:)") (("1" (REPLACES -1) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -3) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (HIDE 2 3) (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "valid_0_path_ext") (("2" (INST?) (("2" (EXPAND "append" 1) (("2" (EXPAND "append" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "suffix_conds_valid") (("2" (INST -1 "env" "pvs0" "cons(1,path)" "path_ext") (("1" (ASSERT) (("1" (USE "path_conditions_cons") (("1" (BETA) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "eval_conds" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "path_conds_aux") (("1" (SKEEP) (("1" (REPLACE -3 :DIR RL) (("1" (ASSERT) (("1" (REVEAL "ih_then") (("1" (INST -1 "pvs0" "cons(1,path)" "path_ext") (("1" (REPLACE 2) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:1:)") (("1" (EXPAND "append" -1) (("1" (EXPAND "append" -1) (("1" (REPLACES -1) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -4) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eval_expr_semantic_rel") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "n") (("1" (BETA) (("1" (ASSERT) (("1" (LEMMA "deterministic_expr") (("1" (INST -1 "pvs0" "env" "cond_expr" " val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (HIDE 1 3) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_1_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "suffix_conds_valid") (("3" (INST -1 "env" "pvs0" "cons(2,path)" "path_ext") (("1" (ASSERT) (("1" (USE "path_conditions_cons") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "eval_conds" -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "path_conds_aux") (("1" (SKEEP) (("1" (REPLACE -4 :DIR RL) (("1" (ASSERT) (("1" (REVEAL "ih_else") (("1" (INST -1 "pvs0" "cons(2,path)" "path_ext") (("1" (REPLACE 1) (("1" (ASSERT) (("1" (USE "subterm_append") (("1" (BETA) (("1" (INST -1 "(:2:)") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (REPLACES -1) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "rac") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (EXPAND "rdc") (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "reverse" 1 2) (("1" (EXPAND "append") (("1" (EXPAND "reverse") (("1" (EXPAND "subterm_at" 1) (("1" (EXPAND "eval_expr" -5) (("1" (LIFT-IF) (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "eval_expr_semantic_rel") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "n") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "deterministic_expr") (("1" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deterministic_expr") (("2" (INST -1 "pvs0" "env" "cond_expr" "val(eval_expr(pvs0)(n, cond_expr, env))" "val") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "valid_path") (("2" (FLATTEN) (("2" (HIDE 1 2) (("2" (EXPAND "rac") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "nth") (("2" (EXPAND "rdc") (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "reverse" 1 2) (("2" (EXPAND "append") (("2" (EXPAND "reverse") (("2" (EXPAND "valid_path") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_2_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "valid_2_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE 2) (("8" (SKEEP*) NIL NIL)) NIL) ("9" (HIDE 2) (("9" (SKEEP*) (("9" (ASSERT) NIL NIL)) NIL)) NIL) ("10" (HIDE 2) (("10" (SKEEP*) (("10" (ASSERT) NIL NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (SKEEP*) (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|rec_mu_decreasing_TCC1| 0 (|rec_mu_decreasing_TCC1-1| |nil| 3642352026 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|terminating?| CONST-DECL "bool" |pvs0_lang| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL)) NIL (|rec_mu_decreasing| SUBTYPE "pvs0_props.path_ext" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.body))"))) (|rec_mu_decreasing_TCC2| 0 (|rec_mu_decreasing_TCC2-1| |nil| 3642352026 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|terminating?| CONST-DECL "bool" |pvs0_lang| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|terminates_expr| CONST-DECL "bool" |pvs0_expr| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|semantic_rel| CONST-DECL "bool" |pvs0_lang| NIL) (|determined?| CONST-DECL "bool" |pvs0_lang| NIL)) NIL (|rec_mu_decreasing| SUBTYPE "pvs0_props.env" "(pvs0_lang[pvs0_props.Val].determined?(pvs0_props.pvs0))"))) (|rec_mu_decreasing_TCC3| 0 (|rec_mu_decreasing_TCC3-1| |nil| 3666649609 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|terminating?| CONST-DECL "bool" |pvs0_lang| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|mu| CONST-DECL "posnat" |pvs0_lang| NIL) (|eval| CONST-DECL "Maybe[Val]" |pvs0_lang| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL)) NIL (|rec_mu_decreasing| SUBTYPE "pvs0_props.subexpr" "{x: PVS0Expr_adt[pvs0_props.Val].PVS0Expr | booleans.OR(PVS0Expr_adt[pvs0_props.Val].op1?(x), PVS0Expr_adt[pvs0_props.Val].rec?(x))}"))) (|rec_mu_decreasing_TCC4| 0 (|rec_mu_decreasing_TCC4-1| |nil| 3666649609 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|terminating?| CONST-DECL "bool" |pvs0_lang| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|terminates_expr| CONST-DECL "bool" |pvs0_expr| NIL) (|determined?| CONST-DECL "bool" |pvs0_lang| NIL) (|semantic_rel| CONST-DECL "bool" |pvs0_lang| NIL) (|mu| CONST-DECL "posnat" |pvs0_lang| NIL) (|eval| CONST-DECL "Maybe[Val]" |pvs0_lang| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL)) NIL (|rec_mu_decreasing| SUBTYPE "pvs0_props.vact" "(pvs0_lang[pvs0_props.Val].determined?(pvs0_props.pvs0))"))) (|rec_mu_decreasing| 0 (|rec_mu_decreasing-1| |nil| 3742908649 ("" (SKEEP*) (("" (BETA) (("" (FLATTEN) (("" (SKEEP*) (("" (LEMMA "rec_decreasing") (("" (INST -1 "env" "n" "get_body(pvs0)" "pvs0" "null" "path_ext") (("1" (BETA) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (CASE "val(eval_expr(pvs0)(n,get_arg(subterm_at(get_body(pvs0),path_ext)),env)) = vact") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "mu" 1) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "eval") (("1" (TYPEPRED "min({n: nat |
                                                                     some?(eval_expr(pvs0)
                                                                                    (n, get_body(pvs0),
                                                                                     vact))})") (("1" (INST -2 "n-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (INST -1 "n-1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "semantic_rel_eval_expr") (("2" (ASSERT) (("2" (SKOLEM -1 "m") (("2" (FLATTEN) (("2" (REPLACE -2 :HIDE? T) (("2" (HIDE 2) (("2" (CASE "n<m") (("1" (LEMMA "eval_expr_ge_n") (("1" (INST -1 "pvs0" "n" "m" "get_arg(subterm_at(get_body(pvs0), path_ext))" "env") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "eval_expr_ge_n") (("2" (INST -1 "pvs0" "m" "n" "get_arg(subterm_at(get_body(pvs0), path_ext))" "env") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subterm_at" 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (EXPAND "mu") (("3" (TYPEPRED "min({n: nat | some?(eval(pvs0)(n)(env))})") (("1" (ASSERT) (("1" (EXPAND "eval") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "mu_nonempty") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "pvs0") (("2" (LEMMA "terminating_determined_all") (("2" (INST?) (("2" (ASSERT) (("2" (INST -1 "env") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "valid_path") (("2" (LIFT-IF 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pvs0| SKOLEM-CONST-DECL "(terminating?)" |pvs0_props| NIL) (|terminating?| CONST-DECL "bool" |pvs0_lang| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|reverse| DEF-DECL "list[T]" |list_props| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|terminating_determined_all| FORMULA-DECL NIL |pvs0_lang| NIL) (|env| SKOLEM-CONST-DECL "Val" |pvs0_props| NIL) (|determined?| CONST-DECL "bool" |pvs0_lang| NIL) (|mu_nonempty| FORMULA-DECL NIL |pvs0_lang| NIL) (|semantic_rel_eval_expr| FORMULA-DECL NIL |pvs0_expr| NIL) (< CONST-DECL "bool" |reals| NIL) (|n| SKOLEM-CONST-DECL "posnat" |pvs0_props| NIL) (|m| SKOLEM-CONST-DECL "nat" |pvs0_props| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|eval_expr_ge_n| FORMULA-DECL NIL |pvs0_expr| NIL) (|min| CONST-DECL "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}" |min_nat| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|eval| CONST-DECL "Maybe[Val]" |pvs0_lang| NIL) (|mu| CONST-DECL "posnat" |pvs0_lang| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|eval_expr| DEF-DECL "Maybe[Val]" |pvs0_expr| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|rec_decreasing| FORMULA-DECL NIL |pvs0_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|decreasing_rec_TCC1| 0 (|decreasing_rec_TCC1-1| |nil| 3642438537 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL)) NIL (|decreasing_rec| SUBTYPE "pvs0_props.path" "(pvs0_cc[pvs0_props.Val].valid_path(pvs0_props.body))"))) (|decreasing_rec_TCC2| 0 (|decreasing_rec_TCC2-1| |nil| 3642438537 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL)) NIL (|decreasing_rec| SUBTYPE "pvs0_props.subexpr" "{x: PVS0Expr_adt[pvs0_props.Val].PVS0Expr | booleans.OR(PVS0Expr_adt[pvs0_props.Val].op1?(x), PVS0Expr_adt[pvs0_props.Val].rec?(x))}"))) (|decreasing_rec_TCC3| 0 (|decreasing_rec_TCC3-2| "" 3885311382 ("" (SUBTYPE-TCC) (("" (TYPEPRED "eval_expr[Val]
                    (pvs0!1)
                    (n!1, get_arg[Val](subterm_at(pvs0!1`4, path_ext!1)),
                     env!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|semantic_rel_expr| INDUCTIVE-DECL "bool" |pvs0_expr| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_expr| DEF-DECL "Maybe[Val]" |pvs0_expr| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL)) SHOSTAK (|decreasing_rec| SUBTYPE "pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(pvs0_props.n, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)" "{x: {myv: Maybe[pvs0_props.Val].Maybe | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(myv), booleans.AND(reals.>(pvs0_props.n, 0), FORALL (m: integers.upfrom(pvs0_props.n)): myv = pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(m, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)))} | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(x), pvs0_expr[pvs0_props.Val].semantic_rel_expr(pvs0_props.pvs0)(PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env, Maybe[pvs0_props.Val].val(x)))}")) (|decreasing_rec_TCC3-1| |nil| 3885253571 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decreasing_rec| SUBTYPE "pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(pvs0_props.n, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)" "{x: {myv: Maybe[pvs0_props.Val].Maybe | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(myv), booleans.AND(reals.>(pvs0_props.n, 0), FORALL (m: integers.upfrom(pvs0_props.n)): myv = pvs0_expr[pvs0_props.Val].eval_expr(pvs0_props.pvs0)(m, PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env)))} | booleans.IMPLIES(Maybe[pvs0_props.Val].some?(x), pvs0_expr[pvs0_props.Val].semantic_rel_expr(pvs0_props.pvs0)(PVS0Expr_adt[pvs0_props.Val].get_arg(pvs0_props.subexpr), pvs0_props.env, Maybe[pvs0_props.Val].val(x)))}"))) (|decreasing_rec_TCC4| 0 (|decreasing_rec_TCC3-1| |nil| 3742755759 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decreasing_rec| SUBTYPE "(number_fields.-)(pvs0_props.n, 1)" "nat"))) (|decreasing_rec| 0 (|decreasing_rec-4| "" 3885311768 ("" (SKEEP) (("" (MEASURE-INDUCT "lex2(n, sizepvs0(expr))" ("n" "expr")) (("1" (SKOLEM 1 ("n" "e")) (("1" (FLATTEN) (("1" (SKEEP*) (("1" (EXPAND "eval_expr" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROP) (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "eval_expr" -6) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROP) (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "eval_expr" -6) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 2 3 4 5) (("1" (BETA) (("1" (LABEL "ih" -2) (("1" (COPY "ih") (("1" (INST -1 "n" "get_cond(e)") (("1" (HIDE "ih") (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "eval_expr" -6) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "rec?(e)") (("1" (HIDE 1 3 4 5 6) (("1" (BETA) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (COPY -2) (("1" (LABEL "ih" -1) (("1" (HIDE "ih") (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) NIL NIL) ("3" (SKEEP*) NIL NIL) ("4" (SKEEP*) NIL NIL) ("5" (SKEEP*) (("5" (INST -10 "path") (("5" (FLATTEN) (("5" (REPLACE -9) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP*) NIL NIL) ("7" (SKEEP*) NIL NIL) ("8" (SKEEP*) (("8" (INST -10 "path") (("8" (FLATTEN) (("8" (REPLACE -9) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (SKEEP*) NIL NIL) ("10" (SKEEP*) (("10" (HIDE 2) (("10" (TYPEPRED "eval_expr[Val](pvs0)(n, get_arg[Val](subexpr), env)") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("11" (HIDE 2) (("11" (GRIND) NIL NIL)) NIL) ("12" (HIDE 2) (("12" (SKEEP*) (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|well_founded?| CONST-DECL "bool" |orders| NIL) (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Val| FORMAL-NONEMPTY-TYPE-DECL NIL |pvs0_props| NIL) (|PVS0Expr| TYPE-DECL NIL |PVS0Expr_adt| NIL) (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL) (|ordinal?| DEF-DECL "bool" |ordinals| NIL) (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|sizepvs0| CONST-DECL "[PVS0Expr -> nat]" |pvs0_expr| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|eval_expr_semantic_rel_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES semantic_rel_expr(pvs0)(expr, env, val(myv))}" |pvs0_props| NIL) (|eval_expr_ge_n_j| REC-APPLICATION-JUDGEMENT "{myv: Maybe[Val] |
   some?(myv) IMPLIES
    n > 0 AND FORALL (m: upfrom(n)): myv = eval_expr(pvs0)(m, expr, env)}" |pvs0_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pvs0| SKOLEM-CONST-DECL "PVS0[Val]" |pvs0_props| NIL) (PVS0 TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp2| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|EvalOp1| TYPE-EQ-DECL NIL |pvs0_expr| NIL) (|valid_path| DEF-DECL "bool" |pvs0_cc| NIL) (|Path| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|op1?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_expr| DEF-DECL "Maybe[Val]" |pvs0_expr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|rec?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|eval_conds| DEF-DECL "bool" |pvs0_cc| NIL) (|suffix?| DEF-DECL "bool" |more_list_props| |structures|) (|path_conditions| DEF-DECL "Conditions" |pvs0_cc| NIL) (|subterm_at| DEF-DECL "({res: PVS0Expr | subterm(res, expr)})" |pvs0_cc| NIL) (|subterm| ADT-DEF-DECL "boolean" |PVS0Expr_adt| NIL) (|Conditions| TYPE-EQ-DECL NIL |pvs0_cc| NIL) (|PVS0Bool| TYPE-DECL NIL |PVS0Bool_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|semantic_rel_expr| INDUCTIVE-DECL "bool" |pvs0_expr| NIL) (|get_arg| SHARED-ADT-ACCESSOR-DECL "[{x: PVS0Expr | op1?(x) OR rec?(x)} -> PVS0Expr]" |PVS0Expr_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|e| SKOLEM-CONST-DECL "PVS0Expr[Val[Val]]" |pvs0_props| NIL) (|ite?| ADT-RECOGNIZER-DECL "[PVS0Expr -> boolean]" |PVS0Expr_adt| NIL) (|get_cond| ADT-ACCESSOR-DECL "[(ite?) -> PVS0Expr]" |PVS0Expr_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK) (|decreasing_rec-3| "" 3648034604 ("" (SKEEP) (("" (MEASURE-INDUCT "lex2(n, sizepvs0(expr))" ("n" "expr")) (("1" (SKOLEM 1 ("n" "e")) (("1" (FLATTEN) (("1" (SKEEP*) (("1" (EXPAND "eval_expr" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROP) (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "eval_expr" -6) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROP) (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "eval_expr" -6) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 2 3 4 5) (("1" (BETA) (("1" (LABEL "ih" -2) (("1" (COPY "ih") (("1" (INST -1 "n" "get_cond(e)") (("1" (HIDE "ih") (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "eval_expr" -6) (("1" (REPLACE -3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "rec?(e)") (("1" (HIDE 1 3 4 5 6) (("1" (BETA) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (COPY -2) (("1" (LABEL "ih" -1) (("1" (HIDE "ih") (("1" (INST -4 "path") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) NIL NIL) ("3" (SKEEP*) NIL NIL) ("4" (SKEEP*) NIL NIL) ("5" (SKEEP*) (("5" (INST -10 "path") (("5" (FLATTEN) (("5" (REPLACE -9) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP*) NIL NIL) ("7" (SKEEP*) NIL NIL) ("8" (SKEEP*) (("8" (INST -10 "path") (("8" (FLATTEN) (("8" (REPLACE -9) (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (SKEEP*) NIL NIL) ("10" (SKEEP*) NIL NIL) ("11" (HIDE 2) (("11" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL) (|decreasing_rec-2| "" 3642440033 ("" (SKEEP) (("" (MEASURE-INDUCT "lex2(n, sizepvs0(expr))" ("n" "expr")) (("1" (SKOLEM 1 ("n" "e")) (("1" (FLATTEN) (("1" (SKEEP*) (("1" (EXPAND "eval_expr" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (POSTPONE) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (POSTPONE) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 2 3 4 5) (("1" (BETA) (("1" (LABEL "ih" -2) (("1" (COPY "ih") (("1" (INST -1 "n" "get_cond(e)") (("1" (HIDE "ih") (("1" (SPLIT -1) (("1" (INST -1 "cons(0,path)" "env") (("1" (SPLIT -1) (("1" (ASSERT) (("1" (LABEL "subexpr_props" -4) (("1" (COPY "subexpr_props") (("1" (HIDE "subexpr_props") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REVEAL "ih") (("1" (INST -1 "n" "get_if(e)") (("1" (SPLIT -1) (("1" (INST -1 "cons(1,path)" "env") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "rec?(e)") (("1" (HIDE 1 3 4 5 6) (("1" (BETA) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (COPY -2) (("1" (LABEL "ih" -1) (("1" (HIDE "ih") (("1" (INST -2 "n" "get_arg(e)") (("1" (SPLIT -2) (("1" (INST -1 "cons(0,path)" "env") (("1" (SPLIT -1) (("1" (ASSERT) (("1" (REVEAL "ih") (("1" (INST "ih" "n-1" "body") (("1" (SPLIT -1) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL) ("8" (POSTPONE) NIL NIL) ("9" (POSTPONE) NIL NIL) ("10" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|decreasing_rec-1| |nil| 3642431705 ("" (SKEEP) (("" (INDUCT "expr") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "expr!1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (HIDE -1) (("3" (EXPAND "eval_expr" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (HIDE -1) (("4" (EXPAND "eval_expr" 1) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (HIDE -2) (("5" (SPLIT -1) (("1" (SKEEP) (("1" (INST -1 "cons(0,path)") (("1" (SPLIT -1) (("1" (EXPAND "eval_expr" 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST? -2) (("2" (FLATTEN) (("2" (ASSERT) (("2" (USE "op1_rec_path_ext") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "subterm_append") (("3" (INST -1 "body" "path") (("3" (ASSERT) (("3" (INST -1 "cons(0,null[nat])") (("1" (EXPAND "append " -1) (("1" (EXPAND "append " -1) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (USE "null_path") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "path") (("2" (HIDE-ALL-BUT (1 -2 -3)) (("2" (USE "valid_0_path_ext") (("2" (ASSERT) (("2" (REPLACE -3 :DIR RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "op12_var") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (POSTPONE) NIL NIL) ("7" (SKEEP) (("7" (SPLIT -1) (("1" (HIDE -2) (("1" (SKEEP) (("1" (INST -1 "cons(0,null[nat])") (("1" (SPLIT -1) (("1" (EXPAND "eval_expr" 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("8" (POSTPONE) NIL NIL) ("9" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK)))
