% differs from list theory since takes two types
list_theory2 [T1, T2: TYPE]: THEORY
BEGIN
    IMPORTING list_theory[T1]

    lst, lst1: VAR list[T1]
    lst2: VAR list[T2]
    lst_pair, lst_pair1, lst_pair2: VAR list[[T1, T2]]
    lst_pair_: VAR list[[list[T1], T2]]
    pair: VAR [T1, T2]
    pair_: VAR [list[T1], T2]
    f: VAR [[T1, T2] -> T1]
    x, x1: VAR T1
    y: VAR T2
    n: VAR nat
    
% will be needed for a lemma
first_proj(pair): T1 = pair`1

% receives a list of the form [[x1, y1], ..., [xn, yn]]
% returns [x1, ..., xn]
first_proj(lst_pair): RECURSIVE list[T1] = 
    IF null?(lst_pair) THEN null
    ELSE LET x = car(lst_pair)`1 IN
         cons(x, first_proj(cdr(lst_pair)))
    ENDIF
MEASURE lst_pair BY << 

first_proj(lst_pair_): RECURSIVE list[list[T1]] = 
    IF null?(lst_pair_) THEN null
    ELSE cons(car(lst_pair_)`1, first_proj(cdr(lst_pair_)))
    ENDIF
MEASURE lst_pair_ BY << 

% receives a list of the form [[x1, y1], ..., [xn, yn]]
% returns [y1, ..., yn]
sec_proj(lst_pair): RECURSIVE list[T2] = 
    IF null?(lst_pair) THEN null
    ELSE LET y = car(lst_pair)`2 IN
         cons(y, sec_proj(cdr(lst_pair)))
    ENDIF
MEASURE lst_pair BY << 

first_proj_nth_mem: LEMMA
    n < length(lst_pair) IMPLIES 
    member(nth(lst_pair, n)`1, first_proj(lst_pair)) 

first_proj_is_map: LEMMA
   EXISTS f:
        FORALL lst_pair:  first_proj(lst_pair) = map(f)(lst_pair)

first_proj_mem: LEMMA
   member(x, first_proj(lst_pair)) IFF
   EXISTS pair:
      member(pair, lst_pair) AND x = pair`1

sec_proj_mem: LEMMA
   member(y, sec_proj(lst_pair)) IFF
   EXISTS pair:
      member(pair, lst_pair) AND y = pair`2

sec_proj_append: LEMMA
   member(y, sec_proj(append(lst_pair, lst_pair1))) IFF
   (member(y, sec_proj(lst_pair)) OR member(y, sec_proj(lst_pair1)))

first_proj_mem_flatten: LEMMA
   member(x, flatten(first_proj(lst_pair_))) IFF 
   EXISTS pair_:
   member(pair_, lst_pair_) AND member(x, pair_`1)

END list_theory2
