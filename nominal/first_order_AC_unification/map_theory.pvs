% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%%%%%%%%%%%%%%%%%%%%%%%

map_theory [T1, T2: TYPE]: THEORY
 BEGIN
	IMPORTING list_theory[T1], list_theory[T2]

  f: VAR [T1 -> T2]
  f_set: VAR [T1 -> finite_set[T2]]
  f_lst: VAR [T1 -> list[T1]]
  f_lst2: VAR [list[T1] -> list[T2]]
  f_lst3: VAR [T1 -> list[T2]]

  i, n: VAR nat
  
  x: VAR T2 
  y, y1: VAR T1
  fin_set: VAR finite_set[T2]

  l1, l2: VAR list[T1]
  lst_of_lsts: VAR list[list[T1]]
  mult: VAR list[nat]

map_append2: LEMMA
    map(f)(append(l1, l2)) = append(map(f)(l1), map(f)(l2))

map_member: LEMMA
    member(fin_set, map(f_set)(l1)) IFF 
    EXISTS y:
    member(y, l1) AND fin_set = f_set(y)

map_member2: LEMMA
    member(y, l1) IMPLIES member(f_set(y), map(f_set)(l1))

map_member3: LEMMA
    member(x, map(f)(l1)) = EXISTS (n: below[length(l1)]): x = f(nth(l1, n))

map_member4: LEMMA
    member(x, map(f)(l1)) IFF EXISTS y: member(y, l1) AND x = f(y)
    
mem_union_map: LEMMA
    member(x, Union(list2set(map(f_set)(l1)))) IFF
    EXISTS y:
        member(y, l1) AND member(x, f_set(y))

mem_flatten_map: LEMMA % the next lemma is more specific
    member(y1, flatten(map(f_lst)(l1))) IMPLIES 
    EXISTS y: 
       member(y, l1) AND member(y1, f_lst(y))

mem_flatten_map2: LEMMA
    member(x, flatten(map(f_lst3)(l1))) IFF
    EXISTS y:
       member(y, l1) AND member(x, f_lst3(y))
        
func_flatten_map: LEMMA
    (EXISTS f:
    	FORALL l1: 
        f_lst2(l1) = map(f)(l1))
    IMPLIES
    f_lst2(flatten(lst_of_lsts)) = flatten(map(f_lst2)(lst_of_lsts))

func_flatten_map2: LEMMA
    (f_lst2(null) = null AND FORALL l1, l2: f_lst2(append(l1, l2)) = append(f_lst2(l1), f_lst2(l2))) IMPLIES
    f_lst2(flatten(lst_of_lsts)) = flatten(map(f_lst2)(lst_of_lsts))

remove_map: LEMMA 
    remove(map(f)(l1), n) = map(f)(remove(l1, n))

END map_theory
