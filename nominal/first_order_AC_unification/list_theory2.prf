(list_theory2
 (first_proj_TCC1 0
  (first_proj_TCC1-1 nil 3821910421 ("" (subtype-tcc) nil nil) nil nil
   (first_proj subtype "list_theory2.lst_pair"
    "(list_adt[[list_theory2.T1, list_theory2.T2]].cons?)")))
 (first_proj_TCC2 0
  (first_proj_TCC2-1 nil 3821910421 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (first_proj termination
    "list_theory2.first_proj(list_adt[[list_theory2.T1, list_theory2.T2]].cdr(list_theory2.lst_pair))"
    "nil")))
 (first_proj_TCC3 0
  (first_proj_TCC3-1 nil 3821910421 ("" (subtype-tcc) nil nil) nil nil
   (first_proj subtype "list_theory2.lst_pair"
    "(list_adt[[list_theory2.T1, list_theory2.T2]].cons?)")))
 (first_proj_TCC4 0
  (first_proj_TCC4-1 nil 3830612215 ("" (subtype-tcc) nil nil) nil nil
   (first_proj subtype "list_theory2.lst_pair_"
    "(list_adt[[list_adt[list_theory2.T1].list, list_theory2.T2]].cons?)")))
 (first_proj_TCC5 0
  (first_proj_TCC5-1 nil 3830612215 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (first_proj termination
    "list_theory2.first_proj(list_adt[[list_adt[list_theory2.T1].list, list_theory2.T2]].cdr(list_theory2.lst_pair_))"
    "nil")))
 (sec_proj_TCC1 0
  (sec_proj_TCC1-1 nil 3825875223 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (sec_proj termination
    "list_theory2.sec_proj(list_adt[[list_theory2.T1, list_theory2.T2]].cdr(list_theory2.lst_pair))"
    "nil")))
 (first_proj_nth_mem 0
  (first_proj_nth_mem-1 nil 3824997093
   ("" (induct "lst_pair")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -2)
            (("2" (expand "nth" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "n-1")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "nat" list_theory2 nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil list_theory2 nil)
    (T2 formal-type-decl nil list_theory2 nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (first_proj_is_map 0
  (first_proj_is_map-1 nil 3825166760
   ("" (inst 1 "first_proj")
    (("" (induct "lst_pair")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list_induction formula-decl nil list_adt nil)
    (first_proj const-decl "T1" list_theory2 nil)
    (T2 formal-type-decl nil list_theory2 nil)
    (T1 formal-type-decl nil list_theory2 nil))
   shostak))
 (first_proj_mem 0
  (first_proj_mem-1 nil 3830366047
   ("" (induct "lst_pair")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "first_proj" 1)
            (("2" (prop)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "x")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "pair") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "x")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "pair")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil list_theory2 nil)
    (T2 formal-type-decl nil list_theory2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (first_proj def-decl "list[T1]" list_theory2 nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sec_proj_mem 0
  (sec_proj_mem-1 nil 3832969338
   ("" (induct "lst_pair")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "sec_proj" 1)
            (("2" (prop)
              (("1" (expand "member" -1)
                (("1" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (inst -2 "y")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "pair") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "y")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "pair")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil list_theory2 nil)
    (T2 formal-type-decl nil list_theory2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sec_proj_append 0
  (sec_proj_append-1 nil 3835800662
   ("" (measure-induct "length(lst_pair)" "lst_pair")
    (("" (skolem 1 "lst_pair")
      (("" (prop)
        (("" (skeep)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "append" -1)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten) nil nil)
                     ("2" (flatten)
                      (("2" (expand "sec_proj" -1)
                        (("2" (expand "member" -1)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst -2 "cdr(lst_pair)")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "append" 1)
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (expand "sec_proj" 2)
                        (("2" (expand "member" 2)
                          (("2" (flatten)
                            (("2" (inst -2 "cdr(lst_pair)")
                              (("2"
                                (split -2)
                                (("1"
                                  (inst -1 "lst_pair1" "y")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (sec_proj def-decl "list[T2]" list_theory2 nil)
    (append def-decl "list[T]" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T2 formal-type-decl nil list_theory2 nil)
    (T1 formal-type-decl nil list_theory2 nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (first_proj_mem_flatten 0
  (first_proj_mem_flatten-1 nil 3830612318
   ("" (induct "lst_pair_")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "first_proj" 1)
            (("2" (expand "flatten" 1)
              (("2" (prop)
                (("1" (rewrite "member_append_uni")
                  (("1" (prop)
                    (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                     ("2" (inst -2 "x")
                      (("2" (assert)
                        (("2" (skolem -2 "pair_")
                          (("2" (inst 1 "pair_")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skolem -1 "pair_")
                  (("2" (prop)
                    (("2" (rewrite "member_append_uni")
                      (("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst -3 "x")
                            (("2" (prop)
                              (("2"
                                (inst 1 "pair_")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil list_theory2 nil)
    (list type-decl nil list_adt nil)
    (T2 formal-type-decl nil list_theory2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (first_proj def-decl "list[list[T1]]" list_theory2 nil)
    (flatten def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))