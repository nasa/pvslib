(map_theory
 (map_append 0
  (map_append-1 nil 3807643644
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (assert)
            (("2" (expand "append" 1 1)
              (("2" (expand "map" 1 1)
                (("2" (expand "map" 1 2)
                  (("2" (expand "append" 1 2)
                    (("2" (inst -1 "f" "l2") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (map_append2 0
  (map_append2-1 nil 3807736141
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (map_member 0
  (map_member-1 nil 3823891542
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "member" 1 2)
                (("2" (inst -1 "f_set" "fin_set")
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (hide -2)
                          (("1" (hide -2) (("1" (inst 1 "hd") nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skolem -2 "y")
                            (("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (prop)
                      (("2" (skolem -1 "y")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (member def-decl "bool" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (map_member2 0
  (map_member2-1 nil 3823896686
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (map_member3 0
  (map_member3-1 nil 3823958229
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (case "member(x, map(f)(cons(hd, tail)))")
            (("1" (assert)
              (("1" (expand "map" -1)
                (("1" (expand "member" -1)
                  (("1" (prop)
                    (("1" (inst 1 "0")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (inst? -2)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "n+1")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "EXISTS (n: below[length(cons(hd, tail))]):
         x = f(nth(cons(hd, tail), n))")
              (("1" (skeep)
                (("1" (expand "nth" -1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst? -2)
                        (("2" (inst -2 "x")
                          (("2" (assert)
                            (("2" (expand "map" 2)
                              (("2"
                                (expand "member" 2)
                                (("2"
                                  (prop)
                                  (("2"
                                    (assert)
                                    (("2" (inst 4 "n-1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "below[length(tail)]" map_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (hd skolem-const-decl "T1" map_theory nil)
    (tail skolem-const-decl "list[T1]" map_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (map_member4 0
  (map_member4-1 nil 3824300311
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (expand "member" 1)
              (("2" (case "x = f(hd)")
                (("1" (assert) (("1" (inst 1 "hd") nil nil)) nil)
                 ("2" (assert)
                  (("2" (inst -1 "f" "x")
                    (("2" (prop)
                      (("1" (skeep)
                        (("1" (inst 1 "y") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skeep) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mem_union_map 0
  (mem_union_map-1 nil 3823889075
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "Union" -1)
              (("1" (expand "member" -1)
                (("1" (skolem -1 "A")
                  (("1" (typepred "A")
                    (("1" (expand "extend" -1)
                      (("1" (prop)
                        (("1" (expand "map" -2)
                          (("1" (expand "list2set" -2)
                            (("1" (expand "add" -2)
                              (("1"
                                (prop)
                                (("1"
                                  (inst 1 "hd")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst -4 "f_set" "x")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (skolem -2 "y")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst 1 "y")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 1 3)
                                      (("2"
                                        (expand "member" 1)
                                        (("2"
                                          (expand "Union" 1)
                                          (("2"
                                            (inst 1 "A")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "y")
              (("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (expand "member" 1)
                      (("1" (expand "Union" 1)
                        (("1" (inst 1 "f_set(y)")
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst? -3)
                      (("2" (inst -3 "x")
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (hide -2 -3 -4)
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "Union" -1)
                                  (("1"
                                    (skolem -1 "A")
                                    (("1"
                                      (typepred "A")
                                      (("1"
                                        (expand "Union" 1)
                                        (("1"
                                          (inst 1 "A")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((A skolem-const-decl
     "(extend[setof[T2], finite_set[T2], bool, FALSE](list2set(map(f_set)(tail))))"
     map_theory nil)
    (y skolem-const-decl "T1" map_theory nil)
    (add const-decl "(nonempty?)" sets nil)
    (A skolem-const-decl
     "(extend[setof[T2], finite_set[T2], bool, FALSE]
     (list2set(map(f_set)(cons(hd, tail)))))" map_theory nil)
    (hd skolem-const-decl "T1" map_theory nil)
    (tail skolem-const-decl "list[T1]" map_theory nil)
    (f_set skolem-const-decl "[T1 -> finite_set[T2]]" map_theory nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (injective? const-decl "bool" functions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2set def-decl "set[T]" list2set nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (Union const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mem_flatten_map 0
  (mem_flatten_map-1 nil 3824238534
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "f_lst" "y1")
            (("2" (assert)
              (("2" (expand "map" -2)
                (("2" (expand "flatten" -2)
                  (("2" (rewrite "member_append_uni")
                    (("2" (prop)
                      (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                       ("2" (skeep) (("2" (grind) nil nil)) nil)
                       ("3" (inst 2 "hd") (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (flatten def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mem_flatten_map2 0
  (mem_flatten_map2-1 nil 3825074485
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "f_lst3" "x")
            (("2" (expand "map" 1)
              (("2" (expand "flatten" 1 1)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (rewrite "member_append_uni")
                      (("1" (split -1)
                        (("1" (inst 1 "hd") (("1" (grind) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (skeep)
                            (("2" (inst 1 "y") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (rewrite "member_append_uni" 1)
                      (("2" (prop)
                        (("2" (skeep)
                          (("2" (inst 1 "y") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (flatten def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (func_flatten_map 0
  (func_flatten_map-1 nil 3825003188
   ("" (induct "lst_of_lsts")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (inst -1 "null") (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 1)
            (("2" (skeep)
              (("2" (inst -2 "append(hd, flatten(tail))")
                (("2" (replace -2 1)
                  (("2" (expand "map" 1 2)
                    (("2" (expand "flatten" 1 2)
                      (("2" (rewrite "map_append2")
                        (("2" (case "map(f)(hd) = f_lst2(hd)")
                          (("1" (replace -1 1)
                            (("1"
                              (case "map(f)(flatten(tail)) = flatten(map(f_lst2)(tail))")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (inst -1 "f_lst2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (reveal -3)
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (replace -1 1 :dir rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst 2 "f")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (reveal -4)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (reveal -1)
                            (("2" (inst -1 "hd")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_append2 formula-decl nil map_theory nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (list type-decl nil list_adt nil)
    (flatten def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (func_flatten_map2 0
  (func_flatten_map2-1 nil 3825089208
   ("" (induct "lst_of_lsts")
    (("1" (skeep)
      (("1" (expand "map" 1)
        (("1" (expand "flatten" 1) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 1)
            (("2" (expand "map" 1)
              (("2" (expand "flatten" 1 2)
                (("2" (inst -3 "hd" "flatten(tail)")
                  (("2" (replace -3 1)
                    (("2" (inst -1 "f_lst2")
                      (("2" (assert)
                        (("2" (reveal -2) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (list type-decl nil list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (flatten def-decl "list[T]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (remove_map 0
  (remove_map-1 nil 3848174457
   ("" (induct "l1") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((n!1 skolem-const-decl "nat" map_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T1 formal-type-decl nil map_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T2 formal-type-decl nil map_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak)))