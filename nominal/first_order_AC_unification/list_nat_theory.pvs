% Authors:
%		Gabriel Ferreira Silva (*)
% 		Mauricio Ayala-Rincón (*)
% 		Daniele Nantes Sobrinho (*)
% 		Maribel Fernandez (**)
%		(*) - University of Brasília			(**) - King's College London
%%%%%%%%%%%%%%%%%%%%%%%

list_nat_theory: THEORY
BEGIN 

n, i, j, min, max, inc, c: VAR nat

lst_nat, lst_nat1, lst_nat2: VAR list[nat]

% computes the dot product between two lists
dot_product(lst_nat1, lst_nat2): RECURSIVE nat =
    IF null?(lst_nat1) OR null?(lst_nat2) THEN 0
    ELSE car(lst_nat1) * car(lst_nat2) + dot_product(cdr(lst_nat1), cdr(lst_nat2))
    ENDIF
MEASURE lst_nat1 BY << 

% sum two lists, component by component
sum_lsts(lst_nat1, lst_nat2): RECURSIVE list[nat] =
    IF null?(lst_nat1) OR null?(lst_nat2) THEN null
    ELSE cons(car(lst_nat1) + car(lst_nat2), sum_lsts(cdr(lst_nat1), cdr(lst_nat2)))
    ENDIF
MEASURE lst_nat1 BY << 

% sum every element in a list 
sum(lst_nat): RECURSIVE nat =
   IF null?(lst_nat) THEN 0
   ELSE car(lst_nat) + sum(cdr(lst_nat)) 
   ENDIF 
MEASURE lst_nat BY << 

% given a natural number "c" and a list (a_1, ..., a_n) returns (c a_1, ..., c a_n)
times(c, lst_nat): RECURSIVE list[nat] =
    IF null?(lst_nat) THEN null 
    ELSE cons(c * car(lst_nat), times(c, cdr(lst_nat)))
    ENDIF
MEASURE lst_nat BY << 

all_zero?(lst_nat): bool = (FORALL i: member(i, lst_nat) IMPLIES i = 0)

% lemma
all_0_sum: LEMMA
   (FORALL n: member(n, lst_nat) IMPLIES n = 0) IMPLIES sum(lst_nat) = 0

sum_append: LEMMA
   sum(append(lst_nat1, lst_nat2)) = sum(lst_nat1) + sum(lst_nat2)

sum_lsts_len: LEMMA 
   length(lst_nat1) = length(lst_nat2) IMPLIES length(sum_lsts(lst_nat1, lst_nat2)) = length(lst_nat1) 

END list_nat_theory
