(diophantine
 (vec_ith_TCC1 0
  (vec_ith_TCC1-1 nil 3845307871 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (vec_ith subtype "(number_fields.-)(diophantine.n, 1)" "nat")))
 (vec_ith_TCC2 0
  (vec_ith_TCC2-1 nil 3845307871 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (vec_ith subtype "(number_fields.-)(diophantine.i, 1)" "nat")))
 (vec_ith_TCC3 0
  (vec_ith_TCC3-1 nil 3845307871 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (vec_ith subtype "(number_fields.-)(diophantine.n, 1)" "nat")))
 (vec_ith_TCC4 0
  (vec_ith_TCC4-1 nil 3845307871 ("" (termination-tcc) nil nil) nil nil
   (vec_ith termination
    "diophantine.vec_ith((number_fields.-)(diophantine.i, 1), diophantine.j, (number_fields.-)(diophantine.n, 1))"
    "nil")))
 (lcm_TCC1 0
  (lcm_TCC1-1 nil 3803482194
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?" -1)
        (("" (inst -1 "a1 * a2")
          (("" (expand "member")
            (("" (typepred "a1")
              (("" (typepred "a2")
                (("" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "divides" 1)
                    (("2" (inst 1 "a1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   SHOSTAK
   (lcm subtype
        "{k: integers.posnat | booleans.AND(divides.divides(diophantine.a1, k), divides.divides(diophantine.a2, k))}"
        "(sets[posnat].nonempty?)")))
 (get_new_value_lst_TCC1 0
  (get_new_value_lst_TCC1-1 nil 3803892545 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (get_new_value_lst subtype "diophantine.y" "nat")))
 (get_new_value_lst_TCC2 0
  (get_new_value_lst_TCC2-1 nil 3803892545 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst subtype "diophantine.value_lst"
    "(list_adt[nat].cons?)")))
 (get_new_value_lst_TCC3 0
  (get_new_value_lst_TCC3-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst termination
    "diophantine.get_new_value_lst(diophantine.k, diophantine.a1, list_adt[nat].cdr(diophantine.value_lst))"
    "nil")))
 (get_new_value_lst_TCC4 0
  (get_new_value_lst_TCC4-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst subtype "diophantine.value_lst"
    "(list_adt[nat].cons?)")))
 (get_new_value_lst_TCC5 0
  (get_new_value_lst_TCC5-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get_new_value_lst termination
    "diophantine.get_new_value_lst(diophantine.k, diophantine.a1, list_adt[nat].cdr(diophantine.value_lst))"
    "nil")))
 (get_new_value_lst_TCC6 0
  (get_new_value_lst_TCC6-1 nil 3803927799 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (get_new_value_lst subtype "diophantine.value_lst"
    "(list_adt[nat].cons?)")))
 (get_lst_dio_matrix_TCC1 0
  (get_lst_dio_matrix_TCC1-1 nil 3803893135 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_dio_matrix subtype "diophantine.lst_dio_matrix"
    "(list_adt[dio_matrix].cons?)")))
 (get_lst_dio_matrix_TCC2 0
  (get_lst_dio_matrix_TCC2-1 nil 3803920303 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_dio_matrix termination
    "diophantine.get_lst_dio_matrix(list_adt[nat].cdr(diophantine.value_lst), list_adt[dio_matrix].cdr(diophantine.lst_dio_matrix))"
    "nil")))
 (find_vectors_TCC1 0
  (find_vectors_TCC1-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   SHOSTAK (find_vectors subtype "diophantine.line1" "list[nat]")))
 (find_vectors_TCC2 0
  (find_vectors_TCC2-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK
   (find_vectors subtype "diophantine.mult_t"
    "(list_adt[posnat].cons?)")))
 (find_vectors_TCC3 0
  (find_vectors_TCC3-1 nil 3803482194
   ("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil) nil
   SHOSTAK
   (find_vectors subtype "diophantine.mult_t"
    "(list_adt[posnat].cons?)")))
 (find_vectors_TCC4 0
  (find_vectors_TCC4-1 nil 3803482194
   ("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (length def-decl "nat" list_props nil))
   SHOSTAK
   (find_vectors termination
    "diophantine.find_vectors(list_adt[posnat].cdr(diophantine.mult_t))"
    "nil")))
 (find_vectors_TCC5 0
  (find_vectors_TCC5-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK
   (find_vectors subtype "diophantine.mult_t"
    "(list_adt[posnat].cons?)")))
 (dio_solver_TCC1 0
  (dio_solver_TCC1-1 nil 3803482194 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (dio_solver subtype "(number_fields.-)(diophantine.bound, 1)"
    "nat")))
 (dio_solver_TCC2 0
  (dio_solver_TCC2-1 nil 3803482194 ("" (tcc) nil nil) nil nil
   (dio_solver termination
    "diophantine.dio_solver(diophantine.mult_t1, diophantine.mult_t2, (number_fields.-)(diophantine.bound, 1))"
    "nil")))
 (prod_TCC1 0
  (prod_TCC1-1 nil 3807737143 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (prod subtype "diophantine.mult_t" "(list_adt[posnat].cons?)")))
 (prod_TCC2 0
  (prod_TCC2-1 nil 3807737143 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (prod termination
    "diophantine.prod(list_adt[posnat].cdr(diophantine.mult_t))(list_adt[nat].cdr(diophantine.value_lst))"
    "nil")))
 (dio_matrix_correct?_TCC1 0
  (dio_matrix_correct?_TCC1-1 nil 3807737143 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (row_cor? const-decl "bool" diophantine nil))
   nil
   (dio_matrix_correct? subtype "diophantine.dio_matrix"
    "(list_adt[list[nat]].cons?)")))
 (dio_matrix_correct?_TCC2 0
  (dio_matrix_correct?_TCC2-1 nil 3807737143
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (row_cor? const-decl "bool" diophantine nil))
   nil
   (dio_matrix_correct? termination
    "diophantine.dio_matrix_correct?(list_adt[list[nat]].cdr(diophantine.dio_matrix), diophantine.mult_t1, diophantine.mult_t2)"
    "nil")))
 (dio_matrix_correct?_TCC3 0
  (dio_matrix_correct?_TCC3-1 nil 3807737143 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   nil
   (dio_matrix_correct? subtype "diophantine.dio_matrix"
    "(list_adt[list[nat]].cons?)")))
 (get_linear_comb_TCC1 0
  (get_linear_comb_TCC1-1 nil 3844966017 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_linear_comb termination
    "diophantine.get_linear_comb(list_adt[list[nat]].cdr(diophantine.dio_matrix), list_adt[nat].cdr(diophantine.coef), diophantine.n)"
    "nil")))
 (construct_submatrix_TCC1 0
  (construct_submatrix_TCC1-1 nil 3845890014
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (all_zero? const-decl "bool" list_nat_theory nil))
   nil
   (construct_submatrix termination
    "diophantine.construct_submatrix(list_adt[list[nat]].cdr(diophantine.dio), list_theory[nat].elim_col1(diophantine.coef_matrix))"
    "nil")))
 (construct_submatrix_TCC2 0
  (construct_submatrix_TCC2-1 nil 3845890014
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (all_zero? const-decl "bool" list_nat_theory nil))
   nil
   (construct_submatrix termination
    "diophantine.construct_submatrix(list_adt[list[nat]].cdr(diophantine.dio), list_theory[nat].elim_col1(diophantine.coef_matrix))"
    "nil")))
 (lcm_integer_pred 0
  (lcm_integer_pred-1 nil 3845311909
   ("" (skeep)
    (("" (lemma "min_def")
      (("" (inst -1 "lcm(a1, a2)" "_")
        ((""
          (inst -1 "{k: posnat | divides(a1, k) AND divides(a2, k)}")
          (("1" (prop)
            (("1" (expand "minimum?" -2)
              (("1" (prop)
                (("1" (rewrite "div_simple" :dir rl)
                  (("1" (expand "divides" -2) (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "lcm" 2) (("2" (propax) nil nil)) nil))
            nil)
           ("2" (lemma "lcm_TCC1") (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (min_def formula-decl nil min_nat nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (minimum? const-decl "bool" min_nat nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (div_simple formula-decl nil integer_props nil)
    (lcm_TCC1 subtype-tcc nil diophantine nil)
    (lcm const-decl "posnat" diophantine nil))
   shostak))
 (lcm_sym 0
  (lcm_sym-1 nil 3845313234
   ("" (skeep)
    (("" (expand "lcm" 1)
      ((""
        (case "{k: posnat | divides(a1, k) AND divides(a2, k)} = {k: posnat | divides(a2, k) AND divides(a1, k)}")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (decompose-equality 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lcm const-decl "posnat" diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (max_lcm_cor 0
  (max_lcm_cor-1 nil 3845366092
   ("" (measure-induct "length(mult_t1)" "mult_t1")
    (("" (skolem 1 "mult_t1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "max_lcm" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (lemma "select_greater_lt[nat]")
                  (("3"
                    (inst -1
                     "map(lcm)(cartesian_product(mult_t1, mult_t2))"
                     "lcm(a1, a2)")
                    (("3" (assert)
                      (("3" (hide 4)
                        (("3" (rewrite "map_member4")
                          (("3" (inst 1 "(a1, a2)")
                            (("3" (assert)
                              (("3"
                                (lemma "cart_prod_mem[posnat]")
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_greater_lt formula-decl nil list_theory nil)
    (map_member4 formula-decl nil map_theory nil)
    (cart_prod_mem formula-decl nil list_theory nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_lcm const-decl "nat" diophantine nil)
    (lcm const-decl "posnat" diophantine nil)
    (<= const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (prod_get_repeat_lst0 0
  (prod_get_repeat_lst0-1 nil 3807738288
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("a1" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "prod" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("2" (expand "get_repeat_lst" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_repeat_lst" 2)
                        (("2" (assert) (("2" (inst? -1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (prod_equiv_dot_product 0
  (prod_equiv_dot_product-1 nil 3809283947
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "prod" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "dot_product" 2)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (dot_product_zero 0
  (dot_product_zero-1 nil 3844973157
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" 1)
            (("2" (expand "get_repeat_lst" 1)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (split 1)
                    (("1" (assert) nil nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (decompose-equality 1)
                          (("1" (expand "dot_product" -3)
                            (("1" (lift-if)
                              (("1"
                                (split -3)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (case "hd > 0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (case
                                           "dot_product(tail, cdr(mult_t)) = 0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred
                                                 "car(mult_t)")
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (rewrite
                                                     "zero_times3")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "length" -2 1)
                            (("2" (expand "length" -2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -2 "cdr(mult_t)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "dot_product" -2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (zero_times3 formula-decl nil real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dot_product_get_repeat_lst0 0
  (dot_product_get_repeat_lst0-1 nil 3845370211
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "dot_product" 1)
            (("2" (grind)
              (("2" (typepred "mult_t") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dot_product_get_repeat_lst02 0
  (dot_product_get_repeat_lst02-1 nil 3846539039
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "dot_product" 1)
            (("2" (lift-if) (("2" (prop) (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dot_product_split 0
  (dot_product_split-1 nil 3845066253
   ("" (induct "mult_t1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dot_product" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -1 "cdr(sol)") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dot_product_gt_TCC1 0
  (dot_product_gt_TCC1-1 nil 3845141431 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (dot_product_gt subtype "diophantine.i"
    "below[length[nat](value_lst)]")))
 (dot_product_gt_TCC2 0
  (dot_product_gt_TCC2-1 nil 3845143632 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (dot_product_gt subtype
    "list_props[posnat].length(diophantine.mult_t)" "nznum")))
 (dot_product_gt 0
  (dot_product_gt-1 nil 3845141431
   ("" (measure-induct "length(value_lst)" "value_lst")
    (("1" (skolem 1 "value_lst")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "dot_product" -2)
            (("1" (lift-if)
              (("1" (split -2)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2"
                    (name-replace "a1x1"
                     "car(value_lst) * car(mult_t)")
                    (("2" (case "a1x1 >= bound/length(mult_t)")
                      (("1" (inst 3 "0")
                        (("1" (expand "nth" 3)
                          (("1" (expand "a1x1")
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (name-replace "B" "bound")
                        (("2" (name-replace "m" "length(mult_t)")
                          (("2" (inst -2 "cdr(value_lst)")
                            (("2" (prop)
                              (("1"
                                (case "m >= 1")
                                (("1"
                                  (inst -2 "B - a1x1" "cdr(mult_t)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (name-replace
                                           "xi"
                                           "nth(cdr(mult_t), i)")
                                          (("1"
                                            (name-replace
                                             "ai"
                                             "nth(cdr(value_lst), i)")
                                            (("1"
                                              (inst 4 "i+1")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "m" 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "nth" 1)
                                                  (("2"
                                                    (reveal -1 -2)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -7
                                                           3
                                                           4
                                                           -6)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (case
                                                               "length(cdr(mult_t)) = m-1")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "div_cancel1")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "m"
                                                                       "(B - a1x1) / (m - 1)")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "times_div1")
                                                                            (("1"
                                                                              (rewrite
                                                                               "times_div1")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "div_div2")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "minus_div2"
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (case
                                                                                     "m * m - m = m * (m - 1)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "div_div1"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "div_cancel1")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "m"
                                                                                               "m-1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "ge_cut")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "ai * xi"
                                                                                                       "_"
                                                                                                       "B/m")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "((B / (m - 1)) - a1x1 * m / (m * (m - 1)))")
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "a1x1 * m < B")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "ge_cut")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "((B / (m - 1)) - a1x1 * m / (m * m - m))"
                                                                                                                       "((B / (m - 1)) - B / (m * m - m))"
                                                                                                                       "B/m")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "both_sides_minus_ge2")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "a1x1 * m / (m * m - m)"
                                                                                                                                 "B / (m * m - m)"
                                                                                                                                 "(B / (m - 1))")
                                                                                                                                (("1"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     2
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "both_sides_div_pos_ge1")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "m > 1")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "m * m - m = m * (m -1)")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "pos_times_ge")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "pos_times_gt")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (case
                                                                                                                                               "m = 1")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "B"
                                                                                                                                                   4)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -11)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "m"
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "B"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "length"
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "length"
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (prop)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "m * m - m = m * (m -1)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "((B / (m - 1)) - B / (m * (m - 1))) = B / m")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "minus_div1")
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "cross_mult")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (grind)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "a1x1 < B /m")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "div_mult_pos_lt2")
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "m"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "m" -3)
                                        (("2"
                                          (expand "length" -3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 5)
                                    (("2"
                                      (lemma "le_cut")
                                      (("2"
                                        (inst -1 "a1x1" "a1x1 * m" "B")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (lemma "le_times_le_pos")
                                              (("1"
                                                (inst
                                                 -1
                                                 "1"
                                                 "a1x1"
                                                 "a1x1"
                                                 "m")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "div_mult_pos_le1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "m"
                                                 "a1x1"
                                                 "B")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "m" 1)
                                  (("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1 2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (expand "length" 1)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_div2 formula-decl nil real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_div1 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_minus_ge2 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (pos_times_ge formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (ge_cut formula-decl nil extra_real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (times_div1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel1 formula-decl nil real_props nil)
    (le_cut formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vec_ith_len 0
  (vec_ith_len-1 nil 3845322725
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "vec_ith" 1)
          (("2" (lift-if)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "length" 1)
                  (("1" (rewrite "get_repeat_lst_len") nil nil)) nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_len formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (vec_ith def-decl "list[nat]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (vec_ith_cor 0
  (vec_ith_cor-1 nil 3845322801
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skolem 1 "n")
      (("2" (prop)
        (("2" (skeep)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand "vec_ith" 1)
                (("1" (lift-if)
                  (("1" (split 1)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (expand "nth" 2 1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (assert) nil nil)
                             ("2" (inst -2 "i-1" "j" "n1 -1")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "vec_ith_len")
                                  (("1"
                                    (rewrite "vec_ith_len")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "vec_ith" 2)
                (("2" (lift-if)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "nth" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (assert) nil nil)
                             ("2" (lemma "get_repeat_lst_nth[nat]")
                              (("2"
                                (inst -1 "n1 -1" "n" "0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "vec_ith_len")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "nth" 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (inst -1 "i-1" "j" "n1 - 1")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_nth formula-decl nil list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec_ith_len formula-decl nil diophantine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (vec_ith def-decl "list[nat]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (vec_ith_dot_product_TCC1 0
  (vec_ith_dot_product_TCC1-1 nil 3845369721 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (vec_ith_dot_product subtype "diophantine.i"
    "below[length[posnat](mult_t)]")))
 (vec_ith_dot_product 0
  (vec_ith_dot_product-1 nil 3845369721
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "vec_ith" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (replace -1)
                  (("2" (expand "vec_ith" 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "dot_product" 2)
                          (("2" (expand "nth" 2)
                            (("2" (lemma "prod_equiv_dot_product")
                              (("2"
                                (rewrite "dot_product_get_repeat_lst0")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "vec_ith" 3)
                  (("3" (lift-if)
                    (("3" (assert)
                      (("3" (expand "dot_product" 3 1)
                        (("3" (expand "nth" 3 1)
                          (("3" (inst -2 "i-1" "j" "n-1")
                            (("3" (assert) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (prod_equiv_dot_product formula-decl nil diophantine nil)
    (dot_product_get_repeat_lst0 formula-decl nil diophantine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (vec_ith def-decl "list[nat]" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (times0 0
  (times0-1 nil 3845107323
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (times1 0
  (times1-1 nil 3845107348
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (times_len 0
  (times_len-1 nil 3845131505
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (times_nth_TCC1 0
  (times_nth_TCC1-1 nil 3846532173
   ("" (skeep) (("" (rewrite "times_len") nil nil)) nil)
   ((times_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (times_nth subtype "diophantine.i"
    "below[length[nat](times(n, value_lst))]")))
 (times_nth 0
  (times_nth-1 nil 3846532176
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "times" 1)
            (("2" (expand "nth" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("2" (inst?)
                    (("1" (grind) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "times_len") nil nil)) nil)) nil))
    nil)
   ((times_len formula-decl nil diophantine nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (times def-decl "list[nat]" list_nat_theory nil))
   shostak))
 (sum0_get_repeat_lst 0
  (sum0_get_repeat_lst-1 nil 3849773642
   ("" (induct " value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (flatten)
        (("3" (split 1)
          (("1" (flatten)
            (("1" (expand "sum" -1)
              (("1" (case "hd = 0")
                (("1" (expand "length" 1 1)
                  (("1" (expand "get_repeat_lst" 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (replace -3) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 -3 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "sum" 1 1)
              (("2" (hide -2)
                (("2" (expand "length" -1)
                  (("2" (expand "get_repeat_lst" -1)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (decompose-equality -1)
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_lsts_sym 0
  (sum_lsts_sym-1 nil 3845132812
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "sum_lsts" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("2" (inst -1 "cdr(coef)") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_lsts0 0
  (sum_lsts0-1 nil 3845107371
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_lsts_times 0
  (sum_lsts_times-1 nil 3845385646
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (sum_lsts_nth_TCC1 0
  (sum_lsts_nth_TCC1-1 nil 3846531735
   ("" (skeep) (("" (use "sum_lsts_len") (("" (assert) nil nil)) nil))
    nil)
   ((sum_lsts_len formula-decl nil list_nat_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sum_lsts_nth subtype "diophantine.i"
    "below[length[nat](sum_lsts(value_lst, coef))]")))
 (sum_lsts_nth_TCC2 0
  (sum_lsts_nth_TCC2-1 nil 3846531735 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (sum_lsts_nth subtype "diophantine.i" "below[length[nat](coef)]")))
 (sum_lsts_nth 0
  (sum_lsts_nth-1 nil 3846531735
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "sum_lsts" 1)
                  (("1" (lift-if)
                    (("1" (prop) (("1" (grind) nil nil)) nil)) nil))
                  nil)
                 ("2" (expand "sum_lsts" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst -1 "cdr(coef)" "i-1")
                        (("1" (assert) (("1" (grind) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "sum_lsts_len")
          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sum_lsts_len formula-decl nil list_nat_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil))
   shostak))
 (sum_lsts_assoc 0
  (sum_lsts_assoc-1 nil 3845382672
   ("" (induct "sol1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "sum_lsts" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "sum_lsts" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "sum_lsts" 2 3)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "sum_lsts" 2 3)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (decompose-equality 2)
                                    (("2"
                                      (inst -1 "cdr(sol2)" "cdr(sol3)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (expand "sum_lsts" 1 4)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sum_lsts4 0
  (sum_lsts4-1 nil 3845383521
   ("" (skeep)
    (("" (rewrite "sum_lsts_assoc")
      (("" (rewrite "sum_lsts_assoc")
        ((""
          (case "sum_lsts(sol2, sum_lsts(sol3, sol4)) = sum_lsts(sol3, sum_lsts(sol2,
 sol4))")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (rewrite "sum_lsts_assoc" :dir rl)
              (("2" (rewrite "sum_lsts_sym" 1 :dir rl)
                (("2" (rewrite "sum_lsts_assoc") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_lsts_assoc formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sum_lsts_sym formula-decl nil diophantine nil))
   shostak))
 (sum_lsts_suf_TCC1 0
  (sum_lsts_suf_TCC1-1 nil 3845318114 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (sum_lsts_suf subtype "diophantine.i" "below[length[nat](sol1)]")))
 (sum_lsts_suf 0
  (sum_lsts_suf-1 nil 3845318120
   ("" (induct "sol")
    (("1" (skeep)
      (("1" (expand "length" -1)
        (("1" (lift-if)
          (("1" (assert)
            (("1" (prop)
              (("1" (inst 1 "null") (("1" (grind) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -2 1)
            (("2" (expand "length" -2 2)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -2 "cdr(sol1)")
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (skolem -1 "cdr_sol2")
                            (("1" (prop)
                              (("1"
                                (inst
                                 2
                                 "cons(hd - car(sol1), cdr_sol2)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (inst -4 "0")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (skeep)
                              (("2"
                                (inst -3 "i+1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil))
   shostak))
 (sum_lsts_split 0
  (sum_lsts_split-1 nil 3845378784
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (prop)
          (("1" (expand "split" 1)
            (("1" (expand "get_lst_until_n" 1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "split" 1)
            (("2" (expand "get_lst_after_n" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2"
                            (inst -1 "cdr(sol)" "cdr(sol1)"
                             "cdr(sol2)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (sum_lsts_dot_product 0
  (sum_lsts_dot_product-1 nil 3845379123
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dot_product" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (lift-if) (("1" (grind) nil nil)) nil)
                 ("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (lift-if) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (get_new_value_lst_len 0
  (get_new_value_lst_len-1 nil 3808162744
   ("" (induct "value_lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_new_value_lst_nth_TCC1 0
  (get_new_value_lst_nth_TCC1-1 nil 3808155006
   ("" (skeep) (("" (rewrite "get_new_value_lst_len") nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_new_value_lst_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (get_new_value_lst_nth subtype "diophantine.n"
    "below[length[nat](get_new_value_lst(k, a1, value_lst))]")))
 (get_new_value_lst_nth 0
  (get_new_value_lst_nth-1 nil 3808162683
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "get_new_value_lst" 1)
                  (("1" (expand "nth" -4)
                    (("1" (assert)
                      (("1" (expand "nth" 1) (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 2)
                  (("2" (assert)
                    (("2" (inst -1 "a1" "k" "n-1")
                      (("2" (expand "nth" -3) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "get_new_value_lst_len") nil nil))
        nil))
      nil))
    nil)
   ((get_new_value_lst_len formula-decl nil diophantine nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   SHOSTAK))
 (put_in_head_matrix? 0
  (put_in_head_matrix?-1 nil 3808145448
   ("" (induct "dio")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("row" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" 1)
            (("2" (expand "matrix?" 1)
              (("2" (expand "matrix?" -2)
                (("2" (assert)
                  (("2" (split -2)
                    (("1" (flatten)
                      (("1" (expand "length" 1 1)
                        (("1" (assert)
                          (("1" (inst? -3) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK))
 (put_in_head_mem 0
  (put_in_head_mem-1 nil 3808149956
   ("" (induct "dio")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("row" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -2)
            (("2" (expand "member" -2)
              (("2" (split -2)
                (("1" (grind) nil nil)
                 ("2" (inst? -2)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   SHOSTAK))
 (get_lst_dio_matrix_matrix? 0
  (get_lst_dio_matrix_matrix?-1 nil 3808144710
   ("" (induct "value_lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_dio_matrix" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (hide 1)
                  (("2" (expand "flatten" 1)
                    (("2" (rewrite "matrix_append")
                      (("2" (prop)
                        (("1" (lemma "put_in_head_matrix?")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (inst? -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (reveal 3)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "cdr(lst_dio_matrix)" "n")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst -2 "dio")
                                (("2"
                                  (assert)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (hide 1 2)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (reveal 3)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (matrix_append formula-decl nil list_theory nil)
    (put_in_head_matrix? formula-decl nil diophantine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (flatten def-decl "list[T]" list_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK))
 (get_lst_dio_matrix_len 0
  (get_lst_dio_matrix_len-1 nil 3808149827
   ("" (induct "value_lst" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_dio_matrix" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "length" 2 1)
                  (("2" (expand "length" 2 2)
                    (("2" (expand "length" 2 3)
                      (("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_min application-judgement "{k: posint | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_dio_matrix_mem_nth_TCC1 0
  (get_lst_dio_matrix_mem_nth_TCC1-1 nil 3808149048
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth subtype "diophantine.row"
    "(list_adt[nat].cons?)")))
 (get_lst_dio_matrix_mem_nth_TCC2 0
  (get_lst_dio_matrix_mem_nth_TCC2-1 nil 3808149048
   ("" (skeep)
    (("" (rewrite "get_lst_dio_matrix_len") (("" (assert) nil nil))
      nil))
    nil)
   ((get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth subtype "diophantine.n"
    "below[length[nat](value_lst)]")))
 (get_lst_dio_matrix_mem_nth_TCC3 0
  (get_lst_dio_matrix_mem_nth_TCC3-1 nil 3808153060
   ("" (skeep)
    (("" (rewrite "get_lst_dio_matrix_len") (("" (assert) nil nil))
      nil))
    nil)
   ((get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth subtype "diophantine.n"
    "below[length[dio_matrix](lst_dio_matrix)]")))
 (get_lst_dio_matrix_mem_nth 0
  (get_lst_dio_matrix_mem_nth-1 nil 3808149147
   ("" (measure-induct "length(lst_dio_matrix)" "lst_dio_matrix")
    (("1" (skolem 1 "lst_dio_matrix")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "get_lst_dio_matrix" -2)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "nth" -1)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (lemma "put_in_head_mem")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 4)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "cdr(lst_dio_matrix)")
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "nth" 4)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (reveal -2)
                                          (("1"
                                            (inst
                                             -1
                                             "cdr(lst_dio_matrix)")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (inst
                                                 -1
                                                 "n-1"
                                                 "row"
                                                 "cdr(value_lst)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 5)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "get_lst_dio_matrix_len")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "get_lst_dio_matrix_len")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (hide -2 -3 1)
          (("2" (lemma "get_lst_dio_matrix_len")
            (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (hide -1 -2 -3) (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "get_lst_dio_matrix_len")
          (("4" (hide -3 1)
            (("4" (inst? -1) (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep) (("5" (hide -1 -2) (("5" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (put_in_head_mem formula-decl nil diophantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_lst_dio_matrix_mem_nth2_TCC1 0
  (get_lst_dio_matrix_mem_nth2_TCC1-1 nil 3845054297
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_lst_dio_matrix_mem_nth2 subtype "diophantine.row"
    "(list_adt[nat].cons?)")))
 (get_lst_dio_matrix_mem_nth2 0
  (get_lst_dio_matrix_mem_nth2-1 nil 3845054324
   ("" (measure-induct "length(value_lst)" "value_lst")
    (("1" (skolem 1 "value_lst")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "get_lst_dio_matrix" 2 1)
            (("1" (lift-if)
              (("1" (split 2)
                (("1" (flatten)
                  (("1" (hide -2 1)
                    (("1" (skolem -2 "n")
                      (("1" (flatten) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide 1 2)
                    (("2" (skolem -2 "n")
                      (("2" (flatten)
                        (("2" (case "n = 0")
                          (("1" (expand "flatten" 1)
                            (("1" (rewrite "member_append_uni")
                              (("1"
                                (prop)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (rewrite "put_in_head_mem_iff")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "flatten" 2)
                            (("2" (rewrite "member_append_uni")
                              (("2"
                                (prop)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (inst -1 "cdr(value_lst)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst
                                         -1
                                         "cdr(lst_dio_matrix)"
                                         "row")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst 1 "n-1")
                                            (("1"
                                              (hide 3)
                                              (("1"
                                                (expand "nth" -3 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3 -4)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil)
     ("3" (grind) nil nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (put_in_head_mem_iff formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (flatten def-decl "list[T]" list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (get_lst_dio_matrix_mem 0
  (get_lst_dio_matrix_mem-1 nil 3846083284
   ("" (induct "lst_dio_matrix")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_dio_matrix" -2)
            (("2" (lift-if)
              (("2" (split -2)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "flatten" -1)
                    (("2" (rewrite "member_append_uni")
                      (("2" (prop)
                        (("1" (inst 2 "0") (("1" (grind) nil nil)) nil)
                         ("2" (inst -2 "row" "cdr(value_lst)")
                          (("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (inst 2 "j+1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member_append_uni formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (flatten def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (get_lst_dio_matrix_all_dif_rows 0
  (get_lst_dio_matrix_all_dif_rows-1 nil 3846085452
   ("" (measure-induct "length(lst_dio_matrix)" "lst_dio_matrix")
    (("" (skolem 1 "lst_dio_matrix")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_dio_matrix" 1)
            (("" (split 1)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "all_dif_rows?" 3)
                  (("2" (skeep)
                    (("2" (hide -4)
                      (("2" (hide -1 -2)
                        (("2" (expand "flatten" -1)
                          (("2" (rewrite "nth_append_uni" -1)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "nth_append_uni")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (use "put_in_head_nth[nat]")
                                        (("1"
                                          (rewrite "put_in_head_len")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (use
                                                   "put_in_head_nth[nat]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (decompose-equality
                                                         -3)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "car(lst_dio_matrix)")
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               "all_dif_rows?"
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "put_in_head_len")
                                        (("2"
                                          (name-replace
                                           "dio1"
                                           "car(lst_dio_matrix)")
                                          (("2"
                                            (name-replace
                                             "row2"
                                             "nth(flatten(get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))), j - length(dio1))")
                                            (("1"
                                              (lemma
                                               "get_lst_dio_matrix_mem")
                                              (("1"
                                                (inst
                                                 -1
                                                 "cdr(lst_dio_matrix)"
                                                 "row2"
                                                 "cdr(value_lst)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (skolem -1 "j1")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "put_in_head_mem")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (rewrite
                                                                   "put_in_head_nth")
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "all_dif_values?"
                                                                         -11)
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           "0"
                                                                           "j1+1")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "row2" 1)
                                                      (("2"
                                                        (rewrite
                                                         "member_nth_uni")
                                                        (("2"
                                                          (reveal -5)
                                                          (("2"
                                                            (expand
                                                             "flatten"
                                                             -1)
                                                            (("2"
                                                              (rewrite
                                                               "length_append"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "put_in_head_len")
                                                                (("2"
                                                                  (expand
                                                                   "dio1"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal -2)
                                    (("2"
                                      (expand "flatten" -1)
                                      (("2"
                                        (rewrite "length_append")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "put_in_head_len")
                                  (("2"
                                    (name-replace
                                     "dio1"
                                     "car(lst_dio_matrix)")
                                    (("2"
                                      (rewrite "nth_append_uni" -1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "put_in_head_nth")
                                            (("1"
                                              (name-replace
                                               "rowi"
                                               "nth(flatten(get_lst_dio_matrix(cdr(value_lst), cdr(lst_dio_matrix))), i - length(dio1))")
                                              (("1"
                                                (lemma
                                                 "get_lst_dio_matrix_mem")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr(lst_dio_matrix)"
                                                   "rowi"
                                                   "cdr(value_lst)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (skolem -1 "j1")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "put_in_head_mem")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -7)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "all_dif_values?"
                                                                       -10)
                                                                      (("1"
                                                                        (inst
                                                                         -10
                                                                         "0"
                                                                         "j1+1")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "rowi")
                                                      (("2"
                                                        (rewrite
                                                         "member_nth_uni")
                                                        (("2"
                                                          (reveal -4)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "flatten"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "length_append"
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "put_in_head_len")
                                                                  (("2"
                                                                    (expand
                                                                     "dio1"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "put_in_head_len")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "put_in_head_len")
                                            (("2"
                                              (reveal -4)
                                              (("2"
                                                (inst
                                                 -1
                                                 "cdr(lst_dio_matrix)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "cdr(value_lst)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "all_dif_rows?"
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "i-length(dio1)"
                                                           "j - length(dio1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (reveal
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "flatten"
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "length_append"
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "put_in_head_len")
                                                                      (("1"
                                                                        (expand
                                                                         "dio1"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "flatten"
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "put_in_head_len")
                                                                      (("2"
                                                                        (expand
                                                                         "dio1"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -3
                                                           "dio")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 -2)
                                                        (("3"
                                                          (expand
                                                           "all_dif_values?")
                                                          (("3"
                                                            (skolem
                                                             1
                                                             ("i1"
                                                              "j1"))
                                                            (("3"
                                                              (prop)
                                                              (("3"
                                                                (inst
                                                                 -4
                                                                 "i1+1"
                                                                 "j1+1")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal -3)
                                        (("2"
                                          (expand "flatten" -1)
                                          (("2"
                                            (rewrite
                                             "length_append"
                                             -1)
                                            (("2"
                                              (expand "dio1" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (reveal -1)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "flatten" -1)
                                  (("2"
                                    (rewrite "length_append" -1)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((flatten def-decl "list[T]" list_theory nil)
    (put_in_head_len formula-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (put_in_head_nth formula-decl nil list_theory nil)
    (get_lst_dio_matrix_mem formula-decl nil diophantine nil)
    (length_append formula-decl nil list_props nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (put_in_head_mem formula-decl nil diophantine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (all_dif_values? const-decl "bool" diophantine nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (find_vectors_matrix 0
  (find_vectors_matrix-1 nil 3808143025
   ("" (induct "mult_t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("a1" "X"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" 1)
            (("2" (expand "find_vectors" 1)
              (("2" (lift-if)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2"
                      (name-replace "X1_values"
                       "from_min2max[nat](0, floor(n/a1))")
                      (("2"
                        (name-replace "new_k_lst"
                         "get_new_value_lst(n, a1, X1_values)")
                        (("2"
                          (name-replace "lst_smaller_dio"
                           "map(find_vectors(X))(new_k_lst)")
                          (("2"
                            (name-replace "lst_dio"
                             "get_lst_dio_matrix(X1_values, lst_smaller_dio)")
                            (("2" (expand "lst_dio" 2)
                              (("2"
                                (lemma "get_lst_dio_matrix_matrix?")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (prop)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "lst_smaller_dio")
                                          (("2"
                                            (lemma
                                             "member_nth_uni2[dio_matrix]")
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (replace -1 -2)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (skolem -1 "i")
                                                    (("2"
                                                      (rewrite
                                                       "map_nth_rw")
                                                      (("1"
                                                        (inst? -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (rewrite
                                                           "map_length")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (nth def-decl "T" list_props nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (get_lst_dio_matrix_matrix? formula-decl nil diophantine nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (find_vectors_len 0
  (find_vectors_len-1 nil 3807901159
   ("" (skeep)
    (("" (lemma "find_vectors_matrix")
      (("" (inst? -1)
        (("" (lemma "matrix_mem[nat]")
          (("" (inst? -1)
            (("" (inst -1 "find_vectors(mult_t)(n)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((find_vectors_matrix formula-decl nil diophantine nil)
    (matrix_mem formula-decl nil list_theory nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (find_vectors_cor 0
  (find_vectors_cor-1 nil 3808146734
   ("" (induct "mult_t")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("a1" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "prod" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2 1)
                  (("1" (lemma "find_vectors_len")
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "find_vectors" -2)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide -1 -4) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 1 2)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2"
                          (name-replace "X1_values"
                           "from_min2max[nat](0, floor(n/a1))")
                          (("2"
                            (name-replace "new_k_lst"
                             "get_new_value_lst(n, a1, X1_values)")
                            (("2"
                              (name-replace "lst_smaller_dio"
                               "map(find_vectors(tail))(new_k_lst)")
                              (("2"
                                (name-replace
                                 "lst_dio"
                                 "get_lst_dio_matrix(X1_values, lst_smaller_dio)")
                                (("2"
                                  (expand "lst_dio")
                                  (("2"
                                    (lemma "flatten_mem[list[nat]]")
                                    (("2"
                                      (inst? -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skolem -1 "j")
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (lemma
                                               "get_lst_dio_matrix_mem_nth")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "lst_smaller_dio")
                                                      (("2"
                                                        (rewrite
                                                         "map_nth_rw")
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "nth(new_k_lst, j)"
                                                           "cdr(value_lst)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     3)
                                                                    (("1"
                                                                      (expand
                                                                       "X1_values")
                                                                      (("1"
                                                                        (rewrite
                                                                         "nth_from_min2max")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           3)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "new_k_lst")
                                                                              (("1"
                                                                                (lemma
                                                                                 "get_new_value_lst_nth")
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         3)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "X1_values")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "nth_from_min2max")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "j")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "get_lst_dio_matrix_len")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "X1_values")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "j")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "get_lst_dio_matrix_len")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "X1_values")
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "nth_from_min2max")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "get_lst_dio_matrix_len")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "X1_values")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "from_min2max_len")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2
                                                                                                     3
                                                                                                     4)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "j <= floor(n/a1)")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "floor_def")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     " j <= n/a1")
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -2
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "j = n/a1")
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "j < n/a1")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "div_mult_pos_lt2")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3
                                                                                               4
                                                                                               5)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "get_lst_dio_matrix_len")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "X1_values")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             2
                                                                             4)
                                                                            (("2"
                                                                              (lemma
                                                                               "get_lst_dio_matrix_len")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   -2
                                                                                   nil
                                                                                   t)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "X1_values")
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "j")
                                                          (("2"
                                                            (lemma
                                                             "get_lst_dio_matrix_len")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "lst_smaller_dio"
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (get_lst_dio_matrix_mem_nth formula-decl nil diophantine nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_lst_dio_matrix_len formula-decl nil diophantine nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (floor_def formula-decl nil floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (get_new_value_lst_nth formula-decl nil diophantine nil)
    (nth_from_min2max formula-decl nil list_theory nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (flatten_mem formula-decl nil list_theory nil)
    (get_lst_dio_matrix def-decl "list[dio_matrix]" diophantine nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (find_vectors_len formula-decl nil diophantine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (find_vectors_comp 0
  (find_vectors_comp-1 nil 3844979060
   ("" (measure-induct "length(mult_t)" "mult_t")
    (("" (skolem 1 "mult_t")
      (("" (prop)
        (("" (skeep)
          (("" (hide 1)
            (("" (expand "find_vectors" 1)
              (("" (lift-if)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (expand "dot_product" -3)
                      (("1" (assert)
                        (("1" (reveal 1) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1" (expand "dot_product" -3)
                            (("1" (expand "length" -4 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if -4)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -4)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (lift-if -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand
                                                     "dot_product"
                                                     -4
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -4)
                                                                    (("1"
                                                                      (rewrite
                                                                       "div_cancel4")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "divides"
                                                             1)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "car(value_lst)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (name-replace "a1" "car(mult_t)")
                          (("2"
                            (name-replace "X1_values"
                             "from_min2max[nat](0, floor(n/a1))")
                            (("2"
                              (name-replace "new_k_lst"
                               "get_new_value_lst(n, a1, X1_values)")
                              (("2"
                                (name-replace
                                 "lst_smaller_dio_matrix"
                                 "map(find_vectors(cdr(mult_t)))(new_k_lst)")
                                (("2"
                                  (lemma "get_lst_dio_matrix_mem_nth2")
                                  (("2"
                                    (inst
                                     -1
                                     "lst_smaller_dio_matrix"
                                     "value_lst"
                                     "X1_values")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (expand "length" -4)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (reveal -4)
                                          (("2"
                                            (lemma
                                             "nth_from_min2max[nat]")
                                            (("2"
                                              (inst
                                               -1
                                               "0"
                                               "floor(n /a1)"
                                               "car(value_lst)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "car(value_lst) < length(from_min2max[nat](0, floor(n / a1)))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "car(value_lst)")
                                                        (("1"
                                                          (expand
                                                           "X1_values"
                                                           1
                                                           1)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand
                                                               "lst_smaller_dio_matrix"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "map_length")
                                                                (("1"
                                                                  (expand
                                                                   "new_k_lst"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "get_new_value_lst_len")
                                                                    (("1"
                                                                      (expand
                                                                       "X1_values"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "lst_smaller_dio_matrix"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "map_nth_rw")
                                                                (("1"
                                                                  (expand
                                                                   "new_k_lst"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "dot_product"
                                                                     -5
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (reveal
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (name-replace
                                                                               "new_val"
                                                                               "dot_product(cdr(value_lst), cdr(mult_t))")
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "cdr(mult_t)")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "new_val"
                                                                                     "cdr(value_lst)")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "get_new_value_lst_nth")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "a1"
                                                                                           "n"
                                                                                           "car(value_lst)"
                                                                                           "X1_values")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "car(value_lst) = nth(X1_values, car(value_lst))")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "new_val"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "new_val"
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-3
                                                                                                                -4
                                                                                                                2))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "a1"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "a1"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "X1_values"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "new_val"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "length"
                                                                                         -5)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (expand
                                                                                         "length"
                                                                                         -6)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "length"
                                                                                             -6)
                                                                                            (("4"
                                                                                              (lift-if)
                                                                                              (("4"
                                                                                                (assert)
                                                                                                (("4"
                                                                                                  (split
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "new_k_lst"
                                                                   1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "get_new_value_lst_len")
                                                                    (("2"
                                                                      (expand
                                                                       "X1_values"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 -3 2)
                                                    (("2"
                                                      (hide 3)
                                                      (("2"
                                                        (use
                                                         "from_min2max_len[nat]")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "dot_product"
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (reveal
                                                                   3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "floor_def")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "n / a1")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "car(value_lst) >= 1 + floor(n / a1)")
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (case
                                                                                 "car(value_lst) >  n / a1")
                                                                                (("1"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -4))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "a1")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "div_mult_pos_lt1")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "car(value_lst)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (reveal 1)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (get_lst_dio_matrix_mem_nth2 formula-decl nil diophantine nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_new_value_lst_nth formula-decl nil diophantine nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (get_new_value_lst_len formula-decl nil diophantine nil)
    (map_length formula-decl nil more_map_props nil)
    (floor_def formula-decl nil floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_from_min2max formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (member def-decl "bool" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dio_solver_n_member_find_vector 0
  (dio_solver_n_member_find_vector-1 nil 3807866193
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "dio" "dio_solver_n(mult_t1, mult_t2, n)")
        (("" (prop)
          (("1" (expand "dio")
            (("1" (expand "dio_solver_n" -1)
              (("1" (lemma "member_nth_uni2[list[nat]]")
                (("1" (inst? -1)
                  (("1" (replace -1 -2)
                    (("1" (hide -1)
                      (("1" (skeep)
                        (("1" (rewrite "split_matrix_nth")
                          (("1" (rewrite "map_nth_rw")
                            (("1" (lemma "split_append_pair[nat]")
                              (("1"
                                (inst -1 "length(mult_t1)" "_")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (name-replace
                                             "cart_prod"
                                             "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                                            (("1"
                                              (lemma
                                               "member_nth_uni[[list[nat], list[nat]]]")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "cart_prod_mem[list[nat]]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "find_vectors(mult_t2)(n)"
                                                         "nth(cart_prod, n_1)`2")
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (reveal
                                                               -4)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -3
                                                                     2)
                                                                    (("1"
                                                                      (grind)
                                                                      (("1"
                                                                        (case
                                                                         "nth(cart_prod, n_1) = (nth(cart_prod, n_1)`1, nth(cart_prod, n_1)`2)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "n_1")
                                                    (("2"
                                                      (lemma
                                                       "split_matrix_len[nat]")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length")
                                                                  (("2"
                                                                    (expand
                                                                     "cart_prod"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (name-replace
                                         "cart_prod"
                                         "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                                        (("2"
                                          (lemma
                                           "member_nth_uni[[list[nat], list[nat]]]")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "cart_prod")
                                                (("1"
                                                  (name-replace
                                                   "x1"
                                                   "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n_1)")
                                                  (("1"
                                                    (lemma
                                                     "cart_prod_mem[list[nat]]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "x1`1"
                                                         "x1`2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "member(x1`1, find_vectors(mult_t1)(n))")
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (lemma
                                                                 "find_vectors_len")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (grind)
                                                                (("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "x1 = (x1`1, x1`2)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "n_1")
                                                  (("2"
                                                    (reveal -2)
                                                    (("2"
                                                      (replace -1 -2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "split_matrix_len[nat]")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -3)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (typepred "n_1")
                                (("2"
                                  (lemma "split_matrix_len[nat]")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (replace -1 -3)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (rewrite "map_length")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 2)
                            (("2" (typepred "n_1")
                              (("2"
                                (lemma "split_matrix_len[nat]")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -1 -3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "dio" -1)
            (("2" (expand "dio_solver_n" -1)
              (("2"
                (name-replace "cart_prod"
                 "cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n))")
                (("2" (lemma "member_nth_uni2[list[nat]]")
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (hide -2)
                            (("2" (lemma "split_matrix_nth2[nat]")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "map_nth_rw")
                                        (("1"
                                          (lemma
                                           "split_append_pair[nat]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -2 -3)
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (lemma
                                                     "member_nth_uni[[list[nat], list[nat]]]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "cart_prod_mem[list[nat]]")
                                                          (("1"
                                                            (expand
                                                             "cart_prod")
                                                            (("1"
                                                              (name-replace
                                                               "x2"
                                                               "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(n), find_vectors(mult_t2)(n)), n!1)")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "find_vectors(mult_t1)(n)"
                                                                 "find_vectors(mult_t2)(n)"
                                                                 "x2`1"
                                                                 "x2`2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (grind)
                                                                      (("1"
                                                                        (case
                                                                         "x2 = (x2`1, x2`2)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (typepred
                                                             "n!1")
                                                            (("2"
                                                              (lemma
                                                               "split_matrix_len[nat]")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "cart_prod"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         -3)
                                                                        (("2"
                                                                          (rewrite
                                                                           "map_length")
                                                                          (("2"
                                                                            (expand
                                                                             "cart_prod")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (lemma
                                                   "member_nth_uni[nat]")
                                                  (("2"
                                                    (lemma
                                                     "member_nth_uni[[list[nat], list[nat]]]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "cart_prod"
                                                             -1
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "cart_prod_mem[nat]")
                                                              (("1"
                                                                (lemma
                                                                 "cart_prod_mem[list[nat]]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "nth(cart_prod, n!1)`1"
                                                                       "nth(cart_prod, n!1)`2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "(nth(cart_prod, n!1)`1, nth(cart_prod, n!1)`2) = nth(cart_prod, n!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -3
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "find_vectors_len")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "cart_prod"
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "n!1")
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "split_matrix_len[nat]")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           -3)
                                                                          (("2"
                                                                            (hide
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_length")
                                                                              (("2"
                                                                                (expand
                                                                                 "cart_prod"
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (typepred "n!1")
                                            (("2"
                                              (lemma
                                               "split_matrix_len[nat]")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (replace -1 -2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (rewrite
                                                           "map_length")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (typepred "n!1")
                                      (("2"
                                        (lemma "split_matrix_len[nat]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (replace -1 -2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (append_pair const-decl "list[T]" list_theory nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (split_matrix_nth formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (split_append_pair formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (find_vectors_len formula-decl nil diophantine nil)
    (member def-decl "bool" list_props nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (cart_prod_mem formula-decl nil list_theory nil)
    (split_matrix_len formula-decl nil list_theory nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (split_matrix_nth2 formula-decl nil list_theory nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (dio_solver_n_member_cor 0
  (dio_solver_n_member_cor-1 nil 3807905860
   ("" (skeep)
    (("" (assert)
      (("" (lemma "dio_solver_n_member_find_vector")
        (("" (inst? -1)
          (("" (inst -1 "row")
            (("" (assert)
              (("" (flatten)
                (("" (prop)
                  (("1" (rewrite "find_vectors_cor") nil nil)
                   ("2" (rewrite "find_vectors_cor") nil nil)
                   ("3" (rewrite "find_vectors_cor") nil nil)
                   ("4" (rewrite "find_vectors_cor") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (find_vectors_cor formula-decl nil diophantine nil)
    (dio_solver_n_member_find_vector formula-decl nil diophantine nil))
   SHOSTAK))
 (dio_solver_n_value 0
  (dio_solver_n_value-1 nil 3845976247
   ("" (skeep)
    (("" (lemma "dio_solver_n_member_cor")
      ((""
        (inst -1 "mult_t1" "mult_t2" "n"
         "split[nat](sol, length(mult_t1))`1")
        (("" (assert)
          (("" (flatten)
            (("" (hide -2)
              (("" (prop)
                (("1" (rewrite "prod_equiv_dot_product")
                  (("1" (rewrite "dot_product_sym") nil nil)) nil)
                 ("2" (lemma "split_matrix_mem[nat]")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dio_solver_n_member_cor formula-decl nil diophantine nil)
    (split_matrix_mem formula-decl nil list_theory nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (prod_equiv_dot_product formula-decl nil diophantine nil)
    (dot_product_sym formula-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dio_solver_n_split_matrix 0
  (dio_solver_n_split_matrix-1 nil 3807802920
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("1" (rewrite "equal_lst_nth")
          (("1" (hide 2)
            (("1" (rewrite "map_length")
              (("1" (rewrite "get_repeat_lst_len")
                (("1" (lemma "split_matrix_len[nat]")
                  (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skolem 1 "i")
              (("2" (rewrite "map_nth_rw")
                (("1" (lemma "dio_solver_n_member_cor")
                  (("1" (inst? -1)
                    (("1" (inst -1 "mult_t2")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "member_nth_uni[list[nat]]")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "i")
                                        (("1"
                                          (rewrite "map_length")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "get_repeat_lst_nth[nat]")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2 -2)
                                                    (("1"
                                                      (lemma
                                                       "split_matrix_len[nat]")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (rewrite "map_length") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "equal_lst_nth")
          (("1" (hide 2)
            (("1" (rewrite "map_length")
              (("1" (rewrite "get_repeat_lst_len")
                (("1" (lemma "split_matrix_len[nat]")
                  (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skolem 1 "i")
              (("2" (rewrite "map_nth_rw")
                (("1" (rewrite "get_repeat_lst_nth")
                  (("1" (lemma "dio_solver_n_member_cor")
                    (("1" (inst -1 "mult_t1" "mult_t2" "n" "_")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (lemma "member_nth_uni[list[nat]]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (typepred "i")
                                            (("1"
                                              (rewrite "map_length")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (rewrite "map_length")
                      (("2" (hide 2)
                        (("2" (lemma "split_matrix_len[nat]")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "i")
                    (("2" (rewrite "map_length") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (prod def-decl "nat" diophantine nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (length def-decl "nat" list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map_length formula-decl nil more_map_props nil)
    (split_matrix_len formula-decl nil list_theory nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (dio_solver_n_member_cor formula-decl nil diophantine nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (get_repeat_lst_nth formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   SHOSTAK))
 (dio_matrix_correct?_append 0
  (dio_matrix_correct?_append-1 nil 3807743211
   ("" (induct "dio_matrix1")
    (("1" (skeep)
      (("1" (expand "append" 1)
        (("1" (expand "dio_matrix_correct?" 1 2)
          (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "dio_matrix_correct?" 1 1)
              (("2" (expand "dio_matrix_correct?" 1 2)
                (("2" (assert)
                  (("2" (inst? -1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (dio_matrix_correct? def-decl "bool" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   SHOSTAK))
 (dio_matrix_correct?_split 0
  (dio_matrix_correct?_split-1 nil 3807800229
   ("" (measure-induct "length(dio_matrix)" "dio_matrix")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "dio_matrix_correct?" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "split_matrix" 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "map" 2)
                            (("2" (expand "row_cor?" 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(dio)")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (inst -1 "mult_t1" "mult_t2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (hide -2 -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (decompose-equality)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (decompose-equality)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((row_cor? const-decl "bool" diophantine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (prod def-decl "nat" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dio_matrix_correct? def-decl "bool" diophantine nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (dio_solver_n_cor 0
  (dio_solver_n_cor-1 nil 3807777173
   ("" (skeep)
    (("" (lemma "dio_matrix_correct?_split")
      (("" (inst? -1)
        (("" (assert)
          (("" (prop)
            (("" (hide 2 3)
              (("" (lemma "dio_solver_n_split_matrix")
                (("" (inst? -1)
                  (("" (assert)
                    (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dio_matrix_correct?_split formula-decl nil diophantine nil)
    (dio_solver_n_split_matrix formula-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (dio_solver_cor 0
  (dio_solver_cor-1 nil 3807737143
   ("" (induct "bound")
    (("1" (skeep)
      (("1" (expand "dio_solver" 1)
        (("1" (expand "dio_matrix_correct?" 1)
          (("1" (prop)
            (("1" (expand "row_cor?" 1)
              (("1" (lemma "split_append[nat]")
                (("1" (lemma "get_repeat_lst_append[nat]")
                  (("1" (inst? -1)
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1)
                        (("1" (inst? -1)
                          (("1" (rewrite "get_repeat_lst_len")
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "prod_get_repeat_lst0")
                                    (("1"
                                      (rewrite "prod_get_repeat_lst0")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "n")
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dio_solver" 1)
            (("2" (rewrite "dio_matrix_correct?_append")
              (("2" (inst? -1)
                (("2" (assert)
                  (("2" (hide -1)
                    (("2" (lemma "dio_solver_n_cor")
                      (("2" (inst? -1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dio_matrix_correct?_append formula-decl nil diophantine nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dio_solver_n_cor formula-decl nil diophantine nil)
    (row_cor? const-decl "bool" diophantine nil)
    (get_repeat_lst_append formula-decl nil list_theory nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (prod_get_repeat_lst0 formula-decl nil diophantine nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (split_append formula-decl nil list_theory nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix_correct? def-decl "bool" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (dio_solver_matrix 0
  (dio_solver_matrix-1 nil 3845154362
   ("" (induct "bound")
    (("1" (skeep)
      (("1" (grind) (("1" (rewrite "get_repeat_lst_len") nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "dio_solver" 1)
          (("2" (rewrite "matrix_append")
            (("2" (prop)
              (("1" (rewrite "matrix_equiv")
                (("1" (skolem 1 "row")
                  (("1" (prop)
                    (("1" (expand "dio_solver_n" -1)
                      (("1" (rewrite "map_member4")
                        (("1" (skolem -1 "lstnat")
                          (("1" (prop)
                            (("1" (lemma "cart_prod_mem[list[nat]]")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst -1 "lstnat`1" "lstnat`2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "member(lstnat, cartesian_product[list[nat]] (find_vectors(mult_t1)(1 + j), find_vectors(mult_t2)(1 + j))) = 
member((lstnat`1, lstnat`2), cartesian_product(find_vectors(mult_t1)(1 + j), find_vectors(mult_t2)(1 + j)))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -3)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (use "find_vectors_len")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "find_vectors_len")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "mult_t2"
                                                     "1+j"
                                                     "lstnat`2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        (("1"
                                                          (rewrite
                                                           "length_append")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide -2 -3 3)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (case
                                               "lstnat = (lstnat`1, lstnat`2)")
                                              (("1"
                                                (replace -1 -2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst?) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cart_prod_mem formula-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (find_vectors_len formula-decl nil diophantine nil)
    (length_append formula-decl nil list_props nil)
    (map_member4 formula-decl nil map_theory nil)
    (append_pair const-decl "list[T]" list_theory nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (matrix_equiv formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (matrix_append formula-decl nil list_theory nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (dio_solver_not_null 0
  (dio_solver_not_null-1 nil 3834509340
   ("" (measure-induct "bound" "bound")
    (("" (skolem 1 "bound")
      (("" (prop)
        (("" (skeep)
          (("" (expand "dio_solver" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (rewrite "null_append_uni")
                    (("2" (prop)
                      (("2" (inst -3 "bound - 1")
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null_append_uni formula-decl nil list_theory nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dio_solver_n_mem_comp 0
  (dio_solver_n_mem_comp-1 nil 3844973806
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        ((""
          (name-replace "left_sol"
           "split[nat](sol, length(mult_t1))`1")
          ((""
            (name-replace "right_sol"
             "split[nat](sol, length(mult_t1))`2")
            (("" (expand "dio_solver_n")
              (("" (rewrite "map_member4")
                ((""
                  (name-replace "value"
                   "dot_product(left_sol, mult_t1)")
                  (("" (lemma "split_cor[nat]")
                    (("" (inst -1 "sol" "length(mult_t1)")
                      (("" (assert)
                        (("" (reveal -3 -4)
                          (("" (replace -1)
                            (("" (replace -2)
                              ((""
                                (inst 1 "(left_sol, right_sol)")
                                ((""
                                  (assert)
                                  ((""
                                    (prop)
                                    (("1"
                                      (lemma
                                       "cart_prod_mem[list[nat]]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "find_vectors_comp")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "mult_t1"
                                                   "value"
                                                   "left_sol")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "value"
                                                       1)
                                                      (("1"
                                                        (replace
                                                         -2
                                                         1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "split"
                                                           1)
                                                          (("1"
                                                            (use
                                                             "len_get_lst_until_n[nat]")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "min"
                                                                   -1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "value"
                                                                         -9)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           -9
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "split"
                                                                             -9)
                                                                            (("1"
                                                                              (expand
                                                                               "dot_product"
                                                                               -9)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "value"
                                                                         -8)
                                                                        (("3"
                                                                          (replace
                                                                           -4
                                                                           -8
                                                                           :dir
                                                                           rl)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -5 -6)
                                                (("2"
                                                  (expand
                                                   "dot_product"
                                                   -6)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split -6)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (lemma
                                                             "find_vectors_comp")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "split"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "len_get_lst_after_n")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append_pair" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (cart_prod_mem formula-decl nil list_theory nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (append def-decl "list[T]" list_props nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (len_get_lst_until_n formula-decl nil list_theory nil)
    (find_vectors_comp formula-decl nil diophantine nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (split_cor formula-decl nil list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (append_pair const-decl "list[T]" list_theory nil)
    (map_member4 formula-decl nil map_theory nil))
   shostak))
 (dio_solver_mem_comp 0
  (dio_solver_mem_comp-1 nil 3844969999
   ("" (induct "bound")
    (("1" (skeep)
      (("1" (assert)
        (("1" (inst -1 "mult_t1" "mult_t2" "sol") nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2"
        (name-replace "left_sol" "split[nat](sol, length(mult_t1))`1")
        (("2"
          (name-replace "right_sol"
           "split[nat](sol, length(mult_t1))`2")
          (("2" (case "dot_product(left_sol, mult_t1) = 0")
            (("1" (hide -4)
              (("1" (expand "dio_solver" 1)
                (("1" (expand "member" 1)
                  (("1" (prop)
                    (("1" (lemma "dot_product_zero")
                      (("1" (inst -1 "mult_t1" "left_sol")
                        (("1" (assert)
                          (("1"
                            (case "length(left_sol) = length(mult_t1)")
                            (("1" (assert)
                              (("1"
                                (lemma "dot_product_zero")
                                (("1"
                                  (inst -1 "mult_t2" "right_sol")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       " length(right_sol) = length(mult_t2)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "split_cor[nat]")
                                          (("1"
                                            (inst
                                             -1
                                             "sol"
                                             "length(mult_t1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 1 :dir rl)
                                                (("1"
                                                  (reveal -4 -5)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -7)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (rewrite
                                                             "get_repeat_lst_append")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2 3)
                                        (("2"
                                          (expand "right_sol" 1)
                                          (("2"
                                            (expand "split" 1)
                                            (("2"
                                              (rewrite
                                               "len_get_lst_after_n")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2 3)
                              (("2"
                                (expand "left_sol" 1)
                                (("2"
                                  (expand "split" 1)
                                  (("2"
                                    (rewrite "len_get_lst_until_n")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3"
          (name-replace "left_sol"
           "split[nat](sol, length(mult_t1))`1")
          (("3"
            (name-replace "right_sol"
             "split[nat](sol, length(mult_t1))`2")
            (("3" (expand "dio_solver" 1)
              (("3" (rewrite "member_append_uni")
                (("3" (prop)
                  (("3" (case "dot_product(left_sol, mult_t1) <= j")
                    (("1" (inst -2 "mult_t1" "mult_t2" "sol")
                      (("1" (assert)
                        (("1" (expand "left_sol")
                          (("1" (expand "right_sol")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "dot_product(left_sol, mult_t1) = j + 1")
                      (("1" (hide -2)
                        (("1" (lemma "dio_solver_n_mem_comp")
                          (("1" (inst -1 "mult_t1" "mult_t2 " "sol")
                            (("1" (assert)
                              (("1"
                                (reveal -3 -4)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dio_solver_n_mem_comp formula-decl nil diophantine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_append_uni formula-decl nil list_theory nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (dot_product_zero formula-decl nil diophantine nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (len_get_lst_until_n formula-decl nil list_theory nil)
    (split_cor formula-decl nil list_theory nil)
    (get_repeat_lst_append formula-decl nil list_theory nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (member def-decl "bool" list_props nil)
    (<= const-decl "bool" reals nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dio_solver_value_lt_bound 0
  (dio_solver_value_lt_bound-1 nil 3845987994
   ("" (induct "bound")
    (("1" (skeep)
      (("1" (expand "dio_solver" -1)
        (("1" (expand "member" -1)
          (("1" (prop)
            (("1" (lemma "split_append[nat]")
              (("1" (rewrite "get_repeat_lst_append" :dir rl)
                (("1"
                  (inst -1 "get_repeat_lst(0, length(mult_t1))"
                   "get_repeat_lst(0, length(mult_t2))")
                  (("1" (replace -2 :dir rl)
                    (("1" (rewrite "get_repeat_lst_len")
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (rewrite "dot_product_get_repeat_lst0")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "member" -1) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "dio_solver" -2)
          (("2" (rewrite "member_append_uni")
            (("2" (prop)
              (("1" (lemma "dio_solver_n_value")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
               ("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (dio_solver_n_value formula-decl nil diophantine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_append_uni formula-decl nil list_theory nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (split_append formula-decl nil list_theory nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_product_get_repeat_lst0 formula-decl nil diophantine nil)
    (get_repeat_lst_append formula-decl nil list_theory nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (<= const-decl "bool" reals nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (all_dif_rows_find_vector 0
  (all_dif_rows_find_vector-3 nil 3846086082
   ("" (measure-induct "length(mult_t1)" "mult_t1")
    (("" (skolem 1 "mult_t1")
      (("" (prop)
        (("" (expand "find_vectors" 1)
          (("" (skeep)
            (("" (hide -1)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (prop) (("1" (grind) nil nil)) nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "a1" "car(mult_t1)")
                        (("2"
                          (name-replace "X1_values"
                           "from_min2max[nat](0, floor(bound / a1))")
                          (("2"
                            (name-replace "new_k_lst"
                             "get_new_value_lst(bound, a1, X1_values)")
                            (("2"
                              (name-replace "lst_smaller_dio_matrix"
                               "map(find_vectors(cdr(mult_t1)))(new_k_lst)")
                              (("2"
                                (expand "all_dif_rows?" 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (reveal -3 -1 -2)
                                    (("2"
                                      (lemma
                                       "get_lst_dio_matrix_all_dif_rows")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "all_dif_rows?" -1)
                                            (("1"
                                              (inst -1 "i" "j")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -4 -5 -6)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "lst_smaller_dio_matrix"
                                                 -1)
                                                (("2"
                                                  (rewrite
                                                   "map_member4")
                                                  (("2"
                                                    (skolem -1 "k")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (reveal -9)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cdr(mult_t1)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "k")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -4 -5 -6)
                                            (("3"
                                              (replace -3 1 :dir rl)
                                              (("3"
                                                (expand
                                                 "all_dif_values?"
                                                 1)
                                                (("3"
                                                  (skolem
                                                   1
                                                   ("i1" "j1"))
                                                  (("3"
                                                    (prop)
                                                    (("3"
                                                      (use
                                                       "nth_from_min2max[nat]")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (replace -1)
                                                          (("3"
                                                            (lemma
                                                             "nth_from_min2max[nat]")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "0"
                                                               "floor(bound/a1)"
                                                               "j1")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_lst_dio_matrix_all_dif_rows formula-decl nil diophantine nil)
    (map_member4 formula-decl nil map_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_from_min2max formula-decl nil list_theory nil)
    (all_dif_values? const-decl "bool" diophantine nil)
    (get_new_value_lst def-decl "list[nat]" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (all_dif_rows_find_vector-2 nil 3846086018
   ("" (measure-induct "length(mult_t1)" "mult_t1")
    (("" (expand "find_vectors" 1)
      (("" (skolem 1 "mult_t1")
        (("" (prop)
          (("" (skeep)
            (("" (hide -1)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (prop) (("1" (grind) nil nil)) nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "a1" "car(mult_t1)")
                        (("2"
                          (name-replace "X1_values"
                           "from_min2max[nat](0, floor(bound / a1))")
                          (("2"
                            (name-replace "new_k_lst"
                             "get_new_value_lst(bound, a1, X1_values)")
                            (("2"
                              (name-replace "lst_smaller_dio_matrix"
                               "map(find_vectors(cdr(mult_t1)))(new_k_lst)")
                              (("2"
                                (expand "all_dif_rows?" 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (reveal -3 -1 -2)
                                    (("2"
                                      (lemma
                                       "get_lst_dio_matrix_all_dif_rows")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "all_dif_rows?" -1)
                                            (("1"
                                              (inst -1 "i" "j")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -4 -5 -6)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "lst_smaller_dio_matrix"
                                                 -1)
                                                (("2"
                                                  (rewrite
                                                   "map_member4")
                                                  (("2"
                                                    (skolem -1 "k")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (reveal -9)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cdr(mult_t1)")
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (all_dif_rows_find_vector-1 nil 3846005991
   ("" (expand "find_vectors" 1)
    (("" (measure-induct "length(mult_t1)" "mult_t1")
      (("1" (skolem 1 "mult_t1")
        (("1" (prop)
          (("1" (skeep)
            (("1" (hide -1)
              (("1" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (prop) (("1" (grind) nil nil)) nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (name-replace "a1" "car(mult_t1)")
                        (("2"
                          (name-replace "X1_values"
                           "from_min2max[nat](0, floor(bound / a1))")
                          (("2"
                            (name-replace "new_k_lst"
                             "get_new_value_lst(bound, a1, X1_values)")
                            (("2"
                              (name-replace "lst_smaller_dio_matrix"
                               "map(find_vectors(cdr(mult_t1)))(new_k_lst)")
                              (("2"
                                (expand "all_dif_rows?" 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (reveal -3 -1 -2)
                                    (("2"
                                      (lemma
                                       "get_lst_dio_matrix_all_dif_rows")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "all_dif_rows?" -1)
                                            (("1"
                                              (inst -1 "i" "j")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -4 -5 -6)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "lst_smaller_dio_matrix"
                                                 -1)
                                                (("2"
                                                  (rewrite
                                                   "map_member4")
                                                  (("2"
                                                    (skolem -1 "k")
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (reveal -9)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cdr(mult_t1)")
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (all_dif_rows_cart_prod 0
  (all_dif_rows_cart_prod-1 nil 3845993702
   ("" (measure-induct "length(dio1)" "dio1")
    (("" (skolem 1 "dio1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product" 1)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (rewrite "map_append2")
                (("2" (expand "all_dif_rows?" 2)
                  (("2" (skeep)
                    (("2" (hide -4)
                      (("2" (rewrite "length_append")
                        (("2" (rewrite "map_length")
                          (("2" (rewrite "map_length")
                            (("2" (rewrite "nth_append_uni")
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (rewrite "map_length")
                                    (("1"
                                      (rewrite "nth_append_uni")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "map_length")
                                            (("1"
                                              (rewrite "map_nth_rw")
                                              (("1"
                                                (rewrite "map_nth_rw")
                                                (("1"
                                                  (rewrite
                                                   "cart_prod_aux_len")
                                                  (("1"
                                                    (rewrite
                                                     "cart_prod_aux_nth")
                                                    (("1"
                                                      (rewrite
                                                       "cart_prod_aux_nth")
                                                      (("1"
                                                        (expand
                                                         "append_pair"
                                                         -2)
                                                        (("1"
                                                          (lemma
                                                           "equal_append_implies_equal2[nat]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "all_dif_rows?"
                                                                 -8)
                                                                (("1"
                                                                  (inst
                                                                   -8
                                                                   "i"
                                                                   "j")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -3)
                                            (("2"
                                              (rewrite "map_length")
                                              (("2"
                                                (rewrite
                                                 "cart_prod_aux_len")
                                                (("2"
                                                  (rewrite
                                                   "map_nth_rw")
                                                  (("1"
                                                    (rewrite
                                                     "map_nth_rw")
                                                    (("1"
                                                      (expand
                                                       "append_pair"
                                                       -1)
                                                      (("1"
                                                        (lemma
                                                         "equal_append_implies_equal2[nat]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (rewrite
                                                                   "cart_prod_aux_nth")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "cart_prod_nth[list[nat]]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j-length(dio2)"
                                                                         "cdr(dio1)"
                                                                         "dio2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             ("j1"
                                                                              "n"))
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "all_dif_rows?"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "0"
                                                                                       "j1+1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "cart_prod_aux_nth")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "cart_prod_nth[list[nat]]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skolem
                                                                             -1
                                                                             ("j1"
                                                                              "n"))
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "matrix?"
                                                                                     -8)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "matrix_equiv[nat]")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "dio1"
                                                                                         "length(car(dio1))")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "nth(cdr(dio1), j1)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "member_nth_uni2[list[nat]]")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "j1+1")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "cart_prod_aux_len")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "map_length")
                                        (("2"
                                          (rewrite "map_length")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "map_length" 1)
                                    (("2"
                                      (rewrite "cart_prod_aux_len")
                                      (("2"
                                        (rewrite "nth_append_uni")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite "map_length")
                                                (("1"
                                                  (rewrite
                                                   "cart_prod_aux_len")
                                                  (("1"
                                                    (rewrite
                                                     "map_nth_rw")
                                                    (("1"
                                                      (rewrite
                                                       "map_nth_rw")
                                                      (("1"
                                                        (expand
                                                         "append_pair"
                                                         -2)
                                                        (("1"
                                                          (lemma
                                                           "equal_append_implies_equal2[nat]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 -4
                                                                 -2)
                                                                (("1"
                                                                  (rewrite
                                                                   "cart_prod_aux_nth")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "cart_prod_nth[list[nat]]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             ("j1"
                                                                              "n"))
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 -4)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "all_dif_rows?"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "0"
                                                                                       "j1+1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "cart_prod_aux_nth")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "cart_prod_nth[list[nat]]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skolem
                                                                           -1
                                                                           ("j1"
                                                                            "n"))
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (replace
                                                                               -3
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "matrix?"
                                                                                   -10)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "matrix_equiv[nat]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "dio1"
                                                                                       "length(car(dio1))")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "member_nth_uni2[list[nat]]")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "j1+1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "cart_prod_aux_len")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite "map_length")
                                                (("2"
                                                  (rewrite
                                                   "cart_prod_aux_len")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cdr(dio1)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "dio2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "all_dif_rows?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "i-length(dio2)"
                                                                   "j-length(dio2)")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (rewrite
                                                                       "map_length")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1
                                                                  4
                                                                  5))
                                                                (("2"
                                                                  (expand
                                                                   "all_dif_rows?")
                                                                  (("2"
                                                                    (skolem
                                                                     1
                                                                     ("i1"
                                                                      "j1"))
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "i1+1"
                                                                       "j1+1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 (-6
                                                                  1
                                                                  4
                                                                  5))
                                                                (("3"
                                                                  (expand
                                                                   "matrix?"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "matrix?"
                                                                     1)
                                                                    (("3"
                                                                      (prop)
                                                                      (("3"
                                                                        (expand
                                                                         "matrix?"
                                                                         -1)
                                                                        (("3"
                                                                          (expand
                                                                           "matrix?"
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (prop)
                                                                              (("3"
                                                                                (replace
                                                                                 -1
                                                                                 2)
                                                                                (("3"
                                                                                  (expand
                                                                                   "matrix?"
                                                                                   2)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "map_length")
                                          (("2"
                                            (rewrite "map_length")
                                            (("2"
                                              (rewrite
                                               "cart_prod_aux_len")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "map_length")
                                (("2" (rewrite "map_length") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_length formula-decl nil more_map_props nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (cart_prod_aux_len formula-decl nil list_theory nil)
    (equal_append_implies_equal2 formula-decl nil list_theory nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cart_prod_aux_nth formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (matrix_equiv formula-decl nil list_theory nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (cart_prod_nth formula-decl nil more_list_theory_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (matrix? def-decl "bool" list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (map_append2 formula-decl nil map_theory nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (append_pair const-decl "list[T]" list_theory nil)
    (matrix? const-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dio_solver_n_all_dif_rows 0
  (dio_solver_n_all_dif_rows-1 nil 3845988364
   ("" (skeep)
    (("" (expand "dio_solver_n" 1)
      (("" (expand "all_dif_rows?" 1)
        (("" (skeep)
          (("" (rewrite "map_nth_rw")
            (("1" (rewrite "map_nth_rw")
              (("1" (expand "append_pair" -3)
                (("1"
                  (name-replace "sol1"
                   "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(bound), find_vectors(mult_t2)(bound)), i)`1")
                  (("1"
                    (name-replace "sol2"
                     "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(bound), find_vectors(mult_t2)(bound)), i)`2")
                    (("1"
                      (name-replace "sol4"
                       "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(bound), find_vectors(mult_t2)(bound)), j)`2")
                      (("1"
                        (name-replace "sol3"
                         "nth(cartesian_product[list[nat]](find_vectors(mult_t1)(bound), find_vectors(mult_t2)(bound)), j)`1")
                        (("1" (case "sol1 = sol3 AND sol2 = sol4")
                          (("1" (hide -4)
                            (("1" (prop)
                              (("1"
                                (lemma "all_dif_rows_cart_prod")
                                (("1"
                                  (inst
                                   -1
                                   "find_vectors(mult_t1)(bound)"
                                   "find_vectors(mult_t2)(bound)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "all_dif_rows?" -1)
                                      (("1"
                                        (inst -1 "i" "j")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (rewrite "map_nth_rw")
                                              (("1"
                                                (rewrite "map_nth_rw")
                                                (("1"
                                                  (expand
                                                   "append_pair"
                                                   1)
                                                  (("1"
                                                    (reveal
                                                     -4
                                                     -5
                                                     -6
                                                     -7)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "map_length")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite
                                                   "map_length")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "all_dif_rows_find_vector")
                                      (("2" (inst?) nil nil))
                                      nil)
                                     ("3"
                                      (lemma
                                       "all_dif_rows_find_vector")
                                      (("3" (inst?) nil nil))
                                      nil)
                                     ("4"
                                      (lemma "find_vectors_matrix")
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (expand "matrix?" 1)
                                          (("4"
                                            (prop)
                                            (("4"
                                              (expand "matrix?" -1)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (prop)
                                                  (("4"
                                                    (replace -1)
                                                    (("4"
                                                      (expand
                                                       "matrix?"
                                                       2)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (lemma "find_vectors_matrix")
                                      (("5"
                                        (inst?)
                                        (("5"
                                          (hide -4 -5)
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "equal_append_implies_equal2[nat]")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (expand "sol1" 1)
                                    (("2"
                                      (expand "sol3" 1 1)
                                      (("2"
                                        (hide -1 -2)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "cart_prod_nth")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (skolem
                                                   -1
                                                   ("ji" "ni"))
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (lemma
                                                             "cart_prod_nth")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   ("jj"
                                                                    "n"))
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "find_vectors_len")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "mult_t1"
                                                                               "bound"
                                                                               "nth(find_vectors(mult_t1)(bound), ji)")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "find_vectors_len")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "mult_t1"
                                                                                     "bound"
                                                                                     "nth(find_vectors(mult_t1)(bound), jj)")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2
                                                                                         -1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "member_nth_uni"
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "member_nth_uni"
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   -4)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (reveal -2)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (rewrite
                                                         "map_length")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3) (("2" (rewrite "map_length") nil nil))
                nil))
              nil)
             ("2" (hide -3) (("2" (rewrite "map_length") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dio_solver_n const-decl "dio_matrix" diophantine nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (find_vectors_matrix formula-decl nil diophantine nil)
    (matrix? const-decl "bool" list_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (all_dif_rows_find_vector formula-decl nil diophantine nil)
    (map_length formula-decl nil more_map_props nil)
    (all_dif_rows_cart_prod formula-decl nil diophantine nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (find_vectors_len formula-decl nil diophantine nil)
    (cart_prod_nth formula-decl nil more_list_theory_props nil)
    (equal_append_implies_equal2 formula-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (find_vectors def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (append_pair const-decl "list[T]" list_theory nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (dio_solver_all_dif_rows 0
  (dio_solver_all_dif_rows-1 nil 3845969435
   ("" (induct "bound")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "dio_solver" 1)
          (("2" (expand "all_dif_rows?" 1)
            (("2" (skolem 1 ("i1" "j1"))
              (("2" (prop)
                (("2" (rewrite "length_append")
                  (("2" (rewrite "nth_append_uni")
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (rewrite "nth_append_uni")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (lemma "dio_solver_n_all_dif_rows")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (expand "all_dif_rows?" -1)
                                    (("1"
                                      (inst -1 "i1" "j1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "dio_solver_n_value")
                                (("2"
                                  (name-replace
                                   "rowi1"
                                   "nth(dio_solver_n(mult_t1, mult_t2, 1 + j), i1)")
                                  (("2"
                                    (inst
                                     -1
                                     "mult_t1"
                                     "mult_t2"
                                     "j+1"
                                     "rowi1")
                                    (("2"
                                      (expand "rowi1" -1)
                                      (("2"
                                        (rewrite "member_nth_uni" -1)
                                        (("2"
                                          (reveal -2)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (lemma
                                               "dio_solver_value_lt_bound")
                                              (("2"
                                                (name-replace
                                                 "rowj1"
                                                 "nth(dio_solver(mult_t1, mult_t2, j), j1 - length(dio_solver_n(mult_t1, mult_t2, 1 + j)))")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "j"
                                                   "mult_t1"
                                                   "mult_t2"
                                                   "rowj1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "rowj1"
                                                       1)
                                                      (("1"
                                                        (rewrite
                                                         "member_nth_uni"
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "nth_append_uni")
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (name-replace
                                 "k"
                                 "length(dio_solver_n(mult_t1, mult_t2, 1 + j))")
                                (("1"
                                  (lemma "dio_solver_value_lt_bound")
                                  (("1"
                                    (name-replace
                                     "rowi1"
                                     "nth(dio_solver(mult_t1, mult_t2, j), i1 - k)")
                                    (("1"
                                      (inst
                                       -1
                                       "j"
                                       "mult_t1"
                                       "mult_t2"
                                       "rowi1")
                                      (("1"
                                        (expand "rowi1" -1 1)
                                        (("1"
                                          (rewrite "member_nth_uni")
                                          (("1"
                                            (name-replace
                                             "rowj1"
                                             "nth(dio_solver_n(mult_t1, mult_t2, 1 + j), j1)")
                                            (("1"
                                              (lemma
                                               "dio_solver_n_value")
                                              (("1"
                                                (inst
                                                 -1
                                                 "mult_t1"
                                                 "mult_t2"
                                                 "j+1"
                                                 "rowj1")
                                                (("1"
                                                  (expand "rowj1" -1 1)
                                                  (("1"
                                                    (rewrite
                                                     "member_nth_uni")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand "k" -2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (name-replace
                                 "k"
                                 "length(dio_solver_n(mult_t1, mult_t2, 1 + j))")
                                (("2"
                                  (inst -2 "mult_t1" "mult_t2")
                                  (("2"
                                    (expand "all_dif_rows?" -2)
                                    (("2"
                                      (inst -2 "i1 - k" "j1 - k")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (dio_solver_n const-decl "dio_matrix" diophantine nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dio_solver_n_all_dif_rows formula-decl nil diophantine nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dio_solver_value_lt_bound formula-decl nil diophantine nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (dio_solver_n_value formula-decl nil diophantine nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (get_linear_comb_len 0
  (get_linear_comb_len-2 nil 3845131601
   ("" (induct "dio")
    (("1" (skeep)
      (("1" (expand "get_linear_comb" 1)
        (("1" (rewrite "get_repeat_lst_len") nil nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_linear_comb" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (rewrite "get_repeat_lst_len") nil nil)
                 ("2" (inst -1 "cdr(coef)" "n")
                  (("2" (assert)
                    (("2" (expand "matrix?" -2)
                      (("2" (assert)
                        (("2" (split -2)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "sum_lsts_len")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite "times_len")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (rewrite "times_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (times_len formula-decl nil diophantine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (sum_lsts_len formula-decl nil list_nat_theory nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   nil)
  (get_linear_comb_len-1 nil 3845108131
   ("" (induct "dio")
    (("1" (skeep)
      (("1" (expand "get_linear_comb" 1)
        (("1" (rewrite "get_repeat_lst_len") nil nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_linear_comb" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (rewrite "get_repeat_lst_len") nil nil)
                 ("2" (inst -1 "coef" "n")
                  (("2" (assert)
                    (("2" (expand "matrix?" -2)
                      (("2" (assert)
                        (("2" (split -2)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "sum_lsts_len")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite "times_len")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (rewrite "times_len")
                                        (("2"
                                          (assert)
                                          (("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (get_linear_comb0 0
  (get_linear_comb0-1 nil 3845131759
   ("" (induct "dio" 1)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_linear_comb" 1 1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (prop)
                  (("2" (expand "get_repeat_lst" 2 1)
                    (("2" (lift-if)
                      (("2" (split 2)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (rewrite "times0")
                            (("2" (inst -1 "j-1" "n")
                              (("1"
                                (expand "get_repeat_lst" 2 2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "matrix?" -2)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (lemma "sum_lsts0")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "get_repeat_lst(0, n)")
                                                  (("1"
                                                    (rewrite
                                                     "get_repeat_lst_len")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (sum_lsts0 formula-decl nil diophantine nil)
    (times0 formula-decl nil diophantine nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   shostak))
 (get_linear_comb_sum_lsts 0
  (get_linear_comb_sum_lsts-1 nil 3845379993
   ("" (measure-induct "length(coef1)" "coef1")
    (("" (skolem 1 "coef1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_linear_comb" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind)
                  (("1" (lemma "sum_lsts0")
                    (("1" (inst -1 "get_repeat_lst(0, n)")
                      (("1" (rewrite "get_repeat_lst_len") nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" -3)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "length" -4)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (lemma "sum_lsts0")
                                      (("1"
                                        (inst
                                         -1
                                         "get_repeat_lst(0, n)")
                                        (("1"
                                          (rewrite
                                           "get_repeat_lst_len")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "get_linear_comb" 3 2)
                  (("3" (lift-if)
                    (("3" (assert)
                      (("3" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "sum_lsts" 2 4)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("2"
                                (expand "get_linear_comb" 2 3)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "sum_lsts4")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (case
                                             "sum_lsts(times(car(coef1), car(dio)),
                        times(car(coef2), car(dio))) = times(car(coef1) + car(coef2), car(dio))")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (reveal -3)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr(coef1)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "cdr(coef2)"
                                                       "cdr(dio)"
                                                       "n")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (rewrite
                                                 "sum_lsts_times")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (sum_lsts_times formula-decl nil diophantine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_lsts4 formula-decl nil diophantine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (sum_lsts0 formula-decl nil diophantine nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (get_linear_comb_nth_TCC1 0
  (get_linear_comb_nth_TCC1-1 nil 3846530537
   ("" (skeep) (("" (rewrite "get_linear_comb_len") nil nil)) nil)
   ((get_linear_comb_len formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil))
   nil
   (get_linear_comb_nth subtype "diophantine.i"
    "below[length[nat](get_linear_comb(dio, coef, n))]")))
 (get_linear_comb_nth 0
  (get_linear_comb_nth-1 nil 3846530537
   ("" (measure-induct "length(dio)" "dio")
    (("1" (skolem 1 ("dio"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "get_linear_comb" 1 1)
            (("1" (lift-if)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "get_col_i" 1)
                    (("1" (case "null?(dio) AND null?(coef)")
                      (("1" (hide -2)
                        (("1" (lift-if)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (lemma "get_repeat_lst_nth[nat]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "get_col_i" 3)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (expand "dot_product" 1)
                            (("1" (rewrite "sum_lsts_nth")
                              (("1"
                                (rewrite "times_nth" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -2 "cdr(dio)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "cdr(coef)" "i" "n")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (rewrite "get_linear_comb_len")
                                  (("1"
                                    (rewrite "times_len")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (rewrite "times_len")
                                  (("3"
                                    (hide -2)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "get_linear_comb_len") nil nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sum_lsts_nth formula-decl nil diophantine nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (times_nth formula-decl nil diophantine nil)
    (get_linear_comb_len formula-decl nil diophantine nil)
    (times_len formula-decl nil diophantine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_repeat_lst_nth formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (matrix? def-decl "bool" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (linear_comb_mem 0
  (linear_comb_mem-1 nil 3845067800
   ("" (measure-induct "length(dio)" "dio")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "linear_comb?" 2)
                  (("1"
                    (inst 2
                     "cons(1, get_repeat_lst(0, length(dio) -1))")
                    (("1" (expand "get_linear_comb" 2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (lemma "get_linear_comb0")
                            (("1"
                              (inst -1 "cdr(dio)" "length(dio) - 1"
                               "length(sol)")
                              (("1"
                                (expand "matrix?" -4 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (rewrite "sum_lsts_sym")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite "times1")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (rewrite "sum_lsts0")
                                              (("1"
                                                (expand "length" 2 1)
                                                (("1"
                                                  (rewrite
                                                   "get_repeat_lst_len")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "cdr(dio)")
                  (("2" (prop)
                    (("1" (inst -1 "sol")
                      (("1" (assert)
                        (("1" (expand "matrix?" -3)
                          (("1" (assert)
                            (("1" (split -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "linear_comb?" -3)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "linear_comb?" 2)
                                        (("1"
                                          (inst 2 "cons(0, coef)")
                                          (("1"
                                            (expand
                                             "get_linear_comb"
                                             2
                                             1)
                                            (("1"
                                              (rewrite "times0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (lemma "sum_lsts0")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times0 formula-decl nil diophantine nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (times def-decl "list[nat]" list_nat_theory nil)
    (sum_lsts_sym formula-decl nil diophantine nil)
    (times1 formula-decl nil diophantine nil)
    (sum_lsts0 formula-decl nil diophantine nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (get_linear_comb0 formula-decl nil diophantine nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (linear_comb? const-decl "bool" diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (linear_comb_sum_lsts 0
  (linear_comb_sum_lsts-1 nil 3845379315
   ("" (skeep)
    (("" (lemma "get_linear_comb_sum_lsts")
      (("" (expand "linear_comb?")
        (("" (skolem -2 "coef1")
          (("" (prop)
            (("" (skolem -4 "coef2")
              (("" (prop)
                (("" (inst -1 "coef1" "coef2" "dio" "length(sol1)")
                  (("" (prop)
                    (("" (inst 1 "sum_lsts(coef1, coef2)")
                      (("" (assert)
                        (("" (lemma "sum_lsts_len")
                          (("" (inst -1 "coef1" "coef2")
                            (("" (assert)
                              ((""
                                (lemma "sum_lsts_len")
                                ((""
                                  (inst -1 "sol1" "sol2")
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_linear_comb_sum_lsts formula-decl nil diophantine nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (length def-decl "nat" list_props nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (sum_lsts_len formula-decl nil list_nat_theory nil)
    (linear_comb? const-decl "bool" diophantine nil))
   shostak))
 (dio_solver_generating_set 0
  (dio_solver_generating_set-2 nil 3845323667
   ("" (measure-induct "dot_product(sol, mult_t1)" ("sol" "mult_t1"))
    (("" (skolem 1 ("sol" "mult_t1"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            ((""
              (name-replace "bound"
               "calculate_upper_bound(mult_t1, mult_t2)")
              ((""
                (name-replace "dio"
                 "dio_solver(mult_t1, mult_t2, bound)")
                (("" (expand "linear_comb?" 1)
                  (("" (case "dot_product(sol, mult_t1) <= bound")
                    (("1" (case "member(sol, dio)")
                      (("1" (use "linear_comb_mem")
                        (("1" (assert)
                          (("1" (case "matrix?(dio, length(sol))")
                            (("1" (assert)
                              (("1"
                                (expand "linear_comb?" -2)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (expand "dio" 1)
                                (("2"
                                  (lemma "dio_solver_matrix")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "dio" 1)
                        (("2" (lemma "dio_solver_mem_comp")
                          (("2"
                            (inst -1 "bound" "mult_t1" "mult_t2" "sol")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "dot_product_split" :dir rl)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "dot_product(sol, mult_t1) > bound")
                      (("1" (hide 1)
                        (("1"
                          (name-replace "left_sol"
                           "split[nat](sol, length(mult_t1))`1")
                          (("1"
                            (name-replace "right_sol"
                             "split[nat](sol, length(mult_t1))`2")
                            (("1"
                              (case "dot_product(sol, mult_t1) = dot_product(left_sol, mult_t1)")
                              (("1"
                                (reveal -4)
                                (("1"
                                  (expand "calculate_upper_bound" -1)
                                  (("1"
                                    (name-replace
                                     "Mlcm"
                                     "max_lcm(mult_t1, mult_t2)")
                                    (("1"
                                      (name-replace
                                       "Mlen_mult"
                                       "max(length(mult_t1), length(mult_t2))")
                                      (("1"
                                        (case
                                         "length(left_sol) = length(mult_t1) AND length(right_sol) = length(mult_t2)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "dot_product_gt")
                                            (("1"
                                              (inst
                                               -1
                                               "bound"
                                               "mult_t1"
                                               "left_sol")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -1 "i")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "B"
                                                       "bound")
                                                      (("1"
                                                        (name-replace
                                                         "m"
                                                         "length(mult_t1)")
                                                        (("1"
                                                          (name-replace
                                                           "xi"
                                                           "nth(left_sol, i)")
                                                          (("1"
                                                            (name-replace
                                                             "ai"
                                                             "nth(mult_t1, i)")
                                                            (("1"
                                                              (lemma
                                                               "dot_product_gt")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "B"
                                                                 "mult_t2"
                                                                 "right_sol")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skolem
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (name-replace
                                                                         "yj"
                                                                         "nth(right_sol, j)")
                                                                        (("1"
                                                                          (name-replace
                                                                           "bj"
                                                                           "nth(mult_t2, j)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "n"
                                                                             "length(mult_t2)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "left_sol1"
                                                                               "vec_ith(i, lcm(ai, bj)/ai, m)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "right_sol1"
                                                                                 "vec_ith(j, lcm(ai, bj)/bj, n)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sum_lsts_suf")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "sol1"
                                                                                     "append(left_sol1, right_sol1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "sol"
                                                                                       "sol1")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -1
                                                                                           "sol2")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -16)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "sol2"
                                                                                                 "mult_t1")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "right_sol2"
                                                                                                   "split[nat](sol2, length(mult_t1))`1")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "left_sol2"
                                                                                                     "split[nat](sol2, length(mult_t1))`1")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "integer_pred(lcm(ai, bj)/ai) AND integer_pred(lcm(ai, bj)/bj)")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "vec_ith_dot_product")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "mult_t2")
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       -7)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "div_cancel2")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "dot_product(left_sol1, mult_t1) = lcm(ai, bj)")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -19)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -13
                                                                                                                                       -15)
                                                                                                                                      (("1"
                                                                                                                                        (prop)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "mult_t2")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "linear_comb_mem")
                                                                                                                                              (("1"
                                                                                                                                                (reveal
                                                                                                                                                 -22)
                                                                                                                                                (("1"
                                                                                                                                                  (reveal
                                                                                                                                                   -23)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -2
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "dio"
                                                                                                                                                           "sol1")
                                                                                                                                                          (("1"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -11
                                                                                                                                                               -12
                                                                                                                                                               -13
                                                                                                                                                               -14
                                                                                                                                                               -17)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "linear_comb_sum_lsts")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "dio"
                                                                                                                                                                   "sol1"
                                                                                                                                                                   "sol2")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (prop)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "linear_comb?"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -10
                                                                                                                                                                             :dir
                                                                                                                                                                             rl)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (reveal
                                                                                                                                                                           -2
                                                                                                                                                                           -3)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1
                                                                                                                                                                             :dir
                                                                                                                                                                             rl)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -12
                                                                                                                                                                               1
                                                                                                                                                                               :dir
                                                                                                                                                                               rl)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "length_append")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "vec_ith_len")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "left_sol1")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "vec_ith_len")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "m")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "n")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (expand
                                                                                                                                                                         "dio"
                                                                                                                                                                         1)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "dio_solver_matrix")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (case
                                                                                                                                                                               "length(mult_t1) + length(mult_t2) = length(sol1)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2
                                                                                                                                                                                 3
                                                                                                                                                                                 -1
                                                                                                                                                                                 -4
                                                                                                                                                                                 -5)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (reveal
                                                                                                                                                                                   -6
                                                                                                                                                                                   -7)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -10
                                                                                                                                                                                     1
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "length_append")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         1
                                                                                                                                                                                         :dir
                                                                                                                                                                                         rl)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -2
                                                                                                                                                                                           1
                                                                                                                                                                                           :dir
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (rewrite
                                                                                                                                                                                             "vec_ith_len")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (rewrite
                                                                                                                                                                                               "vec_ith_len")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "m"
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "n"
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2
                                                                                                                                                               -17
                                                                                                                                                               -18
                                                                                                                                                               -8
                                                                                                                                                               -7
                                                                                                                                                               -6)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "dio_solver_mem_comp")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -1
                                                                                                                                                                   "B"
                                                                                                                                                                   "mult_t1"
                                                                                                                                                                   "mult_t2"
                                                                                                                                                                   "sol1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (prop)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "dio"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "B")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -6
                                                                                                                                                                         1
                                                                                                                                                                         :dir
                                                                                                                                                                         rl)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "length_append")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (replace
                                                                                                                                                                             -7
                                                                                                                                                                             :dir
                                                                                                                                                                             rl)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -8
                                                                                                                                                                               :dir
                                                                                                                                                                               rl)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "vec_ith_len")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "vec_ith_len")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "m"
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "n"
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "split_cor[nat]")
                                                                                                                                                                        (("3"
                                                                                                                                                                          (inst
                                                                                                                                                                           -1
                                                                                                                                                                           "sol1"
                                                                                                                                                                           "length(mult_t1)")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("3"
                                                                                                                                                                              (replace
                                                                                                                                                                               -7
                                                                                                                                                                               1
                                                                                                                                                                               :dir
                                                                                                                                                                               rl)
                                                                                                                                                                              (("3"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "split_append[nat]")
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "left_sol1"
                                                                                                                                                                                   "right_sol1")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "length(left_sol1) = length(mult_t1)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -10
                                                                                                                                                                                         :dir
                                                                                                                                                                                         rl)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "vec_ith_len")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "m"
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (propax)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("4"
                                                                                                                                                                        (case
                                                                                                                                                                         "length(left_sol1) = length(mult_t1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "split_append[nat]")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "left_sol1"
                                                                                                                                                                             "right_sol1")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -8)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -4)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -15
                                                                                                                                                                                         1
                                                                                                                                                                                         :dir
                                                                                                                                                                                         rl)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "le_cut")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -1
                                                                                                                                                                                             "lcm(ai, bj)"
                                                                                                                                                                                             "Mlcm"
                                                                                                                                                                                             "Mlen_mult * Mlcm")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (prop)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "Mlcm")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (use
                                                                                                                                                                                                   "max_lcm_cor")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       2
                                                                                                                                                                                                       3
                                                                                                                                                                                                       4)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (prop)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "ai"
                                                                                                                                                                                                           1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                             "member_nth_uni")
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "bj")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                             "member_nth_uni")
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "Mlcm = 1 * Mlcm")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "both_sides_times_pos_le1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -1
                                                                                                                                                                                                           "Mlcm"
                                                                                                                                                                                                           "1"
                                                                                                                                                                                                           "Mlen_mult")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -8
                                                                                                                                                                           1
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "vec_ith_len")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "m"
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (expand
                                                                                                                                                               "dio"
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (lemma
                                                                                                                                                                 "dio_solver_matrix")
                                                                                                                                                                (("3"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (case
                                                                                                                                                                     "length(sol1) = length(mult_t1) + length(mult_t2)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -10
                                                                                                                                                                       1
                                                                                                                                                                       :dir
                                                                                                                                                                       rl)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "length_append")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -12
                                                                                                                                                                           1
                                                                                                                                                                           :dir
                                                                                                                                                                           rl)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "vec_ith_len")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -11
                                                                                                                                                                               1
                                                                                                                                                                               :dir
                                                                                                                                                                               rl)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "vec_ith_len")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "m"
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "n"
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "right_sol2"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -5)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "split_append[nat]")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "left_sol1"
                                                                                                                                                       "right_sol1")
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -9)
                                                                                                                                                        (("2"
                                                                                                                                                          (case
                                                                                                                                                           "length(left_sol1) = length(mult_t1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "left_sol = sum_lsts(left_sol1, left_sol2)")
                                                                                                                                                            (("1"
                                                                                                                                                              (name-replace
                                                                                                                                                               "right__sol2"
                                                                                                                                                               "split[nat](sol2, length(mult_t1))`2")
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "right_sol = sum_lsts(right_sol1, right__sol2)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide
                                                                                                                                                                   -13
                                                                                                                                                                   -14
                                                                                                                                                                   -15
                                                                                                                                                                   -16)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2
                                                                                                                                                                     -17)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1
                                                                                                                                                                       -17)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "sum_lsts_dot_product")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (prop)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -6)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "sum_lsts_dot_product")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "mult_t2"
                                                                                                                                                                                         "right_sol1"
                                                                                                                                                                                         "right__sol2")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (prop)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -7)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "right__sol2")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               2)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -17
                                                                                                                                                                                                 -15)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (reveal
                                                                                                                                                                                                   -5)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     1
                                                                                                                                                                                                     :dir
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       "vec_ith_len")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "split"
                                                                                                                                                                                                         1)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                           "len_get_lst_after_n")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -11)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -15
                                                                                                                                                                                 -16
                                                                                                                                                                                 -17
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (reveal
                                                                                                                                                                                   -6)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "left_sol2")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "split"
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (rewrite
                                                                                                                                                                                         "len_get_lst_until_n")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1
                                                                                                                                                                                           1
                                                                                                                                                                                           :dir
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (rewrite
                                                                                                                                                                                             "vec_ith_len")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -10)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -10
                                                                                                                                                                                                 1
                                                                                                                                                                                                 :dir
                                                                                                                                                                                                 rl)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (1
                                                                                                                                                                    -10
                                                                                                                                                                    -9
                                                                                                                                                                    -12
                                                                                                                                                                    13))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "right_sol"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "sum_lsts_split")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "length(mult_t1)"
                                                                                                                                                                         "sol"
                                                                                                                                                                         "sol1"
                                                                                                                                                                         "sol2")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (reveal
                                                                                                                                                                                 -10)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "split_append[nat]")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -1
                                                                                                                                                                                     "left_sol1"
                                                                                                                                                                                     "right_sol1")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -2
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "left_sol1"
                                                                                                                                                                                         -1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "vec_ith_len")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "m"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (decompose-equality
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -2
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "right__sol2"
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2
                                                                                                                                                               -13
                                                                                                                                                               -14
                                                                                                                                                               -12
                                                                                                                                                               -11
                                                                                                                                                               -17
                                                                                                                                                               -18
                                                                                                                                                               -19)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "left_sol"
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "sum_lsts_split")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "length(mult_t1)"
                                                                                                                                                                     "sol"
                                                                                                                                                                     "sol1"
                                                                                                                                                                     "sol2")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "left_sol1"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "vec_ith_len")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "m"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (replace
                                                                                                                                               -6)
                                                                                                                                              (("3"
                                                                                                                                                (replace
                                                                                                                                                 -18)
                                                                                                                                                (("3"
                                                                                                                                                  (expand
                                                                                                                                                   ("m"
                                                                                                                                                    "n"))
                                                                                                                                                  (("3"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           -13
                                                                                                                                           -14
                                                                                                                                           -15
                                                                                                                                           -16)
                                                                                                                                          (("2"
                                                                                                                                            (reveal
                                                                                                                                             -7)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "dot_product_split")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "mult_t1"
                                                                                                                                                   "sol2")
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "left_sol = sum_lsts(left_sol1, left_sol2)")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "sum_lsts_dot_product")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (prop)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "left_sol2"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "left_sol1"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "vec_ith_len")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "left_sol2"
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "split"
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "len_get_lst_until_n")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "left_sol"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "sum_lsts_split")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "length(mult_t1)"
                                                                                                                                                                 "sol"
                                                                                                                                                                 "sol1"
                                                                                                                                                                 "sol2")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (prop)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "left_sol2"
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1
                                                                                                                                                                           -2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "split_append[nat]")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "left_sol1"
                                                                                                                                                                               "right_sol1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -10
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (decompose-equality
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1
                                                                                                                                                                                     1
                                                                                                                                                                                     :dir
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -13
                                                                                                                                                                                       1
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (rewrite
                                                                                                                                                                                         "vec_ith_len")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "m"
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (propax)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 -18
                                                                                                                                 -19
                                                                                                                                 -20
                                                                                                                                 -7
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -9
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "vec_ith_dot_product")
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -13)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "div_cancel2")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "vec_ith_len")
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (rewrite
                                                                                                                                       "vec_ith_len")
                                                                                                                                      (("3"
                                                                                                                                        (expand
                                                                                                                                         "m"
                                                                                                                                         1)
                                                                                                                                        (("3"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "vec_ith_len")
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (rewrite
                                                                                                                     "vec_ith_len")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "n"
                                                                                                                       1)
                                                                                                                      (("3"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "lcm_TCC1")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "lcm_integer_pred")
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "lcm_sym")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "lcm_integer_pred")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "integer_pred(lcm(ai, bj)/ai)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "integer_pred(lcm(ai, bj)/bj)")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "vec_ith_len")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "vec_ith_len")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "lcm_sym")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "lcm_integer_pred")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (rewrite
                                                                                                     "lcm_integer_pred")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skolem
                                                                                           1
                                                                                           "i1")
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("3"
                                                                                              (hide
                                                                                               2)
                                                                                              (("3"
                                                                                                (case
                                                                                                 "sol = append(left_sol, right_sol)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "integer_pred(lcm(ai, bj)/ai) AND integer_pred(lcm(ai, bj)/bj)")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -15
                                                                                                         -16
                                                                                                         -17)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "length(left_sol1) = m AND length(right_sol1) = n")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "nth_append_uni"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -10
                                                                                                                     1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "vec_ith_cor")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 -10)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -9
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "nth_append_uni")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "div_mult_pos_le1")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "le_cut")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "lcm(ai, bj)"
                                                                                                                                             "B /m"
                                                                                                                                             "xi * ai")
                                                                                                                                            (("1"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "le_times_le_pos")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "div_mult_pos_le2")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -21
                                                                                                                                                     1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "lcm(ai, bj)"
                                                                                                                                                       "m"
                                                                                                                                                       "Mlen_mult"
                                                                                                                                                       "Mlcm")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           2
                                                                                                                                                           3)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "Mlcm"
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "max_lcm_cor")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "ai"
                                                                                                                                                                 "bj"
                                                                                                                                                                 "mult_t1"
                                                                                                                                                                 "mult_t2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (prop)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "ai"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "member_nth_uni")
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "bj"
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "member_nth_uni")
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -4
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "nth_append_uni")
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "i2"
                                                                                                                               "i1 - length(left_sol1)")
                                                                                                                              (("2"
                                                                                                                                (case
                                                                                                                                 "i2 = i1 - length(left_sol)")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -9
                                                                                                                                       1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "vec_ith_cor")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (reveal
                                                                                                                                                   -9)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "div_mult_pos_le1")
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "le_cut")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "lcm(ai, bj)"
                                                                                                                                                           "B/n"
                                                                                                                                                           "yj * bj")
                                                                                                                                                          (("1"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (rewrite
                                                                                                                                                               "div_mult_pos_le2")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -20
                                                                                                                                                                 1
                                                                                                                                                                 :dir
                                                                                                                                                                 rl)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "le_times_le_pos")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "lcm(ai, bj)"
                                                                                                                                                                     "n"
                                                                                                                                                                     "Mlen_mult"
                                                                                                                                                                     "Mlcm")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         2
                                                                                                                                                                         3)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "Mlcm")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (use
                                                                                                                                                                             "max_lcm_cor")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (prop)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "ai"
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "member_nth_uni")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "bj"
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "member_nth_uni")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (reveal
                                                                                                                                           1
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (prop)
                                                                                                                                          (("3"
                                                                                                                                            (rewrite
                                                                                                                                             "lcm_sym")
                                                                                                                                            (("3"
                                                                                                                                              (lemma
                                                                                                                                               "lcm_TCC1")
                                                                                                                                              (("3"
                                                                                                                                                (inst?)
                                                                                                                                                (("3"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "i2"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -7
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "vec_ith_len")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -6
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "vec_ith_len")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "lcm_integer_pred")
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "lcm_sym")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "lcm_integer_pred")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "left_sol"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "right_sol"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "split_cor[nat]")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "sol"
                                                                                                         "length(mult_t1)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "lcm_sym")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "lcm_integer_pred")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "lcm_TCC1")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "lcm_integer_pred")
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "lcm_TCC1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (prop)
                                          (("1"
                                            (expand "left_sol" 1)
                                            (("1"
                                              (expand "split" 1)
                                              (("1"
                                                (rewrite
                                                 "len_get_lst_until_n")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "right_sol" 1)
                                            (("2"
                                              (expand "split" 1)
                                              (("2"
                                                (rewrite
                                                 "len_get_lst_after_n")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "left_sol" 1)
                                (("2"
                                  (rewrite "dot_product_split")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lcm const-decl "posnat" diophantine nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (vec_ith def-decl "list[nat]" diophantine nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sum_lsts_suf formula-decl nil diophantine nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (vec_ith_cor formula-decl nil diophantine nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (lcm_integer_pred formula-decl nil diophantine nil)
    (lcm_sym formula-decl nil diophantine nil)
    (vec_ith_dot_product formula-decl nil diophantine nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lcm_TCC1 subtype-tcc nil diophantine nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sum_lsts_split formula-decl nil diophantine nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (len_get_lst_until_n formula-decl nil list_theory nil)
    (sum_lsts_dot_product formula-decl nil diophantine nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (split_append formula-decl nil list_theory nil)
    (split_cor formula-decl nil list_theory nil)
    (le_cut formula-decl nil extra_real_props nil)
    (max_lcm_cor formula-decl nil diophantine nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec_ith_len formula-decl nil diophantine nil)
    (length_append formula-decl nil list_props nil)
    (linear_comb_sum_lsts formula-decl nil diophantine nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_product_gt formula-decl nil diophantine nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max_lcm const-decl "nat" diophantine nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dio_solver_matrix formula-decl nil diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (linear_comb_mem formula-decl nil diophantine nil)
    (dio_solver_mem_comp formula-decl nil diophantine nil)
    (dot_product_split formula-decl nil diophantine nil)
    (<= const-decl "bool" reals nil)
    (calculate_upper_bound const-decl "nat" diophantine nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (linear_comb? const-decl "bool" diophantine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (dio_solver_generating_set-1 nil 3844966281
   ("" (measure-induct "dot_product(sol, mult_t1)" ("sol" "mult_t1"))
    (("" (skolem 1 ("sol" "mult_t1"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            ((""
              (name-replace "bound"
               "calculate_upper_bound(mult_t1, mult_t2)")
              ((""
                (name-replace "dio"
                 "dio_solver(mult_t1, mult_t2, bound)")
                (("" (expand "linear_comb?" 1)
                  (("" (case "dot_product(sol, mult_t1) <= bound")
                    (("1" (case "member(sol, dio)")
                      (("1" (use "linear_comb_mem")
                        (("1" (assert)
                          (("1" (case "matrix?(dio, length(sol))")
                            (("1" (assert)
                              (("1"
                                (expand "linear_comb?" -2)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (expand "dio" 1)
                                (("2"
                                  (lemma "dio_solver_matrix")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "dio" 1)
                        (("2" (lemma "dio_solver_mem_comp")
                          (("2"
                            (inst -1 "bound" "mult_t1" "mult_t2" "sol")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "dot_product_split" :dir rl)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "dot_product(sol, mult_t1) > bound")
                      (("1" (hide 1)
                        (("1"
                          (name-replace "left_sol"
                           "split[nat](sol, length(mult_t1))`1")
                          (("1"
                            (name-replace "right_sol"
                             "split[nat](sol, length(mult_t1))`2")
                            (("1"
                              (case "dot_product(sol, mult_t1) = dot_product(left_sol, mult_t1)")
                              (("1"
                                (reveal -4)
                                (("1"
                                  (expand "calculate_upper_bound" -1)
                                  (("1"
                                    (name-replace
                                     "Mlcm"
                                     "max_lcm(mult_t1, mult_t2)")
                                    (("1"
                                      (name-replace
                                       "Mlen_mult"
                                       "max(length(mult_t1), length(mult_t2))")
                                      (("1"
                                        (case
                                         "length(left_sol) = length(mult_t1) AND length(right_sol) = length(mult_t2)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "dot_product_gt")
                                            (("1"
                                              (inst
                                               -1
                                               "bound"
                                               "mult_t1"
                                               "left_sol")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -1 "i")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (name-replace
                                                       "B"
                                                       "bound")
                                                      (("1"
                                                        (name-replace
                                                         "m"
                                                         "length(mult_t1)")
                                                        (("1"
                                                          (name-replace
                                                           "xi"
                                                           "nth(left_sol, i)")
                                                          (("1"
                                                            (name-replace
                                                             "ai"
                                                             "nth(mult_t1, i)")
                                                            (("1"
                                                              (lemma
                                                               "dot_product_gt")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "B"
                                                                 "mult_t2"
                                                                 "right_sol")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skolem
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (name-replace
                                                                         "yj"
                                                                         "nth(right_sol, j)")
                                                                        (("1"
                                                                          (name-replace
                                                                           "bj"
                                                                           "nth(mult_t2, j)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "n"
                                                                             "length(mult_t2)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "left_sol1"
                                                                               "vec_ith(i, lcm(ai, bj)/ai, m)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "right_sol1"
                                                                                 "vec_ith(j, lcm(ai, bj)/bj, j)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sum_lsts_suf")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "sol1"
                                                                                     "append(left_sol1, right_sol1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "sol"
                                                                                       "sol1")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -1
                                                                                           "sol2")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skolem
                                                                                           1
                                                                                           "i1")
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("3"
                                                                                              (hide
                                                                                               2)
                                                                                              (("3"
                                                                                                (case
                                                                                                 "sol = append(left_sol, right_sol)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "nth_append_uni")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (postpone)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (postpone)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "lcm_sym")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "lcm_integer_pred")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "lcm_TCC1")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "lcm_integer_pred")
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "lcm_TCC1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (prop)
                                          (("1"
                                            (expand "left_sol" 1)
                                            (("1"
                                              (expand "split" 1)
                                              (("1"
                                                (rewrite
                                                 "len_get_lst_until_n")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "right_sol" 1)
                                            (("2"
                                              (expand "split" 1)
                                              (("2"
                                                (rewrite
                                                 "len_get_lst_after_n")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "left_sol" 1)
                                (("2"
                                  (rewrite "dot_product_split")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_zero_col_elim_col1_TCC1 0
  (no_zero_col_elim_col1_TCC1-1 nil 3847378134
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (all_zero? const-decl "bool" list_nat_theory nil)
    (no_zero_col? const-decl "bool" diophantine nil))
   nil
   (no_zero_col_elim_col1 subtype "diophantine.dio"
    "(list_adt[list[nat]].cons?)")))
 (no_zero_col_elim_col1 0
  (no_zero_col_elim_col1-1 nil 3847378135
   ("" (skeep)
    (("" (expand "no_zero_col?")
      (("" (prop)
        (("1" (use "elim_col1_matrix[nat]")
          (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (inst -5 "i+1")
            (("2" (assert)
              (("2" (prop)
                (("1" (use "elim_col1_get_col_i[nat]")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_zero_col? const-decl "bool" diophantine nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (elim_col1_get_col_i formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (elim_col1_matrix formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (dio_solver_coef_matrix_TCC1 0
  (dio_solver_coef_matrix_TCC1-1 nil 3845570162
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (calculate_upper_bound const-decl "nat" diophantine nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (is_solution? const-decl "bool" diophantine nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (dio_solver_coef_matrix subtype "diophantine.i"
    "below[length[list[nat]](coef_matrix)]")))
 (dio_solver_coef_matrix 0
  (dio_solver_coef_matrix-1 nil 3845570382
   ("" (measure-induct "length(lst_sol)" "lst_sol")
    (("1" (skolem 1 "lst_sol")
      (("1" (prop)
        (("1" (skeep)
          (("1"
            (name-replace "bound"
             "calculate_upper_bound(mult_t1, mult_t2)")
            (("1"
              (name-replace "dio"
               "dio_solver(mult_t1, mult_t2, bound)")
              (("1" (case "null?(lst_sol)")
                (("1" (inst 1 "null") (("1" (grind) nil nil)) nil)
                 ("2" (inst -1 "cdr(lst_sol)")
                  (("1" (prop)
                    (("1" (inst -1 "mult_t1" "mult_t2")
                      (("1" (prop)
                        (("1" (skolem -1 "cdr_coef_matrix")
                          (("1" (prop)
                            (("1" (reveal -3 -4)
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (lemma
                                       "dio_solver_generating_set")
                                      (("1"
                                        (inst
                                         -1
                                         "mult_t1"
                                         "mult_t2"
                                         "car(lst_sol)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -4 -5)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (name-replace
                                                 "part1"
                                                 "split[nat](car(lst_sol), length(mult_t1))`1")
                                                (("1"
                                                  (name-replace
                                                   "part2"
                                                   "split[nat](car(lst_sol), length(mult_t1))`2")
                                                  (("1"
                                                    (case
                                                     "length(car(lst_sol)) = length(mult_t1) + length(mult_t2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "linear_comb?"
                                                             -1)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "cons(coef, cdr_coef_matrix)")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "matrix?"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (expand
                                                                       "nth"
                                                                       1
                                                                       1)
                                                                      (("3"
                                                                        (lift-if)
                                                                        (("3"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -9
                                                                             "i-1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 2
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (inst
                                                             -7
                                                             "car(lst_sol)")
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -7)
                                                              (("2"
                                                                (expand
                                                                 "is_solution?"
                                                                 -7)
                                                                (("2"
                                                                  (expand
                                                                   "part1"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "part2"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -3 3)
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "car(lst_sol)")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (skeep)
                            (("2" (inst -2 "sol")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (dio_solver_generating_set formula-decl nil diophantine nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (linear_comb? const-decl "bool" diophantine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (lcm const-decl "posnat" diophantine nil)
    (select_greater def-decl "nat" list_theory nil)
    (max_lcm const-decl "nat" diophantine nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (calculate_upper_bound const-decl "nat" diophantine nil)
    (dio_solver def-decl "dio_matrix" diophantine nil)
    (member def-decl "bool" list_props nil)
    (is_solution? const-decl "bool" diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (construct_submatrix_coef_len 0
  (construct_submatrix_coef_len-1 nil 3846349918
   ("" (measure-induct "length(dio)" "dio")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (skeep)
          (("" (expand "construct_submatrix" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (use "put_col_len[nat]")
                  (("1"
                    (case "length(get_col_i(coef_matrix, 1)) = length(coef_matrix)")
                    (("1" (replace -1)
                      (("1"
                        (case "length(elim_col1(coef_matrix)) = length(coef_matrix)")
                        (("1" (assert)
                          (("1" (inst -4 "cdr(dio)")
                            (("1" (split -4)
                              (("1"
                                (inst -1 "elim_col1(coef_matrix)")
                                (("1"
                                  (case
                                   "matrix?(elim_col1(coef_matrix), length(cdr(dio)))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -4 3 2)
                                    (("2"
                                      (use "elim_col1_matrix[nat]")
                                      (("2"
                                        (split -1)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 -3 3)
                          (("2" (lemma "elim_col1_len[nat]")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -2 3)
                      (("2" (use "get_col_i_len[nat]")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -2 "cdr(dio)")
                  (("2" (prop)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (rewrite "elim_col1_len") nil nil)
                           ("2" (lemma "elim_col1_matrix[nat]")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((all_zero? const-decl "bool" list_nat_theory nil)
    (put_col_len formula-decl nil list_theory nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_col_i_len formula-decl nil list_theory nil)
    (elim_col1_len formula-decl nil list_theory nil)
    (elim_col1_matrix formula-decl nil list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (construct_submatrix def-decl "[dio_matrix, dio_matrix]"
     diophantine nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (construct_submatrix_matrix 0
  (construct_submatrix_matrix-1 nil 3846358028
   ("" (measure-induct "length(dio)" "dio")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (skeep)
          (("" (expand "construct_submatrix" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "construct_submatrix" 1)
                    (("1" (lift-if) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "construct_submatrix" 2 2)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "length" 2)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "put_col_matrix[nat]")
                                  (("1"
                                    (inst
                                     -1
                                     "get_col_i(coef_matrix, 1)"
                                     "construct_submatrix(cdr(dio), elim_col1(coef_matrix))`2"
                                     "
               length[list[nat]]
                   (construct_submatrix(cdr(dio),
                                        elim_col1(coef_matrix))`1)")
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 1 4)
                                        (("2"
                                          (inst -1 "cdr(dio)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "elim_col1_matrix[nat]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 3)
                                        (("3"
                                          (lemma "get_col_i_len[nat]")
                                          (("3"
                                            (lemma
                                             "construct_submatrix_coef_len")
                                            (("3"
                                              (inst
                                               -2
                                               "1"
                                               "coef_matrix"
                                               "length(dio)")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand
                                                   "length"
                                                   -2
                                                   1)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (split -2)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "elim_col1_len")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "elim_col1_matrix[nat]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "construct_submatrix" 1 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst -2 "cdr(dio)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "elim_col1(coef_matrix)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "elim_col1_matrix[nat]")
                                      (("1"
                                        (inst?)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (put_col_matrix formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (elim_col1_matrix formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (all_zero? const-decl "bool" list_nat_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (get_col_i_len formula-decl nil list_theory nil)
    (elim_col1_len formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (construct_submatrix_coef_len formula-decl nil diophantine nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (construct_submatrix def-decl "[dio_matrix, dio_matrix]"
     diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (construct_submatrix_matrix2 0
  (construct_submatrix_matrix2-1 nil 3846598481
   ("" (measure-induct "length(dio)" "dio")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (skeep)
          (("" (expand "construct_submatrix" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "matrix?" -2)
                        (("1" (prop)
                          (("1" (expand "matrix?" 3)
                            (("1" (prop)
                              (("1"
                                (inst -4 "cdr(dio)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (prop)
                      (("2" (inst -2 "cdr(dio)")
                        (("2" (prop)
                          (("1" (inst?) (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((elim_col1 def-decl "list[list[T]]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (all_zero? const-decl "bool" list_nat_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (construct_submatrix def-decl "[dio_matrix, dio_matrix]"
     diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (construct_submatrix_no_zero_col 0
  (construct_submatrix_no_zero_col-1 nil 3846851133
   ("" (measure-induct "length(dio)" "dio")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (skeep)
          (("" (expand "construct_submatrix" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (expand "construct_submatrix" 1)
                    (("1" (lift-if)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (inst -1 "cdr(dio)")
                        (("1" (prop)
                          (("1" (inst -1 "elim_col1(coef_matrix)")
                            (("1"
                              (case "matrix?(elim_col1(coef_matrix), length(cdr(dio)))")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "no_zero_col?" 2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma
                                       "construct_submatrix_matrix")
                                      (("1"
                                        (inst -1 "coef_matrix" "dio")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "construct_submatrix"
                                             -1)
                                            (("1"
                                              (expand
                                               "construct_submatrix"
                                               1
                                               2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (name-replace
                                         "cdr_dio1"
                                         "construct_submatrix(cdr(dio), elim_col1(coef_matrix))`1")
                                        (("2"
                                          (name-replace
                                           "col1"
                                           "get_col_i(coef_matrix, 1)")
                                          (("2"
                                            (name-replace
                                             "tail_coef"
                                             "construct_submatrix(cdr(dio), elim_col1 (coef_matrix))`2")
                                            (("2"
                                              (lemma
                                               "get_col_i_put_col_i[nat]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "length(cdr_dio1)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand
                                                         "no_zero_col?"
                                                         -6)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -7
                                                             "i-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "cdr_dio1"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "construct_submatrix"
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (expand "col1" 1)
                                                      (("4"
                                                        (use
                                                         "get_col_i_len[nat]")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (expand
                                                             "tail_coef"
                                                             1)
                                                            (("4"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "construct_submatrix_coef_len")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "elim_col1_len[nat]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (expand
                                                       "cdr_dio1"
                                                       1)
                                                      (("5"
                                                        (expand
                                                         "construct_submatrix"
                                                         -2)
                                                        (("5"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "elim_col1_matrix[nat]")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "construct_submatrix" 1 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst -2 "cdr(dio)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (use "elim_col1_matrix[nat]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_col_i def-decl "list[T]" list_theory nil)
    (get_col_i_put_col_i formula-decl nil list_theory nil)
    (construct_submatrix_coef_len formula-decl nil diophantine nil)
    (elim_col1_len formula-decl nil list_theory nil)
    (get_col_i_len formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (construct_submatrix_matrix formula-decl nil diophantine nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (elim_col1_matrix formula-decl nil list_theory nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (all_zero? const-decl "bool" list_nat_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (construct_submatrix def-decl "[dio_matrix, dio_matrix]"
     diophantine nil)
    (no_zero_col? const-decl "bool" diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (construct_submatrix_linear_comb_TCC1 0
  (construct_submatrix_linear_comb_TCC1-1 nil 3846349266
   ("" (skeep)
    (("" (use "construct_submatrix_coef_len")
      (("" (assert) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((construct_submatrix_coef_len formula-decl nil diophantine nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (construct_submatrix_linear_comb subtype "diophantine.i"
    "below[length[list[nat]](coef_matrix1)]")))
 (construct_submatrix_linear_comb 0
  (construct_submatrix_linear_comb-1 nil 3846349337
   ("" (measure-induct "length(dio)" "dio")
    (("1" (skolem 1 "dio")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "construct_submatrix" 1 1)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "construct_submatrix" 2 2)
                        (("1" (assert)
                          (("1" (expand "get_linear_comb" 2 1)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "get_linear_comb" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (lemma
                                                 "matrix_mem[nat]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "nth(coef_matrix, i)"
                                                   "coef_matrix"
                                                   "length(dio)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "member_nth_uni")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "put_col_nth[nat]")
                                      (("2"
                                        (inst
                                         -1
                                         "get_col_i(coef_matrix, 1)"
                                         "i"
                                         "construct_submatrix(cdr(dio), elim_col1 (coef_matrix))`2")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand
                                                 "get_linear_comb"
                                                 2
                                                 2)
                                                (("1"
                                                  (lemma
                                                   "get_col_i_nth[nat]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "length(dio)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               2
                                                               3)
                                                              (("1"
                                                                (case
                                                                 "get_linear_comb(cdr(dio), cdr(nth(coef_matrix, i)), n) = 
                get_linear_comb(construct_submatrix(cdr(dio),
                                                    elim_col1
                                                    (coef_matrix))`1,
                                nth(construct_submatrix
                                    (cdr(dio), elim_col1(coef_matrix))`2,
                                    i),
                                n)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (reveal
                                                                     -5)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "cdr(dio)")
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "elim_col1_cdr_nth[nat]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "length(dio)")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -4)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "elim_col1(coef_matrix)"
                                                                                           "i"
                                                                                           "n")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "matrix?"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "elim_col1_matrix[nat]")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (rewrite
                                                                                                   "elim_col1_len")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (lemma
                                               "get_col_i_len[nat]")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "length(dio)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 3)
                                            (("3"
                                              (lemma
                                               "get_col_i_len[nat]")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (inst
                                                   -1
                                                   "length(dio)")
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "construct_submatrix_coef_len")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "elim_col1(coef_matrix)"
                                                           "cdr(dio)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "elim_col1_len")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "elim_col1_matrix[nat]")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "construct_submatrix" 1 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst -2 "cdr(dio)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst
                                   -1
                                   "elim_col1(coef_matrix)"
                                   "i"
                                   "n")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand
                                           "get_linear_comb"
                                           1
                                           1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "matrix_nth[nat]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "i"
                                                   "coef_matrix"
                                                   "length(dio)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 1)
                                                (("2"
                                                  (expand
                                                   "all_zero?"
                                                   -1)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "car(nth(coef_matrix, i))")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "times0")
                                                          (("1"
                                                            (lemma
                                                             "get_linear_comb_len")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "matrix?"
                                                                   -3)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "get_repeat_lst(0, n) = get_repeat_lst(0, length(get_linear_comb(cdr(dio), cdr(nth(coef_matrix, i)), n)))")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sum_lsts0")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "elim_col1_cdr_nth[nat]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "length(dio)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "get_col_i_nth[nat]")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "0"
                                                             "i"
                                                             "coef_matrix"
                                                             "length(dio)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "member_nth_uni")
                                                                      (("1"
                                                                        (lemma
                                                                         "get_col_i_len[nat]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "length(dio)")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (lemma "elim_col1_matrix[nat]")
                                        (("3"
                                          (inst?)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (rewrite "elim_col1_len")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "construct_submatrix_coef_len")
          (("2" (inst?)
            (("2" (assert)
              (("2" (replace -3 :dir rl) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (matrix_nth formula-decl nil list_theory nil)
    (times0 formula-decl nil diophantine nil)
    (sum_lsts0 formula-decl nil diophantine nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (get_linear_comb_len formula-decl nil diophantine nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (put_col_nth formula-decl nil list_theory nil)
    (get_col_i_nth formula-decl nil list_theory nil)
    (elim_col1_len formula-decl nil list_theory nil)
    (elim_col1_matrix formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (elim_col1_cdr_nth formula-decl nil list_theory nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_col_i_len formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (construct_submatrix_coef_len formula-decl nil diophantine nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (all_zero? const-decl "bool" list_nat_theory nil)
    (matrix_mem formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (get_linear_comb def-decl "list[nat]" diophantine nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (construct_submatrix def-decl "[dio_matrix, dio_matrix]"
     diophantine nil)
    (matrix? def-decl "bool" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (construct_submatrix_get_sublists 0
  (construct_submatrix_get_sublists-1 nil 3849715942
   ("" (measure-induct "length(dio)" "dio")
    (("" (skolem 1 "dio")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_all_sublists" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "construct_submatrix" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (rewrite "member_append_uni")
                        (("1" (prop)
                          (("1" (hide 2)
                            (("1" (rewrite "put_in_head_mem_iff")
                              (("1"
                                (inst -1 "cdr(dio)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "elim_col1(coef_matrix)")
                                    nil
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "member_append_uni")
                        (("2" (prop)
                          (("2" (inst -2 "cdr(dio)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (dio_matrix type-eq-decl nil diophantine nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (construct_submatrix def-decl "[dio_matrix, dio_matrix]"
     diophantine nil)
    (get_all_sublists def-decl "list[list[T]]" list_theory nil)
    (member_append_uni formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (all_zero? const-decl "bool" list_nat_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (put_in_head_mem_iff formula-decl nil list_theory nil))
   shostak)))

