(more_list_theory_props
 (select_greater_finset2list2set_TCC1 0
  (select_greater_finset2list2set_TCC1-1 nil 3855922266
   ("" (skeep) (("" (rewrite "lst2set_is_finite") nil nil)) nil)
   ((lst2set_is_finite formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (select_greater_finset2list2set subtype
    "list2set[nat].list2set(more_list_theory_props.lst_nat1)"
    "finite_set[nat]")))
 (select_greater_finset2list2set 0
  (select_greater_finset2list2set-1 nil 3855922267
   ("" (skeep)
    (("" (use "select_greater_same_elem[nat]")
      (("" (assert)
        (("" (skeep)
          (("" (rewrite "finset2list_mem")
            (("" (rewrite "mem_list2set" :dir rl)
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_greater_same_elem formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list2set def-decl "set[T]" list2set nil)
    (finset2list def-decl "list[T]" list_theory nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (mem_list2set formula-decl nil list_theory nil)
    (finset2list_mem formula-decl nil list_theory nil))
   shostak))
 (dif_elem_from_min2max_TCC1 0
  (dif_elem_from_min2max_TCC1-1 nil 3849439419
   ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   nil (dif_elem_from_min2max subtype "=" "equiv[nat]")))
 (dif_elem_from_min2max 0
  (dif_elem_from_min2max-1 nil 3849439420
   ("" (skeep)
    (("" (expand "dif_elem?" 1)
      (("" (skolem 1 ("n1" "n2"))
        (("" (prop)
          (("" (use "nth_from_min2max[nat]")
            (("" (assert)
              (("" (lemma "nth_from_min2max[nat]")
                (("" (inst -1 "i" "j" "n2") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dif_elem? const-decl "bool" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth_from_min2max formula-decl nil list_theory nil))
   shostak))
 (get_repeat_lst_map 0
  (get_repeat_lst_map-1 nil 3839446800
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (get_repeat_lst_map2 0
  (get_repeat_lst_map2-1 nil 3839448246
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (get_lst_mult_map 0
  (get_lst_mult_map-1 nil 3839446816
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1 1)
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (rewrite "map_append")
                    (("2" (expand "map" 2 3)
                      (("2" (expand "get_lst_mult" 2 2)
                        (("2" (assert)
                          (("2" (inst?)
                            (("2" (replace -1)
                              (("2"
                                (use "get_repeat_lst_map")
                                (("2"
                                  (replace -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_map formula-decl nil more_list_theory_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (map_append formula-decl nil more_map_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (list type-decl nil list_adt nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (get_lst_mult_map2 0
  (get_lst_mult_map2-1 nil 3839448021
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1 1)
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (rewrite "map_append")
                    (("2" (expand "map" 2 3)
                      (("2" (expand "get_lst_mult" 2 2)
                        (("2" (assert)
                          (("2" (inst?)
                            (("2" (replace -1)
                              (("2"
                                (lemma "get_repeat_lst_map2")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_map2 formula-decl nil more_list_theory_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (map_append formula-decl nil more_map_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (get_repeat_lst_map_count 0
  (get_repeat_lst_map_count-1 nil 3809245337
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((count def-decl "nat" list_theory nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count const-decl "nat" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (map_split 0
  (map_split-1 nil 3809104597
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "map" 1 1)
              (("2" (expand "get_lst_until_n" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "get_lst_until_n" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "map" 2 2)
                            (("2" (inst? -1)
                              (("2"
                                (inst -1 "n-1")
                                (("2"
                                  (expand "split" -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (list type-decl nil list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (map_split2 0
  (map_split2-1 nil 3809278221
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "map" 1 1)
              (("2" (expand "get_lst_after_n" 1 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "get_lst_after_n" 1)
                      (("1" (assert)
                        (("1" (expand "map" 1 2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "get_lst_after_n" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst? -1)
                            (("2" (inst -1 "n-1")
                              (("2"
                                (expand "split" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (list type-decl nil list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (split_no_null_entries?1 0
  (split_no_null_entries?1-1 nil 3809285089
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "get_lst_until_n" 1)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "no_null_entries?" -2)
                  (("2" (prop)
                    (("2" (expand "no_null_entries?" 3)
                      (("2" (prop)
                        (("2" (expand "split" -2)
                          (("2" (inst? -2)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n skolem-const-decl "nat" more_list_theory_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (list type-decl nil list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (split_no_null_entries?2 0
  (split_no_null_entries?2-1 nil 3809285044
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split" 1)
            (("2" (expand "get_lst_after_n")
              (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (list type-decl nil list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (count_flatten_get_repeat_lst 0
  (count_flatten_get_repeat_lst-1 nil 3839141460
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "flatten" 1)
            (("2" (rewrite "count_append_uni")
              (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_append_uni formula-decl nil list_theory nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (flatten def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (count_get_lst_mult_dot_product 0
  (count_get_lst_mult_dot_product-1 nil 3839141526
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1)
            (("2" (lift-if)
              (("2" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (rewrite "flatten_append" 2)
                    (("2" (rewrite "count_append_uni" 2)
                      (("2" (expand "map" 2)
                        (("2" (expand "dot_product" 2)
                          (("2" (assert)
                            (("2"
                              (lemma "count_flatten_get_repeat_lst")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "count" 2 4)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_flatten_get_repeat_lst formula-decl nil
     more_list_theory_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (flatten_append formula-decl nil list_theory nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (list type-decl nil list_adt nil)
    (count const-decl "nat" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (flatten def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (cart_prod_nth 0
  (cart_prod_nth-1 nil 3845997971
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "cartesian_product" -2)
            (("2" (rewrite "length_append")
              (("2" (rewrite "cart_prod_aux_len")
                (("2" (case "i < length(lst2)")
                  (("1" (inst 1 "0" "i")
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "cartesian_product" 1)
                        (("2" (rewrite "nth_append_uni")
                          (("1" (lift-if)
                            (("1" (rewrite "cart_prod_aux_len")
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "cart_prod_aux_nth")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "cart_prod_aux_len") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "i-length(lst2)" "lst2")
                    (("1" (prop)
                      (("1" (skolem -1 ("j" "n"))
                        (("1" (prop)
                          (("1" (inst 2 "j+1" "n")
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2"
                                (expand "cartesian_product" 1)
                                (("2"
                                  (rewrite "nth_append_uni")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (rewrite "cart_prod_aux_len")
                                        nil
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (rewrite "cart_prod_aux_len")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite "cart_prod_aux_len")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (cart_prod_aux_nth formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lst2 skolem-const-decl "list[T]" more_list_theory_props nil)
    (i skolem-const-decl "nat" more_list_theory_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cart_prod_aux_len formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_elem_nth_lt_TCC1 0
  (count_elem_nth_lt_TCC1-1 nil 3847787963
   ("" (skeep)
    (("" (use "count_elem_len_ge[T]") (("" (assert) nil nil)) nil))
    nil)
   ((count_elem_len_ge formula-decl nil list_theory nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (count_elem_nth_lt subtype "more_list_theory_props.n"
    "below[length[T](new_lst)]")))
 (count_elem_nth_lt_TCC2 0
  (count_elem_nth_lt_TCC2-1 nil 3847787963
   ("" (skeep)
    (("" (skeep)
      (("" (use "count_elem_nth_lt_TCC1")
        (("" (assert)
          (("" (use "count_elem_len[T]") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem_len formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem_nth_lt_TCC1 subtype-tcc nil more_list_theory_props
     nil))
   nil
   (count_elem_nth_lt subtype "more_list_theory_props.n"
    "below[length[nat](new_coef)]")))
 (count_elem_nth_lt_TCC3 0
  (count_elem_nth_lt_TCC3-1 nil 3847787963 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (dif_elem? const-decl "bool" list_theory nil))
   nil
   (count_elem_nth_lt subtype "more_list_theory_props.n"
    "below[length[nat](coef)]")))
 (count_elem_nth_lt 0
  (count_elem_nth_lt-1 nil 3847787964
   ("" (measure-induct "length(lst2)" "lst2")
    (("1" (skolem 1 "lst2")
      (("1" (prop)
        (("1" (skeep)
          (("1"
            (name-replace "new_lst"
             "count_elem(lst, coef, lst2, equal?)`1")
            (("1"
              (name-replace "new_coef"
               "count_elem(lst, coef, lst2, equal?)`2")
              (("1" (reveal -1 -2)
                (("1" (expand "count_elem" -1 1)
                  (("1" (lift-if)
                    (("1" (split -1)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1"
                              (name-replace "i"
                               "pos?(car(lst2), lst, equal?)`2")
                              (("1"
                                (name-replace "x" "nth(new_lst, n)")
                                (("1"
                                  (reveal -1 -2)
                                  (("1"
                                    (expand "count_elem" -5)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (inst -6 "cdr(lst2)")
                                            (("1"
                                              (split -6)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (replace -6)
                                                    (("1"
                                                      (inst -1 "n")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3)
                                                                (("1"
                                                                  (lemma
                                                                   "increment_nth[T]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "count"
                                                                                   2
                                                                                   2)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (use
                                                                                           "pos?_cor[T]")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "equal?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "equivalence?"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "symmetric?"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "car(lst2)"
                                                                                                             "nth(lst, n)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "count"
                                                                                   3
                                                                                   2)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (prop)
                                                                                        (("2"
                                                                                          (use
                                                                                           "pos?_cor[T]")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -4
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "dif_elem?"
                                                                                                   -13)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -13
                                                                                                     "n"
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "pos?_len[T]")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "equal?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "equivalence?"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "transitive?"
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "nth(lst, n)"
                                                                                                                   "car(lst2)"
                                                                                                                   "nth(lst, i)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "increment_len")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -4)
                                  (("2"
                                    (lemma "count_elem_len_ge[T]")
                                    (("2"
                                      (inst
                                       -1
                                       "coef"
                                       "equal?"
                                       "lst"
                                       "lst2")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "count_elem" -2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "cdr(lst2)")
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (inst -1 "n")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "nth_append_uni")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "nth_append_uni")
                                                      (("2"
                                                        (rewrite
                                                         "nth_append_uni")
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (name-replace
                                                               "x"
                                                               "nth(new_lst, n)")
                                                              (("2"
                                                                (expand
                                                                 "count"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (rewrite
                                                                       "pos?_mem2")
                                                                      (("2"
                                                                        (inst
                                                                         2
                                                                         "x")
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (rewrite
                                                                             "member_nth_uni2")
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "n")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "equal?")
                                                                            (("2"
                                                                              (expand
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "x"
                                                                                     "car(lst2)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "length_append")
                                                (("2"
                                                  (rewrite
                                                   "length_append")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       3)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           3)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (rewrite
                                                 "length_append")
                                                (("3"
                                                  (expand "length" 1 1)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide -1 -2 4)
                                                (("4"
                                                  (expand
                                                   "dif_elem?"
                                                   -3)
                                                  (("4"
                                                    (expand
                                                     "dif_elem?"
                                                     1)
                                                    (("4"
                                                      (skeep)
                                                      (("4"
                                                        (rewrite
                                                         "length_append")
                                                        (("4"
                                                          (expand
                                                           "length"
                                                           -1
                                                           1)
                                                          (("4"
                                                            (expand
                                                             "length"
                                                             -2
                                                             1)
                                                            (("4"
                                                              (expand
                                                               "length"
                                                               -1
                                                               2)
                                                              (("4"
                                                                (expand
                                                                 "length"
                                                                 -2
                                                                 2)
                                                                (("4"
                                                                  (case
                                                                   "i < length(lst)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_append_uni")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "j < length(lst)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "nth_append_uni")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "i"
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "nth_append_uni"
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -4
                                                                               2)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "pos?_mem2")
                                                                                (("1"
                                                                                  (inst
                                                                                   3
                                                                                   "nth(lst, i)")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "member_nth_uni2")
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "i")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "equal?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "equivalence?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "symmetric?"
                                                                                             -2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               "nth(lst, i)"
                                                                                               "car(lst2)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "nth_append_uni"
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -3
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "nth_append_uni"
                                                                           -3)
                                                                          (("1"
                                                                            (rewrite
                                                                             "pos?_mem2")
                                                                            (("1"
                                                                              (inst
                                                                               3
                                                                               "nth(lst, j)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "member_nth_uni2")
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "j")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (skeep) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "count_elem_len[T]")
            (("3" (inst?)
              (("3" (assert)
                (("3" (assert)
                  (("3" (replace -2 :dir rl)
                    (("3" (replace -3 :dir rl)
                      (("3" (replace -1 :dir rl)
                        (("3" (lemma "count_elem_len_ge[T]")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "count_elem_len_ge[T]")
          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((count_elem_len formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count_elem_len_ge formula-decl nil list_theory nil)
    (increment_nth formula-decl nil list_theory nil)
    (transitive? const-decl "bool" relations nil)
    (pos?_len formula-decl nil list_theory nil)
    (pos?_cor formula-decl nil list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (increment_len formula-decl nil list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (length_append formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (count def-decl "nat" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_len_remove 0
  (count_elem_len_remove-1 nil 3847803537
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "count_elem" 1 2)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -3 "cdr(lst2)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (rewrite "pos?_mem2")
                                  (("2"
                                    (inst 1 "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "equal?")
                                        (("2"
                                          (expand "equivalence?" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "symmetric?" -2)
                                              (("2"
                                                (inst
                                                 -2
                                                 "x"
                                                 "car(lst2)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "count_elem" 2 1)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (expand "count_elem" 1 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -2 "cdr(lst2)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "count_elem" 2 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "cdr(lst2)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "member_append_uni")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove def-decl "list[T]" list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_nth_gt_remove_TCC1 0
  (count_elem_nth_gt_remove_TCC1-1 nil 3847787963
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "count_elem_len_remove")
        (("" (inst -1 "coef" "coef1" "equal?" "lst" "lst2" "x")
          (("" (assert) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem_len_remove formula-decl nil more_list_theory_props
     nil))
   nil
   (count_elem_nth_gt_remove subtype "more_list_theory_props.n"
    "below[length[T](new_lst1)]")))
 (count_elem_nth_gt_remove_TCC2 0
  (count_elem_nth_gt_remove_TCC2-1 nil 3847787963
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "count_elem_nth_gt_remove_TCC1")
        (("" (inst?)
          (("" (inst -1 "coef" "n" "new_lst" "new_coef")
            (("" (assert)
              (("" (inst -1 "new_lst1" "new_coef1")
                (("" (assert)
                  (("" (lemma "count_elem_len[T]")
                    (("" (inst -1 "coef" "equal?" "lst" "lst2")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem_len formula-decl nil list_theory nil)
    (count_elem_nth_gt_remove_TCC1 subtype-tcc nil
     more_list_theory_props nil))
   nil
   (count_elem_nth_gt_remove subtype "more_list_theory_props.n"
    "below[length[nat](new_coef)]")))
 (count_elem_nth_gt_remove_TCC3 0
  (count_elem_nth_gt_remove_TCC3-1 nil 3847787963
   ("" (skeep)
    (("" (skeep)
      (("" (use "count_elem_nth_gt_remove_TCC1")
        (("" (assert)
          (("" (inst -1 "new_lst1" "new_coef1")
            (("" (assert)
              (("" (hide -2 -3)
                (("" (use "count_elem_len[T]") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count_elem_len formula-decl nil list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem_nth_gt_remove_TCC1 subtype-tcc nil
     more_list_theory_props nil))
   nil
   (count_elem_nth_gt_remove subtype "more_list_theory_props.n"
    "below[length[nat](new_coef1)]")))
 (count_elem_nth_gt_remove 0
  (count_elem_nth_gt_remove-1 nil 3847802793
   ("" (measure-induct "length(lst2)" "lst2")
    (("1" (skolem 1 "lst2")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1"
              (name-replace "new_lst1"
               "count_elem(lst, coef, lst2, equal?)`1")
              (("1"
                (name-replace "new_coef1"
                 "count_elem(lst, coef, lst2, equal?)`2")
                (("1"
                  (name-replace "new_coef"
                   "count_elem(lst, coef1, remove(lst2, x, equal?), equal?)`2")
                  (("1"
                    (name-replace "new_lst"
                     "count_elem(lst, coef1, remove(lst2, x, equal?), equal?)`1")
                    (("1" (reveal -1 -2 -3 -4)
                      (("1" (expand "remove" -1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "remove" -3)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "count_elem" -4 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "count_elem"
                                                     -6)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -5)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "cdr(lst2)")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "_"
                                                                 "n")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -5)
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "increment_len")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "pos?_mem2")
                                                    (("2"
                                                      (inst 1 "x")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "equal?")
                                                          (("2"
                                                            (expand
                                                             "equivalence?"
                                                             -1)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "symmetric?"
                                                                 -2)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "x"
                                                                   "car(lst2)")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "remove" -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "count_elem" -1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "count_elem"
                                                     -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "count_elem"
                                                         -4)
                                                        (("1"
                                                          (expand
                                                           "count_elem"
                                                           -5)
                                                          (("1"
                                                            (reveal -5)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "cdr(lst2)")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n")
                                                                          (("1"
                                                                            (name-replace
                                                                             "i"
                                                                             "pos?(car(lst2), lst, equal?)`2")
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (replace
                                                                                 -6)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "increment_len")
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (rewrite
                                                                                       "increment_len")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "count_elem"
                                                     -2
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "count_elem"
                                                         -3)
                                                        (("2"
                                                          (expand
                                                           "count_elem"
                                                           -4)
                                                          (("2"
                                                            (name-replace
                                                             "lst_"
                                                             "append(lst, cons(car(lst2), null))")
                                                            (("2"
                                                              (name-replace
                                                               "coef_"
                                                               "append(coef, cons[nat](1, null))")
                                                              (("2"
                                                                (name-replace
                                                                 "coef1_"
                                                                 "append(coef1, cons[nat](1, null))")
                                                                (("2"
                                                                  (reveal
                                                                   -8)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "cdr(lst2)")
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "coef_"
                                                                           "n")
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "n >= length(lst_)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "lst_"
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "member_append_uni")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (expand
                                                                                             "lst_"
                                                                                             1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "coef_"
                                                                                               1)
                                                                                              (("3"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (rewrite
                                                                                                   "length_append"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         3)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               1
                                                                                                               3)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (expand
                                                                                             "coef1_"
                                                                                             1)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "lst_"
                                                                                               1)
                                                                                              (("4"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   "length_append"
                                                                                                   1)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("4"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1
                                                                                                       3)
                                                                                                      (("4"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("4"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1
                                                                                                           3)
                                                                                                          (("4"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (hide
                                                                                             5
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5)
                                                                                            (("5"
                                                                                              (expand
                                                                                               "dif_elem?"
                                                                                               -7)
                                                                                              (("5"
                                                                                                (expand
                                                                                                 "dif_elem?"
                                                                                                 1)
                                                                                                (("5"
                                                                                                  (skeep)
                                                                                                  (("5"
                                                                                                    (case
                                                                                                     "i < length(lst)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "j < length(lst)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -12
                                                                                                         "i"
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "lst_"
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "nth_append_uni")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "nth_append_uni")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "lst_"
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "nth_append_uni")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -11)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "lst_"
                                                                                                                 -3)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "nth_append_uni")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "length_append")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -4
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "length"
                                                                                                                           -3
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             -3
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "pos?_mem2")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   3
                                                                                                                                   "nth(lst, i)")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "member_nth_uni")
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (typepred
                                                                                                                                       "equal?")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "equivalence?"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "symmetric?"
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "nth(lst, i)"
                                                                                                                                               "car(lst2)")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "lst_")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "length_append")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "lst_"
                                                                                                       -3
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "nth_append_uni"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "lst_"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "length_append"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     -3
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "j < length(lst)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "lst_"
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "nth_append_uni"
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "pos?_mem2")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   3
                                                                                                                                   "nth(lst, j)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "member_nth_uni")
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "lst_"
                                                                                                                           -3)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "nth_append_uni")
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "lst_"
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "length_append"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       -2
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         -2
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nth"
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             -3)
                                                                                                                                            (("1"
                                                                                                                                              (lift-if)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "lst_"
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "length_append"
                                                                                                                                 -2)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "lst_"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "length_append"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "lst_"
                                                                                           1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_append"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "n = length(lst)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       1
                                                                                                       2
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -5
                                                                                                           2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4
                                                                                                             2
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "count_elem_nth_lt")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -3
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "length(lst)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -3)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     -4
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -7
                                                                                                                                       -8)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "count_elem_nth_lt")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "length(lst)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -3)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -1
                                                                                                                                                             -2
                                                                                                                                                             -3
                                                                                                                                                             -4)
                                                                                                                                                            (("1"
                                                                                                                                                              (reveal
                                                                                                                                                               3)
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "nth(lst_, length(lst)) = car(lst2)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "count_remove2[T]")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "coef_"
                                                                                                                                                                               3)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "coef1_")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "nth_append_uni")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "nth"
                                                                                                                                                                                     3
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (rewrite
                                                                                                                                                                                       "nth_append_uni"
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "nth"
                                                                                                                                                                                         3
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (propax)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         1
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     1
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "lst_")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "nth_append_uni"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth"
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       5)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "length"
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       3)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "lst_"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "coef1_"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "length_append"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (rewrite
                                                                                                                                                               "length_append"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "length"
                                                                                                                                                                 1
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "length"
                                                                                                                                                                   1
                                                                                                                                                                   3)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "length"
                                                                                                                                                                       1
                                                                                                                                                                       2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "length"
                                                                                                                                                                         1
                                                                                                                                                                         3)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (expand
                                                                                                                                                       "lst_"
                                                                                                                                                       1)
                                                                                                                                                      (("3"
                                                                                                                                                        (rewrite
                                                                                                                                                         "length_append"
                                                                                                                                                         1)
                                                                                                                                                        (("3"
                                                                                                                                                          (expand
                                                                                                                                                           "length"
                                                                                                                                                           1
                                                                                                                                                           2)
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("4"
                                                                                                                                                      (hide
                                                                                                                                                       3
                                                                                                                                                       -1
                                                                                                                                                       -2)
                                                                                                                                                      (("4"
                                                                                                                                                        (expand
                                                                                                                                                         "dif_elem?"
                                                                                                                                                         1)
                                                                                                                                                        (("4"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("4"
                                                                                                                                                            (expand
                                                                                                                                                             "lst_"
                                                                                                                                                             -3
                                                                                                                                                             1)
                                                                                                                                                            (("4"
                                                                                                                                                              (rewrite
                                                                                                                                                               "nth_append_uni")
                                                                                                                                                              (("1"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "lst_"
                                                                                                                                                                       -2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "nth_append_uni")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lift-if)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (split)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "dif_elem?"
                                                                                                                                                                                 -11)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -11
                                                                                                                                                                                   "i"
                                                                                                                                                                                   "j")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "lst_"
                                                                                                                                                                                 -4)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "length_append"
                                                                                                                                                                                   -4)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -4
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "length"
                                                                                                                                                                                       -4
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "nth"
                                                                                                                                                                                         -1
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (reveal
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                 "pos?_mem2")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   1
                                                                                                                                                                                                   "nth(lst, i)")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                     "member_nth_uni")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                       "equal?")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "equivalence?"
                                                                                                                                                                                                         -1)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "symmetric?")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -2
                                                                                                                                                                                                               "nth(lst, i)"
                                                                                                                                                                                                               "car(lst2)")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "lst_"
                                                                                                                                                                           -4)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "length_append"
                                                                                                                                                                             -4)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "lst_"
                                                                                                                                                                       -2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "length_append")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "length"
                                                                                                                                                                           -2
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "length"
                                                                                                                                                                             -2
                                                                                                                                                                             2)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "nth"
                                                                                                                                                                               -1
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "lst_"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     "nth_append_uni")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lift-if)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "lst_")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "length_append")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "length"
                                                                                                                                                                                             -3
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "length"
                                                                                                                                                                                                 -3
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (reveal
                                                                                                                                                                                                     3)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                       "pos?_mem2")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         1
                                                                                                                                                                                                         "nth(lst, j)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (rewrite
                                                                                                                                                                                                           "member_nth_uni")
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "lst_"
                                                                                                                                                                                       -3)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (rewrite
                                                                                                                                                                                         "length_append")
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "lst_"
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "length_append")
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "lst_")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "coef_"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "length_append"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "length_append"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "length"
                                                                                                                                           1
                                                                                                                                           3)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               1
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "length"
                                                                                                                                                 1
                                                                                                                                                 3)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (expand
                                                                                                                               "lst_"
                                                                                                                               1)
                                                                                                                              (("3"
                                                                                                                                (rewrite
                                                                                                                                 "length_append"
                                                                                                                                 1)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   1
                                                                                                                                   2)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (hide
                                                                                                                               3
                                                                                                                               -2
                                                                                                                               -3)
                                                                                                                              (("4"
                                                                                                                                (reveal
                                                                                                                                 3)
                                                                                                                                (("4"
                                                                                                                                  (expand
                                                                                                                                   "dif_elem?"
                                                                                                                                   2)
                                                                                                                                  (("4"
                                                                                                                                    (skeep)
                                                                                                                                    (("4"
                                                                                                                                      (expand
                                                                                                                                       "lst_"
                                                                                                                                       (-1
                                                                                                                                        -2))
                                                                                                                                      (("4"
                                                                                                                                        (rewrite
                                                                                                                                         "length_append")
                                                                                                                                        (("4"
                                                                                                                                          (expand
                                                                                                                                           "length"
                                                                                                                                           -1
                                                                                                                                           1)
                                                                                                                                          (("4"
                                                                                                                                            (expand
                                                                                                                                             "length"
                                                                                                                                             -2
                                                                                                                                             1)
                                                                                                                                            (("4"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("4"
                                                                                                                                                (expand
                                                                                                                                                 "length"
                                                                                                                                                 -2
                                                                                                                                                 2)
                                                                                                                                                (("4"
                                                                                                                                                  (expand
                                                                                                                                                   "lst_"
                                                                                                                                                   -3
                                                                                                                                                   1)
                                                                                                                                                  (("4"
                                                                                                                                                    (rewrite
                                                                                                                                                     "nth_append_uni")
                                                                                                                                                    (("1"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("1"
                                                                                                                                                        (prop)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "lst_"
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "nth_append_uni")
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (prop)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "dif_elem?"
                                                                                                                                                                     -11)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -11
                                                                                                                                                                       "i"
                                                                                                                                                                       "j")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "nth"
                                                                                                                                                                     -1
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "pos?_mem2")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           2
                                                                                                                                                                           "nth(lst, i)")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "member_nth_uni")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "equal?")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "equivalence?"
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "symmetric?"
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -2
                                                                                                                                                                                       "nth(lst, i)"
                                                                                                                                                                                       "car(lst2)")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (expand
                                                                                                                                                               "length"
                                                                                                                                                               1
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "length"
                                                                                                                                                                 1
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "nth"
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "lst_"
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "nth_append_uni")
                                                                                                                                                                (("2"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "pos?_mem2")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     2
                                                                                                                                                                     "nth(lst, j)")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "member_nth_uni")
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "length"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "length"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (case "length(new_lst1) = length(new_coef1)")
            (("1" (replace -1 :dir rl)
              (("1" (lemma "count_elem_len_remove")
                (("1" (inst?)
                  (("1" (inst -1 "coef")
                    (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "count_elem_len[T]")
              (("2" (hide -2 -3)
                (("2" (inst?)
                  (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "count_elem_len[T]")
            (("3" (inst?) (("3" (assert) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (lemma "count_elem_len_remove")
            (("4" (inst?)
              (("4" (inst -1 "coef")
                (("4" (assert) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem_len formula-decl nil list_theory nil)
    (count_elem_len_remove formula-decl nil more_list_theory_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (increment_len formula-decl nil list_theory nil)
    (member_append_uni formula-decl nil list_theory nil)
    (lst_ skolem-const-decl "list[T]" more_list_theory_props nil)
    (coef_ skolem-const-decl "list[nat]" more_list_theory_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (coef1_ skolem-const-decl "list[nat]" more_list_theory_props nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (count_elem_nth_lt formula-decl nil more_list_theory_props nil)
    (count_remove2 formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_num_dif 0
  (count_elem_num_dif-1 nil 3847825391
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem" 1)
            (("" (assert)
              (("" (lift-if)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (lemma "append_null[T]")
                      (("1" (inst -1 "lst")
                        (("1" (case "lst2 = null")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (use "dif_elem_num_dif[T]")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1"
                          (case "lst2 = cons(car(lst2), cdr(lst2))")
                          (("1" (replace -1 1)
                            (("1" (assert)
                              (("1"
                                (inst -3 "cdr(lst2)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma
                                           "num_dif_append_cons[T]")
                                          (("1"
                                            (rewrite "pos?_mem2")
                                            (("1"
                                              (skolem -4 "y")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "equal?"
                                                   "lst"
                                                   "cdr(lst2)"
                                                   "car(lst2)"
                                                   "y")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality 1) nil nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst -1 "cdr(lst2)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (rewrite "append_assoc" 2)
                                      (("1"
                                        (expand "append" 2 2)
                                        (("1"
                                          (expand "append" 2 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "lst2 = cons(car(lst2), cdr(lst2))")
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 3)
                                    (("2"
                                      (expand "dif_elem?" 1)
                                      (("2"
                                        (skolem 1 ("i" "j"))
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "length_append")
                                            (("2"
                                              (expand "length" -1 1)
                                              (("2"
                                                (expand "length" -2 1)
                                                (("2"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "dif_elem?"
                                                       -4)
                                                      (("2"
                                                        (rewrite
                                                         "nth_append_uni")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "nth_append_uni")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "i"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "pos?_mem2")
                                                                            (("2"
                                                                              (inst
                                                                               3
                                                                               "nth(lst, i)")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "member_nth_uni")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "equal?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "equivalence?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "symmetric?"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "nth(lst, i)"
                                                                                           "car(lst2)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "nth_append_uni")
                                                                    (("2"
                                                                      (rewrite
                                                                       "pos?_mem2")
                                                                      (("2"
                                                                        (inst
                                                                         3
                                                                         "nth(lst, j)")
                                                                        (("2"
                                                                          (rewrite
                                                                           "member_nth_uni")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dif_elem_num_dif formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (num_dif_append_cons formula-decl nil list_theory nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (num_dif def-decl "nat" list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_nth_gt_TCC1 0
  (count_elem_nth_gt_TCC1-1 nil 3847897437
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (replace -1 -5)
          (("" (use "count_elem_num_dif")
            (("" (assert)
              (("" (replace -1)
                (("" (hide -1 -2 -3)
                  (("" (use "count_elem_num_dif")
                    (("" (assert)
                      (("" (prop)
                        (("1" (replace -2)
                          (("1" (replace -1)
                            (("1" (expand "append" 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (use "remove_lst_elem_num_dif[T]")
                                  (("1"
                                    (use "dif_elem_num_dif[T]")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (remove_lst_elem_num_dif formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (dif_elem_num_dif formula-decl nil list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem_num_dif formula-decl nil more_list_theory_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (count_elem_nth_gt subtype
    "(number_fields.-)(more_list_theory_props.n, list_props[more_list_theory_props.T].length(more_list_theory_props.lst))"
    "below[length[T](new_lst1)]")))
 (count_elem_nth_gt 0
  (count_elem_nth_gt-1 nil 3847911410
   ("" (measure-induct "length(lst2)" "lst2")
    (("1" (skolem 1 "lst2")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "count_elem" 1 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (prop)
                      (("1"
                        (name-replace "i"
                         "pos?(car(lst2), lst, equal?)`2")
                        (("1" (reveal -1)
                          (("1" (expand "remove" 1)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (reveal -3)
                                      (("1"
                                        (inst -1 "cdr(lst2)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "count_elem"
                                                     -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "increment_len")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "pos?_mem2")
                                    (("2"
                                      (skolem -2 "x")
                                      (("2"
                                        (inst 1 "x")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "equal?")
                                              (("2"
                                                (expand
                                                 "equivalence?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "symmetric?"
                                                     -2)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "car(lst2)"
                                                       "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst -1 "cdr(lst2)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (case
                                 "n >= length(append(lst, cons(car(lst2), null)))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand "remove" 2 2)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (rewrite
                                                       "pos?_mem2")
                                                      (("1"
                                                        (inst 1 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "equal?")
                                                            (("1"
                                                              (expand
                                                               "equivalence?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "symmetric?"
                                                                   -2)
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "x"
                                                                     "car(lst2)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (expand
                                                     "count_elem"
                                                     1
                                                     2)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (hide-all-but
                                                           -1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 1)
                                                          (("2"
                                                            (expand
                                                             "append"
                                                             1
                                                             3)
                                                            (("2"
                                                              (expand
                                                               "append"
                                                               1
                                                               3)
                                                              (("2"
                                                                (reveal
                                                                 -4)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "remove(cdr(lst2), lst, equal?)")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "remove_lst_elem_append")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "length_append")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "count_elem"
                                                                             -2
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "count_elem_num_dif")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "append(coef, cons[nat](1, null))"
                                                                                 "equal?"
                                                                                 "append(lst, cons(car(lst2), null))"
                                                                                 "cdr(lst2)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "count_elem_num_dif")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "remove_lst_elem_num_dif[T]"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "remove_lst_elem_num_dif[T]"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "remove_lst_elem_num_dif[T]"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "dif_elem_num_dif"
                                                                                                           ("lst"
                                                                                                            "lst"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "remove_lst_elem_append[T]")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "num_dif(cons(car(lst2), null), equal?) >=  num_dif(remove(cons(car(lst2), null), lst, equal?), equal?)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "remove"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "remove"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "num_dif"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "remove"
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       2)
                                                                                      (("2"
                                                                                        (use
                                                                                         "dif_elem_cons_append[T]")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (rewrite
                                                                           "length_append"
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("5"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (use
                                                                         "remove_lst_elem_len[T]")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (expand "count_elem" -2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but (1 -4 2))
                                      (("3"
                                        (use "dif_elem_cons_append[T]")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (rewrite "length_append")
                                      (("4"
                                        (rewrite "length_append")
                                        (("4"
                                          (expand "length" 1 1)
                                          (("4"
                                            (expand "length" 1 3)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (expand "length" 1 2)
                                                (("4"
                                                  (expand "length" 1 3)
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (expand "length" 1 1)
                                      (("2"
                                        (expand "length" 1 2)
                                        (("2"
                                          (case "n = length(lst)")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (lemma
                                               "count_elem_nth_lt")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst -1 "n")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (rewrite
                                                                 "nth_append_uni"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   2
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "remove"
                                                                         2)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "pos?_mem2")
                                                                                (("1"
                                                                                  (inst
                                                                                   2
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "equal?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "equivalence?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "symmetric?"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "x"
                                                                                               "car(lst2)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "count_elem"
                                                                                 1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "count_elem_nth_lt")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "0")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "append"
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "length_append")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "length_append")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (rewrite
                                                                                                 "length_append")
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (hide-all-but
                                                                                                 (-4
                                                                                                  1
                                                                                                  2))
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "append"
                                                                                                   1)
                                                                                                  (("4"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("4"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append")
                                                        (("2"
                                                          (rewrite
                                                           "length_append")
                                                          (("2"
                                                            (hide-all-but
                                                             (-5 1))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (rewrite
                                                         "length_append")
                                                        (("3"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (hide-all-but
                                                         (-4 1 2))
                                                        (("4"
                                                          (use
                                                           "dif_elem_cons_append[T]")
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (assert)
            (("2" (replace -1 -5)
              (("2" (use "count_elem_num_dif")
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (replace -4)
                      (("2" (hide -1)
                        (("2" (use "count_elem_num_dif")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "append" 1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (rewrite
                                       "remove_lst_elem_num_dif"
                                       :dir
                                       rl)
                                      (("1"
                                        (use
                                         "dif_elem_num_dif"
                                         ("lst" "lst"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (increment_len formula-decl nil list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (count_elem_nth_lt formula-decl nil more_list_theory_props nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_lst_elem_len formula-decl nil list_theory nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (count_elem_num_dif formula-decl nil more_list_theory_props nil)
    (dif_elem_cons_append formula-decl nil list_theory nil)
    (dif_elem_num_dif formula-decl nil list_theory nil)
    (num_dif def-decl "nat" list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (remove_lst_elem_num_dif formula-decl nil list_theory nil)
    (remove_lst_elem_append formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (remove def-decl "list[T]" list_theory nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_nth_gt2_TCC1 0
  (count_elem_nth_gt2_TCC1-1 nil 3847961390
   ("" (skeep)
    (("" (skeep)
      (("" (use "count_elem_len[T]")
        (("" (assert) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (count_elem_len formula-decl nil list_theory nil))
   nil
   (count_elem_nth_gt2 subtype "more_list_theory_props.n"
    "below[length[nat](new_coef)]")))
 (count_elem_nth_gt2_TCC2 0
  (count_elem_nth_gt2_TCC2-1 nil 3847961390
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (case "length(new_lst1) = length(new_coef1)")
          (("1" (replace -1 1 :dir rl)
            (("1" (use "count_elem_num_dif")
              (("1" (assert)
                (("1" (replace -3 :dir rl)
                  (("1" (replace -1)
                    (("1" (use "remove_lst_elem_num_dif[T]")
                      (("1" (assert)
                        (("1" (replace -1 :dir rl)
                          (("1" (hide -1 -2)
                            (("1" (lemma "count_elem_num_dif")
                              (("1"
                                (inst
                                 -1
                                 "null"
                                 "equal?"
                                 "null"
                                 "remove(lst2, lst, equal?)")
                                (("1"
                                  (replace -5 :dir rl)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "append" 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma
                                               "dif_elem_num_dif[T]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "equal?"
                                                 "lst")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 -2)
            (("2" (use "count_elem_len[T]")
              (("2" (assert)
                (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (count_elem_num_dif formula-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (remove_lst_elem_num_dif formula-decl nil list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (dif_elem_num_dif formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (remove def-decl "list[T]" list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_elem_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (count_elem_nth_gt2 subtype
    "(number_fields.-)(more_list_theory_props.n, list_props[more_list_theory_props.T].length(more_list_theory_props.lst))"
    "below[length[nat](new_coef1)]")))
 (count_elem_nth_gt2 0
  (count_elem_nth_gt2-1 nil 3847961390
   ("" (measure-induct "length(lst2)" "lst2")
    (("1" (skolem 1 "lst2")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "count_elem" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (hide -2)
                  (("2"
                    (name-replace "i" "pos?(car(lst2), lst, equal?)`2")
                    (("2" (expand "remove" 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("1" (hide -1)
                              (("1"
                                (reveal -3)
                                (("1"
                                  (inst -1 "cdr(lst2)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand "count_elem" -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "i" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil)
                                         ("5"
                                          (rewrite "increment_len")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (rewrite "pos?_mem2")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "y")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "equal?")
                                        (("2"
                                          (expand "equivalence?" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "symmetric?" -2)
                                              (("2"
                                                (inst
                                                 -2
                                                 "car(lst2)"
                                                 "y")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1)
                  (("3" (expand "remove" 2)
                    (("3" (lift-if)
                      (("3" (assert)
                        (("3" (prop)
                          (("1" (hide 1)
                            (("1" (skeep)
                              (("1"
                                (rewrite "pos?_mem2")
                                (("1"
                                  (inst 1 "x")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "equal?")
                                      (("1"
                                        (expand "equivalence?" -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "symmetric?" -2)
                                            (("1"
                                              (inst -2 "x" "car(lst2)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 1)
                            (("2" (expand "count_elem" 1 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide-all-but -1)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "append" 2 3)
                                    (("2"
                                      (expand "append" 2 3)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (inst -1 "cdr(lst2)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (case
                                                 "n >= length(append(lst, cons(car(lst2), null)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (reveal -4)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "remove(cdr(lst2), lst, equal?)")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("1"
                                                                            (case
                                                                             "remove(cdr(lst2), append(lst, cons(car(lst2), null)), equal?) = remove(remove(cdr(lst2), lst, equal?),
                             cons(car(lst2), null), equal?)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               3)
                                                                              (("2"
                                                                                (lemma
                                                                                 "remove_lst_elem_append[T]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "count_elem_num_dif")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "count_elem_num_dif")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "remove_lst_elem_num_dif"
                                                                                             -2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (use
                                                                                               "dif_elem_num_dif"
                                                                                               ("lst"
                                                                                                "lst"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "remove"
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "pos?_mem2")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "x")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "equal?")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "equivalence?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "symmetric?"
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -2
                                                                                                                             "x"
                                                                                                                             "car(lst2)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "remove_lst_elem_num_dif"
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "num_dif"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "num_dif(cons(car(lst2), null), equal?) = 1")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "remove"
                                                                                                                     -2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "remove(remove(cdr(lst2), lst, equal?), car(lst2), equal?) = remove(remove(cdr(lst2), lst, equal?),
                       cons(car(lst2), null), equal?)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "remove_lst_elem_cons_null[T]")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "equal?"
                                                                                                                                 "remove(cdr(lst2), lst, equal?)"
                                                                                                                                 "cons(car(lst2), null)")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "remove_lst_elem_cons_null[T]")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "equal?"
                                                                                                                                           "remove(remove(cdr(lst2), lst, equal?), car(lst2), equal?)"
                                                                                                                                           "null")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "equal?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "equivalence?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "reflexive?"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "car(lst2)")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "num_dif"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "remove"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "remove"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "num_dif"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "equal?")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "equivalence?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "reflexive?"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "car(lst2)")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (rewrite
                                                                       "length_append"
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("4"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("5"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    5))
                                                                  (("2"
                                                                    (use
                                                                     "remove_lst_elem_len[T]")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "count_elem"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but
                                                       (-4 1 2))
                                                      (("3"
                                                        (use
                                                         "dif_elem_cons_append[T]")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide 3)
                                                      (("4"
                                                        (rewrite
                                                         "length_append")
                                                        (("4"
                                                          (rewrite
                                                           "length_append")
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 3)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (case
                                                       "n = length(lst)")
                                                      (("1"
                                                        (hide 1 -3)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (reveal 3)
                                                            (("1"
                                                              (lemma
                                                               "count_elem_nth_lt")
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "nth_append_uni"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -4)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "count_elem_nth_lt")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "length(lst)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "nth_append_uni")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "count_elem_nth_lt")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (use
                                                                                                                                       "remove_lst_elem_count[T]")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("4"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2
                                                                                                             -2
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "length_append")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "length_append")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (rewrite
                                                                                                   "length_append")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     2
                                                                                                     -2
                                                                                                     -3)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("4"
                                                                                                    (use
                                                                                                     "dif_elem_cons_append[T]")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append")
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (rewrite
                                                                         "length_append")
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         2)
                                                                        (("4"
                                                                          (use
                                                                           "dif_elem_cons_append[T]")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append")
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (assert)
            (("2" (case "length(new_coef1) = length(new_lst1)")
              (("1" (replace -1)
                (("1" (replace -2 -6)
                  (("1" (replace -4)
                    (("1" (use "count_elem_num_dif")
                      (("1" (prop)
                        (("1" (replace -1)
                          (("1" (expand "append" 1)
                            (("1" (hide -1 -2)
                              (("1"
                                (use "count_elem_num_dif")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (rewrite
                                       "remove_lst_elem_num_dif"
                                       -6
                                       :dir
                                       rl)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (use
                                           "dif_elem_num_dif"
                                           ("lst" "lst"))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2)
                (("2" (use "count_elem_len[T]")
                  (("2" (assert)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (use "count_elem_len[T]")
            (("3" (assert) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem_len formula-decl nil list_theory nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (count_elem_nth_lt formula-decl nil more_list_theory_props nil)
    (remove_lst_elem_count formula-decl nil list_theory nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (dif_elem_cons_append formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_lst_elem_len formula-decl nil list_theory nil)
    (count_elem_num_dif formula-decl nil more_list_theory_props nil)
    (dif_elem_num_dif formula-decl nil list_theory nil)
    (num_dif def-decl "nat" list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_lst_elem_cons_null formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (remove_lst_elem_num_dif formula-decl nil list_theory nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (remove_lst_elem_append formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (symmetric? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (increment def-decl "list[nat]" list_theory nil)
    (increment_len formula-decl nil list_theory nil)
    (i skolem-const-decl "nat" more_list_theory_props nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (remove def-decl "list[T]" list_theory nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem2_len 0
  (count_elem2_len-1 nil 3847978723
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem2" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "num_dif" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("2" (expand "length" 2 1)
                        (("2" (inst -1 "remove(lst, car(lst), equal?)")
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "remove" 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (use "remove_elem_len[T]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "equal?")
                                      (("2"
                                        (expand "equivalence?" -1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "reflexive?" -1)
                                            (("2"
                                              (inst -1 "car(lst)")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove def-decl "list[T]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_dif def-decl "nat" list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem2_mem 0
  (count_elem2_mem-1 nil 3847988782
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem2" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "remove" -1 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1"
                            (inst -3
                             "remove(cdr(lst), car(lst), equal?)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "equal?" "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "remove_elem_mem2[T]")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "remove_elem_len[T]")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "equal?")
                            (("2" (expand "equivalence?" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "reflexive?" -1)
                                  (("2" (inst -1 "car(lst)") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[T]" list_theory nil)
    (remove_elem_mem2 formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem2_mem2 0
  (count_elem2_mem2-1 nil 3848930221
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (case "null?(lst)")
            (("1" (grind) nil nil)
             ("2" (case "equal?(x, car(lst))")
              (("1" (inst 2 "car(lst)") (("1" (grind) nil nil)) nil)
               ("2" (inst -1 "remove(lst, car(lst), equal?)")
                (("2" (expand "count_elem2" 3)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (inst -1 "equal? " "x")
                        (("1" (prop)
                          (("1" (skeep)
                            (("1" (inst 3 "y")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "remove_elem_mem[T]")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "remove" 1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (use "remove_elem_len[T]")
                              (("1" (grind) nil nil)) nil)
                             ("2" (typepred "equal?")
                              (("2"
                                (expand "equivalence?" -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "reflexive?" -1)
                                    (("2"
                                      (inst -1 "car(lst)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (count def-decl "nat" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (remove_elem_mem formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem2_same_len 0
  (count_elem2_same_len-1 nil 3847982808
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem2" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "length" 2 1)
                  (("2" (expand "remove" 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (prop)
                          (("1"
                            (inst -2
                             "remove(cdr(lst), car(lst), equal?)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use "remove_elem_len[T]")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "equal?")
                              (("2"
                                (expand "equivalence?" -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "reflexive?" -1)
                                    (("2"
                                      (inst -1 "car(lst)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count def-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (remove def-decl "list[T]" list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem2_cor 0
  (count_elem2_cor-1 nil 3847746444
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "equal_lst_nth[T]")
            (("" (decompose-equality 1)
              (("1" (inst?)
                (("1" (assert)
                  (("1"
                    (case "length(count_elem2(lst, equal?)`1) = length(count_elem(null, null, lst, equal?)`1)")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (typepred "n")
                          (("1" (expand "count_elem2" 2)
                            (("1" (lift-if)
                              (("1"
                                (split 2)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "nth" 2 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "count_elem" 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "append"
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         2)
                                                        (("2"
                                                          (lemma
                                                           "count_elem_nth_lt")
                                                          (("2"
                                                            (hide 1)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (hide
                                                                       2
                                                                       3
                                                                       4
                                                                       -3
                                                                       -4)
                                                                      (("4"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 4)
                                            (("2"
                                              (expand "count_elem" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 1)
                                                      (("2"
                                                        (expand
                                                         "append"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "remove"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "count_elem_nth_gt")
                                                                    (("1"
                                                                      (hide
                                                                       -5)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -4)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "remove(cdr(lst), cons(car(lst), null), equal?)")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "equal?")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "remove(cdr(lst), car(lst), equal?) = remove(cdr(lst), cons(car(lst), null), equal?)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "remove_lst_elem_cons_null[T]")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "remove_lst_elem_cons_null[T]")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "remove_lst_elem_len[T]")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (replace
                                                                                   -3
                                                                                   -2)
                                                                                  (("2"
                                                                                    (reveal
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "count_elem"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "append"
                                                                                           -2)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide
                                                                                 2)
                                                                                (("5"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (typepred
                                                                     "equal?")
                                                                    (("2"
                                                                      (expand
                                                                       "equivalence?"
                                                                       -1)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "reflexive?"
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "car(lst)")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (use "count_elem_num_dif")
                        (("2" (prop)
                          (("1" (replace -1)
                            (("1" (expand "append" 1)
                              (("1"
                                (rewrite "count_elem2_len")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3 -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (use "equal_lst_nth[nat]")
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2"
                        (case "length(count_elem2(lst, equal?)`2) = length(count_elem(null, null, lst, equal?)`2)")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (typepred "n")
                              (("1"
                                (expand "count_elem2" 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (expand "nth" 2 1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (expand "count_elem" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (expand
                                                       "append"
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         "count_elem_nth_lt")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "0")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "count"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "equal?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "equivalence?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "reflexive?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "car(lst)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "count_elem" 2 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 1)
                                                    (("2"
                                                      (expand
                                                       "append"
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         "count_elem_nth_gt2")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "n")
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "remove(lst, car(lst), equal?)")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (case
                                                                                           "remove(cdr(lst), car(lst), equal?) = remove(cdr(lst), cons(car(lst), null), equal?)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "remove_lst_elem_cons_null[T]")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "equal?"
                                                                                                 "cdr(lst)"
                                                                                                 "cons(car(lst), null)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "remove_lst_elem_cons_null[T]")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "equal?"
                                                                                                           "remove(cdr(lst), car(lst), equal?)"
                                                                                                           "null")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "equal?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "equivalence?"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "reflexive?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "car(lst)")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove"
                                                                                 1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (use
                                                                                       "remove_elem_len[T]")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "equal?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "equivalence?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "reflexive?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "car(lst)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "count_elem"
                                                                       -1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "append"
                                                                               -1)
                                                                              (("2"
                                                                                (use
                                                                                 "count_elem_len[T]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   2)
                                                                  (("5"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (use "count_elem_len[T]")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (use "count_elem2_same_len")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (rewrite
                                                 "count_elem2_len")
                                                (("1"
                                                  (use
                                                   "count_elem_num_dif")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand
                                                         "append"
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem2_len formula-decl nil more_list_theory_props nil)
    (count_elem_num_dif formula-decl nil more_list_theory_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (reflexive? const-decl "bool" relations nil)
    (remove def-decl "list[T]" list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_lst_elem_len formula-decl nil list_theory nil)
    (remove_lst_elem_cons_null formula-decl nil list_theory nil)
    (count_elem_nth_gt formula-decl nil more_list_theory_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (count_elem_nth_lt formula-decl nil more_list_theory_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count def-decl "nat" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (count_elem2_same_len formula-decl nil more_list_theory_props nil)
    (count_elem_len formula-decl nil list_theory nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (count_elem_nth_gt2 formula-decl nil more_list_theory_props nil)
    (equal_lst_nth formula-decl nil list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_remove 0
  (count_elem_remove-1 nil 3847983592
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (use "count_elem2_cor")
              (("" (replace -1 :dir rl)
                (("" (hide -1)
                  (("" (lemma "count_elem2_cor")
                    ((""
                      (inst -1 "equal?"
                       "remove(lst, nth(count_elem2(lst, equal?)`1, i), equal?)")
                      (("" (replace -1 :dir rl)
                        (("" (hide -1)
                          (("" (expand "count_elem2" 1 1)
                            (("" (lift-if)
                              ((""
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality 2)
                                  (("1"
                                    (expand "remove" 1 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "count_elem2"
                                                   1
                                                   3)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (name-replace
                                             "lst_"
                                             "remove(lst, car(lst), equal?)")
                                            (("2"
                                              (reveal -1)
                                              (("2"
                                                (expand "nth" 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (expand
                                                         "count_elem2"
                                                         1
                                                         3)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (expand
                                                             "remove"
                                                             1
                                                             2)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (lemma
                                                                   "remove_elem_cor[T]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "equal?"
                                                                     "lst"
                                                                     " car(lst)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "count0_eq"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (name-replace
                                                                         "x"
                                                                         "nth(count_elem2(lst_, equal?)`1, i - 1)")
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "x")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "x"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "count_elem2_mem")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "equal?"
                                                                                     "lst_"
                                                                                     "nth(count_elem2(lst_, equal?)`1, i - 1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "member_nth_uni")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "count_elem2"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -3
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "equal?")
                                                                              (("2"
                                                                                (expand
                                                                                 "equivalence?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "symmetric?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "x"
                                                                                       "car(lst)")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (reveal
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "count_elem2"
                                                                     2
                                                                     2)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "remove"
                                                                         1
                                                                         2)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide
                                                                               -2)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "x"
                                                                                 "nth(count_elem2(lst_, equal?)`1, i-1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "remove"
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "remove_elem_com[T]")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -3)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "lst_")
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "equal?"
                                                                                                       "i-1")
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "count_elem2_cor"
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "count_elem2_cor"
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (rewrite
                                                                                                           "count_elem2_cor"
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "count_elem2"
                                                                                                             -4
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "remove"
                                                                                                                 -4)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -3
                                                                                                       1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "remove_elem_len[T]")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "equal?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "equivalence?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "reflexive?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "car(lst)")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "count_elem2" 1 1)
                                    (("2"
                                      (name-replace
                                       "lst_"
                                       "remove(lst, car(lst), equal?)")
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (expand "remove" 1 1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (name-replace
                                                 "x"
                                                 "nth(count_elem2(lst, equal?)`1, i)")
                                                (("2"
                                                  (reveal -1)
                                                  (("2"
                                                    (expand "nth" -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "count_elem2"
                                                         -1)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (expand
                                                             "remove"
                                                             2
                                                             2)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (hide
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "count_elem2_mem")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "equal?"
                                                                       "lst_"
                                                                       "x")
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (lemma
                                                                             "remove_elem_cor[T]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "equal?"
                                                                               "lst"
                                                                               "car(lst)")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "count0_eq"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "equal?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "equivalence?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "symmetric?"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "x"
                                                                                               "car(lst)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             "member_nth_uni")
                                                                            (("2"
                                                                              (expand
                                                                               "count_elem2"
                                                                               -4)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -4
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "count_elem2"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (decompose-equality)
                                                                      (("1"
                                                                        (reveal
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_elem_no_effect[T]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "equal?"
                                                                             "lst"
                                                                             "x"
                                                                             "car(lst)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "remove"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "count"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "count"
                                                                                           2
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "equal?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "equivalence?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "reflexive?"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "car(lst)")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "remove"
                                                                           2
                                                                           2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (use
                                                                                 "remove_elem_com[T]")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "remove"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -10)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "lst_")
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "i-1")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "count_elem2_cor"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "count_elem2_cor"
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "count_elem2"
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -4
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "lst_"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "lst_"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "remove"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "remove_elem_len[T]")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "equal?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "equivalence?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "reflexive?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "car(lst)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem2_cor formula-decl nil more_list_theory_props nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_com formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (remove_elem_cor formula-decl nil list_theory nil)
    (count0_eq formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (count_elem2_mem formula-decl nil more_list_theory_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (i skolem-const-decl "nat" more_list_theory_props nil)
    (x skolem-const-decl "T" more_list_theory_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count def-decl "nat" list_theory nil)
    (remove_elem_no_effect formula-decl nil list_theory nil)
    (lst_ skolem-const-decl "list[T]" more_list_theory_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (remove def-decl "list[T]" list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_mem_nth_TCC1 0
  (count_elem_mem_nth_TCC1-1 nil 3847782568
   ("" (skeep)
    (("" (skeep)
      (("" (use "count_elem_len[T]")
        (("" (assert) (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (count_elem_len formula-decl nil list_theory nil))
   nil
   (count_elem_mem_nth subtype "more_list_theory_props.i"
    "below[length[nat](new_coef)]")))
 (count_elem_mem_nth 0
  (count_elem_mem_nth-1 nil 3848059291
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 "lst")
      (("1" (prop)
        (("1" (skeep)
          (("1" (rewrite "count_elem2_cor" :dir rl)
            (("1" (case "null?(lst)")
              (("1" (grind) nil nil)
               ("2" (case "equal?(x, car(lst))")
                (("1" (inst 2 "0")
                  (("1" (prop)
                    (("1" (expand "count_elem2" 1)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "length" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "count_elem2" 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "nth" 1 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "count_elem2" 1)
                      (("3" (lift-if)
                        (("3" (prop)
                          (("3" (expand "nth" 2 1)
                            (("3" (lemma "count_eq[T]")
                              (("3"
                                (inst -1 "equal?" "lst" "x" "car(lst)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "remove(lst, car(lst), equal?)")
                  (("2" (prop)
                    (("1" (inst -1 "equal?" "x")
                      (("1" (prop)
                        (("1" (skolem -1 "i")
                          (("1" (rewrite "count_elem2_cor" :dir rl)
                            (("1" (prop)
                              (("1"
                                (expand "count_elem2" 3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst 3 "i+1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "length" 1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "nth" 1)
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (expand "nth" 1)
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (use "count_remove2[T]")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (prop)
                                                (("3"
                                                  (typepred
                                                   "equal?"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "equivalence?"
                                                     -1)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (expand
                                                         "symmetric?"
                                                         -2)
                                                        (("3"
                                                          (inst
                                                           -2
                                                           "car(lst)"
                                                           "x")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "remove_elem_mem[T]")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "remove" 1 1)
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (use "remove_elem_len[T]")
                              (("1" (grind) nil nil)) nil)
                             ("2" (typepred "equal?")
                              (("2"
                                (expand "equivalence?" -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "reflexive?" -1)
                                    (("2"
                                      (inst -1 "car(lst)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (use "count_elem_len[T]")
          (("2" (assert)
            (("2" (skeep) (("2" (assert) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem_len formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (remove_elem_mem formula-decl nil list_theory nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd? const-decl "bool" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (symmetric? const-decl "bool" relations nil)
    (count_remove2 formula-decl nil list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (count_eq formula-decl nil list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem2_cor formula-decl nil more_list_theory_props nil)
    (count def-decl "nat" list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem2_dif_elem 0
  (count_elem2_dif_elem-1 nil 3849689599
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "dif_elem?" 1)
            (("" (skeep)
              (("" (expand "count_elem2" -4 1)
                (("" (lift-if)
                  (("" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "nth" -1 1)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "count_elem2" -2)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "nth" -1 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (name-replace
                                         "x"
                                         "nth(count_elem2(remove(lst, car(lst), equal?), equal?)`1,
                 j - 1)")
                                        (("1"
                                          (reveal -1)
                                          (("1"
                                            (lemma "count_elem2_mem")
                                            (("1"
                                              (inst
                                               -1
                                               "equal?"
                                               "remove(lst, car(lst), equal?)"
                                               "x")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (rewrite
                                                   "remove_elem_mem3")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (typepred
                                                       "equal?")
                                                      (("1"
                                                        (expand
                                                         "equivalence?"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "symmetric?"
                                                             -2)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "car(lst)"
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "member_nth_uni2")
                                                  (("2"
                                                    (inst 1 "j-1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nth" -1 2)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (expand "count_elem2" -2 2)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (name-replace
                                         "x"
                                         "nth(count_elem2(remove(lst, car(lst), equal?), equal?)`1,
                 i - 1)")
                                        (("1"
                                          (reveal -1)
                                          (("1"
                                            (lemma "count_elem2_mem")
                                            (("1"
                                              (inst
                                               -1
                                               "equal?"
                                               "remove(lst, car(lst), equal?)"
                                               "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "remove_elem_mem3")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "member_nth_uni2")
                                                    (("2"
                                                      (inst 1 "i-1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "count_elem2" -1 2)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (inst
                                         -2
                                         "remove(lst, car(lst), equal?)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "equal?")
                                            (("1"
                                              (expand "dif_elem?" -1)
                                              (("1"
                                                (inst -1 "i-1" "j-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand
                                                       "count_elem2"
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "count_elem2"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "remove" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (use
                                                   "remove_elem_len[T]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3 -1)
                                                  (("2"
                                                    (typepred "equal?")
                                                    (("2"
                                                      (expand
                                                       "equivalence?"
                                                       -1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "reflexive?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(lst)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (j skolem-const-decl "nat" more_list_theory_props nil)
    (remove_elem_mem3 formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (count_elem2_mem formula-decl nil more_list_theory_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove def-decl "list[T]" list_theory nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "nat" more_list_theory_props nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_theory_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dot_product_nth 0
  (dot_product_nth-1 nil 3848060654
   ("" (measure-induct "length(lst_nat1)" "lst_nat1")
    (("" (skolem 1 "lst_nat1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "nth" 1)
            (("" (lift-if)
              (("" (prop)
                (("1"
                  (case "NOT null?(lst_nat1) AND NOT null?(lst_nat2)")
                  (("1" (flatten)
                    (("1" (expand "remove" 3)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2"
                  (case "NOT null?(lst_nat1) AND NOT null?(lst_nat2)")
                  (("1" (flatten)
                    (("1" (expand "remove" 4 2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "remove" 4 1)
                            (("1" (expand "dot_product" 4 2)
                              (("1"
                                (expand "dot_product" 4 1)
                                (("1"
                                  (inst -1 "cdr(lst_nat1)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (remove def-decl "list[T]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

