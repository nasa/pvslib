(equality
 (equal?_TCC1 0
  (equal?_TCC1-1 nil 3805199365 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (equal? termination
    "equality.equal?(equality.t1, term_adt[constant, variable, f_symbol, ac_symbol].term1(equality.s))"
    "nil")))
 (equal?_TCC2 0
  (equal?_TCC2-1 nil 3805199365 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (equal? termination
    "equality.equal?(equality.t2, term_adt[constant, variable, f_symbol, ac_symbol].term2(equality.s))"
    "nil")))
 (equal?_TCC3 0
  (equal?_TCC3-1 nil 3805199365 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (equal? termination
    "equality.equal?(equality.arg, term_adt[constant, variable, f_symbol, ac_symbol].arg(equality.s))"
    "nil")))
 (equal?_TCC4 0
  (equal?_TCC4-1 nil 3805199365
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma "ac_select_size")
          (("" (inst -1 "sym" "i" "t")
            (("" (assert)
              (("" (hide 2)
                (("" (expand "is_ac_sym?" 1)
                  (("" (lemma "term_ac_app_eta")
                    (("" (inst? -1)
                      (("" (assert) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_select_size formula-decl nil term_properties nil))
   SHOSTAK
   (equal? termination
    "equality.equal?(term_properties.select(equality.sym, equality.t)(equality.i), term_properties.select(equality.sym, equality.s)(equality.j))"
    "nil")))
 (equal?_TCC5 0
  (equal?_TCC5-1 nil 3805199365
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (hide -5)
          (("" (lemma "ac_delete_size")
            (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_delete_size formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   SHOSTAK
   (equal? termination
    "equality.equal?(term_properties.delete(equality.sym, equality.t)(equality.i), term_properties.delete(equality.sym, equality.s)(equality.j))"
    "nil")))
 (equal?_TCC6 0
  (equal?_TCC6-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (equal? subtype "equality.args2"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (equal?_TCC7 0
  (equal?_TCC7-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (equal? subtype "equality.args1"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (equal?_TCC8 0
  (equal?_TCC8-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (equal? termination
    "equality.equal?(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(equality.args1), list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(equality.args2))"
    "nil")))
 (equal?_TCC9 0
  (equal?_TCC9-1 nil 3805638096 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil))
   nil
   (equal? subtype "equality.args1"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (perm?_TCC1 0
  (perm?_TCC1-1 nil 3805821573
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "remove_len") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (args type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (remove_len formula-decl nil list_theory nil))
   SHOSTAK
   (perm? termination
    "equality.perm?(list_theory[term[constant, variable, f_symbol, ac_symbol]].remove(equality.args1, equality.i), list_theory[term[constant, variable, f_symbol, ac_symbol]].remove(equality.args2, equality.j))"
    "nil")))
 (reorder?_TCC1 0
  (reorder?_TCC1-1 nil 3842280109
   ("" (skeep)
    (("" (skeep)
      (("" (rewrite "remove_len") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (args type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (remove_len formula-decl nil list_theory nil))
   nil
   (reorder? termination
    "equality.reorder?(list_theory[term[constant, variable, f_symbol, ac_symbol]].remove(equality.args1, equality.i), list_theory[term[constant, variable, f_symbol, ac_symbol]].remove(equality.args2, equality.j))"
    "nil")))
 (equal?_len 0
  (equal?_len-1 nil 3805638764
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (reveal -1)
                  (("2" (inst -1 "cdr(args1)") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK))
 (equal?_num_arg 0
  (equal?_num_arg-1 nil 3806353656
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (inst-cp -5 "term1(t)")
                  (("4" (prop)
                    (("1" (hide 1 2 3)
                      (("1" (inst -1 "f" "term1(s)")
                        (("1" (assert)
                          (("1" (inst -6 "term2(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "f" "term2(s)")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (hide 1 2 3 4)
                  (("5" (assert) (("5" (grind) nil nil)) nil)) nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (assert)
                      (("1" (case "ac_sym(t) = f")
                        (("1" (case "num_arg(f, t) = 1")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (rewrite "num_arg1_delete")
                                (("1"
                                  (expand "equal?" -11)
                                  (("1"
                                    (lemma "delete_num_arg")
                                    (("1"
                                      (inst -1 "f" "j" "s")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "num_arg(f, t) > 1")
                            (("1" (hide 1)
                              (("1"
                                (prop)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (lemma "num_arg_delete_ge1")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (inst
                                             -13
                                             "delete(f, t)(i)")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "f"
                                                 "delete(f, s)(j)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "num_arg_delete_ge1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f"
                                                       "j"
                                                       "s")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "num_arg(f, s) = 1")
                                                          (("1"
                                                            (lemma
                                                             "delete_ac_num_arg_gt1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "f"
                                                               "i"
                                                               "t")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand
                                                                     "is_ac_sym?"
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (lemma
                                                                         "num_arg1_delete")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f"
                                                                           "j"
                                                                           "s")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "equal?"
                                                                                 -17)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "num_arg_ge1")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "ac_delete_size")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "num_arg_ge1")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2 -3 -4 7) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (num_arg def-decl "nat" term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (> const-decl "bool" reals nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (delete def-decl "term" term_properties nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil term_properties nil)
    (num_arg1_delete formula-decl nil term_properties nil)
    (delete_num_arg formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   SHOSTAK))
 (equal?_num_arg2 0
  (equal?_num_arg2-1 nil 3850481986
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "num_arg" 4)
                  (("4" (inst-cp -5 "term1(t)")
                    (("4" (prop)
                      (("1" (inst -1 "term1(s)")
                        (("1" (assert)
                          (("1" (inst -6 "term2(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "term2(s)")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil) ("6" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (num_arg def-decl "nat" term_properties nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg def-decl "nat" term_properties nil)
    (select def-decl "term" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (equal?_append 0
  (equal?_append-1 nil 3805640100
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (prop)
              (("1" (hide -3) (("1" (grind) nil nil)) nil)
               ("2" (lemma "list_cons_eta[term]")
                (("2" (inst? -1)
                  (("2" (replace -1 3 rl)
                    (("2" (expand "append" 3 1)
                      (("2" (hide -1)
                        (("2" (lemma "list_cons_eta[term]")
                          (("2" (inst -1 "args2")
                            (("2" (replace -1 3 rl)
                              (("2"
                                (expand "append" 3 2)
                                (("2"
                                  (expand "equal?" 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -4 "cdr(args1)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst
                                           -1
                                           "cdr(args2)"
                                           "args3"
                                           "args4")
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (append def-decl "list[T]" list_props nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   SHOSTAK))
 (equal?_get_repeat_lst 0
  (equal?_get_repeat_lst-1 nil 3805640704
   ("" (measure-induct "n" "n")
    (("" (skolem 1 "n")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_repeat_lst" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "get_repeat_lst" 2 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (expand "equal?" 2)
                        (("2" (inst -1 "n-1") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (equal? def-decl "bool" equality nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   SHOSTAK))
 (equal?_get_lst_mult 0
  (equal?_get_lst_mult-1 nil 3805638096
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "get_lst_mult" 3 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_lst_mult" 3 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lemma "equal?_append")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 4)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (lemma "equal?_get_repeat_lst")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (reveal -2)
                                        (("2"
                                          (inst -1 "cdr(args1)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "cdr(args2)"
                                               "cdr(coef)")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal?_get_repeat_lst formula-decl nil equality nil)
    (equal?_append formula-decl nil equality nil))
   SHOSTAK))
 (equal?_ref 0
  (equal?_ref-1 nil 3806941516
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (expand "equal?" 1)
          (("" (lift-if)
            (("" (prop)
              (("1" (lemma "term_const_eta")
                (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil)
               ("2" (lemma "term_variable_eta")
                (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil)
               ("3" (grind) nil nil)
               ("4" (inst -2 "term1(t)") (("4" (grind) nil nil)) nil)
               ("5" (inst -2 "term2(t)") (("5" (grind) nil nil)) nil)
               ("6" (inst -2 "arg(t)") (("6" (grind) nil nil)) nil)
               ("7" (assert)
                (("7" (case "ac_app?(t)")
                  (("1" (assert)
                    (("1" (inst 2 "1" "1")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (lemma "num_arg_ge1")
                            (("2" (inst? -1) (("2" (assert) nil nil))
                              nil))
                            nil)
                           ("3" (inst? -2)
                            (("3" (assert)
                              (("3"
                                (lemma "ac_select_size")
                                (("3"
                                  (inst? -1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (lemma "ac_delete_size")
                            (("4" (inst? -1) (("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (equal? def-decl "bool" equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (delete def-decl "term" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (select def-decl "term" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (string type-eq-decl nil strings nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_const_eta formula-decl nil term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   SHOSTAK))
 (equal?_sym 0
  (equal?_sym-1 nil 3806002216
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -3)
                  (("1" (expand "equal?" 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (lemma "term_const_eta")
                          (("1" (inst? -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "equal?" 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (hide -3)
                        (("2" (lemma "term_variable_eta")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -3) (("3" (grind) nil nil)) nil)
                 ("4" (hide 1 2 3)
                  (("4" (expand "equal?" 1)
                    (("4" (assert)
                      (("4" (prop)
                        (("1" (inst -5 "term1(t)")
                          (("1" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -5 "term2(t)")
                          (("2" (prop)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "equal?" 5)
                  (("5" (assert) (("5" (grind) nil nil)) nil)) nil)
                 ("6" (hide 1 2 3 4 5)
                  (("6" (expand "equal?" 1)
                    (("6" (assert)
                      (("6" (prop)
                        (("6" (assert)
                          (("6" (prop)
                            (("1" (hide -3 -4)
                              (("1"
                                (reveal 1 2 3 4 5)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide -4)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "j" "i")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -2 1 rl)
                                      (("2"
                                        (case "equal?(t, s)")
                                        (("1"
                                          (lemma "equal?_num_arg")
                                          (("1"
                                            (inst
                                             -1
                                             "ac_sym(t)"
                                             "s"
                                             "t")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide -10)
                                                  (("1"
                                                    (reveal -3)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "select(ac_sym(t), t)(i)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "ac_select_size")
                                                          (("2"
                                                            (expand
                                                             "is_ac_sym?"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (reveal
                                                                   4
                                                                   5
                                                                   6
                                                                   7
                                                                   8)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -9)
                                                  (("2"
                                                    (reveal -3)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "delete(ac_sym(t), t)(i)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "ac_delete_size")
                                                          (("2"
                                                            (reveal
                                                             2
                                                             3
                                                             4
                                                             5
                                                             6)
                                                            (("2"
                                                              (hide
                                                               7
                                                               8)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -7 -8 2)
                                          (("2"
                                            (expand "equal?" 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (reveal 3 4 5 6 7)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (equal? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_const_eta formula-decl nil term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (select def-decl "term" term_properties nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (delete def-decl "term" term_properties nil)
    (equal?_num_arg formula-decl nil equality nil))
   SHOSTAK))
 (equal?_ac 0
  (equal?_ac-1 nil 3806332082
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (skeep)
              (("" (expand "are_ac?" -1)
                (("" (flatten)
                  (("" (lemma "equal?_num_arg")
                    (("" (inst? -1)
                      (("" (inst -1 "s")
                        (("" (assert)
                          (("" (hide -1)
                            (("" (case "num_arg(f, t) > 1")
                              (("1"
                                (expand "equal?" -6)
                                (("1"
                                  (replace -4 -6 rl)
                                  (("1"
                                    (hide -1 -2 -3 -4 -5)
                                    (("1"
                                      (skolem -1 ("n" "j"))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1 -2 -3 -4)
                                          (("1"
                                            (reveal -13)
                                            (("1"
                                              (inst
                                               -1
                                               "delete(f, t)(n)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f"
                                                   "delete(f, s)(j)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (case "n > i")
                                                        (("1"
                                                          (inst -2 "i")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               "k")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "j > k")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "k")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "num_arg_delete")
                                                                          (("1"
                                                                            (inst?
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -5
                                                                           -7
                                                                           -8)
                                                                          (("2"
                                                                            (lemma
                                                                             "gt_select_delete")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "n"
                                                                               "i"
                                                                               "t")
                                                                              (("2"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "gt_select_delete")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "f"
                                                                                     "j"
                                                                                     "k"
                                                                                     "s")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2
                                                                                         -5)
                                                                                        (("2"
                                                                                          (reveal
                                                                                           -12
                                                                                           -17)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "num_arg_delete")
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   -12
                                                                                                   -13)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   2)
                                                                                  (("2"
                                                                                    (reveal
                                                                                     -11
                                                                                     -12)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "delete_ac_num_arg_gt1")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "t")
                                                                            (("3"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "is_ac_sym?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "equal?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -8
                                                                                           -10
                                                                                           -13)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             -13
                                                                                             -14
                                                                                             -15)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "delete_ac_num_arg_gt1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "f"
                                                                                                 "k"
                                                                                                 "s")
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -17
                                                                                                   -19)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -17
                                                                                               -19
                                                                                               -15
                                                                                               -20)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "k"
                                                                                                   "s")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "n-1"
                                                                                             "j-1")
                                                                                            (("3"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (reveal
                                                                                                 -5
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -8
                                                                                                   -9
                                                                                                   -11
                                                                                                   -12)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "num_arg_delete_ge1")
                                                                                                      (("2"
                                                                                                        (inst?
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("4"
                                                                                                (hide
                                                                                                 -6
                                                                                                 -7
                                                                                                 -8
                                                                                                 -9
                                                                                                 -10
                                                                                                 -11
                                                                                                 -12)
                                                                                                (("4"
                                                                                                  (lemma
                                                                                                   "num_arg_delete_ge1")
                                                                                                  (("4"
                                                                                                    (reveal
                                                                                                     -14
                                                                                                     -15)
                                                                                                    (("4"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("5"
                                                                                                (lemma
                                                                                                 "gt_select_delete2")
                                                                                                (("5"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "n"
                                                                                                   "i"
                                                                                                   "t")
                                                                                                  (("5"
                                                                                                    (assert)
                                                                                                    (("5"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "gt_select_delete2")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "j"
                                                                                                               "k"
                                                                                                               "s")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -2
                                                                                                                     -6
                                                                                                                     -7
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (reveal
                                                                                                                       -17
                                                                                                                       -18
                                                                                                                       -19
                                                                                                                       -24)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "num_arg_delete")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -6
                                                                                                         -7
                                                                                                         -9
                                                                                                         -10
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -14
                                                                                                             -15)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("6"
                                                                                                (lemma
                                                                                                 "gt_delete_delete")
                                                                                                (("6"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "n"
                                                                                                   "i"
                                                                                                   "t")
                                                                                                  (("6"
                                                                                                    (assert)
                                                                                                    (("6"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "gt_delete_delete")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "j"
                                                                                                               "k"
                                                                                                               "s")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -12
                                                                                                                     -13
                                                                                                                     -14
                                                                                                                     -19)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "num_arg_delete")
                                                                                                                      (("1"
                                                                                                                        (inst?
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -9
                                                                                                         -10
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (reveal
                                                                                                           -12
                                                                                                           -13
                                                                                                           -16)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "is_ac_sym?"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (reveal
                                                                                 -8)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     2
                                                                     "k+1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (reveal
                                                                           -7)
                                                                          (("1"
                                                                            (rewrite
                                                                             "num_arg_delete_ge1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "gt_select_delete")
                                                                          (("2"
                                                                            (inst?
                                                                             -1)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -4)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "le_select_delete")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "f"
                                                                                     "j"
                                                                                     "k"
                                                                                     "s")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -4
                                                                                         -5
                                                                                         -7
                                                                                         -8
                                                                                         2)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -11
                                                                                           -12
                                                                                           -13
                                                                                           -18)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "num_arg_delete_ge1")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -3
                                                                                 -4
                                                                                 -6
                                                                                 -7
                                                                                 2)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -8
                                                                                   -9
                                                                                   -12)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -4
                                                                                     -5
                                                                                     2)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "delete_ac_num_arg_gt1")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "f"
                                                                             "i"
                                                                             "t")
                                                                            (("3"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "is_ac_sym?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "equal?"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -5
                                                                                           -6
                                                                                           -8
                                                                                           -9)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -12
                                                                                             -17)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "delete_ac_num_arg_gt1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "is_ac_sym?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -14
                                                                                                     -16)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "is_ac_sym?"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -5
                                                                                             -6
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -12
                                                                                               -17)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "is_ac_sym?"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (reveal
                                                                                                         -14
                                                                                                         -16)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "is_ac_sym?"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           rl)
                                                                                          (("3"
                                                                                            (inst
                                                                                             1
                                                                                             "n-1"
                                                                                             "j")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "num_arg_delete_ge1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -5
                                                                                                       -6
                                                                                                       -8
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (reveal
                                                                                                         -9)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (reveal
                                                                                                   -6)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (reveal
                                                                                                   -8)
                                                                                                  (("3"
                                                                                                    (rewrite
                                                                                                     "num_arg_delete_ge1")
                                                                                                    (("3"
                                                                                                      (rewrite
                                                                                                       "num_arg_delete_ge1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (lemma
                                                                                                   "gt_select_delete2")
                                                                                                  (("4"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      (("4"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "gt_select_delete")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "1+k"
                                                                                                                 "j"
                                                                                                                 "s")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9)
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -15
                                                                                                                         -20)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           1
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "num_arg_delete_ge1")
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 -13
                                                                                                                                 -14)
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -5
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -7
                                                                                                             -8
                                                                                                             -10
                                                                                                             -11
                                                                                                             2
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (lemma
                                                                                                   "gt_delete_delete")
                                                                                                  (("5"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("5"
                                                                                                      (assert)
                                                                                                      (("5"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "gt_delete_delete")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "f"
                                                                                                                 "1+k"
                                                                                                                 "j"
                                                                                                                 "s")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9
                                                                                                                       -10
                                                                                                                       -11)
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -14
                                                                                                                         -15
                                                                                                                         -16
                                                                                                                         -21)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "num_arg_delete_ge1")
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -8
                                                                                                           -9
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -11
                                                                                                             -12)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "is_ac_sym?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (reveal
                                                                                 -8)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -4)
                                                              (("2"
                                                                (lemma
                                                                 "num_arg_delete")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -5
                                                                       2)
                                                                      (("2"
                                                                        (reveal
                                                                         -10)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "num_arg_delete_ge1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "n = i")
                                                          (("1"
                                                            (inst
                                                             2
                                                             "j")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (reveal
                                                                 -5
                                                                 -6)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "n < i")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "i-1")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (skolem
                                                                   -1
                                                                   "k")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lemma
                                                                       "gt_select_delete2")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -4)
                                                                                (("1"
                                                                                  (case
                                                                                   "j > k")
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "k")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "num_arg_delete")
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "gt_select_delete")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "f"
                                                                                           "j"
                                                                                           "k"
                                                                                           "s")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -5
                                                                                               -6
                                                                                               -8
                                                                                               -9
                                                                                               2)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 -18)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -6)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "num_arg_delete_ge1")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "delete_ac_num_arg_gt1")
                                                                                        (("3"
                                                                                          (inst?
                                                                                           -1)
                                                                                          (("3"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "is_ac_sym?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "equal?"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -16
                                                                                                           -21)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "delete_ac_num_arg_gt1")
                                                                                                            (("1"
                                                                                                              (inst?
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "is_ac_sym?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (reveal
                                                                                                                     -18
                                                                                                                     -20)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "is_ac_sym?"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -4
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9
                                                                                                           -10
                                                                                                           -11
                                                                                                           -12
                                                                                                           -13)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -17
                                                                                                             -22)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "delete_ac_num_arg_gt1")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_ac_sym?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (reveal
                                                                                                                       -19
                                                                                                                       -21)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "is_ac_sym?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("3"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -4)
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "n"
                                                                                                             "j-1")
                                                                                                            (("3"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -3
                                                                                                                 -4
                                                                                                                 -5
                                                                                                                 -7
                                                                                                                 -8)
                                                                                                                (("2"
                                                                                                                  (reveal
                                                                                                                   -17)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "num_arg_delete_ge1")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (reveal
                                                                                                                 -12)
                                                                                                                (("4"
                                                                                                                  (rewrite
                                                                                                                   "num_arg_delete_ge1")
                                                                                                                  (("4"
                                                                                                                    (reveal
                                                                                                                     -11)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (lemma
                                                                                                                 "gt_select_delete")
                                                                                                                (("5"
                                                                                                                  (inst?
                                                                                                                   -1)
                                                                                                                  (("5"
                                                                                                                    (assert)
                                                                                                                    (("5"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "le_select_delete")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "k"
                                                                                                                               "j-1"
                                                                                                                               "s")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -4
                                                                                                                                   -5
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -4
                                                                                                                                     -5
                                                                                                                                     -6)
                                                                                                                                    (("1"
                                                                                                                                      (reveal
                                                                                                                                       -20
                                                                                                                                       -21
                                                                                                                                       -22
                                                                                                                                       -27)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "num_arg_delete_ge1")
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -7
                                                                                                                         -8
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (reveal
                                                                                                                           -16
                                                                                                                           -17)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("6"
                                                                                                                (lemma
                                                                                                                 "gt_delete_delete")
                                                                                                                (("6"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f"
                                                                                                                   "i"
                                                                                                                   "n"
                                                                                                                   "t")
                                                                                                                  (("6"
                                                                                                                    (assert)
                                                                                                                    (("6"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "gt_delete_delete")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "f"
                                                                                                                               "j"
                                                                                                                               "k"
                                                                                                                               "s")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -4
                                                                                                                                   -5
                                                                                                                                   -7
                                                                                                                                   -8
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (reveal
                                                                                                                                     -16
                                                                                                                                     -17
                                                                                                                                     -18
                                                                                                                                     -23)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "num_arg_delete_ge1")
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -7
                                                                                                                         -8
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -2
                                                                                                                           -3)
                                                                                                                          (("2"
                                                                                                                            (reveal
                                                                                                                             -16
                                                                                                                             -17)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "is_ac_sym?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (reveal
                                                                                               -9)
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "j <= k")
                                                                                    (("1"
                                                                                      (hide
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "k+1")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -2
                                                                                             -5
                                                                                             -6
                                                                                             -8
                                                                                             -9)
                                                                                            (("2"
                                                                                              (reveal
                                                                                               -13)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "num_arg_delete_ge1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             "le_select_delete")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "f"
                                                                                               "j"
                                                                                               "k"
                                                                                               "s")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   -5
                                                                                                   -6
                                                                                                   -8
                                                                                                   -9
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (reveal
                                                                                                     -13
                                                                                                     -18)
                                                                                                    (("3"
                                                                                                      (rewrite
                                                                                                       "num_arg_delete_ge1")
                                                                                                      (("3"
                                                                                                        (reveal
                                                                                                         -11)
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (lemma
                                                                                             "delete_ac_num_arg_gt1")
                                                                                            (("4"
                                                                                              (inst?
                                                                                               -1)
                                                                                              (("4"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "is_ac_sym?"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -3
                                                                                                     -11
                                                                                                     -12)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "equal?"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -13
                                                                                                                 -15
                                                                                                                 -18)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "delete_ac_num_arg_gt1")
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -9
                                                                                                                     -10
                                                                                                                     -12
                                                                                                                     -13)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "1+k"
                                                                                                                       "s")
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -21)
                                                                                                                        (("1"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "is_ac_sym?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "is_ac_sym?"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "delete_ac_num_arg_gt1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f"
                                                                                                                   "1+k"
                                                                                                                   "s")
                                                                                                                  (("2"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_ac_sym?"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9)
                                                                                                                      (("2"
                                                                                                                        (reveal
                                                                                                                         -19
                                                                                                                         -21)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "is_ac_sym?"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (reveal
                                                                                                                       -13
                                                                                                                       -18)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "n"
                                                                                                                 "j")
                                                                                                                (("3"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -9)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     -8
                                                                                                                     -9)
                                                                                                                    (("2"
                                                                                                                      (reveal
                                                                                                                       -8
                                                                                                                       -17)
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "num_arg_delete_ge1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (reveal
                                                                                                                     -11)
                                                                                                                    (("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (hide
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     -8
                                                                                                                     -9)
                                                                                                                    (("4"
                                                                                                                      (reveal
                                                                                                                       -17)
                                                                                                                      (("4"
                                                                                                                        (rewrite
                                                                                                                         "num_arg_delete_ge1")
                                                                                                                        (("4"
                                                                                                                          (rewrite
                                                                                                                           "num_arg_delete_ge1")
                                                                                                                          (("4"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (lemma
                                                                                                                     "gt_select_delete")
                                                                                                                    (("5"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("5"
                                                                                                                        (assert)
                                                                                                                        (("5"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "gt_select_delete")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "f"
                                                                                                                                   "1+k"
                                                                                                                                   "j"
                                                                                                                                   "s")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -3
                                                                                                                                       -4
                                                                                                                                       -6
                                                                                                                                       -7
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (reveal
                                                                                                                                         -10
                                                                                                                                         -19
                                                                                                                                         -20
                                                                                                                                         -21
                                                                                                                                         -26)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "num_arg_delete_ge1")
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -4
                                                                                                                             -5
                                                                                                                             -6
                                                                                                                             -8
                                                                                                                             -9
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (reveal
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -18
                                                                                                                               -19)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (lemma
                                                                                                                     "gt_delete_delete")
                                                                                                                    (("6"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "f"
                                                                                                                       "i"
                                                                                                                       "n"
                                                                                                                       "t")
                                                                                                                      (("6"
                                                                                                                        (assert)
                                                                                                                        (("6"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             -7)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "gt_delete_delete")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "f"
                                                                                                                                   "1+k"
                                                                                                                                   "j"
                                                                                                                                   "s")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -5
                                                                                                                                       -6
                                                                                                                                       -7
                                                                                                                                       -8
                                                                                                                                       -9
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (reveal
                                                                                                                                           -20
                                                                                                                                           -21
                                                                                                                                           -22
                                                                                                                                           -27)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "num_arg_delete_ge1")
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -4
                                                                                                                             -5
                                                                                                                             -6
                                                                                                                             -8
                                                                                                                             -9
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (reveal
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -18
                                                                                                                               -19)
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "is_ac_sym?"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (reveal
                                                                                                   -9)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -3
                                                                                 -4
                                                                                 -6
                                                                                 -7
                                                                                 2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2)
                                                                                  (("2"
                                                                                    (reveal
                                                                                     -10)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   4)
                                                                  (("2"
                                                                    (grind)
                                                                    (("2"
                                                                      (reveal
                                                                       -5)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   4)
                                                                  (("3"
                                                                    (reveal
                                                                     -9)
                                                                    (("3"
                                                                      (rewrite
                                                                       "num_arg_delete_ge1")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 -2 2)
                                                        (("2"
                                                          (reveal
                                                           -8
                                                           -9
                                                           -10
                                                           -11
                                                           -12)
                                                          (("2"
                                                            (expand
                                                             "are_ac?"
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               "delete_ac_num_arg_gt1")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "is_ac_sym?"
                                                                     -1)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -8
                                                                           -9)
                                                                          (("2"
                                                                            (lemma
                                                                             "delete_ac_num_arg_gt1")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "j"
                                                                               "s")
                                                                              (("2"
                                                                                (reveal
                                                                                 -17)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "is_ac_sym?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (reveal -6)
                                                    (("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (lemma
                                                         "ac_delete_size")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "num_arg(f, t) = 1")
                                (("1"
                                  (expand "equal?" -6)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 2 "j")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "num_arg_ge1")
                                  (("2"
                                    (inst? -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (are_ac? const-decl "bool" term_properties nil)
    (equal? def-decl "bool" equality nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (num_arg def-decl "nat" term_properties nil)
    (select def-decl "term" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (equal?_num_arg formula-decl nil equality nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (le_select_delete formula-decl nil term_properties nil)
    (num_arg_delete formula-decl nil term_properties nil)
    (gt_select_delete formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (gt_delete_delete formula-decl nil term_properties nil)
    (gt_select_delete2 formula-decl nil term_properties nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   SHOSTAK))
 (equal?_trans 0
  (equal?_trans-1 nil 3806326702
   ("" (measure-induct "size(t1)" "t1")
    (("" (skolem 1 "t1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2) (("3" (grind) nil nil)) nil)
                 ("4" (grind) nil nil)
                 ("5" (expand "equal?" -3)
                  (("5" (assert)
                    (("5" (flatten)
                      (("5" (inst -2 "term1(t1)")
                        (("5" (prop)
                          (("1" (inst -1 "term1(t2)" "term1(t3)")
                            (("1" (expand "equal?" -6)
                              (("1"
                                (lift-if)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (expand "equal?" -3)
                  (("6" (lift-if)
                    (("6" (prop)
                      (("6" (expand "equal?" -7)
                        (("6" (assert)
                          (("6" (flatten)
                            (("6" (hide 1 2 3 5 6 7)
                              (("6"
                                (inst -6 "term2(t1)")
                                (("6"
                                  (prop)
                                  (("1"
                                    (inst -1 "term2(t2)" "term2(t3)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "equal?" -3)
                  (("7" (assert)
                    (("7" (flatten)
                      (("7" (hide 2 3 4 5) (("7" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide 2 3 4 5) (("8" (grind) nil nil)) nil)
                 ("9" (expand "equal?" -3)
                  (("9" (assert)
                    (("9" (flatten)
                      (("9" (expand "equal?" -7)
                        (("9" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("10" (hide 2 3 4 5)
                  (("10" (expand "equal?" -3)
                    (("10" (assert)
                      (("10" (flatten)
                        (("10" (hide -5)
                          (("10" (expand "equal?" -6)
                            (("10" (assert)
                              (("10"
                                (flatten)
                                (("10"
                                  (inst -2 "arg(t1)")
                                  (("10"
                                    (prop)
                                    (("1"
                                      (inst -1 "arg(t2)" "arg(t3)")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("11" (case "ac_app?(t1)")
                  (("1" (assert)
                    (("1" (hide 1 3 4 5 6)
                      (("1" (prop)
                        (("1" (hide -2) (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil)
                         ("3" (hide -2)
                          (("3" (expand "equal?" -2)
                            (("3" (flatten)
                              (("3"
                                (skeep)
                                (("3"
                                  (inst 1 "i" "_")
                                  (("3"
                                    (lemma "equal?_ac")
                                    (("3"
                                      (inst -1 "ac_sym(t1)" "t3" "t2")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (prop)
                                          (("1"
                                            (inst -1 "j")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skolem -1 "n")
                                                (("1"
                                                  (inst 1 "n")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide -3 -4)
                                                      (("1"
                                                        (case
                                                         "equal?(t1, t2)")
                                                        (("1"
                                                          (lemma
                                                           "equal?_num_arg")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "ac_sym(t1)"
                                                             "t2"
                                                             "t1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "equal?"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "i"
                                                             "j")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (reveal -3)
                                                      (("2"
                                                        (hide
                                                         -14
                                                         -5
                                                         -15)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "select(ac_sym(t1), t1)(i)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "select(ac_sym(t1), t2)(j)"
                                                               "select(ac_sym(t1), t3)(n)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "ac_select_size")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "is_ac_sym?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -3 -12)
                                                      (("3"
                                                        (reveal -5)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "delete(ac_sym(t1), t1)(i)")
                                                          (("3"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "delete(ac_sym(t1), t2)(j)"
                                                               "delete(ac_sym(t1), t3)(n)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "ac_delete_size")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "equal?(t1, t2)")
                                                (("1"
                                                  (lemma
                                                   "equal?_num_arg")
                                                  (("1"
                                                    (hide -10 -11 2)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "ac_sym(t1)"
                                                       "t2"
                                                       "t1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (expand "equal?" 1)
                                                    (("2"
                                                      (inst 1 "i" "j")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "are_ac?")
                                              (("2"
                                                (expand "equal?" -10)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (hide -1 -2 -3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (string type-eq-decl nil strings nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (equal?_num_arg formula-decl nil equality nil)
    (are_ac? const-decl "bool" term_properties nil)
    (equal?_ac formula-decl nil equality nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal?_equiv 0
  (equal?_equiv-1 nil 3808681287
   ("" (expand "equivalence?" 1)
    (("" (prop)
      (("1" (expand "reflexive?" 1)
        (("1" (skeep) (("1" (rewrite "equal?_ref") nil nil)) nil)) nil)
       ("2" (expand "symmetric?" 1)
        (("2" (skeep)
          (("2" (lemma "equal?_sym")
            (("2" (inst -1 "y" "x") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (expand "transitive?" 1)
        (("3" (skeep)
          (("3" (lemma "equal?_trans")
            (("3" (inst -1 "x" "y" "z") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equal?_trans formula-decl nil equality nil)
    (symmetric? const-decl "bool" relations nil)
    (equal?_sym formula-decl nil equality nil)
    (reflexive? const-decl "bool" relations nil)
    (equal?_ref formula-decl nil equality nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   SHOSTAK))
 (equal?_select_delete 0
  (equal?_select_delete-1 nil 3807566014
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (inst 1 "0" "0")
                    (("1" (lemma "term_const_eta")
                      (("1" (inst -1 "t") (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "term_variable_eta")
                    (("2" (inst? -1)
                      (("2" (inst 2 "0" "0") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst 3 "0" "0") (("3" (grind) nil nil)) nil)
                   ("4" (hide 1 2 3)
                    (("4" (reveal -1)
                      (("4" (inst -1 "term1(t)")
                        (("4" (prop)
                          (("1" (inst -1 "f" "term1(s)")
                            (("1" (prop)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "i" "j")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma "term_pair_eta")
                                      (("1"
                                        (inst? -1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -3)
                                      (("2"
                                        (lemma "equal?_num_arg")
                                        (("2"
                                          (inst
                                           -1
                                           "f"
                                           "term1(s)"
                                           "term1(t)")
                                          (("2"
                                            (assert)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "equal?_num_arg")
                                      (("3"
                                        (inst? -1)
                                        (("3"
                                          (inst -1 "term1(s)")
                                          (("3"
                                            (assert)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (inst 1 "0" "0")
                      (("5" (lemma "term_app_eta")
                        (("5" (inst -1 "t") (("5" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (case "ac_app?(t)")
                    (("1" (assert)
                      (("1" (hide 1 2 3 4 5)
                        (("1" (flatten)
                          (("1" (skeep)
                            (("1" (case "f = ac_sym(t)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst 1 "i-1" "j-1")
                                  (("1" (grind) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 2 "0" "0")
                                (("2"
                                  (hide -8 -9)
                                  (("2"
                                    (reveal -1 -2)
                                    (("2"
                                      (case "equal?(t, s)")
                                      (("1"
                                        (hide -2 -3)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "equal?" 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst 1 "i" "j")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 7) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (num_arg def-decl "nat" term_properties nil)
    (select def-decl "term" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (j skolem-const-decl "nat" equality nil)
    (i skolem-const-decl "nat" equality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term_app_eta formula-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (equal?_num_arg formula-decl nil equality nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (term_const_eta formula-decl nil term_adt nil))
   SHOSTAK))
 (equal?_vars 0
  (equal?_vars-1 nil 3848933258
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (inst-cp -5 "term1(t)")
                  (("4" (prop)
                    (("1" (inst -1 "term1(s)")
                      (("1" (assert)
                        (("1" (inst -6 "term2(t)")
                          (("1" (prop)
                            (("1" (inst -1 "term2(s)")
                              (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (assert) (("5" (grind) nil nil)) nil)
                 ("6" (assert)
                  (("6" (case "equal?(t, s)")
                    (("1" (flatten)
                      (("1" (name-replace "f" "ac_sym(t)")
                        (("1" (use "subset_antisymmetric[variable]")
                          (("1" (assert)
                            (("1" (hide 2 3 4 5 6 7)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "subset?" 1)
                                  (("1"
                                    (skolem 1 "x")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide -5)
                                        (("1"
                                          (use "equal?_ac")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "vars" -2)
                                                (("1"
                                                  (rewrite
                                                   "mem_union_map")
                                                  (("1"
                                                    (skolem -2 "ti")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "get_args"
                                                         -2)
                                                        (("1"
                                                          (rewrite
                                                           "map_member4")
                                                          (("1"
                                                            (skolem
                                                             -2
                                                             "i")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skolem
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (expand
                                                                       "vars"
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "mem_union_map")
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "select(f, s)(j)")
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (expand
                                                                               "get_args"
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "map_member4")
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "j")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "from_min2max_mem[nat]")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -10
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -3
                                                                                               -4)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "equal?_num_arg")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "f"
                                                                                                   "s"
                                                                                                   "t")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "num_arg_ge1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (reveal
                                                                               -6)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -12
                                                                                   "ti")
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "select(f, s)(j)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -7)
                                                                                      (("2"
                                                                                        (use
                                                                                         "ac_select_size")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "is_ac_sym?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "from_min2max_mem2[nat]")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (reveal
                                                                     -6)
                                                                    (("3"
                                                                      (replace
                                                                       -1)
                                                                      (("3"
                                                                        (use
                                                                         "num_arg_ge1")
                                                                        (("3"
                                                                          (use
                                                                           "from_min2max_mem[nat]")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "are_ac?" 1)
                                                (("2"
                                                  (expand "f" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -4)
                                  (("2"
                                    (lemma "equal?_sym")
                                    (("2"
                                      (inst -1 "s" "t")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subset?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "vars" -2)
                                              (("2"
                                                (rewrite
                                                 "mem_union_map")
                                                (("2"
                                                  (skolem -2 "si")
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (replace
                                                       -6
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "get_args"
                                                         -2)
                                                        (("2"
                                                          (rewrite
                                                           "map_member4")
                                                          (("2"
                                                            (skolem
                                                             -2
                                                             "i")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (lemma
                                                                 "equal?_ac")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "f"
                                                                   "t"
                                                                   "s")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "i")
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "j")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 -4)
                                                                                (("1"
                                                                                  (expand
                                                                                   "vars"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "mem_union_map")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "select(f, t)(j)")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -7)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "get_args"
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "map_member4")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "from_min2max_mem[nat]")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "equal?_num_arg")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "f"
                                                                                                             "s"
                                                                                                             "t")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "num_arg_ge1")
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -11
                                                                                           "select(f, t)(j)")
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "select(f, s)(i)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "equal?_sym")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "ac_select_size")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "from_min2max_mem2[nat]")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (use
                                                                             "from_min2max_mem[nat]")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (use
                                                                                 "num_arg_ge1")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (are_ac? const-decl "bool" term_properties nil)
    (f skolem-const-decl "ac_symbol" equality nil)
    (from_min2max_mem2 formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (equal?_num_arg formula-decl nil equality nil)
    (from_min2max_mem formula-decl nil list_theory nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (map_member4 formula-decl nil map_theory nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (num_arg def-decl "nat" term_properties nil)
    (mem_union_map formula-decl nil map_theory nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (string type-eq-decl nil strings nil)
    (equal?_ac formula-decl nil equality nil)
    (subset? const-decl "bool" sets nil)
    (equal?_sym formula-decl nil equality nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (delete def-decl "term" term_properties nil)
    (member const-decl "bool" sets nil)
    (Union const-decl "set" sets nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil))
   shostak))
 (perm?_len 0
  (perm?_len-1 nil 3807091024
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" -2)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (skeep)
                (("2" (inst -3 "remove(args1, i)")
                  (("2" (prop)
                    (("1" (hide -2)
                      (("1" (inst -1 "remove(args2, j)")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (reveal -1)
                              (("1"
                                (hide -2)
                                (("1"
                                  (rewrite "remove_len")
                                  (("1"
                                    (rewrite "remove_len")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (rewrite "remove_len")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (perm?_append 0
  (perm?_append-1 nil 3807474968
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (expand "append" 1) (("1" (assert) nil nil)) nil)
                 ("2" (skeep)
                  (("2" (expand "perm?" 2)
                    (("2" (prop)
                      (("1" (hide -2 -3 -4 1)
                        (("1" (rewrite "null_append_uni")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (inst 2 "i" "j")
                        (("1" (prop)
                          (("1" (lemma "nth_append_uni[term]")
                            (("1" (inst -1 "i" "args1" "args3")
                              (("1"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (typepred "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma
                                               "nth_append_uni[term]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "j"
                                                 "args2"
                                                 "args4")
                                                (("1"
                                                  (typepred "j")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "remove_append[term]")
                            (("2" (inst -1 "i" "args1" "args3")
                              (("2"
                                (typepred "i")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -2 1)
                                    (("2"
                                      (hide -1 -2)
                                      (("2"
                                        (lemma "remove_append[term]")
                                        (("2"
                                          (inst -1 "j" "args2" "args4")
                                          (("2"
                                            (typepred "j")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (hide -1 -2)
                                                  (("2"
                                                    (reveal -6)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "remove(args1, i)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "remove_len[term]")
                                                          (("2"
                                                            (inst? -1)
                                                            (("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "j")
                          (("2" (rewrite "length_append")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (typepred "i")
                          (("3" (rewrite "length_append")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (append def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (args1 skolem-const-decl "args" equality nil)
    (i skolem-const-decl "below[length(args1)]" equality nil)
    (args3 skolem-const-decl "args" equality nil)
    (args2 skolem-const-decl "args" equality nil)
    (j skolem-const-decl "below[length(args2)]" equality nil)
    (args4 skolem-const-decl "args" equality nil)
    (remove_append formula-decl nil list_theory nil)
    (remove_len formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (null_append_uni formula-decl nil list_theory nil))
   SHOSTAK))
 (perm?_append2 0
  (perm?_append2-1 nil 3807710074
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 ("args1"))
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (case "args1 = null AND args2 = null")
                  (("1" (flatten)
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (rewrite "append_null")
                          (("1" (expand "append" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (skeep)
                  (("2"
                    (case "length(args3) = length(args4) AND length(args1) = length(args2)")
                    (("1" (flatten)
                      (("1" (expand "perm?" 2)
                        (("1" (prop)
                          (("1" (lemma "null_append_uni[term]")
                            (("1" (inst -1 "args1" "args3")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 1 3)
                            (("2" (inst 1 "i" "length(args4) + j")
                              (("1"
                                (prop)
                                (("1"
                                  (lemma "nth_append_uni[term]")
                                  (("1"
                                    (inst -1 "i" "args1" "args3")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "nth_append_uni[term]")
                                            (("1"
                                              (inst
                                               -1
                                               "length(args4) + j"
                                               "args4"
                                               "args2")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "remove_append[term]")
                                  (("2"
                                    (inst -1 "i" "args1" "args3")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1 nil t)
                                        (("2"
                                          (lemma "remove_append[term]")
                                          (("2"
                                            (inst
                                             -1
                                             "length(args4) + j"
                                             "args4"
                                             "args2")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1 1 nil t)
                                                  (("2"
                                                    (reveal -4)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "remove(args1, i)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "remove_len")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "length_append")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (rewrite "length_append")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "perm?_len")
                      (("2" (inst? -1)
                        (("2" (assert)
                          (("2" (hide -1)
                            (("2" (lemma "perm?_len")
                              (("2"
                                (inst? -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "perm?" 1)
                                    (("2"
                                      (inst 1 "i" "j")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_len formula-decl nil equality nil)
    (null_append_uni formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove_append formula-decl nil list_theory nil)
    (remove_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (length_append formula-decl nil list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_ref 0
  (perm?_ref-1 nil 3807700346
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (expand "perm?" 1)
          (("" (assert)
            (("" (prop)
              (("" (inst 2 "0" "0")
                (("1" (rewrite "equal?_ref")
                  (("1" (inst? -1)
                    (("1" (assert)
                      (("1" (rewrite "remove_len")
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (equal?_ref formula-decl nil equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm? def-decl "bool" equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_sym 0
  (perm?_sym-1 nil 3805994948
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" 1)
            (("" (prop)
              (("1" (lemma "perm?_len")
                (("1" (inst? -1)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (hide -1)
                (("2" (expand "perm?" -1)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (skeep)
                        (("2" (inst 3 "j" "i")
                          (("2" (prop)
                            (("1" (rewrite "equal?_sym") nil nil)
                             ("2" (hide -1)
                              (("2"
                                (reveal -2)
                                (("2"
                                  (inst -1 "remove(args1, i)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "remove(args2, j)")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (rewrite "remove_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (perm?_len formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (equal?_sym formula-decl nil equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_sym2 0
  (perm?_sym2-1 nil 3844870204
   ("" (skeep)
    (("" (iff)
      (("" (lemma "perm?_sym")
        (("" (prop)
          (("1" (inst -2 "args1" "args2") (("1" (assert) nil nil)) nil)
           ("2" (inst -2 "args2" "args1") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (perm?_sym formula-decl nil equality nil))
   shostak))
 (perm?_trans_aux 0
  (perm?_trans_aux-1 nil 3807094913
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (skolem 1 "n")
              (("" (prop)
                (("" (expand "perm?" -1)
                  (("" (prop)
                    (("1" (hide 1) (("1" (grind) nil nil)) nil)
                     ("2" (skeep)
                      (("2" (case "n = i")
                        (("1" (inst 2 "j") (("1" (assert) nil nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "remove(args1, i)")
                            (("2" (prop)
                              (("1"
                                (inst -1 "remove(args2, j)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "i > n")
                                    (("1"
                                      (inst -2 "n")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (skolem -1 "k")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "j > k")
                                              (("1"
                                                (inst 3 "k")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide -4 -6 -7)
                                                      (("1"
                                                        (rewrite
                                                         "gt_nth_remove")
                                                        (("1"
                                                          (rewrite
                                                           "gt_nth_remove")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "perm?"
                                                       1)
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (hide
                                                           -5
                                                           -6
                                                           -8)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "perm?_len")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -7)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -5
                                                                           -6
                                                                           2
                                                                           3)
                                                                          (("1"
                                                                            (reveal
                                                                             -1
                                                                             -4)
                                                                            (("1"
                                                                              (reveal
                                                                               -9)
                                                                              (("1"
                                                                                (hide
                                                                                 -3)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "perm?_len")
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "remove_len[term]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "i"
                                                                                             "args1")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "remove_len")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "remove_len[term]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "k"
                                                                                                     "args2")
                                                                                                    (("1"
                                                                                                      (prop)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "remove_len")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 1 4)
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -8
                                                             2)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "i-1"
                                                               "j-1")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (rewrite
                                                                   "gt_nth_remove2")
                                                                  (("1"
                                                                    (rewrite
                                                                     "gt_nth_remove2")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "gt_remove_remove")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "gt_remove_remove[term]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "j"
                                                                         "args2"
                                                                         "k")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -5
                                                                 -6)
                                                                (("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "remove_len")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -5
                                                                 -6)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (rewrite
                                                                     "remove_len")
                                                                    (("3"
                                                                      (typepred
                                                                       "i")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "j <= k")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (inst 3 "k+1")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (hide
                                                         -4
                                                         -5
                                                         -7
                                                         -8)
                                                        (("1"
                                                          (typepred
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "remove_len")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "gt_nth_remove")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "gt_nth_remove2[term]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "k+1"
                                                               "args2"
                                                               "j")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "remove_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "perm?"
                                                         1)
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (hide
                                                             -4
                                                             -5
                                                             -7
                                                             -8)
                                                            (("1"
                                                              (reveal
                                                               -5)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_len")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (reveal
                                                                             -6)
                                                                            (("1"
                                                                              (hide
                                                                               -7
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "perm?_len")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "remove_len[term]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "i"
                                                                                           "args1")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "remove_len[term]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "j"
                                                                                                 "args2")
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "remove_len[term]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1+k"
                                                                                                       "args2")
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -8
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "j")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "i")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (inst
                                                               2
                                                               "i-1"
                                                               "j")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -3
                                                                     -4
                                                                     -6
                                                                     -7
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("1"
                                                                      (typepred
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (reveal
                                                                           -3)
                                                                          (("1"
                                                                            (rewrite
                                                                             "gt_nth_remove2")
                                                                            (("1"
                                                                              (rewrite
                                                                               "gt_nth_remove")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "remove_len")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "gt_remove_remove")
                                                                  (("2"
                                                                    (hide
                                                                     -4
                                                                     2
                                                                     3
                                                                     -7
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -3
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (reveal
                                                                               -2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "gt_remove_remove[term]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "1+k"
                                                                                   "args2"
                                                                                   "j")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "remove_len")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 -3
                                                                 -4
                                                                 -6
                                                                 -7)
                                                                (("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (reveal
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "remove_len")
                                                                          (("1"
                                                                            (rewrite
                                                                             "remove_len")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "remove_len[term]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "j"
                                                                               "args2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (hide
                                                                   -3
                                                                   -4
                                                                   -6
                                                                   -7)
                                                                  (("3"
                                                                    (typepred
                                                                     "i")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (rewrite
                                                                         "remove_len")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (hide -3 -4 -5 2 3 4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite "remove_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "i < n")
                                      (("1"
                                        (hide 1 2)
                                        (("1"
                                          (inst -2 "n-1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skolem -1 "k")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite
                                                   "gt_nth_remove2")
                                                  (("1"
                                                    (case "j > k")
                                                    (("1"
                                                      (inst 2 "k")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (hide
                                                           -3
                                                           -4
                                                           -6
                                                           -7)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "gt_nth_remove")
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "perm?"
                                                           1)
                                                          (("3"
                                                            (prop)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -4
                                                               -5
                                                               -7)
                                                              (("1"
                                                                (lemma
                                                                 "perm?_len")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -5)
                                                                      (("1"
                                                                        (hide
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         2)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "i"
                                                                   "j-1")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (rewrite
                                                                       "gt_nth_remove")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "gt_nth_remove2")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "gt_remove_remove"
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "gt_remove_remove[term]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "j"
                                                                             "args2"
                                                                             "k")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "remove_len"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "j")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (rewrite
                                                                       "remove_len"
                                                                       1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 3 "k+1")
                                                      (("2"
                                                        (case "j <= k")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "remove_len"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "gt_nth_remove2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "remove_len"
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (rewrite
                                                               "gt_remove_remove")
                                                              (("3"
                                                                (expand
                                                                 "perm?"
                                                                 1)
                                                                (("3"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -4
                                                                     -5
                                                                     -7
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "perm?_len")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -5)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     2
                                                                     "i"
                                                                     "j")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (rewrite
                                                                         "gt_nth_remove")
                                                                        (("1"
                                                                          (rewrite
                                                                           "gt_nth_remove")
                                                                          (("1"
                                                                            (lemma
                                                                             "remove_len[term]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "j"
                                                                               "args2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "gt_remove_remove[term]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "1+k"
                                                                             "args2"
                                                                             "j")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "remove_len[term]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "j"
                                                                                   "args2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -3
                                                                       -4
                                                                       -6
                                                                       -7)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "remove_len"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "remove_len"
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "remove_len"
                                                                             -2)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (rewrite
                                                                         "remove_len"
                                                                         1)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "remove_len"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (rewrite "remove_len" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (equal? def-decl "bool" equality nil)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove_len formula-decl nil list_theory nil)
    (perm?_len formula-decl nil equality nil)
    (gt_nth_remove2 formula-decl nil list_theory nil)
    (gt_remove_remove formula-decl nil list_theory nil)
    (k skolem-const-decl "nat" equality nil)
    (j skolem-const-decl "below[length(args2)]" equality nil)
    (args2 skolem-const-decl "args" equality nil)
    (n skolem-const-decl "nat" equality nil)
    (i skolem-const-decl "below[length(args1)]" equality nil)
    (args1 skolem-const-decl "args" equality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k skolem-const-decl "nat" equality nil))
   SHOSTAK))
 (perm?_trans 0
  (perm?_trans-1 nil 3805821573
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            ((""
              (case "length(args1) = length(args2) AND length(args2) = length(args3)")
              (("1" (expand "perm?" 1)
                (("1" (prop)
                  (("1" (expand "perm?" -4)
                    (("1" (assert)
                      (("1" (expand "perm?" -5)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "perm?" -3)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (lemma "perm?_trans_aux")
                          (("2" (inst -1 "args2" "args3")
                            (("2" (assert)
                              (("2"
                                (inst -1 "j")
                                (("2"
                                  (prop)
                                  (("1"
                                    (skolem -1 "n")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst 2 "i" "n")
                                        (("1"
                                          (lemma "equal?_trans")
                                          (("1"
                                            (inst
                                             -1
                                             "nth(args1, i)"
                                             "nth(args2, j)"
                                             "nth(args3, n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -3 -4 -7)
                                                (("1"
                                                  (reveal -8)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "remove(args1, i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "remove(args2, j)"
                                                         "remove(args3, n)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "remove_len")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "j")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (prop)
                  (("1" (rewrite "perm?_len") nil nil)
                   ("2" (rewrite "perm?_len") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm?_len formula-decl nil equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal?_trans formula-decl nil equality nil)
    (perm?_trans_aux formula-decl nil equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   SHOSTAK))
 (perm?_append3 0
  (perm?_append3-1 nil 3807714035
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "append" 1 1)
        (("1" (expand "append" 1 2) (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (expand "append" 1 1)
              (("2" (expand "append" 1 3)
                (("2" (expand "perm?" 1)
                  (("2" (inst 1 "0" "length(args2)")
                    (("1" (prop)
                      (("1" (expand "nth" 1 1)
                        (("1" (lemma "nth_append_uni[term]")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (expand "length" -1 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "remove" 1 1)
                        (("2" (lemma "remove_append[term]")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "remove" 1)
                                    (("2"
                                      (reveal -3)
                                      (("2"
                                        (inst? -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "length_append")
                      (("2" (expand "length" 1 2)
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (expand "length" 1) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_append formula-decl nil list_props nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equal?_ref formula-decl nil equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (remove_append formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (equal?_perm 0
  (equal?_perm-1 nil 3807112921
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd1" "tail1"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "equal?" -2)
            (("2" (assert)
              (("2" (prop)
                (("2" (expand "perm?" 2)
                  (("2" (inst 2 "0" "0")
                    (("1" (prop)
                      (("1" (hide -3) (("1" (grind) nil nil)) nil)
                       ("2" (expand "remove" 1 1)
                        (("2" (expand "remove" 1 1)
                          (("2" (assert)
                            (("2" (inst? -3) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (perm?_equiv_same_count?_TCC1 0
  (perm?_equiv_same_count?_TCC1-1 nil 3848599723
   ("" (use "equal?_equiv") nil nil)
   ((equal?_equiv formula-decl nil equality nil)) nil
   (perm?_equiv_same_count? subtype "equality.equal?"
    "equiv[term[constant, variable, f_symbol, ac_symbol]]")))
 (perm?_equiv_same_count? 0
  (perm?_equiv_same_count?-1 nil 3808594560
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (prop)
            (("1" (expand "perm?" -1)
              (("1" (prop)
                (("1" (expand "same_count?" 1)
                  (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (skolem -1 ("i" "j"))
                  (("2" (prop)
                    (("2" (expand "same_count?" 2)
                      (("2" (skeep)
                        (("2" (lemma "count_remove[term]")
                          (("2" (inst -1 "equal?" "i" "args1" "x")
                            (("2" (assert)
                              (("2"
                                (prop)
                                (("1"
                                  (replace -2 2)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (lemma "count_remove[term]")
                                      (("1"
                                        (inst
                                         -1
                                         "equal?"
                                         "j"
                                         "args2"
                                         "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (replace -2 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -6
                                                   "remove(args1, i)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "remove(args2, j)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "same_count?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "remove_len")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "equal?_trans")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "x"
                                                   "nth(args1, i)"
                                                   "nth(args2, j)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 3)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (lemma "count_remove[term]")
                                      (("2"
                                        (inst
                                         -1
                                         "equal?"
                                         "j"
                                         "args2"
                                         "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (hide -2 -4 -5 2 3)
                                              (("1"
                                                (lemma "equal?_sym")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "nth(args2, j)"
                                                   "nth(args1, i)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -3)
                                                      (("1"
                                                        (lemma
                                                         "equal?_trans")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "nth(args2, j)"
                                                           "nth(args1, i)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 4)
                                              (("2"
                                                (inst
                                                 -4
                                                 "remove(args1, i)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "remove(args2, j)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "same_count?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "x")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "remove_len")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "perm?" 1)
              (("2" (prop)
                (("1" (expand "same_count?" -2)
                  (("1" (inst -2 "car(args2)")
                    (("1" (expand "count" -2 1)
                      (("1" (assert)
                        (("1" (expand "count" -2 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (grind) nil nil)
                               ("2"
                                (hide -1)
                                (("2" (rewrite "equal?_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "same_count?" -1)
                  (("2" (inst -1 "car(args1)")
                    (("1" (expand "count" -1 1)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (lemma "count_gt0[term]")
                              (("1"
                                (inst -1 "equal?" "args2" "car(args1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -1 "j")
                                    (("1"
                                      (inst 2 "0" "j")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (inst -4 "remove(args1, 0)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "remove(args2, j)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand
                                                     "remove"
                                                     1
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "same_count?"
                                                       1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (hide -2 -3)
                                                          (("1"
                                                            (reveal -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("1"
                                                                (lemma
                                                                 "count_remove[term]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "equal?"
                                                                   "0"
                                                                   "args1"
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "count_remove[term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "equal?"
                                                                             "j"
                                                                             "args2"
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "remove"
                                                                                     -4
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -3
                                                                                   -4
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "equal?_trans")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x"
                                                                                         "car(args1)"
                                                                                         "nth(args2, j)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "count_remove[term]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "equal?"
                                                                           "j"
                                                                           "args2"
                                                                           "x")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "equal?_sym")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "nth(args2, j)"
                                                                                     "car(args1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "equal?_trans")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x"
                                                                                               "nth(args2, j)"
                                                                                               "car(args1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "remove"
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "remove_len")
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "equal?_ref") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "equivalence?" 1)
      (("2" (hide 2)
        (("2" (prop)
          (("1" (expand "reflexive?" 1)
            (("1" (skeep) (("1" (rewrite "equal?_ref") nil nil)) nil))
            nil)
           ("2" (expand "symmetric?")
            (("2" (skeep)
              (("2" (lemma "equal?_sym")
                (("2" (inst -1 "y" "x") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (expand "transitive?" 1)
            (("3" (skeep)
              (("3" (lemma "equal?_trans")
                (("3" (inst -1 "x" "y" "z") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (count_gt0 formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal?_ref formula-decl nil equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_remove formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal?_sym formula-decl nil equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (equal?_trans formula-decl nil equality nil)
    (remove_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (equiv type-eq-decl nil list_theory nil)
    (perm? def-decl "bool" equality nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_get_common_TCC1 0
  (perm?_get_common_TCC1-1 nil 3808408678
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "pos?_len[term]")
        (("" (replace -3 1)
          (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (pos?_len formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (perm?_get_common subtype "equality.ind1"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](args1)]")))
 (perm?_get_common 0
  (perm?_get_common-1 nil 3808475749
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "bool1" "pos?(t, args1, equal?)`1")
        (("" (name-replace "bool2" "pos?(t, args2, equal?)`1")
          (("" (flatten)
            (("" (name-replace "ind2" "pos?(t, args2, equal?)`2")
              (("" (name-replace "ind1" "pos?(t, args1, equal?)`2")
                (("" (expand "perm?" 1)
                  (("" (prop)
                    (("1" (expand "bool1")
                      (("1" (expand "bool2")
                        (("1" (lemma "get_common_bool[term]")
                          (("1" (inst? -1)
                            (("1" (inst -1 "t")
                              (("1"
                                (assert)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (inst 2
                       "pos?(t, get_common(args1, args2, equal?), equal?)`2"
                       "0")
                      (("1" (prop)
                        (("1" (expand "nth" 1 2)
                          (("1" (expand "ind1")
                            (("1" (lemma "pos?_cor[term]")
                              (("1"
                                (inst -1 "equal?" "args1" "t")
                                (("1"
                                  (expand "bool1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "pos?_cor[term]")
                                        (("1"
                                          (inst
                                           -1
                                           "equal?"
                                           "get_common(args1, args2, equal?)"
                                           "t")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma "equal?_sym")
                                              (("1"
                                                (inst
                                                 -1
                                                 "nth(get_common(args1, args2, equal?), pos?(t, get_common(args1, args2, equal?), equal?)`2)"
                                                 "t")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (lemma
                                                       "equal?_trans")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "nth(get_common(args1, args2, equal?), pos?(t, get_common(args1, args2, equal?), equal?)`2)"
                                                         "t"
                                                         "nth(args1, pos?(t, args1, equal?)`2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "bool2" -3)
                                              (("2"
                                                (lemma
                                                 "get_common_bool[term]")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "remove" 1 2)
                          (("2" (lemma "get_common_remove[term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (expand "ind1")
                                      (("1"
                                        (expand "ind2")
                                        (("1"
                                          (rewrite "perm?_ref")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bool1")
                                    (("2"
                                      (expand "bool2")
                                      (("2"
                                        (lemma "get_common_bool[term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil)
                       ("3" (rewrite "pos?_len")
                        (("3" (expand "bool1")
                          (("3" (expand "bool2")
                            (("3" (lemma "get_common_bool[term]")
                              (("3"
                                (inst? -1)
                                (("3"
                                  (assert)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm? def-decl "bool" equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (get_common def-decl "list[T]" list_theory nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (perm?_ref formula-decl nil equality nil)
    (get_common_remove formula-decl nil list_theory nil)
    (pos?_cor formula-decl nil list_theory nil)
    (equal?_sym formula-decl nil equality nil)
    (equal?_trans formula-decl nil equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pos?_len formula-decl nil list_theory nil)
    (get_common_bool formula-decl nil list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (perm?_get_common_sym 0
  (perm?_get_common_sym-1 nil 3808408691
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "get_common" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (lemma "get_common_null[term]")
                  (("1" (hide -3)
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (lemma "perm?_get_common")
                    (("2" (inst -1 "args2" "args1" "car(args1)")
                      (("2" (assert)
                        (("2"
                          (name-replace "bool2"
                           " pos?(car(args1), args2, equal?)`1")
                          (("2"
                            (name-replace "bool1"
                             " pos?(car(args1), args1, equal?)`1")
                            (("2"
                              (name-replace "ind1"
                               " pos?(car(args1), args1, equal?)`2")
                              (("2"
                                (name-replace
                                 "ind2"
                                 " pos?(car(args1), args2, equal?)`2")
                                (("2"
                                  (prop)
                                  (("1"
                                    (rewrite "perm?_sym" 1)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "perm?_trans")
                                        (("1"
                                          (inst
                                           -1
                                           "get_common(args2, args1, equal?)"
                                           "cons(nth(args2, ind2),
                 get_common(remove(args2, ind2), remove(args1, ind1),
                            equal?))"
                                           "cons(car(args1),
                 get_common(cdr(args1), remove(args2, ind2), equal?))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "perm?" 1)
                                                  (("1"
                                                    (inst 1 "0" "0")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "bool2")
                                                            (("1"
                                                              (expand
                                                               "ind2")
                                                              (("1"
                                                                (lemma
                                                                 "pos?_cor[term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "equal?_sym")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "nth(args2, pos?(car(args1), args2, equal?)`2)"
                                                                         "car(args1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "remove"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "remove"
                                                           1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             "ind1")
                                                            (("2"
                                                              (expand
                                                               "pos?"
                                                               1)
                                                              (("2"
                                                                (reveal
                                                                 4)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "equal?_ref")
                                                                    (("2"
                                                                      (expand
                                                                       "remove"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (reveal
                                                                         -8)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "cdr(args1)")
                                                                          (("2"
                                                                            (prop)
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "perm?_sym")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "get_common(cdr(args1), remove(args2, ind2), equal?)"
                                                                                   "
get_common(remove(args2, ind2), cdr(args1), equal?)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bool1")
                                    (("2"
                                      (expand "pos?" 1)
                                      (("2"
                                        (reveal 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(args1)")
                  (("3" (prop)
                    (("1" (inst -1 "args2")
                      (("1"
                        (case "get_common(args2, cdr(args1), equal?) = get_common(args2, args1, equal?)")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 4)
                          (("2" (lemma "get_common_remove_nth[term]")
                            (("2"
                              (inst -1 "equal?" "args1" "args2" "0")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "remove" -1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal 1)
                                          (("1" (prop) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (expand "nth" -1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "equivalence?" 1)
      (("2" (hide 2)
        (("2" (prop)
          (("1" (expand "reflexive?" 1)
            (("1" (skeep) (("1" (rewrite "equal?_ref") nil nil)) nil))
            nil)
           ("2" (expand "symmetric?" 1)
            (("2" (skeep)
              (("2" (lemma "equal?_sym")
                (("2" (inst -1 "y" "x") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (expand "transitive?" 1)
            (("3" (skeep)
              (("3" (lemma "equal?_trans")
                (("3" (inst -1 "x" "y" "z") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (equal?_trans formula-decl nil equality nil)
    (transitive? const-decl "bool" relations nil)
    (get_common_remove_nth formula-decl nil list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_sym formula-decl nil equality nil)
    (pos?_cor formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal?_ref formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm?_trans formula-decl nil equality nil)
    (perm?_sym formula-decl nil equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (perm?_get_common formula-decl nil equality nil)
    (get_common_null formula-decl nil list_theory nil)
    (get_common def-decl "list[T]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (perm? def-decl "bool" equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_remove_common_get_common 0
  (perm?_remove_common_get_common-1 nil 3808341722
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "perm?" 1)
            (("1" (prop)
              (("1" (rewrite "null_append_uni") (("1" (grind) nil nil))
                nil)
               ("2" (inst 2 "0" "_")
                (("1" (expand "nth" 2 1)
                  (("1" (expand "remove" 2 1)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1"
                          (case "pos?(car(args1), args2, equal?)`1")
                          (("1"
                            (inst 2
                             "length(remove_common(args1, args2, equal?))")
                            (("1" (prop)
                              (("1"
                                (lemma "nth_append_uni[term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (expand "get_common" 1)
                                              (("1"
                                                (rewrite "equal?_ref")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "get_common" 1)
                                        (("2"
                                          (expand "length" 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "remove_append[term]")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand
                                             "remove_common"
                                             1
                                             1)
                                            (("2"
                                              (expand "get_common" 1)
                                              (("2"
                                                (expand "remove" 1 2)
                                                (("2"
                                                  (reveal -3)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cdr(args1)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst? -1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_append")
                              (("2"
                                (expand "get_common" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 3 "0")
                            (("1" (prop)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "remove_common" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "append" 1)
                                      (("1"
                                        (rewrite "equal?_ref")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "remove_common" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "remove" 1 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (rewrite "null_append_uni")
                                          nil
                                          nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "append" 1)
                                            (("2"
                                              (expand "get_common" 1)
                                              (("2"
                                                (reveal -1)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cdr(args1)")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (inst? -1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "length_append")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (lemma "equal?_equiv")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "equal?_equiv") (("2" (propax) nil nil)) nil)) nil))
    nil)
   ((null_append_uni formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (equal?_ref formula-decl nil equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove_append formula-decl nil list_theory nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (equal?_equiv formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_common def-decl "list[T]" list_theory nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (perm? def-decl "bool" equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm?_get_lst_mult_count_elem 0
  (perm?_get_lst_mult_count_elem-1 nil 3808518221
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "perm?_equiv_same_count?")
          (("" (inst? -1)
            (("" (assert)
              (("" (hide 2)
                (("" (lemma "same_count?_get_lst_mul[term]")
                  (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_equiv_same_count? formula-decl nil equality nil)
    (same_count?_get_lst_mul formula-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (perm?_get_lst_mult_count_elem_cor 0
  (perm?_get_lst_mult_count_elem_cor-1 nil 3844868096
   ("" (skeep)
    (("" (assert)
      (("" (lemma "perm?_get_lst_mult_count_elem")
        (("" (inst -1 "null" "args1" "null")
          (("" (assert)
            (("" (prop)
              (("1" (expand "get_lst_mult" -1 1)
                (("1" (rewrite "append_null") nil nil)) nil)
               ("2" (expand "length" 1) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (perm?_get_lst_mult_count_elem formula-decl nil equality nil))
   shostak))
 (ac_perm_args 0
  (ac_perm_args-1 nil 3807113299
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skolem 1 ("s" "f"))
            (("" (prop)
              (("" (expand "are_ac?" -1)
                (("" (flatten)
                  (("" (lemma "equal?_num_arg")
                    (("" (inst? -1)
                      (("" (inst -1 "f")
                        (("" (assert)
                          (("" (expand "equal?" -6)
                            (("" (skeep)
                              ((""
                                (replace -4 (-7 -9 -10 -11) rl)
                                ((""
                                  (hide -1 -2 -3 -4 -5 -6 -7 -8 -9)
                                  ((""
                                    (expand "perm?" 1)
                                    ((""
                                      (prop)
                                      (("1"
                                        (rewrite "get_args_null")
                                        nil
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (inst 1 "i-1" "j-1")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite "get_args_nth")
                                              (("1"
                                                (rewrite
                                                 "get_args_nth")
                                                (("1"
                                                  (hide -1 -2 2)
                                                  (("1"
                                                    (reveal -3 -10 -11)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 -2 2)
                                                (("2"
                                                  (reveal -8 -9)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (reveal -13)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "delete(f, t)(i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "delete(f, s)(j)"
                                                         "f")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "get_args_remove")
                                                            (("1"
                                                              (rewrite
                                                               "get_args_remove")
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (reveal
                                                                   -5
                                                                   -12
                                                                   -13)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -3
                                                               2)
                                                              (("2"
                                                                (reveal
                                                                 -10
                                                                 -11)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "are_ac?"
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "delete_ac_num_arg_gt1")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "is_ac_sym?"
                                                                       -1)
                                                                      (("2"
                                                                        (reveal
                                                                         -5
                                                                         -7)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "equal?"
                                                                               -6)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "num_arg_delete_size")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) = 1")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (expand
                                                       "perm?"
                                                       1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (reveal -3)
                                                          (("1"
                                                            (case
                                                             "equal?(t, s)")
                                                            (("1"
                                                              (reveal
                                                               -2)
                                                              (("1"
                                                                (lemma
                                                                 "remove_len[term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_len[term]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "j-1"
                                                                             "get_args(f)(s)")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "get_args_len")
                                                                                (("1"
                                                                                  (hide
                                                                                   -4
                                                                                   -5
                                                                                   -8)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (reveal
                                                                                 -11)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "get_args_len")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (reveal
                                                                                 -10)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -9)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "equal?"
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "i"
                                                                 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (reveal
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (reveal
                                                                         -1
                                                                         -5)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (reveal
                                                               -7
                                                               -8)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -1 -8 -9)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (reveal -6 -7)
                                            (("3"
                                              (rewrite "get_args_len")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (are_ac? const-decl "bool" term_properties nil)
    (equal? def-decl "bool" equality nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (perm? def-decl "bool" equality nil)
    (get_args const-decl "args" term_properties nil)
    (equal?_num_arg formula-decl nil equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (get_args_nth formula-decl nil term_properties nil)
    (> const-decl "bool" reals nil)
    (delete def-decl "term" term_properties nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_remove formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_len formula-decl nil list_theory nil)
    (get_args_len formula-decl nil term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (s skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" equality nil)
    (j skolem-const-decl "nat" equality nil)
    (t skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" equality nil)
    (f skolem-const-decl "string" equality nil)
    (length def-decl "nat" list_props nil)
    (i skolem-const-decl "nat" equality nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_null formula-decl nil term_properties nil))
   SHOSTAK))
 (ac_perm_args2 0
  (ac_perm_args2-1 nil 3807472958
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (rewrite "get_args_not_pair_ac")
                    (("1" (rewrite "get_args_not_pair_ac")
                      (("1" (lemma "term_const_eta")
                        (("1" (inst? -1)
                          (("1" (lemma "equal?_perm")
                            (("1" (hide -1)
                              (("1"
                                (expand "perm?" 1)
                                (("1"
                                  (inst 1 "0" "0")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (hide 1)
                    (("2" (rewrite "get_args_not_pair_ac")
                      (("1" (rewrite "get_args_not_pair_ac")
                        (("1" (expand "perm?" 1)
                          (("1" (inst 1 "0" "0")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (rewrite "get_args_not_pair_ac")
                    (("1" (rewrite "get_args_not_pair_ac")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("4" (hide 1 2 3)
                    (("4" (lemma "term_pair_eta")
                      (("4" (inst -1 "t")
                        (("4" (replace -1 1 rl)
                          (("4" (hide -1)
                            (("4" (lemma "term_pair_eta")
                              (("4"
                                (inst -1 "s")
                                (("4"
                                  (replace -1 1 rl)
                                  (("4"
                                    (rewrite "get_args_pair")
                                    (("4"
                                      (rewrite "get_args_pair")
                                      (("4"
                                        (lemma "perm?_append")
                                        (("4"
                                          (inst? -1)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (hide 2)
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (hide -1 -2 -3 -5)
                                                  (("1"
                                                    (reveal -8)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "term1(t)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 -3 -4)
                                                  (("2"
                                                    (reveal -8)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "term2(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (hide -4)
                      (("5" (rewrite "get_args_not_pair_ac")
                        (("1" (rewrite "get_args_not_pair_ac")
                          (("1" (reveal -1)
                            (("1" (expand "perm?" 1)
                              (("1"
                                (inst 1 "0" "0")
                                (("1"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("6" (assert)
                    (("6" (hide 1 2 3 4 5)
                      (("6" (flatten)
                        (("6" (case "ac_sym(t) = f")
                          (("1" (lemma "ac_perm_args")
                            (("1" (inst? -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "are_ac?" 1)
                                  (("1"
                                    (expand "equal?" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "get_args_not_pair_ac")
                            (("1" (rewrite "get_args_not_pair_ac")
                              (("1"
                                (expand "perm?" 2)
                                (("1"
                                  (inst 2 "0" "0")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1"
                                        (expand "equal?" 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1)
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (expand "length" 1)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (t skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" equality nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (s skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" equality nil)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal?_perm formula-decl nil equality nil)
    (term_const_eta formula-decl nil term_adt nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (perm?_append formula-decl nil equality nil)
    (get_args_pair formula-decl nil term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (are_ac? const-decl "bool" term_properties nil)
    (ac_perm_args formula-decl nil equality nil)
    (get_args const-decl "args" term_properties nil)
    (perm? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (equal? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "nat" term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (perm_args_ac 0
  (perm_args_ac-1 nil 3807127956
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skolem 1 ("s" "f"))
            (("" (prop)
              (("" (expand "are_ac?" -2)
                (("" (flatten)
                  (("" (lemma "perm?_len")
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (rewrite "get_args_len")
                          (("" (rewrite "get_args_len")
                            (("" (hide -1)
                              ((""
                                (expand "perm?" -1)
                                ((""
                                  (prop)
                                  (("1"
                                    (rewrite "get_args_null")
                                    nil
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (expand "equal?" 2)
                                      (("2"
                                        (inst 2 "i+1" "j+1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5 2 rl)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (typepred "i")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "j")
                                                (("2"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (rewrite
                                                 "get_args_nth")
                                                (("1"
                                                  (rewrite
                                                   "get_args_nth")
                                                  (("1"
                                                    (hide -1 -2 2)
                                                    (("1"
                                                      (reveal -3)
                                                      (("1"
                                                        (typepred "j")
                                                        (("1"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 2)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (case
                                                 "num_arg(f, t) > 1")
                                                (("1"
                                                  (reveal -3)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "delete(f, t)(1+i)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "delete(f, s)(1+j)"
                                                         "f")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (rewrite
                                                                 "get_args_remove")
                                                                (("1"
                                                                  (rewrite
                                                                   "get_args_remove")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     2)
                                                                    (("1"
                                                                      (reveal
                                                                       -4)
                                                                      (("1"
                                                                        (typepred
                                                                         "j")
                                                                        (("1"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (reveal
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "are_ac?"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "delete_ac_num_arg_gt1")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "f"
                                                                       "1+i"
                                                                       "t")
                                                                      (("2"
                                                                        (expand
                                                                         "is_ac_sym?"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (reveal
                                                                                 -7)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "delete_ac_num_arg_gt1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "f"
                                                                                     "1+j"
                                                                                     "s")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "is_ac_sym?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "ac_delete_size")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "num_arg(f, t) = 1")
                                                  (("1"
                                                    (rewrite
                                                     "num_arg1_delete")
                                                    (("1"
                                                      (reveal -1)
                                                      (("1"
                                                        (replace -2 -1)
                                                        (("1"
                                                          (rewrite
                                                           "num_arg1_delete")
                                                          (("1"
                                                            (expand
                                                             "equal?"
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "num_arg_ge1")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (perm? def-decl "bool" equality nil)
    (get_args const-decl "args" term_properties nil)
    (are_ac? const-decl "bool" term_properties nil)
    (equal? def-decl "bool" equality nil)
    (perm?_len formula-decl nil equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (delete def-decl "term" term_properties nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (delete_ac_num_arg_gt1 formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_remove formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (num_arg1_delete formula-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_args_nth formula-decl nil term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_null formula-decl nil term_properties nil)
    (get_args_len formula-decl nil term_properties nil))
   SHOSTAK))
 (perm_args_ac_well_formed 0
  (perm_args_ac_well_formed-1 nil 3848944292
   ("" (skeep)
    (("" (case "is_ac_sym?(t, f)")
      (("1" (case "is_ac_sym?(s, f)")
        (("1" (lemma "perm_args_ac")
          (("1" (inst -1 "s" "f" "t")
            (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (expand "well_formed?" -3)
          (("2" (prop)
            (("2" (inst -3 "t")
              (("2" (expand "is_ac_sym?" -1)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (replace -2 :dir rl)
                      (("2" (prop)
                        (("1" (lemma "get_args_not_pair_ac")
                          (("1" (inst -1 "f" "s")
                            (("1" (expand "well_formed?" -6)
                              (("1"
                                (prop)
                                (("1"
                                  (lemma "perm?_len")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "subterm_reflexive") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "well_formed?" -2)
        (("2" (prop)
          (("2" (lemma "get_args_not_pair_ac")
            (("2" (inst -1 "f" "t")
              (("2" (assert)
                (("2" (replace -1)
                  (("2" (use "perm?_len")
                    (("2" (assert)
                      (("2" (expand "length" -1 1)
                        (("2" (expand "length" -1 1)
                          (("2" (hide -4)
                            (("2" (expand "well_formed?" -4)
                              (("2"
                                (prop)
                                (("2"
                                  (case "is_ac_sym?(s, f)")
                                  (("1"
                                    (inst -5 "s")
                                    (("1"
                                      (expand "is_ac_sym?" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "subterm_reflexive")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "get_args_not_pair_ac")
                                    (("2"
                                      (inst -1 "f" "s")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (perm? def-decl "bool" equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (are_ac? const-decl "bool" term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (member const-decl "bool" sets nil)
    (well_formed? const-decl "bool" term_properties nil)
    (perm_args_ac formula-decl nil equality nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (num_arg def-decl "nat" term_properties nil)
    (get_args_len formula-decl nil term_properties nil)
    (perm?_len formula-decl nil equality nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (is_ac_sym? const-decl "bool" term_properties nil))
   shostak))
 (perm_args_ac2 0
  (perm_args_ac2-1 nil 3807634804
   ("" (skeep) (("" (lemma "ac_perm_args") (("" (grind) nil nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args const-decl "args" term_properties nil)
    (are_ac? const-decl "bool" term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_perm_args formula-decl nil equality nil))
   SHOSTAK))
 (perm?_map_get_args 0
  (perm?_map_get_args-1 nil 3807463550
   ("" (measure-induct "size(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "perm?" 1)
              (("" (expand "perm?" 1)
                (("" (prop)
                  (("1" (expand "map" -1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "flatten" -1)
                          (("2" (rewrite "null_append_uni")
                            (("2" (flatten)
                              (("2" (rewrite "get_args_null") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "perm?" -1)
                    (("2" (prop)
                      (("1" (hide 2) (("1" (grind) nil nil)) nil)
                       ("2" (skeep)
                        (("2" (name-replace "ti" "nth(args1, i)")
                          (("2" (name-replace "tj" "nth(args2, j)")
                            (("2" (lemma "equal?_select_delete")
                              (("2"
                                (inst -1 "f" "tj" "ti")
                                (("2"
                                  (assert)
                                  (("2"
                                    (skolem -1 ("k" "n"))
                                    (("2"
                                      (hide 1 2)
                                      (("2"
                                        (lemma "equal?_num_arg")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (inst -1 "tj")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 1
                                                 "ind_flatten(map(get_args(f))(args1), i, k)"
                                                 "_")
                                                (("1"
                                                  (lemma
                                                   "nth_flatten[term]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         1
                                                         rl
                                                         t)
                                                        (("1"
                                                          (rewrite
                                                           "map_nth_rw")
                                                          (("1"
                                                            (reveal -7)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "get_args_nth")
                                                                  (("1"
                                                                    (inst?
                                                                     -1)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "ind_flatten(map(get_args(f))(args2), j, n)")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (lemma
                                                                                 "nth_flatten[term]")
                                                                                (("1"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1
                                                                                       rl
                                                                                       t)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "get_args_nth")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "map_nth_rw")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "tj"
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "tj")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "map_length")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       2
                                                                                       -6)
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "map_nth_rw")
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "get_args_len")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "tj")
                                                                                            (("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "flatten_remove[term]")
                                                                                (("2"
                                                                                  (inst?
                                                                                   -1)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "flatten_remove[term]")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "get_args_remove_del")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "get_args_remove_del")
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (reveal
                                                                                                                         -16)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "delete(args1, f, i, k)")
                                                                                                                          (("1"
                                                                                                                            (prop)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "delete(args2, f, j, n)"
                                                                                                                               "f")
                                                                                                                              (("1"
                                                                                                                                (prop)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "perm?"
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "num_arg(f, ti) = 1")
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "delete_remove1")
                                                                                                                                      (("1"
                                                                                                                                        (inst?
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (prop)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "delete_remove1")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (prop)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "j")
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       -4
                                                                                                                                                       -5
                                                                                                                                                       -6
                                                                                                                                                       -7
                                                                                                                                                       2)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "tj"
                                                                                                                                                         -2)
                                                                                                                                                        (("3"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("4"
                                                                                                                                                      (expand
                                                                                                                                                       "tj"
                                                                                                                                                       -2)
                                                                                                                                                      (("4"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (typepred
                                                                                                                                             "i")
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (hide
                                                                                                                                             -4
                                                                                                                                             -5
                                                                                                                                             -6
                                                                                                                                             -7
                                                                                                                                             2)
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "ti")
                                                                                                                                              (("3"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (expand
                                                                                                                                             "ti"
                                                                                                                                             -1)
                                                                                                                                            (("4"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (case
                                                                                                                                       "num_arg(f, ti) > 1")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "perm?"
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (prop)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "delete_not_null")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "ti"
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (inst
                                                                                                                                             2
                                                                                                                                             "i"
                                                                                                                                             "j")
                                                                                                                                            (("1"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "delete_nth")
                                                                                                                                                (("1"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (prop)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (reveal
                                                                                                                                                           -18)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1
                                                                                                                                                             nil
                                                                                                                                                             t)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "delete_nth")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (prop)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "tj"
                                                                                                                                                                       -6)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "j")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (hide
                                                                                                                                                                     -4
                                                                                                                                                                     -5
                                                                                                                                                                     -6
                                                                                                                                                                     -7
                                                                                                                                                                     2
                                                                                                                                                                     3
                                                                                                                                                                     4)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (expand
                                                                                                                                                                       "tj"
                                                                                                                                                                       -2)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("4"
                                                                                                                                                                    (expand
                                                                                                                                                                     "tj"
                                                                                                                                                                     -2)
                                                                                                                                                                    (("4"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "i")
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       -4
                                                                                                                                                       -5
                                                                                                                                                       -6
                                                                                                                                                       -7
                                                                                                                                                       2
                                                                                                                                                       34)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "ti")
                                                                                                                                                        (("3"
                                                                                                                                                          (hide
                                                                                                                                                           2
                                                                                                                                                           3)
                                                                                                                                                          (("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("4"
                                                                                                                                                      (expand
                                                                                                                                                       "ti"
                                                                                                                                                       -1)
                                                                                                                                                      (("4"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (lemma
                                                                                                                                                 "delete_remove_gt1")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (prop)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       nil
                                                                                                                                                       t)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "delete_remove_gt1")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "j")
                                                                                                                                                              (("2"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide
                                                                                                                                                               -4
                                                                                                                                                               -5
                                                                                                                                                               -6
                                                                                                                                                               -7
                                                                                                                                                               2
                                                                                                                                                               3
                                                                                                                                                               4)
                                                                                                                                                              (("3"
                                                                                                                                                                (expand
                                                                                                                                                                 "tj")
                                                                                                                                                                (("3"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("4"
                                                                                                                                                              (expand
                                                                                                                                                               "tj"
                                                                                                                                                               -2)
                                                                                                                                                              (("4"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "i")
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (hide
                                                                                                                                                       -4
                                                                                                                                                       -5
                                                                                                                                                       -6
                                                                                                                                                       -7
                                                                                                                                                       2
                                                                                                                                                       3
                                                                                                                                                       4)
                                                                                                                                                      (("3"
                                                                                                                                                        (expand
                                                                                                                                                         "ti")
                                                                                                                                                        (("3"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("4"
                                                                                                                                                      (expand
                                                                                                                                                       "ti"
                                                                                                                                                       -1)
                                                                                                                                                      (("4"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (typepred
                                                                                                                                               "j")
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "delete_nth_len")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "tj"
                                                                                                                                                   -3)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("3"
                                                                                                                                              (rewrite
                                                                                                                                               "delete_nth_len")
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "i")
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 "ti"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (lemma
                                                                                                                                         "num_arg_ge1")
                                                                                                                                        (("2"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "delete_size2")
                                                                                                                              (("2"
                                                                                                                                (inst?
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (typepred
                                                                                                                     "j")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (hide
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     2)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "tj")
                                                                                                                      (("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide
                                                                                                           -3
                                                                                                           -4
                                                                                                           -6
                                                                                                           2)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "ti")
                                                                                                            (("3"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "map_length")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "j")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (rewrite
                                                                                                 "map_nth_rw")
                                                                                                (("3"
                                                                                                  (rewrite
                                                                                                   "get_args_len")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "tj")
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       2)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "map_length")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "get_args_len")
                                                                                        (("3"
                                                                                          (hide
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           2)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "ti")
                                                                                            (("3"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "ind_flatten_len[term]")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "map_nth_rw")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "map_length")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "get_args_len")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "j")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6
                                                                                                 -7)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "tj")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "map_length")
                                                          (("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (rewrite
                                                         "map_nth_rw")
                                                        (("3"
                                                          (hide 2)
                                                          (("3"
                                                            (rewrite
                                                             "get_args_len")
                                                            (("3"
                                                              (hide
                                                               -3
                                                               -4
                                                               -5
                                                               -6)
                                                              (("3"
                                                                (expand
                                                                 "ti")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "ind_flatten_len[term]")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "map_nth_rw")
                                                          (("2"
                                                            (rewrite
                                                             "map_length")
                                                            (("2"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -5
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "ti")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (perm? const-decl "bool" equality nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (get_args const-decl "args" term_properties nil)
    (equal?_num_arg formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ind_flatten def-decl "nat" list_theory nil)
    (f skolem-const-decl "string" equality nil)
    (args1 skolem-const-decl "args" equality nil)
    (i skolem-const-decl "below[length(args1)]" equality nil)
    (k skolem-const-decl "nat" equality nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (args2 skolem-const-decl "args" equality nil)
    (j skolem-const-decl "below[length(args2)]" equality nil)
    (n skolem-const-decl "nat" equality nil)
    (flatten_remove formula-decl nil list_theory nil)
    (get_args_remove_del formula-decl nil term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (ti skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" equality nil)
    (delete_remove1 formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (delete_remove_gt1 formula-decl nil term_properties nil)
    (delete_nth formula-decl nil term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (delete_nth_len formula-decl nil term_properties nil)
    (delete_not_null formula-decl nil term_properties nil)
    (> const-decl "bool" reals nil)
    (delete_size2 formula-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tj skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" equality nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_args_len formula-decl nil term_properties nil)
    (ind_flatten_len formula-decl nil list_theory nil)
    (get_args_nth formula-decl nil term_properties nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth_flatten formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_select_delete formula-decl nil equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (flatten def-decl "list[T]" list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null_append_uni formula-decl nil list_theory nil)
    (get_args_null formula-decl nil term_properties nil))
   SHOSTAK))
 (perm?_get_args_flatten 0
  (perm?_get_args_flatten-1 nil 3807284588
   ("" (skeep)
    (("" (lemma "perm?_map_get_args")
      (("" (inst? -1)
        (("" (inst -1 "args2")
          (("" (prop)
            (("" (expand "perm?" -1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_map_get_args formula-decl nil equality nil)
    (perm? const-decl "bool" equality nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (perm?_get_ac_from_args_equal? 0
  (perm?_get_ac_from_args_equal?-1 nil 3807185297
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "get_ac_from_args")
              (("" (lemma "perm_args_ac")
                (("" (inst? -1)
                  (("" (inst -1 "f")
                    (("" (assert)
                      (("" (hide 2)
                        (("" (prop)
                          (("1" (rewrite "get_args_ac")
                            (("1" (rewrite "get_args_ac")
                              (("1"
                                (lemma "get_args_get_term_from_args")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "get_args_get_term_from_args")
                                            (("1"
                                              (inst -1 "args2" "f")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "perm?_get_args_flatten")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2"
                                                    (reveal 2)
                                                    (("2"
                                                      (case
                                                       "null?(args1)")
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (expand
                                                           "get_term_from_args"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "equal?"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "1"
                                                                 "1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "perm?_len")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (reveal 2)
                                          (("2"
                                            (case "null?(args2)")
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (expand
                                                 "get_term_from_args"
                                                 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "equal?"
                                                       1)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "1"
                                                         "1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (equal? def-decl "bool" equality nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (perm_args_ac formula-decl nil equality nil)
    (are_ac? const-decl "bool" term_properties nil)
    (get_args_ac formula-decl nil term_properties nil)
    (get_args_get_term_from_args formula-decl nil term_properties nil)
    (perm?_get_args_flatten formula-decl nil equality nil)
    (perm?_len formula-decl nil equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select def-decl "term" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (get_term_from_args def-decl "term" term_properties nil))
   SHOSTAK))
 (perm_get_ac_from_args 0
  (perm_get_ac_from_args-1 nil 3807130475
   ("" (skeep)
    (("" (lemma "perm?_get_ac_from_args_equal?")
      (("" (inst -1 "args1" "args2" "f")
        (("" (assert)
          (("" (lemma "ac_perm_args")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide -1 -2 2) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_get_ac_from_args_equal? formula-decl nil equality nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (are_ac? const-decl "bool" term_properties nil)
    (ac_perm_args formula-decl nil equality nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (equal_map_count_get_args 0
  (equal_map_count_get_args-1 nil 3839013349
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "equal?" -2)
            (("1" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "map" 3 2)
                (("2" (assert)
                  (("2" (expand "map" 3 4)
                    (("2" (expand "map" 3 1)
                      (("2" (expand "map" 3 3)
                        (("2" (lemma "ac_perm_args2")
                          (("2" (inst -1 "f" "car(args2)" "car(args1)")
                            (("2" (assert)
                              (("2"
                                (lemma "perm?_equiv_same_count?")
                                (("2"
                                  (expand "same_count?" -1)
                                  (("2"
                                    (expand "count" 3 1)
                                    (("2"
                                      (expand "count" 3 3)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "t")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (decompose-equality 3)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "cdr(args1)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "equal?_equiv") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_get_args_remove_aux 0
  (count_get_args_remove_aux-1 nil 3839192840
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 ("args1"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "nth" 1)
            (("1" (lift-if)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "remove" 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (expand "length" -4)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "map" 2 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "flatten" 2 2)
                                    (("2"
                                      (rewrite "count_append_uni" 2)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "remove" 2 1)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "length" -3)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (prop)
                            (("2" (hide 1)
                              (("2"
                                (expand "map" 1 1)
                                (("2"
                                  (expand "flatten" 1 1)
                                  (("2"
                                    (rewrite "count_append_uni")
                                    (("2"
                                      (expand "map" 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "flatten" 1 2)
                                          (("2"
                                            (rewrite "count_append_uni")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "cdr(args1)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_append_uni formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (flatten def-decl "list[T]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (equiv type-eq-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_get_args_remove 0
  (count_get_args_remove-1 nil 3839191309
   ("" (measure-induct "length(lst_args1)" "lst_args1")
    (("1" (skolem 1 "lst_args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "flatten" 1 2)
              (("1" (lift-if)
                (("1" (split 1)
                  (("1" (flatten)
                    (("1" (expand "flatten" -2)
                      (("1" (assert)
                        (("1" (expand "length" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lemma "remove_append[term]")
                      (("2" (inst?)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (replace -2)
                              (("1"
                                (lemma "map_append[term, args]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "flatten_append")
                                        (("1"
                                          (rewrite "count_append_uni")
                                          (("1"
                                            (expand "flatten" 2 6)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "map_append[term, args]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (rewrite
                                                         "flatten_append")
                                                        (("1"
                                                          (rewrite
                                                           "count_append_uni"
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "flatten"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "nth_append_uni")
                                                                  (("1"
                                                                    (lemma
                                                                     "count_get_args_remove_aux")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "map_append[term, args]")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite "flatten_append")
                                          (("1"
                                            (rewrite "count_append_uni")
                                            (("1"
                                              (expand "flatten" 3 6)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "map_append[term, args]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "flatten_append")
                                                          (("1"
                                                            (rewrite
                                                             "count_append_uni")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (reveal
                                                                   -6)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "cdr(lst_args1)")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "flatten"
                                                                                   3
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "nth_append_uni")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "flatten"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_append")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "flatten"
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_append formula-decl nil list_theory nil)
    (length_append formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (count_append_uni formula-decl nil list_theory nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (count_get_args_remove_aux formula-decl nil equality nil)
    (flatten_append formula-decl nil list_theory nil)
    (map_append formula-decl nil more_map_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (equiv type-eq-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (flatten def-decl "list[T]" list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (reorder_ref 0
  (reorder_ref-1 nil 3842282504
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (expand "reorder?" 1)
          (("2" (inst 1 "0" "0")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (reorder? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (reorder_get_args_gt0 0
  (reorder_get_args_gt0-1 nil 3842281838
   ("" (skeep)
    (("" (expand "reorder?" 1)
      (("" (split 1)
        (("1" (expand "get_args" -1)
          (("1" (expand "from_min2max" -1)
            (("1" (assert)
              (("1" (expand "map" -1) (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (inst 2 "i-1" "0")
            (("1" (prop)
              (("1" (expand "nth" 1 2)
                (("1" (lemma "get_args_nth")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (expand "remove" 1 2)
                (("2" (lemma "get_args_remove")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (rewrite "reorder_ref") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (rewrite "get_args_len") (("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reorder? def-decl "bool" equality nil)
    (get_args_len formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_args_nth formula-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (get_args_remove formula-decl nil term_properties nil)
    (reorder_ref formula-decl nil equality nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (select def-decl "term" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_min2max def-decl "list[nat]" list_theory nil))
   shostak))
 (size2_cons_remove 0
  (size2_cons_remove-1 nil 3842280113
   ("" (induct "args1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (size2 def-decl "nat" term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (size2_reorder 0
  (size2_reorder-1 nil 3842279698
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "reorder?" -2)
            (("" (split -2)
              (("1" (grind) nil nil)
               ("2" (flatten)
                (("2" (skolem -1 ("i" "j"))
                  (("2" (prop)
                    (("2" (lemma "size2_cons_remove")
                      (("2" (inst -1 "args1" "i")
                        (("2" (typepred "i")
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "map" 2 1)
                                    (("2"
                                      (expand "sum" 2 1)
                                      (("2"
                                        (lemma "size2_cons_remove")
                                        (("2"
                                          (inst -1 "args2" "j")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand "map" 2 2)
                                                (("2"
                                                  (expand "sum" 2 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "remove(args1, i)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "remove(args2, j)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "remove_len")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size2_cons_remove formula-decl nil equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size2 def-decl "nat" term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reorder? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (equal_size2 0
  (equal_size2-1 nil 3842273011
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "equal?" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (hide 1 2 3)
                  (("4" (expand "size2" 1)
                    (("4" (assert)
                      (("4" (inst-cp -5 "term1(t)")
                        (("4" (prop)
                          (("1" (inst -1 "term1(s)")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -6 "term2(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -1 "term2(s)")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 1 2 3 4)
                  (("5" (expand "size2" 1)
                    (("5" (assert)
                      (("5" (inst -6 "arg(t)") (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "equal?(t, s)")
                  (("1" (hide -2)
                    (("1" (case "ac_app?(t)")
                      (("1" (assert)
                        (("1" (hide 1 2 3 4 5)
                          (("1" (lemma "term_ac_app_eta")
                            (("1" (inst -1 "t")
                              (("1"
                                (name-replace "f" "ac_sym(t)")
                                (("1"
                                  (case "is_ac_sym?(s, f)")
                                  (("1"
                                    (expand "size2" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "is_ac_sym?" -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -3 :dir rl)
                                                  (("1"
                                                    (lemma
                                                     "equal?_select_delete")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f"
                                                       "s"
                                                       "t")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skolem
                                                           -1
                                                           ("i" "j"))
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (case
                                                               "num_arg(f, t) = 1")
                                                              (("1"
                                                                (expand
                                                                 "get_args"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "from_min2max"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "map"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "map"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "map"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "map"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "sum"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "sum"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (case
                                                                                   "num_arg(f, s) = 1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "get_args"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "from_min2max"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "map"
                                                                                             1
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "map"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "map"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sum"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "sum"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nice_ind?"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nice_ind?"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "i = 0")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "j = 0")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -15
                                                                                                                       "select(f, t)(1)")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "ac_select_size")
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "nice_ind?"
                                                                                                                 -5)
                                                                                                                (("2"
                                                                                                                  (prop)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nice_ind?"
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "equal?_num_arg")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "f"
                                                                                       "s"
                                                                                       "t")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "num_arg(f, t) > 1")
                                                                (("1"
                                                                  (hide
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "reorder_get_args_gt0")
                                                                    (("1"
                                                                      (expand
                                                                       "nice_ind?"
                                                                       -3)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "nice_ind?"
                                                                           -4)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (hide
                                                                               -5)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "f"
                                                                                 "i+1"
                                                                                 "t")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "size2_reorder")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -14)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "get_args(f)(t)"
                                                                                         "cons(select(f, t)(1 + i), get_args(f)(delete(f, t)(1 + i)))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "reorder_get_args_gt0")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "f"
                                                                                                     "j+1"
                                                                                                     "s")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "num_arg(f, s) = num_arg(f, t)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "size2_reorder")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "get_args(f)(s)"
                                                                                                                 "cons(select(f, s)(1 + j), get_args(f)(delete(f, s)(1 + j)))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "map"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sum"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             -6)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "select(f, t)(1+i)")
                                                                                                                              (("1"
                                                                                                                                (prop)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "select(f, s)(1 + j)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (reveal
                                                                                                                                             -8)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "delete(f, t)(1+i)")
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "delete(f, s)(1+j)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "delete_ac_num_arg_gt1")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "f"
                                                                                                                                                         "1+i"
                                                                                                                                                         "t")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "is_ac_sym?"
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "size2"
                                                                                                                                                               -3
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -2
                                                                                                                                                                   :dir
                                                                                                                                                                   rl)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "delete_ac_num_arg_gt1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "f"
                                                                                                                                                                       "1+j"
                                                                                                                                                                       "s")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "is_ac_sym?"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (prop)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "size2"
                                                                                                                                                                               -5
                                                                                                                                                                               2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "ac_delete_size")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lemma
                                                                                                                                   "ac_select_size")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "is_ac_sym?"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "equal?_num_arg")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f"
                                                                                                               "s"
                                                                                                               "t")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "num_arg_ge1")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "is_ac_sym?" 1)
                                    (("2"
                                      (expand "f" 1)
                                      (("2"
                                        (expand "equal?" -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (expand "equal?" 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equal? def-decl "bool" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (size2 def-decl "nat" term_properties nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (f skolem-const-decl "ac_symbol" equality nil)
    (equal?_select_delete formula-decl nil equality nil)
    (> const-decl "bool" reals nil)
    (reorder_get_args_gt0 formula-decl nil equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (size2_reorder formula-decl nil equality nil)
    (delete def-decl "term" term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (delete_ac_num_arg_gt1 formula-decl nil term_properties nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (equal?_num_arg formula-decl nil equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_select_size formula-decl nil term_properties nil)
    (select def-decl "term" term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (num_arg def-decl "nat" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (perm?_size2 0
  (perm?_size2-1 nil 3844607068
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "perm?" -2)
            (("" (split -2)
              (("1" (grind) nil nil)
               ("2" (flatten)
                (("2" (skolem -1 ("i" "j"))
                  (("2" (prop)
                    (("2" (lemma "size2_cons_remove")
                      (("2" (inst -1 "args1" "i")
                        (("2" (typepred "i")
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2"
                                (lemma "size2_cons_remove")
                                (("2"
                                  (inst -1 "args2" "j")
                                  (("2"
                                    (typepred "j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (expand "map" 2)
                                            (("2"
                                              (expand "sum" 2)
                                              (("2"
                                                (lemma "equal_size2")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "remove(args1, i)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "remove(args2, j)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "remove_len[term]")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size2_cons_remove formula-decl nil equality nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (remove_len formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (equal_size2 formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size2 def-decl "nat" term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_TCC1 0
  (count_vec_TCC1-1 nil 3845834487 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (count_vec subtype "equality.args1"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (count_vec_TCC2 0
  (count_vec_TCC2-1 nil 3845834487 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (count_vec termination
    "equality.count_vec(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(equality.args1), equality.f)"
    "nil")))
 (count_vec_TCC3 0
  (count_vec_TCC3-1 nil 3845834487 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil))
   nil
   (count_vec subtype "equality.args1"
    "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (count_size2_ge 0
  (count_size2_ge-1 nil 3844609763
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "map" 1 2)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "sum" 2 2)
                    (("2" (inst -2 "car(args2)")
                      (("2" (lemma "count_gt0[term]")
                        (("2" (inst -1 "equal?" "args1" "car(args2)")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (skolem -1 "i")
                                (("1"
                                  (lemma "size2_cons_remove")
                                  (("1"
                                    (inst -1 "args1" "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "map" 2 1)
                                          (("1"
                                            (expand "sum" 2 1)
                                            (("1"
                                              (lemma "equal_size2")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst
                                                       -4
                                                       "cdr(args2)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "remove(args1, i)")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -6)
                                                              (("2"
                                                                (hide
                                                                 3)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "t1")
                                                                    (("2"
                                                                      (expand
                                                                       "count "
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (lemma
                                                                               "count_remove[term]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "equal?"
                                                                                 "i"
                                                                                 "args1"
                                                                                 "t1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "count_remove[term]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "equal?"
                                                                                 "i"
                                                                                 "args1"
                                                                                 "t1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -6
                                                                                          1))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "equal?_sym")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "nth(args1, i)"
                                                                                             "car(args2)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "equal?_trans")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "t1"
                                                                                                   "nth(args1, i)"
                                                                                                   "car(args2)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "count(car(args2), args2, equal?) > 0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "count" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite "equal?_ref")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (rewrite "equal?_equiv") nil nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (size2_cons_remove formula-decl nil equality nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equal_size2 formula-decl nil equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (count_remove formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (equal?_sym formula-decl nil equality nil)
    (equal?_trans formula-decl nil equality nil)
    (nth def-decl "T" list_props nil)
    (equal?_ref formula-decl nil equality nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size2 def-decl "nat" term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_eq2 0
  (count_eq2-1 nil 3848174578
   ("" (skeep)
    (("" (expand "count" 1)
      (("" (lemma "ac_perm_args2")
        (("" (inst -1 "f" "t1" "t")
          (("" (assert)
            (("" (use "perm?_equiv_same_count?")
              (("" (assert)
                (("" (expand "same_count?" -1)
                  (("" (inst -1 "s") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (number nonempty-type-decl nil numbers nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (ac_perm_args2 formula-decl nil equality nil))
   shostak))
 (count_eq3 0
  (count_eq3-1 nil 3849015097
   ("" (skeep)
    (("" (expand "count" 1)
      (("" (lemma "count_eq[term]")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (count_eq formula-decl nil list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil))
   shostak))
 (count_vec_len 0
  (count_vec_len-1 nil 3845834490
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (expand "count_vec" 1)
        (("1" (assert)
          (("1" (expand "length" 1) (("1" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" 1 2)
            (("2" (expand "count_vec" 1)
              (("2" (expand "length" 1 1)
                (("2" (inst -1 "f" "s") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (count_vec def-decl "list[nat]" equality nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_vec_append 0
  (count_vec_append-1 nil 3845835273
   ("" (induct "args1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (count_vec def-decl "list[nat]" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_vec_equiv 0
  (count_vec_equiv-1 nil 3845842455
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "map" 1 2)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (expand "count_vec" 1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (expand "map" 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "map" 2 1)
                  (("2" (expand "count_vec" 2)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("2" (expand "count" 2 3)
                          (("2" (expand "count" 2 1)
                            (("2" (inst -1 "cdr(args1)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "f" "t")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (rewrite "equal?_equiv") nil nil)) nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (count_vec def-decl "list[nat]" equality nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_nth_TCC1 0
  (count_vec_nth_TCC1-1 nil 3846530363
   ("" (skeep) (("" (rewrite "count_vec_len") nil nil)) nil)
   ((count_vec_len formula-decl nil equality nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (count_vec_nth subtype "equality.i"
    "below[length[nat](count_vec(args1, f)(t))]")))
 (count_vec_nth 0
  (count_vec_nth-1 nil 3846530363
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_vec" 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "nth" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst?) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "count_vec_len") nil nil)) nil))
      nil))
    nil)
   ((count_vec_len formula-decl nil equality nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (count_vec def-decl "list[nat]" equality nil))
   shostak))
 (count_vec_perm_aux 0
  (count_vec_perm_aux-1 nil 3847550705
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "nth" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "remove" 1)
                  (("1" (expand "length" -3 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (prop) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" -2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (prop)
                        (("2" (expand "remove" 3)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (expand "count_vec" 3 2)
                                (("2"
                                  (expand "sum" 3 2)
                                  (("2"
                                    (expand "count_vec" 3 1)
                                    (("2"
                                      (expand "sum" 3 1)
                                      (("2"
                                        (inst -2 "cdr(args1)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "f" "j-1" "t")
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count_vec def-decl "list[nat]" equality nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_perm 0
  (count_vec_perm-1 nil 3847549773
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "count_vec" 1 1)
              (("" (lift-if)
                (("" (lemma "perm?_len")
                  (("" (inst?)
                    (("" (assert)
                      (("" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (lemma "perm?_trans_aux")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "0")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (skolem -1 "j")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -5)
                                          (("1"
                                            (expand "nth" -2 1)
                                            (("1"
                                              (expand "sum" 2 1)
                                              (("1"
                                                (lemma
                                                 "count_vec_perm_aux")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "args2"
                                                   "f"
                                                   "j"
                                                   "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (reveal -7)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(args1)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "remove(args2, j)"
                                                                 "f"
                                                                 "t")
                                                                (("1"
                                                                  (expand
                                                                   "remove"
                                                                   -4
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "count"
                                                                             2)
                                                                            (("1"
                                                                              (hide
                                                                               -3)
                                                                              (("1"
                                                                                (lemma
                                                                                 "ac_perm_args2")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "nth(args2, j)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (use
                                                                                         "perm?_equiv_same_count?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "same_count?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "t")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_len formula-decl nil equality nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_vec_perm_aux formula-decl nil equality nil)
    (nth def-decl "T" list_props nil)
    (perm?_trans_aux formula-decl nil equality nil)
    (count_vec def-decl "list[nat]" equality nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm? def-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_get_repeat_lst 0
  (count_vec_get_repeat_lst-1 nil 3847553724
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count_vec def-decl "list[nat]" equality nil)
    (args type-eq-decl nil term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (count_vec_get_lst_mult 0
  (count_vec_get_lst_mult-1 nil 3847553336
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_mult" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (rewrite "count_vec_append")
                  (("3" (rewrite "sum_append")
                    (("3" (expand "count_vec" 3 3)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (expand "dot_product" 3)
                            (("3" (use "count_vec_get_repeat_lst")
                              (("3"
                                (replace -1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide -1)
                                    (("3"
                                      (inst -1 "cdr(args1)")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count_vec_append formula-decl nil equality nil)
    (count_vec_get_repeat_lst formula-decl nil equality nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sum_append formula-decl nil list_nat_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (count_vec def-decl "list[nat]" equality nil)
    (sum def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_vec_map 0
  (count_vec_map-1 nil 3848174774
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_vec" 1 1)
            (("2" (expand "map" 1)
              (("2" (expand "count" 1 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (count_vec def-decl "list[nat]" equality nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (member_ac_perm 0
  (member_ac_perm-1 nil 3846517979
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "member_ac" -1)
          (("1" (skolem -1 "t")
            (("1" (prop)
              (("1" (rewrite "perm?_equiv_same_count?")
                (("1" (lemma "count_mem[term]")
                  (("1" (inst -1 "equal?" "args1" "t")
                    (("1" (assert)
                      (("1" (expand "same_count?" -4)
                        (("1" (inst -4 "t")
                          (("1" (lemma "count_gt0[term]")
                            (("1" (inst -1 "equal?" "args2" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "i")
                                  (("1"
                                    (expand "member_ac" 1)
                                    (("1"
                                      (inst 1 "nth(args2, i)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma "equal?_trans")
                                          (("1"
                                            (inst
                                             -1
                                             "s"
                                             "t"
                                             "nth(args2, i)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "member_nth_uni")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "member_ac" 1)
          (("2" (expand "member_ac" -1)
            (("2" (rewrite "perm?_equiv_same_count?")
              (("2" (skolem -1 "t")
                (("2" (prop)
                  (("2" (lemma "count_mem[term]")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (inst -1 "equal?")
                          (("2" (expand "same_count?" -4)
                            (("2" (inst -4 "t")
                              (("2"
                                (lemma "count_gt0[term]")
                                (("2"
                                  (inst -1 "equal?" "args1" "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "i")
                                      (("2"
                                        (inst 1 "nth(args1, i)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (lemma "equal?_trans")
                                            (("1"
                                              (inst
                                               -1
                                               "s"
                                               "t"
                                               "nth(args1, i)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "member_nth_uni")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_ac const-decl "bool" equality nil)
    (count_mem formula-decl nil list_theory nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (equal?_trans formula-decl nil equality nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (perm?_equiv_same_count? formula-decl nil equality nil))
   shostak))
 (member_ac_count_elem2 0
  (member_ac_count_elem2-1 nil 3848855193
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "count_elem2" 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (skolem -3 "s")
                  (("2" (prop)
                    (("2" (case "equal?(s, car(args1))")
                      (("1" (expand "member_ac" 2)
                        (("1" (inst 2 "car(args1)")
                          (("1" (prop)
                            (("1" (lemma "equal?_equiv")
                              (("1"
                                (expand "equivalence?" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "transitive?" -3)
                                    (("1"
                                      (inst -3 "t" "s" "car(args1)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "member" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (inst -1 "remove(args1, car(args1), equal?)")
                        (("2" (prop)
                          (("1"
                            (inst -1
                             "remove(args2, car(args1), equal?)" "t")
                            (("1" (prop)
                              (("1"
                                (expand "member_ac" -1)
                                (("1"
                                  (skolem -1 "t1")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "member_ac" 3)
                                      (("1"
                                        (inst 3 "t1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (rewrite "perm?_equiv_same_count?")
                                  (("2"
                                    (rewrite "perm?_equiv_same_count?")
                                    (("2"
                                      (expand "same_count?" 1)
                                      (("2"
                                        (skolem 1 "x")
                                        (("2"
                                          (expand "same_count?" -1)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (lemma
                                               "count_remove2[term]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "equal?"
                                                 "args1"
                                                 "car(args1)"
                                                 "x")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (lemma
                                                       "count_remove2[term]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?"
                                                         "args2"
                                                         "car(args1)"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (lemma
                                                         "count_remove2[term]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "args2"
                                                           "car(args1)"
                                                           "x")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (inst 1 "s")
                                (("3"
                                  (prop)
                                  (("3"
                                    (use "remove_elem_mem[term]")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "remove" 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (use "remove_elem_len[term]")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "equal?_equiv")
                                  (("2"
                                    (expand "equivalence?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "reflexive?" -1)
                                        (("2"
                                          (inst -1 "car(args1)")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (equal?_equiv formula-decl nil equality nil)
    (transitive? const-decl "bool" relations nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (count_remove2 formula-decl nil list_theory nil)
    (remove_elem_mem formula-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (member_ac const-decl "bool" equality nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm? def-decl "bool" equality nil)
    (member def-decl "bool" list_props nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_count_elem2 0
  (vars_count_elem2-1 nil 3848929331
   ("" (skeep)
    (("" (use "subset_antisymmetric[variable]")
      (("" (assert)
        (("" (prop)
          (("1" (expand "subset?" 1)
            (("1" (skeep)
              (("1" (hide 2)
                (("1" (use "vars_args")
                  (("1" (assert)
                    (("1" (skolem -1 "t")
                      (("1" (prop)
                        (("1" (use "count_elem2_mem")
                          (("1" (assert)
                            (("1" (rewrite "vars_args" 1)
                              (("1"
                                (inst 1 "t")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "subset?" 1)
              (("2" (skolem 1 "x")
                (("2" (prop)
                  (("2" (rewrite "vars_args")
                    (("2" (skolem -1 "t")
                      (("2" (prop)
                        (("2" (lemma "count_elem2_mem2")
                          (("2" (inst -1 "equal?" "args1" "t")
                            (("2" (assert)
                              (("2"
                                (skolem -1 "t1")
                                (("2"
                                  (prop)
                                  (("2"
                                    (rewrite "vars_args" 1)
                                    (("2"
                                      (inst 1 "t1")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (use "equal?_vars")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (equal?_vars formula-decl nil equality nil)
    (count_elem2_mem2 formula-decl nil more_list_theory_props nil)
    (subset? const-decl "bool" sets nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem2_mem formula-decl nil more_list_theory_props nil)
    (vars_args formula-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (constant type-eq-decl nil term_properties nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil))
   shostak))
 (no_pair_ac_count_elem2 0
  (no_pair_ac_count_elem2-1 nil 3849014574
   ("" (skeep)
    (("" (iff)
      (("" (prop)
        (("1" (expand "no_pair_ac?" -1)
          (("1" (expand "no_pair_ac?" 1)
            (("1" (skeep)
              (("1" (use "count_elem2_mem2")
                (("1" (assert)
                  (("1" (skolem -1 "t1")
                    (("1" (prop)
                      (("1" (inst -4 "t1") (("1" (grind) nil nil)) nil)
                       ("2" (inst -4 "t1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "equal?_equiv") nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "no_pair_ac?" 1)
          (("2" (skeep)
            (("2" (expand "no_pair_ac?" -1)
              (("2" (inst -1 "t")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (use "count_elem2_mem")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_elem2_mem2 formula-decl nil more_list_theory_props nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (equivalence? const-decl "bool" relations nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (equal?_equiv formula-decl nil equality nil)
    (no_pair_ac? const-decl "bool" term_properties nil)
    (count_elem2_mem formula-decl nil more_list_theory_props nil))
   nil))
 (var_lst_dif_elem_TCC1 0
  (var_lst_dif_elem_TCC1-1 nil 3849439699 ("" (subtype-tcc) nil nil)
   nil nil (var_lst_dif_elem subtype "=" "equiv[nat]")))
 (var_lst_dif_elem 0
  (var_lst_dif_elem-1 nil 3849439700
   ("" (skeep)
    (("" (prop)
      (("1" (expand "dif_elem?" 1)
        (("1" (skeep)
          (("1" (rewrite "var_lst_len")
            (("1" (expand "dif_elem?" -1)
              (("1" (inst -1 "i" "j")
                (("1" (assert)
                  (("1" (use "var_lst_nth")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (use "var_lst_nth")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "equal?" -4)
                                  (("1"
                                    (decompose-equality -4)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "dif_elem?" -1)
        (("2" (expand "dif_elem?" 1)
          (("2" (skeep)
            (("2" (inst -1 "i" "j")
              (("2" (rewrite "var_lst_len")
                (("2" (assert)
                  (("2" (use "var_lst_nth")
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (use "var_lst_nth")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -4)
                                  (("2" (use "equal?_ref") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_ref formula-decl nil equality nil)
    (var_lst_len formula-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_lst_nth formula-decl nil term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (well_formed_count_elem2 0
  (well_formed_count_elem2-1 nil 3849703230
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skeep)
        (("" (expand "well_formed?" -1)
          (("" (prop)
            (("1" (inst -3 "t")
              (("1" (assert)
                (("1" (rewrite "subterm_args")
                  (("1" (skolem -1 "t1")
                    (("1" (flatten)
                      (("1" (rewrite "subterm_args")
                        (("1" (inst 2 "t1")
                          (("1" (assert)
                            (("1" (use "count_elem2_mem")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "t")
              (("2" (assert)
                (("2" (use "count_elem2_mem") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count_elem2_mem formula-decl nil more_list_theory_props nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (subterm_args formula-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (remove_common_no_common 0
  (remove_common_no_common-1 nil 3849697922
   ("" (measure-induct "length(args1)" "args1")
    (("1" (skolem 1 "args1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "remove_common" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (assert) nil nil)
                 ("2" (expand "no_common_args?" -3)
                  (("2" (inst -3 "car(args1)")
                    (("2" (flatten)
                      (("2" (hide -4)
                        (("2" (prop)
                          (("1" (lemma "count_pos?2[term]")
                            (("1"
                              (inst -1 "equal?" "args2" "car(args1)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "count" 1 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2" (use "equal?_ref") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (decompose-equality 2)
                  (("3" (inst -1 "cdr(args1)")
                    (("3" (prop)
                      (("1" (inst -1 "args2")
                        (("1" (assert)
                          (("1" (expand "no_common_args?" 1)
                            (("1" (skeep)
                              (("1"
                                (expand "no_common_args?" -1)
                                (("1"
                                  (inst -1 "t")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "count" 1 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil)
                                     ("3"
                                      (expand "count" -1 1)
                                      (("3"
                                        (lift-if)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "count" -1)
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (prop)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_pos?2 formula-decl nil list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (no_common_args? const-decl "bool" equality nil)
    (equivalence? const-decl "bool" relations nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_common_sym 0
  (remove_common_sym-1 nil 3849799885
   ("" (skeep)
    (("" (prop)
      (("1" (expand "remove_common" 1) (("1" (propax) nil nil)) nil)
       ("2" (expand "remove_common" 1) (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((remove_common const-decl "[term, term]" equality nil)) shostak)))

