(term)
(term_properties
 (size_TCC1 0
  (size_TCC1-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (size subtype "term_properties.t"
         "(term_adt[constant, variable, f_symbol, ac_symbol].pair?)")))
 (size_TCC2 0
  (size_TCC2-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination
         "term_properties.size(term_adt[constant, variable, f_symbol, ac_symbol].term1(term_properties.t))"
         "nil")))
 (size_TCC3 0
  (size_TCC3-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination
         "term_properties.size(term_adt[constant, variable, f_symbol, ac_symbol].term2(term_properties.t))"
         "nil")))
 (size_TCC4 0
  (size_TCC4-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination "term_properties.size(term_properties.arg)"
         "nil")))
 (size_TCC5 0
  (size_TCC5-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (size termination "term_properties.size(term_properties.arg)"
         "nil")))
 (size_TCC6 0
  (size_TCC6-1 nil 3807619491 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (size subtype "term_properties.args"
         "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (size_TCC7 0
  (size_TCC7-1 nil 3807619491 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil
   (size termination
         "term_properties.size(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
         "nil")))
 (size_TCC8 0
  (size_TCC8-1 nil 3807619491 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil))
   nil
   (size subtype "term_properties.args"
         "(list_adt[term[constant, variable, f_symbol, ac_symbol]].cons?)")))
 (size_TCC9 0
  (size_TCC9-1 nil 3839251317 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil))
   nil
   (size subtype "term_properties.lst_args" "(list_adt[args].cons?)")))
 (size_TCC10 0
  (size_TCC10-1 nil 3839251317 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (size termination
         "term_properties.size(list_adt[args].cdr(term_properties.lst_args))"
         "nil")))
 (size_TCC11 0
  (size_TCC11-1 nil 3839251317 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil))
   nil
   (size subtype "term_properties.lst_args" "(list_adt[args].cons?)")))
 (member_TCC1 0
  (member_TCC2-1 nil 3829215107 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (member termination
           "term_properties.member(term_properties.t, list_adt[args].cdr(term_properties.lst_args))"
     "nil")))
 (num_arg_TCC1 0
  (num_arg_TCC1-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (num_arg termination
    "term_properties.num_arg(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].term1(term_properties.t))"
    "nil")))
 (num_arg_TCC2 0
  (num_arg_TCC2-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (num_arg termination
    "term_properties.num_arg(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].term2(term_properties.t))"
    "nil")))
 (num_arg_TCC3 0
  (num_arg_TCC3-1 nil 3805199221 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil
   (num_arg termination
    "term_properties.num_arg(term_properties.sym, term_adt[constant, variable, f_symbol, ac_symbol].ac_arg(term_properties.t))"
    "nil")))
 (select_TCC1 0
  (select_TCC1-1 nil 3805989807 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (select subtype
    "(number_fields.-)(term_properties.n, term_properties.n1)" "nat")))
 (delete_TCC1 0
  (delete_TCC1-1 nil 3807528173 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (delete subtype "(number_fields.-)(term_properties.i, 1)" "nat")))
 (delete_TCC2 0
  (delete_TCC2-1 nil 3807528173 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (delete termination
           "term_properties.delete(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args), term_properties.f, (number_fields.-)(term_properties.i, 1), term_properties.j)"
     "nil")))
 (nice_ind?_TCC1 0
  (nice_ind?_TCC1-1 nil 3806608110 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (nice_ind? subtype "term_properties.lst_nat"
    "(list_adt[nat].cons?)")))
 (nice_ind?_TCC2 0
  (nice_ind?_TCC2-1 nil 3806608110 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil))
   nil
   (nice_ind? termination
    "term_properties.nice_ind?(list_adt[nat].cdr(term_properties.lst_nat), term_properties.n)"
    "nil")))
 (get_term_from_args_TCC1 0
  (get_term_from_args_TCC1-1 nil 3804712586 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (get_term_from_args termination
    "term_properties.get_term_from_args(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (all_var?_TCC1 0
  (all_var?_TCC1-1 nil 3809109930 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (all_var? termination
    "term_properties.all_var?(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (all_var?_TCC2 0
  (all_var?_TCC3-1 nil 3809109930 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (all_var? termination
    "term_properties.all_var?(list_adt[args].cdr(term_properties.lst_args))"
    "nil")))
 (term_opt 0
  (term_opt-1 nil 3825441259
   ("" (skeep)
    (("" (case "const?(t)")
      (("1" (hide 2 3 4 5 6)
        (("1" (assert) (("1" (rewrite "term_const_eta") nil nil)) nil))
        nil)
       ("2" (case "var?(t)")
        (("1" (hide 1 2 4 5 6 7)
          (("1" (assert)
            (("1" (lemma "term_variable_eta")
              (("1" (inst? -1) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "t = unit")
          (("1" (propax) nil nil)
           ("2" (case "pair?(t)")
            (("1" (hide 1 2 3 4 5 6 8 9)
              (("1" (lemma "term_pair_eta") (("1" (grind) nil nil))
                nil))
              nil)
             ("2" (case "app?(t)")
              (("1" (hide 1 2 3 4 5 6 7 8 10)
                (("1" (lemma "term_app_eta") (("1" (grind) nil nil))
                  nil))
                nil)
               ("2" (case "ac_app?(t)")
                (("1" (lemma "term_ac_app_eta")
                  (("1" (hide 1 2 3 4 5 6 7 8 9 10)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide 7 8 9 10 11 12) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (term_const_eta formula-decl nil term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_variable_eta formula-decl nil term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   shostak))
 (member_t_lst_args 0
  (member_t_lst_args-1 nil 3829215107
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "member" -1)
              (("1" (prop)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (inst -2 "t")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 1 "args!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "args1")
              (("2" (prop)
                (("2" (expand "member" -1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -3 "t")
                      (("2" (prop)
                        (("1" (grind) nil nil)
                         ("2" (inst 1 "args1") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (member def-decl "bool" term_properties nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (size_ge1 0
  (size_ge1-1 nil 3806329573
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   SHOSTAK))
 (size_args_ge1 0
  (size_args_ge1-1 nil 3839251616
   ("" (induct "args") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (num_arg_ge1 0
  (num_arg_ge1-1 nil 3805992135
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("x"))
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_arg" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -2 "term1(x)") (("1" (grind) nil nil)) nil)
                 ("2" (inst -3 "ac_arg(x)") (("2" (grind) nil nil))
                  nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (num_arg_ge1_type_t 0
  (num_arg_ge1_type_t-1 nil 3806331029 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil))
   SHOSTAK))
 (num_arg_not_pair_ac 0
  (num_arg_not_pair_ac-1 nil 3807114091 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil))
   SHOSTAK))
 (select_num_arg 0
  (select_num_arg-1 nil 3806358731
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -3 "term1(t)")
                  (("1" (prop)
                    (("1" (inst -1 "f" "i") nil nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (inst -2 "term2(t)")
                  (("2" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("3" (inst -3 "ac_arg(t)")
                  (("3" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("4" (lemma "num_arg_ge1_type_t")
                  (("4" (inst? -1)
                    (("4" (lemma "num_arg_ge1")
                      (("4" (inst? -1) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "num_arg" 2) (("5" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg_ge1_type_t formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (select_not_pair 0
  (select_not_pair-1 nil 3827572713
   ("" (skeep)
    (("" (lemma "select_num_arg")
      (("" (lemma "term_pair_eta")
        (("" (inst -1 "select(f, t)(i)")
          (("" (inst? -2)
            (("" (replace -1 -2 :dir rl)
              (("" (hide -1)
                (("" (expand "num_arg" -1)
                  (("" (lemma "num_arg_ge1")
                    (("" (inst? -1)
                      (("" (lemma "num_arg_ge1")
                        (("" (inst -1 "f" "term2(select(f, t)(i))")
                          (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_num_arg formula-decl nil term_properties nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil))
   shostak))
 (select_not_ac 0
  (select_not_ac-1 nil 3832495062
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "is_ac_sym?" -2)
            (("" (prop)
              (("" (expand "select" -2)
                (("" (lift-if)
                  (("" (split -2)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (inst -4 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (expand "is_ac_sym?" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "select" -4)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst -3 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (expand "is_ac_sym?" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "select" -3)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (inst -4 "ac_arg(t)")
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (expand "is_ac_sym?" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "select" -4)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "select" -3)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (select def-decl "term" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (select_le1 0
  (select_le1-1 nil 3806225634
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "select" 1 1)
                  (("1" (assert)
                    (("1" (inst -3 "term1(t)")
                      (("1" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (lemma "num_arg_ge1")
                    (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (expand "select" 1 1)
                  (("3" (assert)
                    (("3" (inst -3 "ac_arg(t)")
                      (("3" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "select" 2 1) (("4" (assert) nil nil))
                  nil)
                 ("5" (expand "select" 2 1) (("5" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (select_ge_num_arg 0
  (select_ge_num_arg-1 nil 3806335778
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (name-replace "n1" "num_arg(f, t)")
            (("" (expand "select" 1 1)
              (("" (lift-if)
                (("" (assert)
                  (("" (prop)
                    (("1" (hide -3 1)
                      (("1" (expand "n1" -3)
                        (("1" (expand "num_arg" -3)
                          (("1" (assert)
                            (("1" (lemma "num_arg_ge1")
                              (("1"
                                (inst -1 "f" "term2(t)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 1)
                      (("2" (expand "select" 1 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (hide -3 -4 1)
                                (("1"
                                  (expand "n1")
                                  (("1"
                                    (expand "num_arg" -1 1)
                                    (("1"
                                      (lemma "num_arg_ge1")
                                      (("1"
                                        (inst -1 "f" "term2(t)")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "term2(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst
                                     -1
                                     "f"
                                     "i - num_arg(f, term1(t))")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "n1" 2)
                                        (("1"
                                          (expand "num_arg" 2 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "n1")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (expand "n1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "select" 1 2)
                      (("3" (assert)
                        (("3" (inst -3 "ac_arg(t)")
                          (("3" (prop)
                            (("1" (inst -1 "f" "i")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "n1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (expand "select" 2) (("4" (assert) nil nil))
                      nil)
                     ("5" (expand "select" 2) (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (select_size 0
  (select_size-1 nil 3806249615
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -3 "term1(t)")
                  (("1" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (inst -2 "term2(t)")
                  (("2" (prop)
                    (("1" (inst? -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (inst -3 "ac_arg(t)")
                  (("3" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil) ("5" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select def-decl "term" term_properties nil)
    (<= const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (ac_select_size 0
  (ac_select_size-1 nil 3806248957
   ("" (skeep)
    (("" (expand "is_ac_sym?" -1)
      (("" (expand "select" 1)
        (("" (assert)
          (("" (lift-if)
            (("" (assert)
              (("" (flatten)
                (("" (assert)
                  (("" (lemma "select_size")
                    (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_ac_sym? const-decl "bool" term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (select_size formula-decl nil term_properties nil)
    (select def-decl "term" term_properties nil))
   SHOSTAK))
 (delete_size 0
  (delete_size-1 nil 3806329054
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst? -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (lemma "size_ge1") (("7" (grind) nil nil)) nil)
                 ("8" (lemma "size_ge1") (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size_ge1 formula-decl nil term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delete def-decl "term" term_properties nil)
    (<= const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (num_arg_delete 0
  (num_arg_delete-1 nil 3806348316
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "num_arg" 2 1)
                  (("4" (expand "num_arg" 2 4)
                    (("4" (assert)
                      (("4" (inst -2 "term2(t)")
                        (("4" (prop)
                          (("1" (inst -1 "f" "n-num_arg(f, term1(t))")
                            (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "num_arg" 2 2)
                  (("6" (lift-if)
                    (("6" (assert)
                      (("6" (expand "num_arg" 2 1)
                        (("6" (inst -3 "ac_arg(t)")
                          (("6" (prop)
                            (("1" (inst -1 "f" "n") nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (lemma "num_arg_ge1") (("7" (grind) nil nil))
                  nil)
                 ("8" (lemma "num_arg_ge1") (("8" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_arg_ge1 formula-decl nil term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (delete def-decl "term" term_properties nil)
    (<= const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (num_arg_delete_ge1 0
  (num_arg_delete_ge1-1 nil 3806350748
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst -1 "f" "n")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst -1 "f" "n - num_arg(f, term1(t))")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst -1 "f" "n") (("1" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (delete def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (num_arg_delete_size 0
  (num_arg_delete_size-1 nil 3806330795
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "size" 1 2) (("1" (assert) nil nil)) nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst? -1)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst? -1)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (hide -2 -3 -4 1 2) (("5" (grind) nil nil)) nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (lemma "num_arg_ge1_type_t")
                  (("7" (inst? -1)
                    (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
                  nil)
                 ("8" (lemma "num_arg_ge1_type_t")
                  (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_arg_ge1_type_t formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (delete def-decl "term" term_properties nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (num_arg1_delete 0
  (num_arg1_delete-1 nil 3806360892
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (hide -2 1)
                    (("1" (expand "num_arg" -2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (inst-cp -1 "f" "term1(t)")
                              (("1"
                                (inst -1 "f" "term2(t)")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (delete def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (delete_num_arg 0
  (delete_num_arg-1 nil 3806361288
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((delete def-decl "term" term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil))
   SHOSTAK))
 (ac_delete_size 0
  (ac_delete_size-1 nil 3806329668
   ("" (skeep)
    (("" (expand "delete" 1)
      (("" (assert)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "size" 1 2)
              (("1" (lemma "size_ge1") (("1" (grind) nil nil)) nil))
              nil)
             ("2" (expand "size" 2 1)
              (("2" (expand "size" 2 2)
                (("2" (lemma "num_arg_delete_size")
                  (("2" (inst -1 "f" "n" "ac_arg(t)")
                    (("2" (assert)
                      (("2" (expand "num_arg" 2 1)
                        (("2" (lemma "num_arg_ge1")
                          (("2" (inst? -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "size_ge1") (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((delete def-decl "term" term_properties nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (size_ge1 formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   SHOSTAK))
 (delete_le1 0
  (delete_le1-1 nil 3806226223
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 2)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "delete" 1 1) (("1" (assert) nil nil))
                  nil)
                 ("2" (expand "delete" 2 1)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (inst -3 "term1(t)")
                        (("2" (prop)
                          (("1" (inst? -1) (("1" (assert) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 2)
                  (("3" (lemma "num_arg_ge1")
                    (("3" (inst? -1) (("3" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (hide-all-but 3)
                  (("4" (lemma "num_arg_ge1") (("4" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (expand "delete" 1)
                  (("5" (lift-if) (("5" (assert) nil nil)) nil)) nil)
                 ("6" (expand "delete" 2 1)
                  (("6" (assert)
                    (("6" (inst -3 "ac_arg(t)")
                      (("6" (prop)
                        (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "delete" 2 1) (("7" (assert) nil nil))
                  nil)
                 ("8" (expand "delete" 2 1) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delete def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (delete_ge_num_arg 0
  (delete_ge_num_arg-1 nil 3806336903
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -4 1)
                  (("1" (lemma "num_arg_ge1")
                    (("1" (expand "num_arg" -5)
                      (("1" (assert)
                        (("1" (inst -1 "f" "term2(t)")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3 1 2)
                  (("2" (expand "num_arg" -3)
                    (("2" (assert)
                      (("2" (lemma "num_arg_ge1")
                        (("2" (inst -1 "f" "term2(t)")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "delete" 1)
                  (("3" (assert)
                    (("3" (lift-if)
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (hide -2 -4 -5 1 2)
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "delete" 2 2)
                  (("4" (assert)
                    (("4" (lift-if)
                      (("4" (split)
                        (("1" (flatten)
                          (("1" (hide -3 -4 1 2 3)
                            (("1" (grind)
                              (("1"
                                (lemma "num_arg_ge1")
                                (("1"
                                  (inst -1 "f" "term2(t)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst -2 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst
                                 -1
                                 "f"
                                 "i - num_arg(f, term1(t))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (expand "num_arg" 2 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "num_arg" -2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "delete" 1)
                  (("5" (lift-if) (("5" (assert) nil nil)) nil)) nil)
                 ("6" (expand "delete" 2 2)
                  (("6" (assert)
                    (("6" (inst -3 "ac_arg(t)")
                      (("6" (prop)
                        (("1" (inst? -1)
                          (("1" (prop)
                            (("1" (expand "num_arg" -4)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "num_arg" 2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "delete" 2) (("7" (assert) nil nil)) nil)
                 ("8" (expand "delete" 2) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (delete def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (delete_ac_num_arg_gt1 0
  (delete_ac_num_arg_gt1-1 nil 3806180090
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (delete def-decl "term" term_properties nil))
   SHOSTAK))
 (is_ac_sym?_delete 0
  (is_ac_sym?_delete-1 nil 3806399463 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "term" term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil))
   SHOSTAK))
 (num_arg_select_delete 0
  (num_arg_select_delete-1 nil 3806355502
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "select" 1)
                  (("1" (assert)
                    (("1" (rewrite "select_num_arg")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst -3 "term1(t)")
                  (("2" (prop)
                    (("1" (inst -1 "f" "i")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst -1 "f" "term1(t)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (rewrite "select_num_arg")
                  (("3" (grind) nil nil)) nil)
                 ("4" (inst -2 "term2(t)")
                  (("4" (prop)
                    (("1" (inst -1 "f" "i - num_arg(f, term1(t))")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst -1 "f" "term2(t)")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("5" (grind) nil nil)
                 ("6" (inst -3 "ac_arg(t)")
                  (("6" (prop)
                    (("1" (inst -1 "f" "i")
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("7" (lemma "num_arg_ge1_type_t")
                  (("7" (inst? -1) (("7" (grind) nil nil)) nil)) nil)
                 ("8" (lemma "num_arg_ge1_type_t")
                  (("8" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_arg_ge1_type_t formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (select_num_arg formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (delete_size2 0
  (delete_size2-1 nil 3807619498
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("t" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "size" 1 2)
            (("2" (expand "delete" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (lemma "size_ge1")
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (expand "size" 2 1)
                    (("2" (assert)
                      (("2" (lemma "num_arg_delete_size")
                        (("2" (inst? -1)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (lemma "num_arg_ge1")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "size" 2 1)
                    (("3" (inst? -1)
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size_ge1 formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (delete_remove1 0
  (delete_remove1-1 nil 3807556284
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (expand "remove" 1) (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "nth" -5) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "remove" 2)
                    (("2" (assert)
                      (("2" (inst -1 "f" "i-1" "j")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (delete_nth_len 0
  (delete_nth_len-1 nil 3807557479
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (expand "length" 2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "length" 2)
                    (("2" (inst -1 "f" "i-1" "j")
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (delete_nth_TCC1 0
  (delete_nth_TCC1-1 nil 3807556276
   ("" (skeep)
    (("" (lemma "delete_nth_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((delete_nth_len formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (delete_nth subtype "term_properties.i"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](delete(args, f, i, j))]")))
 (delete_nth 0
  (delete_nth-1 nil 3807556570
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (hide 1)
                      (("2" (expand "nth" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "nth" 2 1)
                    (("2" (assert)
                      (("2" (expand "nth" 2 2)
                        (("2" (inst -1 "f" "i-1" "j")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "delete_nth_len") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((delete_nth_len formula-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (delete def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil)
    (delete def-decl "args" term_properties nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK))
 (delete_remove_gt1 0
  (delete_remove_gt1-1 nil 3807558505
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (hide 1 -3) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "remove" 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "f" "i-1" "j")
                  (("1" (grind) nil nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (delete_not_null 0
  (delete_not_null-1 nil 3807558733
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "delete" -4)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (remove_size_args 0
  (remove_size_args-1 nil 3839251641
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "size" 1 2)
                  (("1" (lemma "size_ge1")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (expand "size" 2)
                  (("2" (assert)
                    (("2" (inst -1 "i-1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size_ge1 formula-decl nil term_properties nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_size_lst_args 0
  (remove_size_lst_args-1 nil 3839251863
   ("" (measure-induct "length(lst_args)" "lst_args")
    (("" (skolem 1 "lst_args")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "length" -3) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (prop)
                          (("1" (expand "size" 1 2)
                            (("1" (assert)
                              (("1"
                                (lemma "size_args_ge1")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "size" 2 1)
                            (("2" (expand "size" 2 3)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "remove_size_args")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "nth" -4)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "size" 2 1)
                        (("2" (expand "size" 2 3)
                          (("2" (assert)
                            (("2" (inst -1 "cdr(lst_args)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" -2)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "length" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_size_args formula-decl nil term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size_args_ge1 formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "list[list[T]]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (gt_select_delete 0
  (gt_select_delete-1 nil 3806608350
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "delete" 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "select" 1 2)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (reveal -1)
                                            (("1"
                                              (inst -1 "term1(t)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst -1 "f" "i" "n")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "num_arg(f, term1(t)) > 1")
                                        (("1"
                                          (lemma "num_arg_delete_ge1")
                                          (("1"
                                            (inst? -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "num_arg_ge1")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide 2)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "select" 1 2)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "select" 2 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -1)
                                          (("2"
                                            (inst -1 "term2(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "select" 2 2)
                                  (("2"
                                    (reveal -1)
                                    (("2"
                                      (inst -1 "ac_arg(t)")
                                      (("2"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (le_select_delete_TCC1 0
  (le_select_delete_TCC1-1 nil 3806685064
   ("" (skeep)
    (("" (lemma "num_arg_ge1")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((num_arg_ge1 formula-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (le_select_delete subtype
    "(number_fields.-)(term_properties.num_arg(term_properties.f, term_properties.t), 1)"
    "nat")))
 (le_select_delete 0
  (le_select_delete-1 nil 3806685064
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "delete" 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1 2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term1(t)) > 1")
                              (("1"
                                (expand "select" 2 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "num_arg_delete_ge1")
                                        (("1"
                                          (expand "select" 1 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (reveal -1)
                                              (("1"
                                                (inst -1 "term1(t)")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f"
                                                     "i"
                                                     "n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (rewrite "num_arg_delete_ge1")
                                        (("2"
                                          (expand "select" 2 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term2(t)) > 1")
                              (("1"
                                (expand "select" 2 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "select" 2 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -1)
                                            (("2"
                                              (inst -1 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f"
                                                   "i-num_arg(f, term1(t))"
                                                   "n - num_arg(f, term1(t))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "select" 1 1)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (reveal -1)
                                (("1"
                                  (inst -1 "ac_arg(t)")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (lemma "num_arg_ge1")
        (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (string type-eq-decl nil strings nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (gt_select_delete2_TCC1 0
  (gt_select_delete2_TCC1-1 nil 3806608110 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nice_ind? def-decl "bool" term_properties nil))
   nil
   (gt_select_delete2 subtype "(number_fields.-)(term_properties.i, 1)"
    "nat")))
 (gt_select_delete2 0
  (gt_select_delete2-1 nil 3806613899
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "delete" 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "select" 1 2)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "num_arg(f, term1(t)) > 1")
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "select" 1 2)
                                                  (("1"
                                                    (reveal -2)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "term1(t)")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "f"
                                                           "i"
                                                           "n")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "num_arg_ge1")
                                        (("2"
                                          (inst? -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "num_arg(f, term1(t)) > 1")
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "select" 2 2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "num_arg_ge1")
                                        (("2"
                                          (inst? -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "select" 2 2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -1)
                                            (("2"
                                              (inst -1 "term2(t)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "select" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "select" 2 2)
                                  (("2"
                                    (reveal -1)
                                    (("2"
                                      (inst -1 "ac_arg(t)")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 3)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (gt_delete_delete 0
  (gt_delete_delete-1 nil 3806658371
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 "t")
      (("1" (prop)
        (("1" (skeep)
          (("1" (hide -1)
            (("1" (expand "delete" 1 2)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "delete" 1 3)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "num_arg1_delete")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "f"
                                               "i-1"
                                               "term2(t)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f"
                                                     "n"
                                                     "term1(t)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (case
                                             "num_arg(f, term2(t)) > 1")
                                            (("1"
                                              (expand "delete" 2 2)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma "num_arg_ge1")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term1(t)) > 1")
                              (("1"
                                (expand "delete" 2 4)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "delete" 1 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "delete"
                                                       1
                                                       1)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     -7
                                                                     -8)
                                                                    (("1"
                                                                      (lemma
                                                                       "num_arg_delete_ge1")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "num_arg_delete_ge1")
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "num_arg_delete_ge1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "delete"
                                                       2
                                                       3)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   -8
                                                                   -9)
                                                                  (("1"
                                                                    (rewrite
                                                                     "num_arg_delete_ge1")
                                                                    (("1"
                                                                      (rewrite
                                                                       "num_arg_delete_ge1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (reveal
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "term1(t)")
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "f"
                                                                         "i"
                                                                         "n")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (rewrite
                                                                 "num_arg_delete_ge1")
                                                                (("2"
                                                                  (rewrite
                                                                   "num_arg_delete_ge1")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite
                                                     "num_arg_delete_ge1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "delete" 1 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "delete" 2 3)
                                              (("2"
                                                (expand "delete" 2 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "num_arg_delete_ge1"
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "num_arg(f, term2(t)) > 1")
                              (("1"
                                (expand "delete" 2 4)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "delete" 2 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "delete" 1 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("2"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "delete" 2 3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (reveal -1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "term2(t)")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "f"
                                                             "i - num_arg(f, term1(t))"
                                                             "n - num_arg(f, term1(t))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 3)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst? -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (hide 1) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "delete" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "delete" 1 2)
                                        (("1"
                                          (expand "delete" 1 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case
                                                     "num_arg(f, ac_arg(t)) > 1")
                                                    (("1"
                                                      (expand
                                                       "num_arg"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "num_arg"
                                                         1)
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          (("1"
                                                            (rewrite
                                                             "num_arg_delete_ge1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "num_arg"
                                                       3)
                                                      (("2"
                                                        (lemma
                                                         "num_arg_ge1")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "delete" 2 4)
                                        (("2"
                                          (expand "delete" 2 3)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (expand "num_arg")
                                                    (("1"
                                                      (case
                                                       "num_arg(f, ac_arg(t)) > 1")
                                                      (("1"
                                                        (rewrite
                                                         "num_arg_delete_ge1")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "num_arg_ge1")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (reveal -1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "ac_arg(t)")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (inst? -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 3)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (num_arg1_delete formula-decl nil term_properties nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (delete def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_args_len 0
  (get_args_len-1 nil 3805991637
   ("" (skeep)
    (("" (expand "get_args" 1 1)
      (("" (rewrite "map_length[nat, term]")
        (("" (rewrite "from_min2max_len1") nil nil)) nil))
      nil))
    nil)
   ((from_min2max_len1 formula-decl nil list_theory nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (list type-decl nil list_adt nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (map_length formula-decl nil more_map_props nil))
   SHOSTAK))
 (get_args_null 0
  (get_args_null-1 nil 3807116901
   ("" (skeep)
    (("" (lemma "get_args_len")
      (("" (inst? -1)
        (("" (lemma "num_arg_ge1")
          (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((get_args_len formula-decl nil term_properties nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   SHOSTAK))
 (get_args_size 0
  (get_args_size-1 nil 3823957246
   ("" (skeep)
    (("" (expand "get_args" -2)
      (("" (lemma "map_member3[nat, term]")
        (("" (inst? -1)
          (("" (assert)
            (("" (assert)
              (("" (skeep)
                (("" (replace -1 1)
                  (("" (lemma "ac_select_size")
                    (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (list type-decl nil list_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (ac_select_size formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_member3 formula-decl nil map_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (get_args_ac 0
  (get_args_ac-2 nil 3830438054
   ("" (skeep)
    (("" (expand "get_args")
      (("" (lemma "equal_lst_nth[term]")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (prop)
                (("1" (lemma "map_length[nat, term]")
                  (("1" (inst? -1)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "map_length[nat, term]")
                          (("1" (inst? -1)
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "num_arg" 1 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (lemma "map_nth_rw[nat, term]")
                    (("2" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_nth_rw[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "num_arg" 1 1)
                                    (("1"
                                      (expand "select" 1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "n")
                                  (("2"
                                    (lemma "map_length[nat, term]")
                                    (("2"
                                      (inst? -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "n")
                          (("2" (lemma "map_length[nat, term]")
                            (("2" (inst? -1)
                              (("2"
                                (replace -1 -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (equal_lst_nth formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   nil)
  (get_args_ac-1 nil 3805746325
   ("" (skeep)
    (("" (expand "get_args")
      (("" (lemma "equal_lst_nth")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (prop)
                (("1" (lemma "map_length[nat, term]")
                  (("1" (inst? -1)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "map_length[nat, term]")
                          (("1" (inst? -1)
                            (("1" (replace -1 1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "num_arg" 1 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (lemma "map_nth_rw[nat, term]")
                    (("2" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_nth_rw[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "num_arg" 1 1)
                                    (("1"
                                      (expand "select" 1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "n")
                                  (("2"
                                    (lemma "map_length[nat, term]")
                                    (("2"
                                      (inst? -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "n")
                          (("2" (lemma "map_length[nat, term]")
                            (("2" (inst? -1)
                              (("2"
                                (replace -1 -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (term type-decl nil term_adt nil)
    (equal_lst_nth formula-decl nil list_theory nil))
   SHOSTAK))
 (get_args_pair 0
  (get_args_pair-5 nil 3830438507
   ("" (skeep)
    (("" (lemma "equal_lst_nth[term]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (rewrite "length_append")
                (("1" (rewrite "get_args_len")
                  (("1" (rewrite "get_args_len")
                    (("1" (rewrite "get_args_len")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (lemma "nth_append_uni[term]")
                  (("2" (inst? -1)
                    (("2" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (replace -2)
                            (("1" (expand "get_args" 1)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma
                                         "nth_from_min2max2[nat]")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "map_nth_rw[nat, term]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1 -4)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "nth_from_min2max2[nat]")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "from_min2max_len1[nat]")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "from_min2max_len1[nat]")
                                                    (("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1[nat]")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                (("2"
                                                  (hide -2 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite
                                       "from_min2max_len1[nat]")
                                      (("2"
                                        (rewrite "get_args_len")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (hide -1)
                              (("2"
                                (expand "get_args" 2)
                                (("2"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat, term]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (rewrite
                                                   "map_length")
                                                  (("1"
                                                    (rewrite
                                                     "from_min2max_len1[nat]")
                                                    (("1"
                                                      (lemma
                                                       "nth_from_min2max2[nat]")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (typepred
                                                           "n")
                                                          (("1"
                                                            (rewrite
                                                             "get_args_len")
                                                            (("1"
                                                              (rewrite
                                                               "from_min2max_len1[nat]")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_from_min2max2[nat]")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "num_arg"
                                                                           -2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "from_min2max_len1[nat]")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "select"
                                                                                     2
                                                                                     1)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "get_args_len")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (typepred "n")
                                                (("2"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "map_length")
                                                      (("1"
                                                        (rewrite
                                                         "from_min2max_len1[nat]")
                                                        (("1"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (rewrite
                                                         "map_length")
                                                        (("2"
                                                          (rewrite
                                                           "from_min2max_len1[nat]")
                                                          (("2"
                                                            (rewrite
                                                             "from_min2max_len1[nat]")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite
                                           "from_min2max_len1[nat]")
                                          (("2"
                                            (rewrite "get_args_len")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "n")
                        (("2" (rewrite "get_args_len")
                          (("2" (hide 2)
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (rewrite "get_args_len")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (equal_lst_nth formula-decl nil list_theory nil)
    (get_args_len formula-decl nil term_properties nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (below type-eq-decl nil naturalnumbers nil)
    (select def-decl "term" term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (map_length formula-decl nil more_map_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil))
   nil)
  (get_args_pair-4 nil 3830438452
   ("" (skeep)
    (("" (lemma "equal_lst_nth[term]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (rewrite "length_append")
                (("1" (expand "get_args")
                  (("1" (lemma "map_length[nat, term]")
                    (("1" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_length[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "map_length[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "num_arg" 1 1)
                                            (("1"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("1"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("1"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  nil)))))))))))))))))))))))))))))))))))
               ("2" (skeep)
                (("2" (lemma "nth_append_uni[term]")
                  (("2" (inst -1 "n" "get_args(f)(t)" "get_args(f)(s)")
                    (("2" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (replace -2 1 nil t)
                            (("1" (expand "get_args" 1 1)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "get_args" 1 1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat, term]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1 1 nil t)
                                              (("1"
                                                (lemma
                                                 "nth_from_min2max2[term]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "nth_from_min2max2")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "from_min2max_len1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         "from_min2max_len1")
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil)))))))))))))
                                   ("2"
                                    (rewrite "get_args_len")
                                    (("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (grind) nil)))))))))))))
                           ("2" (replace -1 2)
                            (("2" (hide -1)
                              (("2"
                                (expand "get_args" 2 1)
                                (("2"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "nth_from_min2max2")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "select" 2 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (hide -2 1)
                                                          (("1"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (hide -1 1 3)
                                                        (("2"
                                                          (expand
                                                           "get_args"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "map_nth_rw[nat, term]")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_from_min2max2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        (("2"
                                                                          (rewrite
                                                                           "from_min2max_len1")
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (rewrite
                                                                               "get_args_len")
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (reveal
                                                                         3)
                                                                        (("3"
                                                                          (assert)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (rewrite
                                                                       "from_min2max_len1")
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))))))))))))))))))))
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (rewrite
                                                       "from_min2max_len1")
                                                      nil)))))))))))))))))
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite "get_args_len")
                                          nil)))))))))))))))))))
                       ("2" (typepred "n")
                        (("2" (rewrite "get_args_len")
                          (("2" (expand "num_arg" -1)
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (get_args_pair-3 nil 3830438284
   ("" (skeep)
    (("" (lemma "equal_lst_nth[term]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (rewrite "length_append")
                (("1" (expand "get_args")
                  (("1" (lemma "map_length[nat, term]")
                    (("1" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_length[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "map_length[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "num_arg" 1 1)
                                            (("1"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("1"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("1"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  nil)))))))))))))))))))))))))))))))))))
               ("2" (skeep)
                (("2" (lemma "nth_append_uni[term]")
                  (("2" (inst -1 "n" "get_args(f)(t)" "get_args(f)(s)")
                    (("2" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (replace -2 1 nil t)
                            (("1" (expand "get_args" 1 1)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "get_args" 1 1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat, term]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1 1 nil t)
                                              (("1"
                                                (lemma
                                                 "nth_from_min2max2")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "nth_from_min2max2")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "from_min2max_len1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         "from_min2max_len1")
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil)))))))))))))
                                   ("2"
                                    (rewrite "get_args_len")
                                    (("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (grind) nil)))))))))))))
                           ("2" (replace -1 2)
                            (("2" (hide -1)
                              (("2"
                                (expand "get_args" 2 1)
                                (("2"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "nth_from_min2max2")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "select" 2 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (hide -2 1)
                                                          (("1"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (hide -1 1 3)
                                                        (("2"
                                                          (expand
                                                           "get_args"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "map_nth_rw[nat, term]")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_from_min2max2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        (("2"
                                                                          (rewrite
                                                                           "from_min2max_len1")
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (rewrite
                                                                               "get_args_len")
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (reveal
                                                                         3)
                                                                        (("3"
                                                                          (assert)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (rewrite
                                                                       "from_min2max_len1")
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))))))))))))))))))))
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (rewrite
                                                       "from_min2max_len1")
                                                      nil)))))))))))))))))
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite "get_args_len")
                                          nil)))))))))))))))))))
                       ("2" (typepred "n")
                        (("2" (rewrite "get_args_len")
                          (("2" (expand "num_arg" -1)
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (get_args_pair-2 nil 3830438182
   ("" (skeep)
    (("" (lemma "equal_lst_nth[term]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (rewrite "length_append")
                (("1" (expand "get_args")
                  (("1" (lemma "map_length[nat, term]")
                    (("1" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_length[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "map_length[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "num_arg" 1 1)
                                            (("1"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("1"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("1"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  nil)))))))))))))))))))))))))))))))))))
               ("2" (skeep)
                (("2" (lemma "nth_append_uni")
                  (("2" (inst -1 "n" "get_args(f)(t)" "get_args(f)(s)")
                    (("2" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (replace -2 1 nil t)
                            (("1" (expand "get_args" 1 1)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "get_args" 1 1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat, term]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1 1 nil t)
                                              (("1"
                                                (lemma
                                                 "nth_from_min2max2")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "nth_from_min2max2")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("1"
                                                                              (grind)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (lemma
                                                                   "from_min2max_len1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        nil)))))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         "from_min2max_len1")
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil)))))))))))))))
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil)))))))))))))
                                   ("2"
                                    (rewrite "get_args_len")
                                    (("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (grind) nil)))))))))))))
                           ("2" (replace -1 2)
                            (("2" (hide -1)
                              (("2"
                                (expand "get_args" 2 1)
                                (("2"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "nth_from_min2max2")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "select" 2 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (hide -2 1)
                                                          (("1"
                                                            (assert)
                                                            nil)))))
                                                       ("2"
                                                        (hide -1 1 3)
                                                        (("2"
                                                          (expand
                                                           "get_args"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "map_nth_rw[nat, term]")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_from_min2max2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        (("2"
                                                                          (rewrite
                                                                           "from_min2max_len1")
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (rewrite
                                                                               "get_args_len")
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (reveal
                                                                         3)
                                                                        (("3"
                                                                          (assert)
                                                                          nil)))))))))))
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (rewrite
                                                                       "from_min2max_len1")
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (grind)
                                                                            nil)))))))))))))))))))))))))))))
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (rewrite
                                                       "from_min2max_len1")
                                                      nil)))))))))))))))))
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite "get_args_len")
                                          nil)))))))))))))))))))
                       ("2" (typepred "n")
                        (("2" (rewrite "get_args_len")
                          (("2" (expand "num_arg" -1)
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (get_args_pair-1 nil 3805751923
   ("" (skeep)
    (("" (lemma "equal_lst_nth")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (rewrite "length_append")
                (("1" (expand "get_args")
                  (("1" (lemma "map_length[nat, term]")
                    (("1" (inst? -1)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "map_length[nat, term]")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "map_length[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "num_arg" 1 1)
                                            (("1"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("1"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("1"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (lemma "nth_append_uni")
                  (("2" (inst -1 "n" "get_args(f)(t)" "get_args(f)(s)")
                    (("2" (prop)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (replace -2 1 nil t)
                            (("1" (expand "get_args" 1 1)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "get_args" 1 1)
                                        (("1"
                                          (lemma
                                           "map_nth_rw[nat, term]")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (replace -1 1 nil t)
                                              (("1"
                                                (lemma
                                                 "nth_from_min2max2")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (lemma
                                                             "nth_from_min2max2")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "select"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "get_args_len")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "from_min2max_len1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "from_min2max_len1")
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "get_args_len")
                                    (("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1 2)
                            (("2" (hide -1)
                              (("2"
                                (expand "get_args" 2 1)
                                (("2"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("2"
                                    (inst? -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "nth_from_min2max2")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (expand "select" 2 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (hide -2 1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 1 3)
                                                        (("2"
                                                          (expand
                                                           "get_args"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "map_nth_rw[nat, term]")
                                                            (("2"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "nth_from_min2max2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "get_args_len")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "get_args_len")
                                                                        (("2"
                                                                          (rewrite
                                                                           "from_min2max_len1")
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (rewrite
                                                                               "get_args_len")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (reveal
                                                                         3)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     3)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (rewrite
                                                                       "from_min2max_len1")
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (rewrite
                                                                           "get_args_len")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "n")
                                                (("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (rewrite
                                                       "from_min2max_len1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite "get_args_len")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "n")
                        (("2" (rewrite "get_args_len")
                          (("2" (expand "num_arg" -1)
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (rewrite "get_args_len")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil))
   SHOSTAK))
 (get_args_mem_not_pair 0
  (get_args_mem_not_pair-1 nil 3832102345
   ("" (skeep)
    (("" (expand "get_args" -1)
      (("" (lemma "map_member4")
        (("" (inst? -1)
          (("" (assert)
            (("" (skolem -1 "n")
              (("" (prop)
                (("" (lemma "select_not_pair")
                  (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (list type-decl nil list_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select_not_pair formula-decl nil term_properties nil)
    (map_member4 formula-decl nil map_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (get_args_mem_not_ac 0
  (get_args_mem_not_ac-1 nil 3832495041
   ("" (skeep)
    (("" (expand "get_args" -1)
      (("" (rewrite "map_member4")
        (("" (skolem -1 "i")
          (("" (prop)
            (("" (lemma "select_not_ac")
              (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_not_ac formula-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (list type-decl nil list_adt nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (map_member4 formula-decl nil map_theory nil))
   shostak))
 (get_args_no_pair_ac 0
  (get_args_no_pair_ac-1 nil 3849013871
   ("" (skeep)
    (("" (expand "no_pair_ac?" 1)
      (("" (skeep)
        (("" (use "get_args_mem_not_pair")
          (("" (assert)
            (("" (use "get_args_mem_not_ac") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_pair_ac? const-decl "bool" term_properties nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_args_mem_not_ac formula-decl nil term_properties nil))
   shostak))
 (get_args_mem_select1 0
  (get_args_mem_select1-1 nil 3846520690
   ("" (skeep)
    (("" (expand "get_args" 1)
      (("" (expand "from_min2max" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (lemma "num_arg_ge1")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil))
   shostak))
 (get_args_mem_selecti 0
  (get_args_mem_selecti-1 nil 3855321422
   ("" (skeep)
    (("" (expand "get_args" 1)
      (("" (rewrite "map_member4")
        (("" (case "i = 0")
          (("1" (inst 1 "1")
            (("1" (lemma "select_le1")
              (("1" (inst -1 "f" "i" "t")
                (("1" (assert)
                  (("1" (lemma "from_min2max_mem[nat]")
                    (("1" (inst -1 "1" "num_arg(f, t)" "1")
                      (("1" (lemma "num_arg_ge1")
                        (("1" (inst -1 "f " "t")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "select_ge_num_arg")
            (("2" (inst -1 "f" "i" "t")
              (("2" (assert)
                (("2" (case "i >= num_arg(f, t)")
                  (("1" (assert)
                    (("1" (inst 2 "num_arg(f, t)")
                      (("1" (assert)
                        (("1" (lemma "from_min2max_mem[nat]")
                          (("1"
                            (inst -1 "1" "num_arg(f, t)"
                             "num_arg(f, t)")
                            (("1" (lemma "num_arg_ge1")
                              (("1"
                                (inst -1 "f" "t")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (inst 3 "i")
                      (("2" (lemma "from_min2max_mem[nat]")
                        (("2" (inst -1 "1 " "num_arg(f, t)" "i")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (select_le1 formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (from_min2max_mem formula-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select_ge_num_arg formula-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (list type-decl nil list_adt nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (map_member4 formula-decl nil map_theory nil))
   shostak))
 (get_args_not_pair_ac 0
  (get_args_not_pair_ac-1 nil 3807113704
   ("" (skeep)
    (("" (expand "get_args")
      (("" (lemma "num_arg_not_pair_ac")
        (("" (inst? -1)
          (("" (assert)
            (("" (replace -1 3)
              (("" (expand "from_min2max" 3)
                (("" (expand "map" 3)
                  (("" (expand "map" 3) (("" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (number nonempty-type-decl nil numbers nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (num_arg_not_pair_ac formula-decl nil term_properties nil))
   SHOSTAK))
 (get_args_not_pair_ac2 0
  (get_args_not_pair_ac2-1 nil 3849357527
   ("" (induct "args" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1)
            (("2" (expand "flatten" 1)
              (("2" (inst -1 "f")
                (("2" (prop)
                  (("1" (replace -1)
                    (("1" (lemma "get_args_not_pair_ac")
                      (("1" (inst -1 "f" "hd")
                        (("1" (expand "no_pair_ac?" -3)
                          (("1" (inst -3 "hd")
                            (("1" (assert)
                              (("1"
                                (expand "member" -3 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "append" 3)
                                        (("1"
                                          (expand "append" 3)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "no_pair_ac?")
                      (("2" (skeep)
                        (("2" (inst -2 "t") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_not_pair_ac formula-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (member def-decl "bool" list_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (flatten def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_pair_ac? const-decl "bool" term_properties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (get_args_nth_TCC1 0
  (get_args_nth_TCC1-1 nil 3807116901
   ("" (skeep)
    (("" (expand "nice_ind?" -1)
      (("" (prop)
        (("1" (assert) nil nil)
         ("2" (rewrite "get_args_len") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nice_ind? const-decl "bool" term_properties nil)
    (get_args_len formula-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (number nonempty-type-decl nil numbers nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_args_nth subtype "(number_fields.-)(term_properties.i, 1)"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](get_args(f)(t))]")))
 (get_args_nth 0
  (get_args_nth-1 nil 3807117043
   ("" (skeep)
    (("" (expand "get_args" 1)
      (("" (lemma "map_nth_rw[nat, term]")
        (("" (inst? -1)
          (("1" (replace -1 1)
            (("1" (hide -1)
              (("1" (rewrite "nth_from_min2max2")
                (("1" (rewrite "from_min2max_len1")
                  (("1" (expand "nice_ind?" -1)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "nice_ind?" -1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "from_min2max_len1")
            (("2" (expand "nice_ind?" -1)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (string type-eq-decl nil strings nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (select def-decl "term" term_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil))
   SHOSTAK))
 (get_args_remove_TCC1 0
  (get_args_remove_TCC1-1 nil 3807116901 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil))
   nil
   (get_args_remove subtype "(number_fields.-)(term_properties.i, 1)"
    "nat")))
 (get_args_remove 0
  (get_args_remove-3 nil 3830445552
   ("" (skeep)
    (("" (lemma "equal_lst_nth[term]")
      (("" (inst? -1)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (prop)
              (("1" (rewrite "remove_len[term]")
                (("1" (rewrite "get_args_len")
                  (("1" (rewrite "get_args_len")
                    (("1" (rewrite "num_arg_delete_ge1") nil nil))
                    nil))
                  nil)
                 ("2" (rewrite "get_args_len")
                  (("2" (expand "nice_ind?" -1)
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (expand "nice_ind?" -1) (("3" (propax) nil nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (case "i > n+1")
                  (("1" (rewrite "gt_nth_remove[term]")
                    (("1" (expand "get_args" 1)
                      (("1" (lemma "map_nth_rw[nat, term]")
                        (("1" (typepred "n")
                          (("1" (rewrite "remove_len")
                            (("1" (rewrite "get_args_len")
                              (("1"
                                (inst? -2)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (lemma "map_nth_rw[nat, term]")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max[nat]")
                                              (("1"
                                                (rewrite
                                                 "nth_from_min2max[nat]")
                                                (("1"
                                                  (rewrite
                                                   "gt_select_delete")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "from_min2max_len1[nat]")
                                                  (("2"
                                                    (rewrite
                                                     "num_arg_delete_ge1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "from_min2max_len1[nat]")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "from_min2max_len")
                                          (("2"
                                            (rewrite
                                             "num_arg_delete_ge1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "from_min2max_len1[nat]")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "nice_ind?" -4)
                              (("2"
                                (rewrite "get_args_len")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nice_ind?" -2)
                      (("2" (rewrite "get_args_len")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "gt_nth_remove2")
                    (("1" (expand "get_args" 2 1)
                      (("1" (lemma "map_nth_rw[nat, term]")
                        (("1" (inst? -1)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (expand "get_args" 2)
                                (("1"
                                  (lemma "map_nth_rw[nat, term]")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite
                                           "nth_from_min2max[nat]")
                                          (("1"
                                            (rewrite
                                             "nth_from_min2max[nat]")
                                            (("1"
                                              (lemma
                                               "le_select_delete")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (typepred "n")
                                                      (("1"
                                                        (rewrite
                                                         "remove_len")
                                                        (("1"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "nice_ind?"
                                                           -2)
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len")
                                              (("2"
                                                (rewrite
                                                 "num_arg_delete_ge1")
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (rewrite
                                                     "remove_len")
                                                    (("1"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1 4)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "from_min2max_len")
                                            (("2"
                                              (typepred "n")
                                              (("2"
                                                (rewrite "remove_len")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 4)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 4)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "from_min2max_len")
                                      (("2"
                                        (typepred "n")
                                        (("2"
                                          (rewrite
                                           "num_arg_delete_ge1")
                                          (("2"
                                            (rewrite "remove_len")
                                            (("1"
                                              (rewrite "get_args_len")
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (rewrite "get_args_len")
                                              (("2"
                                                (hide -1 4)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide -1 4)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "from_min2max_len")
                            (("2" (typepred "n")
                              (("2"
                                (rewrite "remove_len")
                                (("1"
                                  (rewrite "get_args_len")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (hide -1 4)
                                  (("2"
                                    (rewrite "get_args_len")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -1 4)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "get_args_len")
                      (("2" (typepred "n")
                        (("2" (rewrite "remove_len")
                          (("1" (rewrite "get_args_len")
                            (("1" (grind) nil nil)) nil)
                           ("2" (hide -1 4)
                            (("2" (rewrite "get_args_len")
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (hide -1 4) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "nice_ind?" -1) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (equal_lst_nth formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (get_args_len formula-decl nil term_properties nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_len formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nth_from_min2max formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (gt_select_delete formula-decl nil term_properties nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (select def-decl "term" term_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (le_select_delete formula-decl nil term_properties nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (gt_nth_remove2 formula-decl nil list_theory nil)
    (delete def-decl "term" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (get_args_remove-2 nil 3830442068
   ("" (skeep)
    (("" (lemma "equal_lst_nth[term]")
      (("" (inst? -1)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (prop)
              (("1" (lemma "remove_len")
                (("1" (inst? -1)
                  (("1" (prop)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "get_args_len")
                          (("1" (inst? -1)
                            (("1" (replace -1 1 nil t)
                              (("1"
                                (lemma "get_args_len")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))))))))))
                     ("2" (rewrite "get_args_len")
                      (("2" (expand "nice_ind?")
                        (("2" (assert) nil)))))))
                   ("2" (expand "nice_ind?") (("2" (assert) nil)))))))
               ("2" (skeep)
                (("2" (case "i > n+1")
                  (("1" (lemma "gt_nth_remove[term]")
                    (("1" (inst -1 "i-1" "get_args(f)(t)" "n")
                      (("1" (prop)
                        (("1" (replace -1 1 nil t)
                          (("1" (expand "get_args")
                            (("1" (lemma "map_nth_rw[nat, term]")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replace -1 1 nil t)
                                  (("1"
                                    (lemma "map_nth_rw[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite
                                             "nth_from_min2max2[term]")
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max2[term]")
                                              (("1"
                                                (lemma
                                                 "gt_select_delete")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nice_ind?"
                                                       1)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (grind)
                                                          nil)))))))))))
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite
                                                   "from_min2max_len1[term]")
                                                  (("2"
                                                    (rewrite
                                                     "num_arg_delete_ge1")
                                                    (("2"
                                                      (grind)
                                                      nil)))))))))
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1[term]")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (grind)
                                                  nil)))))))))))
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite
                                           "from_min2max_len1[term]")
                                          (("2"
                                            (rewrite
                                             "num_arg_delete_ge1")
                                            (("2"
                                              (grind)
                                              nil)))))))))))))
                                 ("2"
                                  (rewrite "from_min2max_len1[term]")
                                  (("2"
                                    (hide 2)
                                    (("2" (grind) nil)))))))))))))
                         ("2" (rewrite "get_args_len")
                          (("2" (hide 2) (("2" (grind) nil)))))
                         ("3" (assert) nil)))
                       ("2" (hide 2) (("2" (grind) nil)))))))
                   ("2" (lemma "gt_nth_remove2[term]")
                    (("2" (inst -1 "n+1" "get_args(f)(t)" "i-1")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (replace -1 2 nil t)
                            (("1" (expand "get_args" 2)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 2 nil t)
                                    (("1"
                                      (lemma "map_nth_rw[nat, term]")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max2[term]")
                                              (("1"
                                                (rewrite
                                                 "nth_from_min2max2[term]")
                                                (("1"
                                                  (lemma
                                                   "le_select_delete")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (typepred
                                                           "n")
                                                          (("1"
                                                            (rewrite
                                                             "remove_len")
                                                            (("1"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("1"
                                                                (grind)
                                                                nil)))
                                                             ("2"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil)))))
                                                             ("3"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("3"
                                                                (grind)
                                                                nil)))))))))))))))
                                                 ("2"
                                                  (rewrite
                                                   "from_min2max_len1[term]")
                                                  (("2"
                                                    (typepred "n")
                                                    (("2"
                                                      (rewrite
                                                       "remove_len[term]")
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil)))
                                                       ("2"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("2"
                                                          (hide 2 4)
                                                          (("2"
                                                            (grind)
                                                            nil)))))
                                                       ("3"
                                                        (hide -1 4)
                                                        (("3"
                                                          (grind)
                                                          nil)))))))))))
                                               ("2"
                                                (rewrite
                                                 "from_min2max_len1[term]")
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (hide 3)
                                                    (("2"
                                                      (rewrite
                                                       "remove_len[term]")
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil)))))
                                                       ("3"
                                                        (hide -1)
                                                        (("3"
                                                          (grind)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (rewrite
                                           "from_min2max_len1[term]")
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (rewrite
                                               "num_arg_delete_ge1")
                                              (("2"
                                                (rewrite
                                                 "remove_len[term]")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  nil)
                                                 ("2"
                                                  (hide -1 4)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (grind)
                                                      nil)))))
                                                 ("3"
                                                  (hide -1 4)
                                                  (("3"
                                                    (grind)
                                                    nil)))))))))))))))))
                                   ("2"
                                    (rewrite "from_min2max_len1[term]")
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (rewrite "remove_len[term]")
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1" (assert) nil)))
                                         ("2"
                                          (rewrite "get_args_len")
                                          (("2"
                                            (hide 4)
                                            (("2" (grind) nil)))))
                                         ("3"
                                          (hide -1 4)
                                          (("3"
                                            (grind)
                                            nil)))))))))))))))))
                           ("2" (typepred "n")
                            (("2" (rewrite "remove_len[term]")
                              (("1"
                                (rewrite "get_args_len")
                                (("1" (assert) nil)))
                               ("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (hide -1 4)
                                  (("2" (grind) nil)))))
                               ("3"
                                (hide -1 4)
                                (("3" (grind) nil)))))))))))
                       ("2" (hide 3) (("2" (grind) nil)))))))))))))))))
         ("2" (hide 2) (("2" (grind) nil))))))))
    nil)
   nil nil)
  (get_args_remove-1 nil 3807117973
   ("" (skeep)
    (("" (lemma "equal_lst_nth")
      (("" (inst? -1)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (prop)
              (("1" (lemma "remove_len")
                (("1" (inst? -1)
                  (("1" (prop)
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (lemma "get_args_len")
                          (("1" (inst? -1)
                            (("1" (replace -1 1 nil t)
                              (("1"
                                (lemma "get_args_len")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "num_arg_delete_ge1")
                                        (("1"
                                          (inst? -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "get_args_len")
                      (("2" (expand "nice_ind?")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "nice_ind?") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (case "i > n+1")
                  (("1" (lemma "gt_nth_remove")
                    (("1" (inst -1 "i-1" "get_args(f)(t)" "n")
                      (("1" (prop)
                        (("1" (replace -1 1 nil t)
                          (("1" (expand "get_args")
                            (("1" (lemma "map_nth_rw[nat, term]")
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replace -1 1 nil t)
                                  (("1"
                                    (lemma "map_nth_rw[nat, term]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite
                                             "nth_from_min2max2")
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max2")
                                              (("1"
                                                (lemma
                                                 "gt_select_delete")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "nice_ind?"
                                                       1)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  (("2"
                                                    (rewrite
                                                     "num_arg_delete_ge1")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "from_min2max_len1")
                                          (("2"
                                            (rewrite
                                             "num_arg_delete_ge1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "from_min2max_len1")
                                  (("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "get_args_len")
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "gt_nth_remove2")
                    (("2" (inst -1 "n+1" "get_args(f)(t)" "i-1")
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (replace -1 2 nil t)
                            (("1" (expand "get_args" 2)
                              (("1"
                                (lemma "map_nth_rw[nat, term]")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (replace -1 2 nil t)
                                    (("1"
                                      (lemma "map_nth_rw[nat, term]")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite
                                               "nth_from_min2max2")
                                              (("1"
                                                (rewrite
                                                 "nth_from_min2max2")
                                                (("1"
                                                  (lemma
                                                   "le_select_delete")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (typepred
                                                           "n")
                                                          (("1"
                                                            (rewrite
                                                             "remove_len")
                                                            (("1"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "get_args_len")
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "from_min2max_len1")
                                                  (("2"
                                                    (typepred "n")
                                                    (("2"
                                                      (rewrite
                                                       "remove_len")
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (rewrite
                                                           "num_arg_delete_ge1")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("2"
                                                          (hide 2 4)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1 4)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "from_min2max_len1")
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (hide 3)
                                                    (("2"
                                                      (rewrite
                                                       "remove_len")
                                                      (("1"
                                                        (rewrite
                                                         "get_args_len")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "from_min2max_len1")
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (rewrite
                                               "num_arg_delete_ge1")
                                              (("2"
                                                (rewrite "remove_len")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (hide -1 4)
                                                  (("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 4)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "from_min2max_len1")
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (rewrite "remove_len")
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite "get_args_len")
                                          (("2"
                                            (hide 4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 4)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "n")
                            (("2" (rewrite "remove_len")
                              (("1"
                                (rewrite "get_args_len")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (hide -1 4)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 4)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 3) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (remove_len formula-decl nil list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (gt_nth_remove2 formula-decl nil list_theory nil))
   SHOSTAK))
 (get_args_get_term_from_args 0
  (get_args_get_term_from_args-1 nil 3807217309
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "get_term_from_args" 2)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "map" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "length" -1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "map" 3 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "flatten" 3)
                                              (("1"
                                                (expand "flatten" 3)
                                                (("1"
                                                  (rewrite
                                                   "append_null")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1 2 3 4 5 6)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "get_args_pair")
                    (("2" (expand "map" 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("2" (expand "flatten" 2)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "cdr(args1)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_pair formula-decl nil term_properties nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (flatten def-decl "list[T]" list_theory nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_args_get_term_from_args_len 0
  (get_args_get_term_from_args_len-1 nil 3846872975
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_term_from_args" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (replace -1)
                  (("1" (rewrite "get_args_len")
                    (("1" (lemma "num_arg_ge1")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "get_args_pair" 2)
                  (("2" (rewrite "length_append")
                    (("2" (expand "length" 2 3)
                      (("2" (inst -1 "f")
                        (("2" (assert)
                          (("2" (rewrite "get_args_len")
                            (("2" (rewrite "get_args_len")
                              (("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst -1 "f" "hd")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_pair formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_len formula-decl nil term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (length def-decl "nat" list_props nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (get_args_get_ac_from_args 0
  (get_args_get_ac_from_args-1 nil 3815326240
   ("" (skeep)
    (("" (expand "get_ac_from_args" 2)
      (("" (rewrite "get_args_ac")
        (("" (lemma "get_args_get_term_from_args")
          (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((get_ac_from_args const-decl "term" term_properties nil)
    (get_args_get_term_from_args formula-decl nil term_properties nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_args_ac formula-decl nil term_properties nil))
   shostak))
 (get_args_get_ac_from_args_all_var 0
  (get_args_get_ac_from_args_all_var-1 nil 3809111401
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_ac_from_args" 1)
            (("2" (rewrite "get_args_ac")
              (("2" (expand "get_term_from_args")
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "all_var?" -3)
                      (("1" (flatten)
                        (("1" (hide -4)
                          (("1" (hide -2)
                            (("1" (expand "get_args" 1)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "get_args_pair")
                      (("2" (inst? -1)
                        (("2" (expand "all_var?" -2)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "get_ac_from_args" -1)
                                    (("1"
                                      (rewrite "get_args_ac")
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (hide -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_args_ac formula-decl nil term_properties nil)
    (get_args_pair formula-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_args_get_ac_from_args2 0
  (get_args_get_ac_from_args2-1 nil 3838991655
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args_")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_ac_from_args" 2)
            (("" (expand "get_term_from_args" 2)
              (("" (lift-if)
                (("" (split 2)
                  (("1" (flatten) nil nil)
                   ("2" (flatten)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (rewrite "get_args_ac" 1)
                          (("1" (lemma "get_args_not_pair_ac")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "length" -2)
                                      (("1"
                                        (expand "length" -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide -2 -3 -4)
                                                (("1"
                                                  (case
                                                   "args_ = cons(car(args_), cdr(args_))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "no_pair_ac?" -4)
                                    (("2"
                                      (inst -4 "car(args_)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "member" 4)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "no_pair_ac?" -4)
                                    (("3"
                                      (inst -4 "car(args_)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "member" 4)
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (rewrite "get_args_ac" 2)
                          (("2" (rewrite "get_args_pair")
                            (("2" (inst -1 "cdr(args_)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "f")
                                  (("1"
                                    (prop)
                                    (("1"
                                      (expand "get_ac_from_args" -1)
                                      (("1"
                                        (rewrite "get_args_ac")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma
                                             "get_args_not_pair_ac")
                                            (("1"
                                              (inst
                                               -1
                                               "f"
                                               "car(args_)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand "append" 2)
                                                    (("1"
                                                      (expand
                                                       "append"
                                                       2)
                                                      (("1"
                                                        (decompose-equality
                                                         2)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "no_pair_ac?")
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "car(args_)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "member"
                                                         5)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "no_pair_ac?")
                                                  (("3"
                                                    (inst
                                                     -3
                                                     "car(args_)")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (expand "no_pair_ac?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst -2 "t")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand "member" -2 1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_term_from_args def-decl "term" term_properties nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_args_ac formula-decl nil term_properties nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member def-decl "bool" list_props nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (get_args_pair formula-decl nil term_properties nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_pair_ac? const-decl "bool" term_properties nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_get_args_del 0
  (remove_get_args_del-2 nil 3830454881
   ("" (skeep)
    (("" (rewrite "equal_lst_nth[term]")
      (("1" (rewrite "get_args_len")
        (("1" (rewrite "remove_len")
          (("1" (rewrite "num_arg_delete_ge1")
            (("1" (rewrite "get_args_len") nil nil)) nil)
           ("2" (rewrite "get_args_len") nil nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (case "j > n")
          (("1" (rewrite "gt_nth_remove[term]")
            (("1" (hide 2)
              (("1" (expand "get_args" 1)
                (("1" (lemma "map_nth_rw[nat, term]")
                  (("1" (inst? -1)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (lemma "map_nth_rw[nat, term]")
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (rewrite "nth_from_min2max[nat]")
                                  (("1"
                                    (rewrite "nth_from_min2max[nat]")
                                    (("1"
                                      (lemma "gt_select_delete")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (rewrite "from_min2max_len")
                                        (("2"
                                          (typepred "n")
                                          (("2"
                                            (rewrite "remove_len")
                                            (("1"
                                              (rewrite "get_args_len")
                                              (("1"
                                                (rewrite
                                                 "num_arg_delete_ge1")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "get_args_len")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "from_min2max_len")
                                    (("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "from_min2max_len")
                              (("2"
                                (hide 2)
                                (("2"
                                  (rewrite "num_arg_delete_ge1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "from_min2max_len")
                      (("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "get_args_len") nil nil))
            nil)
           ("2" (rewrite "gt_nth_remove2[term]")
            (("1" (expand "get_args" 2)
              (("1" (hide 3)
                (("1" (lemma "map_nth_rw[nat, term]")
                  (("1" (inst? -1)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (lemma "map_nth_rw[nat, term]")
                          (("1" (inst? -1)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (rewrite "nth_from_min2max[nat]")
                                  (("1"
                                    (rewrite "nth_from_min2max[nat]")
                                    (("1"
                                      (lemma "le_select_delete")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 3)
                                            (("1"
                                              (typepred "n")
                                              (("1"
                                                (rewrite "remove_len")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "get_args_len")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "from_min2max_len")
                                      (("2"
                                        (rewrite "num_arg_delete_ge1")
                                        (("2"
                                          (typepred "n")
                                          (("2"
                                            (rewrite "remove_len")
                                            (("1"
                                              (rewrite "get_args_len")
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (rewrite "get_args_len")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "from_min2max_len")
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (rewrite "remove_len")
                                        (("1"
                                          (rewrite "get_args_len")
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite "get_args_len")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "from_min2max_len")
                              (("2"
                                (rewrite "num_arg_delete_ge1")
                                (("2"
                                  (typepred "n")
                                  (("2"
                                    (rewrite "remove_len")
                                    (("1"
                                      (rewrite "get_args_len")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite "get_args_len")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "from_min2max_len")
                      (("2" (typepred "n")
                        (("2" (rewrite "remove_len")
                          (("1" (rewrite "get_args_len")
                            (("1" (grind) nil nil)) nil)
                           ("2" (rewrite "get_args_len") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3 4)
              (("2" (rewrite "get_args_len")
                (("2" (typepred "n")
                  (("2" (rewrite "remove_len")
                    (("1" (rewrite "get_args_len")
                      (("1" (grind) nil nil)) nil)
                     ("2" (rewrite "get_args_len") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (equal_lst_nth formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (delete def-decl "term" term_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_arg_delete_ge1 formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (get_args_len formula-decl nil term_properties nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (nth_from_min2max formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (gt_select_delete formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (nice_ind? def-decl "bool" term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (select def-decl "term" term_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (le_select_delete formula-decl nil term_properties nil)
    (gt_nth_remove2 formula-decl nil list_theory nil))
   nil)
  (remove_get_args_del-1 nil 3807539071
   ("" (skeep)
    (("" (lemma "equal_lst_nth")
      (("" (inst? -1)
        (("" (assert)
          ((""
            (case "length(remove(get_args(f)(t), j)) =
       length(get_args(f)(delete(f, t)(1 + j)))")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (case "j > n")
                    (("1" (rewrite "gt_nth_remove")
                      (("1" (expand "get_args" 1)
                        (("1" (lemma "map_nth_rw[nat, term]")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite "nth_from_min2max2")
                                    (("1"
                                      (rewrite "map_nth_rw[nat, term]")
                                      (("1"
                                        (rewrite "nth_from_min2max2")
                                        (("1"
                                          (lemma "gt_select_delete")
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "from_min2max_len1")
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "num_arg_delete_ge1")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "from_min2max_len1")
                                        (("2"
                                          (lemma "num_arg_delete_ge1")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "from_min2max_len1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "from_min2max_len1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "get_args_len") nil nil))
                      nil)
                     ("2" (lemma "gt_nth_remove2")
                      (("2" (typepred "n")
                        (("2" (inst -2 "n+1" "get_args(f)(t)" "j")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "get_args" 2)
                                    (("1"
                                      (rewrite "map_nth_rw[nat, term]")
                                      (("1"
                                        (rewrite
                                         "map_nth_rw[nat, term]")
                                        (("1"
                                          (rewrite "nth_from_min2max2")
                                          (("1"
                                            (rewrite
                                             "nth_from_min2max2")
                                            (("1"
                                              (lemma
                                               "le_select_delete")
                                              (("1"
                                                (inst
                                                 -1
                                                 "f"
                                                 "1+j"
                                                 "1+n"
                                                 "t")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2 3)
                                                    (("1"
                                                      (lemma
                                                       "remove_len")
                                                      (("1"
                                                        (inst? -1)
                                                        (("1"
                                                          (rewrite
                                                           "get_args_len")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "from_min2max_len1")
                                              (("2"
                                                (hide 3)
                                                (("2"
                                                  (rewrite
                                                   "remove_len")
                                                  (("1"
                                                    (rewrite
                                                     "get_args_len")
                                                    (("1"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "get_args_len")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "from_min2max_len1")
                                            (("2"
                                              (rewrite "remove_len")
                                              (("1"
                                                (rewrite
                                                 "get_args_len")
                                                (("1"
                                                  (rewrite
                                                   "get_args_len")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "get_args_len")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "get_args_len")
                                          (("2"
                                            (rewrite
                                             "from_min2max_len1")
                                            (("2"
                                              (rewrite "remove_len")
                                              (("2"
                                                (rewrite
                                                 "get_args_len")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "from_min2max_len1")
                                        (("2"
                                          (rewrite "remove_len")
                                          (("1"
                                            (rewrite "get_args_len")
                                            (("1"
                                              (rewrite "get_args_len")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "get_args_len")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "get_args_len")
                                (("2"
                                  (rewrite "remove_len")
                                  (("1"
                                    (rewrite "get_args_len")
                                    (("1"
                                      (rewrite "get_args_len")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "get_args_len")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "remove_len")
                (("1" (rewrite "get_args_len")
                  (("1" (rewrite "get_args_len")
                    (("1" (lemma "num_arg_delete_ge1")
                      (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "get_args_len") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal_lst_nth formula-decl nil list_theory nil)
    (term type-decl nil term_adt nil)
    (gt_nth_remove2 formula-decl nil list_theory nil)
    (remove_len formula-decl nil list_theory nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (from_min2max_len1 formula-decl nil list_theory nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (from_min2max def-decl "list[nat]" list_theory nil))
   SHOSTAK))
 (get_args_remove_del 0
  (get_args_remove_del-1 nil 3807528275
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "map" 1 1)
            (("2" (expand "remove" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (rewrite "get_args_len")
                    (("1" (expand "delete" 1)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (lemma "num_arg_ge1")
                            (("1" (hide -4)
                              (("1"
                                (inst -1 "f" "hd")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "delete" 2)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (rewrite "get_args_len")
                          (("2" (assert)
                            (("2" (expand "map" 2 2)
                              (("2"
                                (lemma "remove_get_args_del")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" -4)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "delete" 2)
                    (("3" (lift-if)
                      (("3" (assert)
                        (("3" (expand "map" 2 2)
                          (("3" (inst -1 "f" "i-1" "j")
                            (("3" (assert)
                              (("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_len formula-decl nil term_properties nil)
    (remove_get_args_del formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (delete def-decl "args" term_properties nil)
    (remove def-decl "list[list[T]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (map_get_args_get_ac_from_args 0
  (map_get_args_get_ac_from_args-1 nil 3809110041
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("args_" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "map" 1 2)
              (("2" (expand "map" 1 1)
                (("2" (expand "no_null_entries?" -3)
                  (("2" (assert)
                    (("2" (prop)
                      (("2" (inst? -2)
                        (("2" (assert)
                          (("2" (replace -2 2)
                            (("2"
                              (lemma
                               "get_args_get_ac_from_args_all_var")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_get_ac_from_args_all_var formula-decl nil term_properties
     nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil))
   SHOSTAK))
 (subterms_aux_TCC 0
  (subterms_aux_TCC-1 nil 3819388123
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3815326240 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars termination "term_properties.vars(term_properties.t1)"
    "nil")))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3815326240 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars termination "term_properties.vars(term_properties.t2)"
    "nil")))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3842353790 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (vars termination "term_properties.vars(term_properties.arg)"
    "nil")))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3842353790
   ("" (skolem 1 ("t" "f" "arg"))
    (("" (prop)
      (("" (rewrite "every_nth")
        (("" (skolem 1 "i")
          (("" (prop)
            (("1" (use "get_args_nth")
              (("1" (assert)
                (("1" (prop)
                  (("1" (replace -1)
                    (("1" (use "subterms_aux_TCC") nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (typepred "i")
                      (("2" (rewrite "get_args_len")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "get_args_nth")
              (("2" (prop)
                (("1" (replace -1)
                  (("1" (use "ac_select_size")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (rewrite "get_args_len")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (get_args_nth formula-decl nil term_properties nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subterms_aux_TCC formula-decl nil term_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (get_args_len formula-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (every_nth formula-decl nil list_props nil))
   nil
   (vars termination-subtype
    "term_properties.get_args(term_properties.sym)(term_properties.t)"
    "[{z: term_adt[constant, variable, f_symbol, ac_symbol].term | reals.<(term_properties.size(z), term_properties.size(term_properties.t))} -> finite_set[variable]]")))
 (vars_TCC5 0
  (vars_TCC3-1 nil 3823266698 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (vars subtype "term_properties.fin_set_t"
    "(sets[term[constant, variable, f_symbol, ac_symbol]].nonempty?)")))
 (vars_TCC6 0
  (vars_TCC4-1 nil 3823266698
   ("" (skeep)
    (("" (lemma "card_rest[term]") (("" (grind) nil nil)) nil)) nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (card_rest formula-decl nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rest const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil))
   nil
   (vars termination
    "term_properties.vars(sets[term[constant, variable, f_symbol, ac_symbol]].rest(term_properties.fin_set_t))"
    "nil")))
 (vars_TCC7 0
  (vars_TCC6-1 nil 3827255981 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (vars termination
    "term_properties.vars(list_adt[term[constant, variable, f_symbol, ac_symbol]].cdr(term_properties.args))"
    "nil")))
 (vars_TCC8 0
  (vars_TCC8-1 nil 3830803322 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (vars termination
    "term_properties.vars(list_adt[args].cdr(term_properties.lst_args))"
    "nil")))
 (vars_TCC9 0
  (vars_TCC7-1 nil 3830371947 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (vars subtype "term_properties.lst_lst_vars"
    "(list_adt[list[variable]].cons?)")))
 (vars_TCC10 0
  (vars_TCC8-1 nil 3830371947 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (vars termination
    "term_properties.vars(list_adt[list[variable]].cdr(term_properties.lst_lst_vars))"
    "nil")))
 (vars_TCC11 0
  (vars_TCC9-1 nil 3830371947
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "finite_union[variable]")
        (("" (inst? -1)
          (("" (lemma "lst2set_is_finite[variable]")
            (("" (inst? -1)
              (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lst2set_is_finite formula-decl nil list_theory nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (vars subtype
    "sets[variable].union(term_properties.vars_car, term_properties.vars(list_adt[list[variable]].cdr(term_properties.lst_lst_vars)))"
    "finite_set[variable]")))
 (vars_TCC12 0
  (vars_TCC10-1 nil 3830371947 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil))
   nil
   (vars subtype "term_properties.lst_lst_vars"
    "(list_adt[list[variable]].cons?)")))
 (prop_subterms_TCC1 0
  (prop_subterms_TCC1-1 nil 3819387232
   ("" (skeep)
    (("" (lemma "finite_subset[term]")
      (("" (inst -1 "subterms(t)" "_")
        (("" (inst? -1)
          (("" (assert)
            (("" (hide 2)
              (("" (expand "subset?" 1)
                (("" (skeep) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   shostak
   (prop_subterms subtype
    "{s | booleans.AND(sets[term[constant, variable, f_symbol, ac_symbol]].member(term_properties.s, term_properties.subterms(term_properties.t)), term_properties.s /= term_properties.t)}"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (im_under_TCC1 0
  (im_under_TCC1-1 nil 3823789730
   ("" (skeep)
    (("" (lemma "lst2set_is_finite[term]") (("" (inst? -1) nil nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (lst2set_is_finite formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (flatten_pair def-decl "args" term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil))
   nil
   (im_under subtype
    "list2set[term[constant, variable, f_symbol, ac_symbol]].list2set(term_properties.flatten_pair(term_adt[constant, variable, f_symbol, ac_symbol].arg(term_properties.t)))"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (im_under_TCC2 0
  (im_under_TCC2-1 nil 3823789730
   ("" (skeep)
    (("" (lemma "lst2set_is_finite[term]") (("" (inst? -1) nil nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (lst2set_is_finite formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil))
   nil
   (im_under subtype
    "list2set[term[constant, variable, f_symbol, ac_symbol]].list2set(term_properties.get_args(term_adt[constant, variable, f_symbol, ac_symbol].ac_sym(term_properties.t))(term_properties.t))"
    "finite_set[term[constant, variable, f_symbol, ac_symbol]]")))
 (size2_TCC1 0
  (size2_TCC1-1 nil 3842273886 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (size2 termination
    "term_properties.size2(term_adt[constant, variable, f_symbol, ac_symbol].term1(term_properties.t))"
    "nil")))
 (size2_TCC2 0
  (size2_TCC2-1 nil 3842273886 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (size2 termination
    "term_properties.size2(term_adt[constant, variable, f_symbol, ac_symbol].term2(term_properties.t))"
    "nil")))
 (var_lst_TCC1 0
  (var_lst_TCC1-1 nil 3849357515 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (var_lst termination
    "term_properties.var_lst(list_adt[nat].cdr(term_properties.lst_nat))"
    "nil")))
 (vars_append 0
  (vars_append-1 nil 3827265671
   ("" (induct "args1")
    (("1" (skeep)
      (("1" (decompose-equality) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1)
            (("2" (inst -1 "args2")
              (("2" (expand "vars" 1 1)
                (("2" (replace -1 1)
                  (("2" (expand "vars" 1 4)
                    (("2" (hide -1)
                      (("2" (decompose-equality)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (append def-decl "list[T]" list_props nil)
    (union const-decl "set" sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (vars_correct 0
  (vars_correct-1 nil 3823284339
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2 -3 1) (("1" (grind) nil nil)) nil)
                 ("2" (case "t = choose(fin_set_t)")
                  (("1" (replace -1 :dir rl)
                    (("1" (expand "member" 2)
                      (("1" (expand "union" 2) (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "member" 3)
                    (("2" (expand "union" 3)
                      (("2" (prop)
                        (("2" (hide 3)
                          (("2" (lemma "choose_rest_or[term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -2 "rest(fin_set_t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "X" "t")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "card_rest[term]")
                                      (("2"
                                        (inst? -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (union const-decl "set" sets nil) (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_singleton 0
  (vars_singleton-1 nil 3823267287
   ("" (skeep)
    (("" (expand "vars" 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (rewrite "choose_singleton")
            (("2" (rewrite "rest_singleton")
              (("2" (hide 1)
                (("2" (expand "vars" 1 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind)
                        (("1" (rewrite "union_empty") nil nil)) nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (rest_singleton formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil))
   shostak))
 (vars_finset 0
  (vars_finset-1 nil 3827255985
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "vars" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                   ("2" (expand "member" -1)
                    (("2" (expand "union" -1)
                      (("2" (prop)
                        (("1" (inst 2 "choose(fin_set_t)")
                          (("1" (assert)
                            (("1" (hide-all-but 2)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst -2 "rest(fin_set_t)")
                          (("2" (prop)
                            (("1" (inst -1 "X")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "t")
                                  (("1"
                                    (inst 2 "t")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "card_rest[term]")
                              (("2"
                                (inst? -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "t")
              (("2" (flatten)
                (("2" (expand "vars" 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -3 -4 1) (("1" (grind) nil nil)) nil)
                       ("2" (expand "union" 2)
                        (("2" (expand "member" 2 1)
                          (("2" (lemma "choose_rest_or[term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -3 "rest(fin_set_t)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -1 "X")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 1 "t")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "card_rest[term]")
                                          (("2"
                                            (inst -1 "fin_set_t")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_rest_or formula-decl nil sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_args 0
  (vars_args-1 nil 3827263793
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "vars" 1 1)
            (("2" (expand "member" 1 1)
              (("2" (expand "union" 1)
                (("2" (inst -1 "X")
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (split -1)
                        (("1" (inst 1 "hd") (("1" (grind) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (skolem -2 "t")
                            (("2" (inst 1 "t") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep -1)
                        (("2" (expand "member" -1)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "t") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_lst_args 0
  (vars_lst_args-1 nil 3830803322
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars" -1)
              (("1" (expand "member" -1)
                (("1" (expand "union" -1)
                  (("1" (prop)
                    (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                     ("2" (inst -2 "X")
                      (("2" (assert)
                        (("2" (skolem -2 "args1")
                          (("2" (inst 1 "args1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -3 "X")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "args!1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (vars_lst_lst_vars 0
  (vars_lst_lst_vars-1 nil 3830682614
   ("" (induct "lst_lst_vars")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "vars" -1)
              (("1" (expand "member" -1)
                (("1" (expand "union" -1)
                  (("1" (prop)
                    (("1" (inst 1 "hd")
                      (("1" (prop)
                        (("1" (rewrite "mem_lst2set_2") nil nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (inst -2 "X")
                      (("2" (prop)
                        (("2" (skeep)
                          (("2" (inst 1 "lst_vars!1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "lst_vars1")
              (("2" (prop)
                (("2" (expand "member" -2)
                  (("2" (prop)
                    (("1" (hide -3)
                      (("1" (expand "vars" 1)
                        (("1" (expand "union" 1)
                          (("1" (expand "member" 1 1)
                            (("1" (prop)
                              (("1"
                                (replace -1)
                                (("1" (rewrite "mem_lst2set") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -3 "X")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (inst 1 "lst_vars1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mem_lst2set formula-decl nil list_theory nil)
    (union const-decl "set" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mem_lst2set_2 formula-decl nil list_theory nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (vars_map 0
  (vars_map-1 nil 3827260855
   ("" (induct "args" 1)
    (("1" (lemma "subset_antisymmetric[variable]")
      (("1" (inst? -1)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (prop)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (hide 1)
                    (("1" (lemma "Union_member[variable]")
                      (("1" (inst? -1)
                        (("1" (assert)
                          (("1" (hide -2)
                            (("1" (skeep)
                              (("1"
                                (typepred "a")
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "subset?" 1)
                (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (lemma "subset_antisymmetric[variable]")
          (("2" (hide -2)
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (prop)
                    (("1" (expand "subset?" 1)
                      (("1" (skeep)
                        (("1" (lemma "Union_member[variable]")
                          (("1" (inst? -1)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma
                                     "mem_union_lst2set[variable]")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (skolem -1 "fin_set")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "map_member[term, variable]")
                                                (("1"
                                                  (inst? -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem -1 "t")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -4)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -3)
                                                            (("1"
                                                              (lemma
                                                               "vars_args")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "t")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "subset?" 1)
                      (("2" (skeep)
                        (("2" (lemma "mem_union_lst2set[variable]")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand "vars" -1)
                                  (("2"
                                    (expand "union" -1)
                                    (("2"
                                      (expand "member" -1 1)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (inst 1 "vars(hd)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "map" 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal -3)
                                          (("2"
                                            (replace -1 -2 :dir rl)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma
                                                 "mem_union_lst2set[variable]")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "fin_set")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "map"
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (union const-decl "set" sets nil)
    (vars_args formula-decl nil term_properties nil)
    (map_member formula-decl nil map_theory nil)
    (mem_union_lst2set formula-decl nil list_theory nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (Union_member formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (list2set def-decl "set[T]" list2set nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Union const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (vars_get_args 0
  (vars_get_args-1 nil 3827260749
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (lemma "get_args_not_pair_ac")
              (("" (inst? -1)
                (("" (prop)
                  (("1" (replace -1 1)
                    (("1" (hide -1)
                      (("1" (grind)
                        (("1" (decompose-equality) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (lemma "term_pair_eta")
                    (("2" (inst? -1)
                      (("2" (replace -1 1 :dir rl)
                        (("2" (rewrite "get_args_pair")
                          (("2" (rewrite "vars_append")
                            (("2" (reveal -3)
                              (("2"
                                (inst-cp -1 "term1(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "f")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst -1 "term2(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -1 "f")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (expand "vars" 1 3)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "is_ac_sym?" -1)
                    (("3" (flatten)
                      (("3" (expand "vars" 1 2)
                        (("3" (assert)
                          (("3" (lemma "vars_map")
                            (("3" (inst? -1)
                              (("3"
                                (replace -1 1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_not_pair_ac formula-decl nil term_properties nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (get_args_pair formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vars_append formula-decl nil term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (vars_map formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_get_ac_from_args 0
  (vars_get_ac_from_args-1 nil 3830715307
   ("" (skolem 1 ("args1" "f"))
    (("" (lemma "subset_antisymmetric[variable]")
      (("" (inst? -1)
        (("" (assert)
          (("" (hide 2)
            (("" (prop)
              (("1" (expand "subset?" 1)
                (("1" (skeep)
                  (("1" (expand "get_ac_from_args" -1)
                    (("1" (expand "vars" -1)
                      (("1" (lemma "mem_union_map[term, variable]")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (hide -2)
                              (("1"
                                (skolem -1 "t")
                                (("1"
                                  (prop)
                                  (("1"
                                    (lemma "get_args_get_ac_from_args")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 "args1")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand
                                             "get_ac_from_args"
                                             -1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "mem_flatten_map2[term, term]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         "t1")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (lemma
                                                             "vars_args")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x"
                                                               "args1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "t1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "vars_args")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x"
                                                                         "get_args(f)(t1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (lemma
                                                                               "vars_get_args")
                                                                              (("1"
                                                                                (inst?
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               1
                                                                               "t")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "get_term_from_args"
                                             -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "subset?" 1)
                (("2" (skeep)
                  (("2" (expand "get_ac_from_args" 1)
                    (("2" (expand "vars" 1)
                      (("2" (lemma "mem_union_map[term, variable]")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (lemma "vars_args")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skolem -1 "t")
                                      (("2"
                                        (prop)
                                        (("2"
                                          (lemma "vars_get_args")
                                          (("2"
                                            (inst -1 "f" "t")
                                            (("2"
                                              (replace -1 -3 :dir rl)
                                              (("2"
                                                (lemma "vars_args")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skolem -1 "ti")
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (inst 1 "ti")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "get_args_get_ac_from_args")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "args1")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (expand
                                                                       "get_ac_from_args"
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "mem_flatten_map2[term, term]")
                                                                            (("1"
                                                                              (inst?
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "t")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-7
                                                                        -1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((variable type-eq-decl nil term_properties nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (vars_get_args formula-decl nil term_properties nil)
    (vars_args formula-decl nil term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (select def-decl "term" term_properties nil)
    (member def-decl "bool" list_props nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_get_ac_from_args formula-decl nil term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (subset? const-decl "bool" sets nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (vars_ac 0
  (vars_ac-1 nil 3827258364
   ("" (skeep)
    (("" (expand "vars" 1 1)
      (("" (rewrite "get_args_ac")
        (("" (lemma "vars_map")
          (("" (inst? -1)
            (("" (replace -1 1)
              (("" (hide -1)
                (("" (lemma "vars_get_args")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (replace -1 1) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_map formula-decl nil term_properties nil)
    (vars_get_args formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_args_ac formula-decl nil term_properties nil))
   shostak))
 (vars_ac2 0
  (vars_ac2-1 nil 3830532471
   ("" (skeep)
    (("" (expand "vars" 1 1)
      (("" (rewrite "get_args_ac")
        (("" (lemma "vars_map")
          (("" (inst? -1)
            (("" (replace -1 1)
              (("" (hide -1)
                (("" (lemma "vars_get_args")
                  (("" (inst? -1)
                    (("" (assert)
                      (("" (replace -1 1) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_map formula-decl nil term_properties nil)
    (vars_get_args formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (get_args_ac formula-decl nil term_properties nil))
   shostak))
 (vars_select 0
  (vars_select-1 nil 3855318905
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "select" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (lemma "term_pair_eta")
                    (("1" (inst -1 "t")
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (replace -2 1 :dir rl)
                            (("1" (expand "vars" 1 2)
                              (("1"
                                (expand "subset?" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -5 "term1(t)")
                                    (("1"
                                      (split -5)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 2 :dir rl)
                            (("2" (expand "vars" 2 2)
                              (("2"
                                (inst -3 "term2(t)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (lemma "term_ac_app_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1 :dir rl)
                            (("1" (expand "vars" 1 2)
                              (("1"
                                (expand "subset?" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (rewrite "mem_union_map" 1)
                                    (("1"
                                      (inst 1 "select(f, t)(i)")
                                      (("1"
                                        (expand "select" 1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite
                                                 "get_args_mem_selecti")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil) nil
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (select def-decl "term" term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    nil (args type-eq-decl nil term_properties nil) nil
    (list type-decl nil list_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (get_args_mem_selecti formula-decl nil term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Union const-decl "set" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (vars_delete 0
  (vars_delete-1 nil 3855319754
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "delete" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (lemma "term_pair_eta")
                    (("1" (inst -1 "t")
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -4 "term1(t)")
                                (("2"
                                  (split -4)
                                  (("1"
                                    (inst -1 "f" "i")
                                    (("1"
                                      (expand "subset?" 2)
                                      (("1"
                                        (skeep)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -3 "term2(t)")
                                (("2"
                                  (split -3)
                                  (("1"
                                    (inst
                                     -1
                                     "f"
                                     "i - num_arg(f, term1(t))")
                                    (("1"
                                      (expand "subset?" 2)
                                      (("1"
                                        (skeep)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (split 1)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (lemma "term_ac_app_eta")
                            (("2" (inst -1 "t")
                              (("2"
                                (replace -3 -1)
                                (("2"
                                  (replace -1 2 :dir rl)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "subset?" 2)
                                      (("2"
                                        (skolem 2 "x")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma "vars_ac2")
                                            (("2"
                                              (inst
                                               -1
                                               "x"
                                               "f"
                                               "ac_arg(t)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 3)
                                                  (("2"
                                                    (lemma "vars_ac2")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x"
                                                       "f"
                                                       "delete(f, ac_arg(t))(i)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "ac_arg(t)")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "f"
                                                               "i")
                                                              (("1"
                                                                (expand
                                                                 "subset?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" term_properties nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (delete def-decl "term" term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (f skolem-const-decl "string" term_properties nil)
    (t skolem-const-decl
     "term[constant, variable, f_symbol, ac_symbol]" term_properties
     nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (vars_ac2 formula-decl nil term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union const-decl "set" sets nil)
    (get_args const-decl "args" term_properties nil))
   shostak))
 (vars_lst_vars 0
  (vars_lst_vars-1 nil 3830452934
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (lemma "subset_antisymmetric[variable]")
          (("" (inst? -1)
            (("" (assert)
              (("" (hide 2)
                (("" (prop)
                  (("1" (expand "subset?" 1)
                    (("1" (skeep)
                      (("1" (expand "vars" -1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (expand "member" -2)
                              (("4"
                                (expand "union" -2)
                                (("4"
                                  (expand "lst_vars" 4)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (rewrite "lst2set_append_mem")
                                      (("4"
                                        (prop)
                                        (("1"
                                          (inst -3 "term1(t)")
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (inst -3 "term2(t)")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (expand "lst_vars" 5)
                              (("5"
                                (assert)
                                (("5"
                                  (inst -3 "arg(t)")
                                  (("5"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6"
                              (lemma "mem_union_map[term, variable]")
                              (("6"
                                (inst? -1)
                                (("6"
                                  (assert)
                                  (("6"
                                    (hide -2)
                                    (("6"
                                      (skolem -1 "ti")
                                      (("6"
                                        (prop)
                                        (("6"
                                          (expand "lst_vars" 6)
                                          (("6"
                                            (lemma
                                             "mem_lst2set[variable]")
                                            (("6"
                                              (inst? -1)
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (hide 7)
                                                  (("6"
                                                    (lemma
                                                     "mem_flatten_map2[term, variable]")
                                                    (("6"
                                                      (inst? -1)
                                                      (("6"
                                                        (assert)
                                                        (("6"
                                                          (inst 1 "ti")
                                                          (("6"
                                                            (assert)
                                                            (("6"
                                                              (inst
                                                               -3
                                                               "ti")
                                                              (("6"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -3)
                                                                    (("1"
                                                                      (lemma
                                                                       "mem_lst2set_2[variable]")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "get_args_size")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         2
                                                                         3
                                                                         4)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "subset?" 1)
                    (("2" (skeep)
                      (("2" (expand "vars" 1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (expand "member" 1)
                              (("4"
                                (expand "union" 1)
                                (("4"
                                  (prop)
                                  (("4"
                                    (expand "lst_vars" -2)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (rewrite "lst2set_append_mem")
                                        (("4"
                                          (prop)
                                          (("1"
                                            (inst -3 "term1(t)")
                                            (("1"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -3 "term2(t)")
                                            (("2"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (inst -3 "arg(t)")
                              (("5"
                                (prop)
                                (("1"
                                  (expand "lst_vars" -3)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("6" (expand "lst_vars" -1)
                              (("6"
                                (assert)
                                (("6"
                                  (lemma "mem_lst2set_2[variable]")
                                  (("6"
                                    (inst? -1)
                                    (("6"
                                      (assert)
                                      (("6"
                                        (hide -2)
                                        (("6"
                                          (lemma
                                           "mem_flatten_map2[term, variable]")
                                          (("6"
                                            (inst? -1)
                                            (("6"
                                              (assert)
                                              (("6"
                                                (skolem -1 "ti")
                                                (("6"
                                                  (prop)
                                                  (("6"
                                                    (hide -3)
                                                    (("6"
                                                      (lemma
                                                       "mem_union_map[term, variable]")
                                                      (("6"
                                                        (inst? -1)
                                                        (("6"
                                                          (assert)
                                                          (("6"
                                                            (hide 3)
                                                            (("6"
                                                              (inst
                                                               1
                                                               "ti")
                                                              (("6"
                                                                (prop)
                                                                (("6"
                                                                  (inst
                                                                   -3
                                                                   "ti")
                                                                  (("6"
                                                                    (prop)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "mem_lst2set[variable]")
                                                                        (("1"
                                                                          (inst?
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "get_args_size")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_antisymmetric formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (flatten def-decl "list[T]" list_theory nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (mem_lst2set_2 formula-decl nil list_theory nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (mem_lst2set formula-decl nil list_theory nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (lst2set_append_mem formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (lst_vars def-decl "list[variable]" term_properties nil)
    (list2set def-decl "set[T]" list2set nil)
    (list type-decl nil list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (var_lst_len 0
  (var_lst_len-1 nil 3849370233
   ("" (induct "lst_nat") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var_lst def-decl
     "list[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (var_lst_nth_TCC1 0
  (var_lst_nth_TCC1-1 nil 3849440032
   ("" (skeep) (("" (rewrite "var_lst_len") nil nil)) nil)
   ((var_lst_len formula-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (var_lst_nth subtype "term_properties.i"
    "below[length[term[constant, variable, f_symbol, ac_symbol]](var_lst(lst_nat))]")))
 (var_lst_nth 0
  (var_lst_nth-1 nil 3849440032
   ("" (induct "lst_nat")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -2 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "var_lst" 2 1)
                    (("2" (expand "nth" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (inst?) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "var_lst_len") nil nil)) nil)) nil))
    nil)
   ((var_lst_len formula-decl nil term_properties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (var_lst def-decl
     "list[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil))
   shostak))
 (var_lst_mem 0
  (var_lst_mem-1 nil 3849686703
   ("" (induct "lst_nat")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (grind) (("2" (decompose-equality 2) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((term_variable_extensionality formula-decl nil term_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (var_lst def-decl
     "list[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (all_var?_append 0
  (all_var?_append-1 nil 3809254657
   ("" (induct "args1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (all_var?_get_repeat_lst 0
  (all_var?_get_repeat_lst-1 nil 3809254692
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (all_var?_split 0
  (all_var?_split-1 nil 3809249359
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_until_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "all_var?" 2)
                    (("2" (assert)
                      (("2" (inst -1 "n-1")
                        (("2" (expand "split" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (all_var?_split2 0
  (all_var?_split2-1 nil 3809285538
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_after_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "n-1")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (all_var?_get_repeat_lst_null 0
  (all_var?_get_repeat_lst_null-1 nil 3809257456
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (all_var?_split_lst_args 0
  (all_var?_split_lst_args-1 nil 3809256090
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_until_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "all_var?" 2)
                    (("2" (assert)
                      (("2" (inst -1 "n-1")
                        (("2" (expand "split" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil))
   SHOSTAK))
 (all_var?_split_lst_args2 0
  (all_var?_split_lst_args2-1 nil 3809288342
   ("" (induct "lst_args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "all_var?" -2)
            (("2" (expand "split" 1)
              (("2" (expand "get_lst_after_n")
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "n-1")
                    (("1" (expand "split" -1) (("1" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil))
   SHOSTAK))
 (all_var?_args 0
  (all_var?_args-1 nil 3832837799
   ("" (induct "args")
    (("1" (grind) nil nil) ("2" (prop) (("2" (grind) nil nil)) nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (flatten)
        (("3" (split 1)
          (("1" (flatten)
            (("1" (hide -3)
              (("1" (skeep)
                (("1" (expand "member" -2)
                  (("1" (split -2)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (expand "all_var?" -2)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (inst -4 "t") (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (hide -2)
              (("2" (expand "all_var?" 1)
                (("2" (split 1)
                  (("1" (inst -1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -1 "t") (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (all_var?_lst_args 0
  (all_var?_lst_args-1 nil 3832836213
   ("" (induct "lst_args")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (flatten)
        (("3" (split 1)
          (("1" (flatten)
            (("1" (skolem 1 "args1")
              (("1" (flatten)
                (("1" (expand "member" -2)
                  (("1" (split -2)
                    (("1" (expand "all_var?" -2)
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (expand "all_var?" -2)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (inst -4 "args1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "all_var?" 1)
              (("2" (hide -2)
                (("2" (split 1)
                  (("1" (inst -1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (skolem 2 "args1")
                      (("2" (inst -1 "args1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (not_var_args_append 0
  (not_var_args_append-1 nil 3824389246
   ("" (induct "args1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (append def-decl "list[T]" list_props nil)
    (not_var_args def-decl "args" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (not_var_args_nth 0
  (not_var_args_nth-1 nil 3819455944
   ("" (induct "args")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "not_var_args" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst -3 "i")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst 1 "j+1")
                        (("1" (expand "length" 1)
                          (("1" (assert)
                            (("1" (expand "nth" 1 2)
                              (("1"
                                (expand "not_var_args" 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "i = 0")
                  (("1" (inst 2 "0")
                    (("1" (expand "not_var_args" 2)
                      (("1" (expand "length" 2)
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (replace -1 2)
                              (("1"
                                (expand "nth" 2 1)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "i-1")
                    (("1" (expand "length" -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst 3 "j+1") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (not_var_args def-decl "args" term_properties nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (not_var_args_mem 0
  (not_var_args_mem-1 nil 3823527746
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (not_var_args def-decl "args" term_properties nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (not_var_args_mem2 0
  (not_var_args_mem2-1 nil 3824224541
   ("" (induct "args") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_var_args def-decl "args" term_properties nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (not_var_args_get_args 0
  (not_var_args_get_args-1 nil 3823527641
   ("" (skeep)
    (("" (expand "not_var_args" -1)
      (("" (lemma "not_var_args_mem")
        (("" (inst -1 "get_args(f)(t)" "s") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((not_var_args const-decl "args" term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (not_var_args_mem formula-decl nil term_properties nil))
   shostak))
 (not_var_args_get_args2 0
  (not_var_args_get_args2-1 nil 3824224322
   ("" (lemma "not_var_args_mem2") (("" (grind) nil nil)) nil)
   ((not_var_args const-decl "args" term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_var_args_mem2 formula-decl nil term_properties nil))
   shostak))
 (not_var_args_nth2 0
  (not_var_args_nth2-1 nil 3819473008
   ("" (skeep)
    (("" (expand "not_var_args")
      (("" (lemma "not_var_args_nth")
        (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((not_var_args const-decl "args" term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_var_args_nth formula-decl nil term_properties nil))
   shostak))
 (subterm_fin_set 0
  (subterm_fin_set-1 nil 3827573020
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "subterms" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (hide-all-but -2) (("1" (grind) nil nil)) nil)
                   ("2" (expand "member" -1)
                    (("2" (expand "union" -1)
                      (("2" (prop)
                        (("1" (inst 2 "choose(fin_set)")
                          (("1" (assert)
                            (("1" (lemma "choose_member[term]")
                              (("1"
                                (inst? -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "rest(fin_set)")
                          (("2" (prop)
                            (("1" (inst -1 "s")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "t")
                                  (("1"
                                    (inst 2 "t")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "rest_member[term]")
                                          (("1"
                                            (inst -1 "fin_set" "t")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "card_rest[term]")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "t")
              (("2" (flatten)
                (("2" (expand "subterms" 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -3 -4 1) (("1" (grind) nil nil)) nil)
                       ("2" (lemma "choose_rest_or[term]")
                        (("2" (inst -1 "fin_set" "t")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (expand "member" 2)
                                (("1"
                                  (expand "union" 2)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -4 "rest(fin_set)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst? -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 1 "t")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "card_rest[term]")
                                          (("2"
                                            (inst? -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member" 2)
                                (("2"
                                  (expand "union" 2)
                                  (("2"
                                    (prop)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest_member formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_args 0
  (subterm_args-1 nil 3832794878
   ("" (induct "args")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "subterms" -1)
              (("1" (expand ("member" "union") -1)
                (("1" (prop)
                  (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                   ("2" (inst -2 "s")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "t") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -1)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -3 "s")
                    (("2" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil))
   shostak))
 (subterm_singleton 0
  (subterm_singleton-1 nil 3832517817
   ("" (skeep)
    (("" (expand "subterms" 1 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (rewrite "rest_singleton")
            (("2" (rewrite "choose_singleton")
              (("2" (grind) (("2" (rewrite "union_empty") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (rest_singleton formula-decl nil sets_lemmas nil))
   shostak))
 (subterm_reflexive 0
  (subterm_reflexive-1 nil 3825694013
   ("" (skeep)
    (("" (expand "subterms" 2)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union const-decl "set" sets nil))
   shostak))
 (subterm_not_pair 0
  (subterm_not_pair-1 nil 3837162657
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst -1 "t")
              (("" (prop)
                (("1" (replace -2) (("1" (grind) nil nil)) nil)
                 ("2" (replace -2) (("2" (grind) nil nil)) nil)
                 ("3" (grind) nil nil)
                 ("4" (replace -2)
                  (("4" (expand "subterms" -4)
                    (("4" (expand "member" -4)
                      (("4" (expand "union" -4)
                        (("4" (prop)
                          (("1" (inst -4 "term1(t)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "s")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -4 "term2(t)")
                            (("2" (prop)
                              (("1"
                                (inst -1 "s")
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2)
                  (("5" (expand "subterms" -4)
                    (("5" (expand ("member" "union") -4)
                      (("5" (prop)
                        (("1" (grind) nil nil)
                         ("2" (inst -4 "arg(t)")
                          (("2" (prop)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (expand "subterms" -4)
                  (("6" (assert)
                    (("6" (expand ("member" "union") -4)
                      (("6" (prop)
                        (("1" (grind) nil nil)
                         ("2" (rewrite "mem_union_map")
                          (("2" (skolem -1 "ti")
                            (("2" (prop)
                              (("2"
                                (inst -5 "ti")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "get_args_size")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (get_args_size formula-decl nil term_properties nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (term_opt formula-decl nil term_properties nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_reflexive_finset 0
  (subterm_reflexive_finset-1 nil 3832697611
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subterms" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "choose_rest_or[term]")
                  (("2" (inst -1 "fin_set_t" "t")
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (expand "member" 2)
                          (("1" (expand "union" 2)
                            (("1" (prop)
                              (("1"
                                (inst -2 "rest(fin_set_t)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "t")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "no_pair?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "no_pair?" -4)
                                            (("1"
                                              (inst -4 "t!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "rest_member[term]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "fin_set_t"
                                                     "t!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "card_rest")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "member" 2)
                          (("2" (expand "union" 2)
                            (("2" (prop)
                              (("2"
                                (hide -2)
                                (("2"
                                  (lemma "subterm_reflexive")
                                  (("2"
                                    (lemma "choose_member[term]")
                                    (("2"
                                      (inst -1 "fin_set_t")
                                      (("2"
                                        (replace -3 2)
                                        (("2"
                                          (inst -2 "choose(fin_set_t)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "no_pair?" -4)
                                              (("2"
                                                (inst -4 "t")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_rest_or formula-decl nil sets_lemmas nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (rest_member formula-decl nil sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil) (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (select_subterms 0
  (select_subterms-1 nil 3827570883
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "select" 1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (expand "subterms" 1)
                    (("1" (assert)
                      (("1" (expand "member" 1)
                        (("1" (expand "union" 1)
                          (("1" (prop)
                            (("1" (hide 2)
                              (("1"
                                (reveal -1)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (prop)
                                    (("1" (inst? -1) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "subterms" 2)
                    (("2" (assert)
                      (("2" (expand "member" 2)
                        (("2" (expand "union" 2)
                          (("2" (prop)
                            (("2" (hide 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (prop)
                                    (("1" (inst? -1) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "subterms" 1)
                    (("3" (assert)
                      (("3" (expand "member" 1)
                        (("3" (expand "union" 1)
                          (("3" (prop)
                            (("3" (lemma "mem_union_map[term, term]")
                              (("3"
                                (inst? -1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 3)
                                    (("3"
                                      (inst
                                       1
                                       "select(f, ac_arg(t))(n)")
                                      (("3"
                                        (prop)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "get_args" 1)
                                              (("1"
                                                (case "n = 0")
                                                (("1"
                                                  (lemma
                                                   "map_member4[nat, term]")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (inst 1 "1")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (lemma
                                                               "member_nth_uni2[nat]")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "from_min2max"
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "num_arg_ge1")
                                                                              (("1"
                                                                                (inst?
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "from_min2max_len")
                                                                          (("2"
                                                                            (lemma
                                                                             "num_arg_ge1")
                                                                            (("2"
                                                                              (inst?
                                                                               -1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "select"
                                                                 1
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "select_le1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "n > num_arg(f, t)")
                                                  (("1"
                                                    (lemma
                                                     "map_member3[nat, term]")
                                                    (("1"
                                                      (inst? -1)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (inst
                                                             2
                                                             "num_arg(f, t) - 1")
                                                            (("1"
                                                              (lemma
                                                               "nth_from_min2max2[nat]")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "from_min2max_len")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "select"
                                                                           2
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "select_ge_num_arg")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "f"
                                                                               "n"
                                                                               "t")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "select"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "num_arg_ge1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "num_arg_ge1")
                                                              (("2"
                                                                (inst?
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "from_min2max_len")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "map_member3[nat, term]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (replace -1 3)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (inst
                                                             3
                                                             "n-1")
                                                            (("1"
                                                              (lemma
                                                               "nth_from_min2max2[nat]")
                                                              (("1"
                                                                (inst?
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "from_min2max_len")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "select"
                                                                         3
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "num_arg_ge1")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "from_min2max_len")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "subterm_reflexive")
                                          (("2"
                                            (inst? -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "select_num_arg")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (lemma
                                                     "select_not_pair")
                                                    (("2"
                                                      (inst? -1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "subterm_reflexive")
                    (("4" (inst? -1) (("4" (assert) nil nil)) nil))
                    nil)
                   ("5" (lemma "subterm_reflexive")
                    (("5" (inst? -1) (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (mem_union_map formula-decl nil map_theory nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (select_not_pair formula-decl nil term_properties nil)
    (select_num_arg formula-decl nil term_properties nil)
    (> const-decl "bool" reals nil)
    (nth_from_min2max2 formula-decl nil list_theory nil)
    (select_ge_num_arg formula-decl nil term_properties nil)
    (map_member3 formula-decl nil map_theory nil)
    (map_member4 formula-decl nil map_theory nil)
    (select_le1 formula-decl nil term_properties nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (from_min2max_len formula-decl nil list_theory nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nth def-decl "T" list_props nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (select def-decl "term" term_properties nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_fin_set_mem 0
  (subterm_fin_set_mem-1 nil 3825694687
   ("" (measure-induct "card(fin_set_t)" "fin_set_t")
    (("" (skolem 1 "fin_set_t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subset?" 1)
            (("" (skeep)
              (("" (expand "subterms" 1)
                (("" (lift-if)
                  (("" (prop)
                    (("1" (grind) nil nil)
                     ("2" (hide 1)
                      (("2" (lemma "choose_rest_or[term]")
                        (("2" (inst -1 "fin_set_t" "t")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (expand "union" 1)
                                (("1"
                                  (expand "member" 1 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (inst -2 "rest(fin_set_t)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -1 "t")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "subset?" -1)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "card_rest[term]")
                                          (("2"
                                            (inst? -1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (choose_rest_or formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_subterm_uni 0
  (vars_subterm_uni-1 nil 3823528043
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "vars" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "subterms" -4)
                  (("1" (assert)
                    (("1" (hide -1 -2 1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2 2 3) (("3" (grind) nil nil)) nil)
                 ("4" (expand "subterms" -4)
                  (("4" (assert)
                    (("4" (expand "union" -4)
                      (("4" (expand "member" -4)
                        (("4" (prop)
                          (("1" (expand "union" 1)
                            (("1" (expand "member" 1)
                              (("1"
                                (prop)
                                (("1"
                                  (hide 2 3 4 5)
                                  (("1"
                                    (inst -3 "term1(t)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 1)
                            (("2" (expand "union" 1)
                              (("2"
                                (prop)
                                (("2"
                                  (inst -3 "term2(t)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "X" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "member" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2 3 4 5)
                  (("5" (inst? -2)
                    (("5" (prop)
                      (("1" (inst -1 "X" "s")
                        (("1" (prop)
                          (("1" (expand "subterms" -3)
                            (("1" (assert)
                              (("1"
                                (expand "member" -3)
                                (("1"
                                  (expand "union" -3)
                                  (("1"
                                    (hide 1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide -1)
                  (("6" (hide 3 4 5 6)
                    (("6" (assert)
                      (("6" (case "ac_app?(t)")
                        (("1" (assert)
                          (("1" (hide -3)
                            (("1" (reveal -1)
                              (("1"
                                (expand "subterms" -1)
                                (("1"
                                  (expand "member" -1 1)
                                  (("1"
                                    (expand "union" -1 1)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "member" -1)
                                        (("1"
                                          (expand "singleton" -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide 1)
                                              (("1"
                                                (expand "vars" -3)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "mem_union_map[term, term]")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skolem -1 "t1")
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "mem_union_map[term, variable]")
                                                    (("2"
                                                      (inst? -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "t1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (reveal
                                                                 -5)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (prop)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "X"
                                                                       "s")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "get_args_size")
                                                                      (("2"
                                                                        (inst?
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal 1 2 3 4)
                          (("2" (hide 7) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (mem_union_map formula-decl nil map_theory nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (vars_subterm_uni2 0
  (vars_subterm_uni2-1 nil 3839762115
   ("" (measure-induct "size(s)" "s")
    (("" (skolem 1 "s")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (inst 1 "s") (("1" (grind) nil nil)) nil)
                 ("2" (inst 1 "s") (("2" (grind) nil nil)) nil)
                 ("3" (inst 1 "s") (("3" (grind) nil nil)) nil)
                 ("4" (expand "vars" -4)
                  (("4" (assert)
                    (("4" (expand ("member" "union") -4)
                      (("4" (prop)
                        (("1" (inst -4 "term1(s)")
                          (("1" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "t1")
                                  (("1"
                                    (inst 1 "t1")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst -4 "term2(s)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "t1")
                                  (("1"
                                    (inst 1 "t1")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (inst 1 "s") (("5" (grind) nil nil)) nil)
                 ("6" (inst 1 "s") (("6" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Union const-decl "set" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (term_opt formula-decl nil term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_size 0
  (subterm_size-1 nil 3823960452
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subterms" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (expand "member" -2)
                  (("4" (expand "union" -2)
                    (("4" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (case "size(term1(t)) < size(t)")
                          (("1" (assert)
                            (("1" (inst -4 "s") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (case "size(term2(t)) < size(t)")
                          (("1" (assert)
                            (("1" (inst -4 "s") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "member" -2)
                  (("5" (expand "union" -2)
                    (("5" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst -3 "arg(t)")
                        (("2" (case "size(arg(t)) < size(t)")
                          (("1" (assert)
                            (("1" (inst -4 "s") (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t)")
                  (("1" (hide 1 2 3 4 5)
                    (("1" (expand "member" -2)
                      (("1" (expand "union" -2)
                        (("1" (prop)
                          (("1" (hide -2 -3) (("1" (grind) nil nil))
                            nil)
                           ("2" (lemma "mem_union_map[term, term]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (skolem -1 "ti")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -4 "ti")
                                        (("2"
                                          (case "size(ti) < size(t)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst -1 "s")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 -4 2)
                                            (("2"
                                              (lemma "get_args_size")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (mem_union_map formula-decl nil map_theory nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (<= const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (subterm_transitive_uni 0
  (subterm_transitive_uni-1 nil 3830865769
   ("" (measure-induct "size(t1)" "t1")
    (("" (skolem 1 "t1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "subterms" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (hide -2) (("2" (grind) nil nil)) nil)
                 ("3" (hide -2) (("3" (grind) nil nil)) nil)
                 ("4" (expand "subterms" -4)
                  (("4" (assert)
                    (("4" (expand "member" -4)
                      (("4" (expand "union" -4)
                        (("4" (prop)
                          (("1" (inst -3 "term1(t1)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "s" "t")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (inst -3 "term2(t1)")
                            (("2" (prop)
                              (("1"
                                (inst -1 "s" "t")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "subterms" -4)
                  (("5" (assert)
                    (("5" (expand "union" -4)
                      (("5" (expand "member" -4 1)
                        (("5" (prop)
                          (("1" (hide-all-but (-1 -4 1))
                            (("1" (grind) nil nil)) nil)
                           ("2" (inst -3 "arg(t1)")
                            (("2" (prop)
                              (("1"
                                (inst -1 "s" "t")
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (case "ac_app?(t1)")
                  (("1" (hide 1 3 4 5 6)
                    (("1" (expand "subterms" -4)
                      (("1" (assert)
                        (("1" (expand "member" -4)
                          (("1" (expand "union" -4 1)
                            (("1" (prop)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "member" -1)
                                  (("1"
                                    (expand "singleton" -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "subterms" -3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 1)
                                (("2"
                                  (lemma "mem_union_map[term, term]")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (skolem -1 "t1i")
                                          (("2"
                                            (prop)
                                            (("2"
                                              (inst -4 "t1i")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst -1 "s" "t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (reveal 1)
                                                      (("1"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "union"
                                                           1)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (lemma
                                                                 "mem_union_map[term, term]")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "t1i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "get_args_size")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "is_ac_sym?"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3 -1 -2 -3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (get_args_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (get_args_subterms 0
  (get_args_subterms-1 nil 3832411310
   ("" (skeep)
    (("" (expand "get_args")
      (("" (rewrite "map_member4")
        (("" (skolem -1 "n")
          (("" (prop)
            (("" (expand "subset?" 1)
              (("" (skolem 1 "t1")
                (("" (prop)
                  (("" (lemma "subterm_transitive_uni")
                    (("" (inst -1 "t1" "s" "t")
                      (("" (assert)
                        (("" (replace -2)
                          (("" (rewrite "select_subterms") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (select_subterms formula-decl nil term_properties nil)
    (subterm_transitive_uni formula-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (list type-decl nil list_adt nil)
    (select def-decl "term" term_properties nil)
    (string type-eq-decl nil strings nil)
    (map_member4 formula-decl nil map_theory nil))
   shostak))
 (get_args_subterms2 0
  (get_args_subterms2-1 nil 3837119712
   ("" (skeep)
    (("" (lemma "get_args_subterms")
      (("" (inst?)
        (("" (assert)
          (("" (expand "subset?" -1)
            (("" (inst -1 "s")
              (("" (prop)
                (("" (rewrite "subterm_reflexive")
                  (("" (lemma "get_args_mem_not_pair")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_args_subterms formula-decl nil term_properties nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil)
    (subset? const-decl "bool" sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (subterm_get_ac_from_args 0
  (subterm_get_ac_from_args-1 nil 3846875248
   ("" (measure-induct "length(args)" "args")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_ac_from_args" -2)
            (("" (expand "subterms" -2)
              (("" (expand "member" -2)
                (("" (expand "union" -2)
                  (("" (prop)
                    (("1" (grind) nil nil)
                     ("2" (rewrite "mem_union_map")
                      (("2" (skolem -1 "ti")
                        (("2" (prop)
                          (("2" (rewrite "get_args_ac" -1)
                            (("2" (lemma "get_args_get_term_from_args")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite "mem_flatten_map2")
                                      (("2"
                                        (skolem -2 "tj")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma
                                               "get_args_subterms")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "s")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "subterm_args"
                                                           3)
                                                          (("2"
                                                            (inst
                                                             3
                                                             "tj")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (get_args_get_term_from_args formula-decl nil term_properties nil)
    (mem_flatten_map2 formula-decl nil map_theory nil)
    (get_args_subterms formula-decl nil term_properties nil)
    (subterm_args formula-decl nil term_properties nil)
    (subset? const-decl "bool" sets nil)
    (get_args_ac formula-decl nil term_properties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (get_term_from_args def-decl "term" term_properties nil)
    (Union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_ac_from_args const-decl "term" term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (args type-eq-decl nil term_properties nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (prop_subterm_subterm_size 0
  (prop_subterm_subterm_size-1 nil 3834166076
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "prop_subterms" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand ("member" "union") -2)
                    (("1" (split -2)
                      (("1" (inst -3 "term1(t)")
                        (("1" (split -3)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "subterms" 1)
                                  (("1"
                                    (expand ("member" "union") 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 -3 -4)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide -2)
                    (("2" (expand "member" -1 1)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "subterms" -1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4"
                                  (lemma "subterm_size")
                                  (("4"
                                    (inst -1 "s" "arg(t)")
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (hide 1 2 3 4 5)
                                  (("5"
                                    (expand "union" -1)
                                    (("5"
                                      (expand "member" -1 1)
                                      (("5"
                                        (prop)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (rewrite "mem_union_map")
                                          (("2"
                                            (skolem -1 "ti")
                                            (("2"
                                              (prop)
                                              (("2"
                                                (lemma "subterm_size")
                                                (("2"
                                                  (inst -1 "s" "ti")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "get_args_size")
                                                      (("2"
                                                        (inst? -1)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (reveal
                                                             1
                                                             2
                                                             3
                                                             4
                                                             5)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (get_args_size formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (select def-decl "term" term_properties nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (subterm_size formula-decl nil term_properties nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (prop_subterm_subterm 0
  (prop_subterm_subterm-1 nil 3834161429
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (expand "prop_subterms" -2)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "union" -2)
                    (("1" (split -2)
                      (("1" (inst -3 "term1(t)")
                        (("1" (split -3)
                          (("1" (inst -1 "s")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "member" 1)
                                    (("1"
                                      (expand "subterms" 1)
                                      (("1"
                                        (expand "union" 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "subterm_size")
                                    (("2"
                                      (inst -1 "s" "term1(t)")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (split -3)
                          (("1" (inst -1 "s")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (prop)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (lemma "subterm_size")
                                    (("2"
                                      (inst -1 "s" "term2(t)")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm_size formula-decl nil term_properties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (union const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (get_args_prop_subterms 0
  (get_args_prop_subterms-1 nil 3837162915
   ("" (skeep)
    (("" (expand "prop_subterms" 1)
      (("" (expand "is_ac_sym?" -2)
        (("" (prop)
          (("" (lift-if)
            (("" (assert)
              (("" (expand "member" 1 1)
                (("" (prop)
                  (("1" (expand "subterms" 1)
                    (("1" (expand ("member" "union") 1)
                      (("1" (prop)
                        (("1" (rewrite "mem_union_map")
                          (("1" (inst 2 "s")
                            (("1" (assert)
                              (("1"
                                (rewrite "subterm_reflexive")
                                (("1"
                                  (lemma "get_args_mem_not_pair")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "get_args_size")
                    (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prop_subterms def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (union const-decl "set" sets nil)
    (mem_union_map formula-decl nil map_theory nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_args_size formula-decl nil term_properties nil)
    (member const-decl "bool" sets nil)
    (is_ac_sym? const-decl "bool" term_properties nil))
   shostak))
 (vars_prop_subterm 0
  (vars_prop_subterm-1 nil 3823961697
   ("" (skeep)
    (("" (lemma "prop_subterm_subterm")
      (("" (inst?)
        (("" (assert)
          (("" (hide -3)
            (("" (lemma "vars_subterm_uni")
              (("" (inst -1 "X" "s" "t") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prop_subterm_subterm formula-decl nil term_properties nil)
    (vars_subterm_uni formula-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (var_flatten_pair_implies_var 0
  (var_flatten_pair_implies_var-1 nil 3830007811
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "flatten_pair" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (rewrite "lst2set_append_mem")
                  (("1" (expand "vars" 1)
                    (("1" (assert)
                      (("1" (expand "member" 1)
                        (("1" (expand "union" 1)
                          (("1" (prop)
                            (("1" (inst -3 "term1(t)")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst -3 "term2(t)")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (lst2set_append_mem formula-decl nil list_theory nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (flatten_pair def-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (list2set def-decl "set[T]" list2set nil)
    (list type-decl nil list_adt nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (flatten_pair_not_pair 0
  (flatten_pair_not_pair-1 nil 3834157982
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "flatten_pair" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (rewrite "member_append_uni")
                    (("1" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (prop)
                          (("1" (inst -1 "s") (("1" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (prop)
                          (("1" (inst -1 "s") (("1" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_append_uni formula-decl nil list_theory nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (flatten_pair def-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (flatten_pair_subterms 0
  (flatten_pair_subterms-1 nil 3834158081
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "flatten_pair" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (rewrite "member_append_uni")
                    (("1" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (replace -1)
                        (("1" (rewrite "subterm_reflexive") nil nil))
                        nil)
                       ("2" (expand "member" -1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subterm_reflexive formula-decl nil term_properties nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_append_uni formula-decl nil list_theory nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (flatten_pair def-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (flatten_pair_size 0
  (flatten_pair_size-1 nil 3834158471
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 ("t"))
      (("" (prop)
        (("" (skeep)
          (("" (expand "flatten_pair" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (rewrite "member_append_uni")
                    (("1" (prop)
                      (("1" (inst -3 "term1(t)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (inst -3 "term2(t)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (replace -1) (("1" (assert) nil nil)) nil)
                       ("2" (expand "member" -1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_append_uni formula-decl nil list_theory nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (<= const-decl "bool" reals nil)
    (flatten_pair def-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (im_under_var 0
  (im_under_var-1 nil 3830007403
   ("" (skeep)
    (("" (expand "im_under?" -1)
      (("" (expand "im_under" -1)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "vars" 1)
              (("1" (assert)
                (("1" (rewrite "var_flatten_pair_implies_var") nil
                  nil))
                nil))
              nil)
             ("2" (expand "vars" 2)
              (("2" (assert)
                (("2" (lemma "mem_union_map[term, variable]")
                  (("2" (inst? -1)
                    (("2" (assert)
                      (("2" (hide 3)
                        (("2" (inst 1 "variable(X)")
                          (("2" (prop)
                            (("1" (rewrite "mem_lst2set_2") nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (mem_union_map formula-decl nil map_theory nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (mem_lst2set_2 formula-decl nil list_theory nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (var_flatten_pair_implies_var formula-decl nil term_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil term_properties nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil))
   shostak))
 (im_under_not_pair 0
  (im_under_not_pair-1 nil 3830008862 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (member const-decl "bool" sets nil))
   shostak))
 (im_under_implies_func 0
  (im_under_implies_func-1 nil 3830008874 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (variable type-eq-decl nil term_properties nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (constant type-eq-decl nil term_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (member const-decl "bool" sets nil)
    (func? const-decl "bool" term_properties nil))
   shostak))
 (im_under_subterm 0
  (im_under_subterm-1 nil 3835371221
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (expand "im_under?" -2)
            (("" (expand "im_under" -2)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (use "mem_lst2set_2[term]")
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (expand "flatten_pair" -1)
                            (("1" (lift-if)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (rewrite "member_append_uni")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (lemma "term_app_eta")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst
                                             -5
                                             "app(f_sym(t), term1(arg(t)))")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst -1 "X")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand
                                                     "subterms"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       ("member"
                                                        "union")
                                                       -1)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "member"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "singleton"
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "subterms"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "union"
                                                               1)
                                                              (("2"
                                                                (prop)
                                                                (("2"
                                                                  (expand
                                                                   "member"
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "subterms"
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "union"
                                                                         2)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "im_under?"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "im_under"
                                                       1)
                                                      (("2"
                                                        (rewrite
                                                         "mem_lst2set")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         -4
                                         "app(f_sym(t), term2(arg(t)))")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (expand "im_under?" 1)
                                                (("2"
                                                  (expand "im_under" 1)
                                                  (("2"
                                                    (rewrite
                                                     "mem_lst2set")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "member" -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (lemma "term_app_eta")
                                        (("1"
                                          (hide -4)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (prop)
                        (("1" (lemma "mem_lst2set_2[term]")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "subterms" 2)
                                  (("1"
                                    (expand "member" 2)
                                    (("1"
                                      (expand "union" 2 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (rewrite "mem_union_map")
                                          (("1"
                                            (inst 3 "variable(X)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "subterm_reflexive")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((im_under def-decl
     "finite_set[term[constant, variable, f_symbol, ac_symbol]]"
     term_properties nil)
    (mem_lst2set_2 formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (flatten_pair def-decl "args" term_properties nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (member def-decl "bool" list_props nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (mem_lst2set formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_finite_union1 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (app adt-constructor-decl "[[f_symbol, term] -> (app?)]" term_adt
     nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (member_append_uni formula-decl nil list_theory nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (mem_union_map formula-decl nil map_theory nil)
    (subterm_reflexive formula-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (variable adt-constructor-decl "[variable -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (same_func_sym 0
  (same_func_sym-1 nil 3832520412 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (same_func? const-decl "bool" term_properties nil))
   shostak))
 (same_func_trans 0
  (same_func_trans-1 nil 3832612386 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (same_func? const-decl "bool" term_properties nil))
   shostak))
 (same_func_dif_func 0
  (same_func_dif_func-1 nil 3833055504 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (same_func? const-decl "bool" term_properties nil)
    (dif_func? const-decl "bool" term_properties nil))
   shostak))
 (dif_func_sym 0
  (dif_func_sym-1 nil 3833132767 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (dif_func? const-decl "bool" term_properties nil))
   shostak))
 (cond_dif_func 0
  (cond_dif_func-1 nil 3833055518 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (func? const-decl "bool" term_properties nil)
    (ord const-decl "upto(5)" term_adt nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sym const-decl "string" term_properties nil)
    (dif_func? const-decl "bool" term_properties nil)
    (same_func? const-decl "bool" term_properties nil))
   shostak))
 (size2_ge0 0
  (size2_ge0-1 nil 3842354379
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (lemma "term_opt")
          (("" (inst?)
            (("" (prop)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil)
               ("6" (expand "size2" 1)
                (("6" (lift-if)
                  (("6" (assert)
                    (("6" (name-replace "f" "ac_sym(t)")
                      (("6" (lemma "num_arg_ge1")
                        (("6" (inst?)
                          (("6" (inst -1 "t")
                            (("6" (expand "get_args" 1)
                              (("6"
                                (expand "from_min2max" 1)
                                (("6"
                                  (assert)
                                  (("6"
                                    (lift-if)
                                    (("6"
                                      (prop)
                                      (("1"
                                        (expand "map" 1 2)
                                        (("1"
                                          (expand "map" 1)
                                          (("1"
                                            (expand "sum" 1)
                                            (("1"
                                              (inst
                                               -5
                                               "select(f, t)(1)")
                                              (("1"
                                                (prop)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (lemma
                                                   "ac_select_size")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 1)
                                        (("2"
                                          (expand "map" 1 2)
                                          (("2"
                                            (expand "map" 1 1)
                                            (("2"
                                              (expand "sum" 1)
                                              (("2"
                                                (inst
                                                 -4
                                                 "select(f, t)(1)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "ac_select_size")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "is_ac_sym?"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "f"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term_opt formula-decl nil term_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (select def-decl "term" term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (> const-decl "bool" reals nil)
    (size2 def-decl "nat" term_properties nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (size2_get_args 0
  (size2_get_args-1 nil 3842353791
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "get_args_not_pair_ac")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -1) (("1" (grind) nil nil)) nil)
                 ("2" (lemma "term_pair_eta")
                  (("2" (inst -1 "t")
                    (("2" (replace -1 1 :dir rl)
                      (("2" (rewrite "get_args_pair")
                        (("2" (rewrite "map_append2")
                          (("2" (rewrite "sum_append")
                            (("2" (expand "size2" 1 1)
                              (("2"
                                (inst-cp -3 "term1(t)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "f")
                                    (("1"
                                      (inst -4 "term2(t)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst -1 "f")
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "is_ac_sym?" -1)
                  (("3" (prop)
                    (("3" (expand "size2" 1 1) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_ac_sym? const-decl "bool" term_properties nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (map_append2 formula-decl nil map_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sum_append formula-decl nil list_nat_theory nil)
    (get_args_pair formula-decl nil term_properties nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_args_not_pair_ac formula-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (sum def-decl "nat" list_nat_theory nil)
    (list type-decl nil list_adt nil)
    (size2 def-decl "nat" term_properties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (well_formed_args 0
  (well_formed_args-1 nil 3847224613
   ("" (skolem 1 "args1")
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "well_formed?" -1)
          (("1" (expand "well_formed?" 1)
            (("1" (prop)
              (("1" (inst -2 "t") (("1" (assert) nil nil)) nil)
               ("2" (skolem 1 "ti")
                (("2" (prop)
                  (("2" (inst -3 "ti")
                    (("2" (assert)
                      (("2" (rewrite "subterm_args")
                        (("2" (inst 2 "t") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "well_formed?" 1)
        (("2" (skeep)
          (("2" (prop)
            (("1" (rewrite "subterm_args")
              (("1" (skolem -1 "t1")
                (("1" (prop)
                  (("1" (inst -4 "t1") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "t") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (subterm_args formula-decl nil term_properties nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (well_formed_get_args 0
  (well_formed_get_args-1 nil 3846959249
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skolem 1 "t1")
        (("" (prop)
          (("1" (expand "well_formed?" -3)
            (("1" (assert)
              (("1" (prop)
                (("1" (inst -3 "t1")
                  (("1" (assert)
                    (("1" (rewrite "subterm_args" -1)
                      (("1" (skolem -1 "t1S")
                        (("1" (flatten)
                          (("1" (lemma "get_args_subterms")
                            (("1" (inst -1 "f" "t1S" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "t1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "get_args_mem_not_pair") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (constant type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (subterm_args formula-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (args type-eq-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (subset? const-decl "bool" sets nil)
    (get_args_subterms formula-decl nil term_properties nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil))
   shostak))
 (alm_well_formed_get_args 0
  (alm_well_formed_get_args-1 nil 3849906793
   ("" (skeep)
    (("" (expand "well_formed?" 1)
      (("" (skolem 1 "t1")
        (("" (prop)
          (("1" (expand "alm_well_formed?" -3)
            (("1" (flatten)
              (("1" (inst -3 "t1")
                (("1" (assert)
                  (("1" (prop)
                    (("1" (use "subterm_args")
                      (("1" (assert)
                        (("1" (skolem -1 "t1S")
                          (("1" (flatten)
                            (("1" (use "get_args_subterms")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "subset?" -1)
                                  (("1"
                                    (inst -1 "t1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "subterm_args")
                      (("2" (assert)
                        (("2" (skolem -1 "t1S")
                          (("2" (flatten)
                            (("2" (hide -4)
                              (("2"
                                (use "subterm_size")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "get_args_size")
                                    (("2"
                                      (inst -1 "f" "t1S" "t")
                                      (("2"
                                        (replace -5)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "get_args_mem_not_pair") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get_args_size formula-decl nil term_properties nil)
    (subterm_size formula-decl nil term_properties nil)
    (subterm_args formula-decl nil term_properties nil)
    (string type-eq-decl nil strings nil)
    (args type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (get_args_subterms formula-decl nil term_properties nil)
    (subset? const-decl "bool" sets nil)
    (variable type-eq-decl nil term_properties nil)
    (constant type-eq-decl nil term_properties nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (get_args_mem_not_pair formula-decl nil term_properties nil))
   shostak)))

