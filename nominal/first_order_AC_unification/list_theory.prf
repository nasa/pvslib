(list_theory
 (from_min2max_TCC1 0
  (from_min2max_TCC1-1 nil 3809199008 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (from_min2max subtype
    "real_defs.max(0, (number_fields.-)(list_theory.max, list_theory.min))"
    "naturalnumber")))
 (from_min2max_TCC2 0
  (from_min2max_TCC2-1 nil 3809199008 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (from_min2max termination
    "list_theory.from_min2max((number_fields.+)(list_theory.min, 1), list_theory.max)"
    "nil")))
 (increment_TCC1 0
  (increment_TCC1-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (increment subtype "list_theory.lst_nat"
    "(list_adt[numfield].cons?)")))
 (increment_TCC2 0
  (increment_TCC2-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (increment subtype "list_adt[numfield].cdr(list_theory.lst_nat)"
    "list[nat]")))
 (increment_TCC3 0
  (increment_TCC3-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (increment subtype "list_theory.lst_nat" "(list_adt[nat].cons?)")))
 (increment_TCC4 0
  (increment_TCC4-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   SHOSTAK
   (increment subtype "(number_fields.-)(list_theory.n, 1)" "nat")))
 (increment_TCC5 0
  (increment_TCC5-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (increment termination
    "list_theory.increment(list_adt[nat].cdr(list_theory.lst_nat), (number_fields.-)(list_theory.n, 1), list_theory.inc)"
    "nil")))
 (increment_TCC6 0
  (increment_TCC6-1 nil 3804618454 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (increment subtype "list_theory.lst_nat" "(list_adt[nat].cons?)")))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3808932117 ("" (subtype-tcc) nil nil) nil nil
   (apply subtype "list_theory.lst2"
          "(list_adt[list_theory.T].cons?)")))
 (apply_TCC2 0
  (apply_TCC2-1 nil 3808932117 ("" (subtype-tcc) nil nil) nil nil
   (apply subtype "list_theory.lst1"
          "(list_adt[list_theory.T].cons?)")))
 (apply_TCC3 0
  (apply_TCC3-1 nil 3808932117 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (apply termination
          "list_theory.apply(list_adt[list_theory.T].cdr(list_theory.lst1), list_adt[list_theory.T].cdr(list_theory.lst2), list_theory.f)"
          "nil")))
 (apply_TCC4 0
  (apply_TCC4-1 nil 3808932117 ("" (subtype-tcc) nil nil) nil nil
   (apply subtype "list_theory.lst1"
          "(list_adt[list_theory.T].cons?)")))
 (cartesian_product_aux_TCC1 0
  (cartesian_product_aux_TCC1-1 nil 3803367839 ("" (tcc) nil nil) nil
   nil
   (cartesian_product_aux subtype "list_theory.lst2"
    "(list_adt[list_theory.T].cons?)")))
 (cartesian_product_aux_TCC2 0
  (cartesian_product_aux_TCC2-1 nil 3803367839 ("" (tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (cartesian_product_aux termination
    "list_theory.cartesian_product_aux(list_theory.x, list_adt[list_theory.T].cdr(list_theory.lst2))"
    "nil")))
 (cartesian_product_aux_TCC3 0
  (cartesian_product_aux_TCC3-1 nil 3803367839 ("" (tcc) nil nil) nil
   nil
   (cartesian_product_aux subtype "list_theory.lst2"
    "(list_adt[list_theory.T].cons?)")))
 (cartesian_product_TCC1 0
  (cartesian_product_TCC1-1 nil 3803367839 ("" (tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (cartesian_product termination
    "list_theory.cartesian_product(list_adt[list_theory.T].cdr(list_theory.lst1), list_theory.lst2)"
    "nil")))
 (cartesian_product_TCC2 0
  (cartesian_product_TCC2-1 nil 3803367839 ("" (tcc) nil nil) nil nil
   (cartesian_product subtype "list_theory.lst1"
    "(list_adt[list_theory.T].cons?)")))
 (finset2list_TCC1 0
  (finset2list_TCC2-1 nil 3830365958 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (finset2list subtype "list_theory.fin_set"
    "(sets[list_theory.T].nonempty?)")))
 (finset2list_TCC2 0
  (finset2list_TCC3-1 nil 3830365958
   ("" (skeep)
    (("" (lemma "card_rest[T]")
      (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((T formal-type-decl nil list_theory nil)
    (card_rest formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (finset2list termination
    "list_theory.finset2list(sets[list_theory.T].rest(list_theory.fin_set))"
    "nil")))
 (flatten_TCC1 0
  (flatten_TCC1-1 nil 3803367839 ("" (tcc) nil nil) nil nil
   (flatten subtype "list_theory.lst_of_lsts"
            "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (flatten_TCC2 0
  (flatten_TCC2-1 nil 3803367839 ("" (tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (flatten termination
            "list_theory.flatten(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts))"
            "nil")))
 (flatten_TCC3 0
  (flatten_TCC3-1 nil 3803367839 ("" (tcc) nil nil) nil nil
   (flatten subtype "list_theory.lst_of_lsts"
            "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (ind_flatten_TCC1 0
  (ind_flatten_TCC1-1 nil 3807442007 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (ind_flatten subtype "list_theory.lst_of_lsts"
    "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (ind_flatten_TCC2 0
  (ind_flatten_TCC2-1 nil 3807442007 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ind_flatten subtype "(number_fields.-)(list_theory.i, 1)" "nat")))
 (ind_flatten_TCC3 0
  (ind_flatten_TCC3-1 nil 3807442007
   ("" (skeep)
    (("" (skeep)
      (("" (expand "<<" 3)
        (("" (lift-if) (("" (prop) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (ind_flatten termination
    "list_theory.ind_flatten(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts), (number_fields.-)(list_theory.i, 1), list_theory.j)"
    "nil")))
 (ind_flatten_TCC4 0
  (ind_flatten_TCC4-1 nil 3807444627 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (ind_flatten subtype "list_theory.lst_of_lsts"
    "(list_adt[list_adt[list_theory.T].list].cons?)")))
 (no_null_entries?_TCC1 0
  (no_null_entries?_TCC1-1 nil 3809117233
   ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (no_null_entries? termination
    "list_theory.no_null_entries?(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts))"
    "nil")))
 (count_elem_TCC1 0
  (count_elem_TCC1-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (count_elem termination
    "list_theory.count_elem(list_theory.lst1, list_theory.new_coef, list_adt[list_theory.T].cdr(list_theory.lst2), list_theory.equal?)"
    "nil")))
 (count_elem_TCC2 0
  (count_elem_TCC2-1 nil 3803367839 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (count_elem termination
    "list_theory.count_elem(list_theory.new_lst1, list_theory.new_coef, list_adt[list_theory.T].cdr(list_theory.lst2), list_theory.equal?)"
    "nil")))
 (get_repeat_lst_TCC1 0
  (get_repeat_lst_TCC1-1 nil 3804618454 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_repeat_lst subtype "(number_fields.-)(list_theory.n, 1)"
    "nat")))
 (get_repeat_lst_TCC2 0
  (get_repeat_lst_TCC2-1 nil 3804618454 ("" (tcc) nil nil) nil nil
   (get_repeat_lst termination
    "list_theory.get_repeat_lst(list_theory.x, (number_fields.-)(list_theory.n, 1))"
    "nil")))
 (select_greater_TCC1 0
  (select_greater_TCC1-1 nil 3804618454 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (select_greater termination
    "list_theory.select_greater(list_adt[nat].cdr(list_theory.lst_nat))"
    "nil")))
 (matrix?_TCC1 0
  (matrix?_TCC1-1 nil 3808145793 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (matrix? termination
    "list_theory.matrix?(list_adt[list_adt[list_theory.T].list].cdr(list_theory.lst_of_lsts), list_theory.n)"
    "nil")))
 (get_col_i_TCC1 0
  (get_col_i_TCC1-1 nil 3804618454 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   SHOSTAK
   (get_col_i subtype "(number_fields.-)(list_theory.i, 1)"
    "below[length[T](lst)]")))
 (get_lst_after_n_TCC1 0
  (get_lst_after_n_TCC1-1 nil 3805569188 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_lst_after_n subtype "(number_fields.-)(list_theory.n, 1)"
    "nat")))
 (get_lst_after_n_TCC2 0
  (get_lst_after_n_TCC2-1 nil 3805569188 ("" (tcc) nil nil) nil nil
   (get_lst_after_n termination
    "list_theory.get_lst_after_n(list_adt[list_theory.T].cdr(list_theory.lst), (number_fields.-)(list_theory.n, 1))"
    "nil")))
 (snd_proj_TCC1 0
  (snd_proj_TCC1-1 nil 3805569188 ("" (tcc) nil nil) nil nil
   (snd_proj subtype "list_theory.lst_pair"
    "(list_adt[[list_theory.T, list_theory.T]].cons?)")))
 (snd_proj_TCC2 0
  (snd_proj_TCC2-1 nil 3805569188 ("" (tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)) nil
   (snd_proj termination
    "list_theory.snd_proj(list_adt[[list_theory.T, list_theory.T]].cdr(list_theory.lst_pair))"
    "nil")))
 (snd_proj_TCC3 0
  (snd_proj_TCC3-1 nil 3805569188 ("" (tcc) nil nil) nil nil
   (snd_proj subtype "list_theory.lst_pair"
    "(list_adt[[list_theory.T, list_theory.T]].cons?)")))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3847733941 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (remove termination
           "list_theory.remove(list_adt[list_theory.T].cdr(list_theory.lst), list_theory.x, list_theory.equal?)"
     "nil")))
 (remove_TCC2 0
  (remove_TCC2-1 nil 3847733941 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (remove termination
           "list_theory.remove(list_adt[list_theory.T].cdr(list_theory.lst), list_theory.x, list_theory.equal?)"
     "nil")))
 (remove_elem_len 0
  (remove_elem_len-1 nil 3847834353
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_TCC3 0
  (remove_TCC3-1 nil 3847887267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil))
   nil
   (remove subtype "list_theory.lst"
     "(list_adt[list_theory.T].cons?)")))
 (remove_TCC4 0
  (remove_TCC4-1 nil 3847887267 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil))
   nil
   (remove termination
           "list_theory.remove(list_adt[list_theory.T].cdr(list_theory.lst), list_theory.lst1, list_theory.equal?)"
     "nil")))
 (remove_TCC5 0
  (remove_TCC5-1 nil 3847887267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil))
   nil
   (remove subtype "list_theory.lst"
     "(list_adt[list_theory.T].cons?)")))
 (remove_TCC6 0
  (remove_TCC6-1 nil 3847887267 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (remove termination
           "list_theory.remove(list_adt[list_theory.T].cdr(list_theory.lst), list_theory.lst1, list_theory.equal?)"
     "nil")))
 (remove_TCC7 0
  (remove_TCC1-1 nil 3807478748 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (remove subtype "(number_fields.-)(list_theory.i, 1)" "nat")))
 (num_dif_TCC1 0
  (num_dif_TCC1-1 nil 3847782567
   ("" (skeep)
    (("" (expand "remove" 2)
      (("" (lift-if)
        (("" (prop)
          (("1" (lemma "remove_elem_len")
            (("1" (inst?) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred "equal?")
            (("2" (expand "equivalence?" -1)
              (("2" (flatten)
                (("2" (expand "reflexive?" -1)
                  (("2" (inst -1 "car(lst)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[T]" list_theory nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (num_dif termination
    "list_theory.num_dif(list_theory.remove(list_theory.lst, list_adt[list_theory.T].car(list_theory.lst), list_theory.equal?), list_theory.equal?)"
    "nil")))
 (count_elem2_TCC1 0
  (count_elem2_TCC1-1 nil 3847737234
   ("" (skeep)
    (("" (skeep)
      (("" (expand "remove" 2 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (use "remove_elem_len") (("1" (grind) nil nil)) nil)
             ("2" (replace -1 :dir rl)
              (("2" (typepred "equal?")
                (("2" (expand "equivalence?" -1)
                  (("2" (flatten)
                    (("2" (expand "reflexive?" -1)
                      (("2" (inst -1 "x") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_theory nil))
   nil
   (count_elem2 termination
    "list_theory.count_elem2(list_theory.remove(list_theory.lst, list_theory.x, list_theory.equal?), list_theory.equal?)"
    "nil")))
 (member_append_uni 0
  (member_append_uni-1 nil 3803909084
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" 2 1)
                  (("2" (case "x = car(lst1)")
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (inst -1 "cdr(lst1)")
                        (("2" (prop)
                          (("1" (inst -1 "lst2" "x")
                            (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (member_append_uni_nat 0
  (member_append_uni_nat-1 nil 3808938183
   ("" (induct "lst_nat1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (member_append_uni2 0
  (member_append_uni2-1 nil 3803910765
   ("" (measure-induct "length(lst_pair1)" "lst_pair1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skolem 1 ("lst2" "x" "y"))
          (("" (expand "append" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" 2 1)
                  (("2" (inst -1 "cdr(lst1)")
                    (("2" (prop)
                      (("1" (inst -1 "lst2" "x" "y")
                        (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (null_append_uni 0
  (null_append_uni-1 nil 3805570561
   ("" (induct "lst1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (null_append_uni_nat 0
  (null_append_uni_nat-1 nil 3805812221
   ("" (induct "lst_nat1")
    (("1" (skeep)
      (("1" (expand "append" 1) (("1" (propax) nil nil)) nil)) nil)
     ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (cdr_append_uni_TCC1 0
  (cdr_append_uni_TCC1-1 nil 3805618390 ("" (tcc) nil nil)
   ((append def-decl "list[T]" list_props nil)) nil
   (cdr_append_uni subtype
    "list_props[list_theory.T].append(list_theory.lst1, list_theory.lst2)"
    "(list_adt[list_theory.T].cons?)")))
 (cdr_append_uni 0
  (cdr_append_uni-1 nil 3805618391
   ("" (induct "lst1")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil))
   SHOSTAK))
 (equal_append_implies_null 0
  (equal_append_implies_null-1 nil 3832000798
   ("" (skeep)
    (("" (lemma "length_append[T]")
      (("" (inst -1 "lst2" "lst1")
        (("" (replace -2 -1 :dir rl) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((T formal-type-decl nil list_theory nil)
    (length_append formula-decl nil list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list type-decl nil list_adt nil))
   shostak))
 (equal_append_implies_equal 0
  (equal_append_implies_equal-1 nil 3832013737
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "append" -1 1)
        (("1" (lemma "length_append[T]")
          (("1" (inst? -1)
            (("1" (replace -2 :dir rl) (("1" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" -2 1)
            (("2" (expand "append" -2 2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -3)
                    (("1" (grind)
                      (("1" (lemma "length_append[T]")
                        (("1" (inst? -1)
                          (("1"
                            (case "length(cons(hd, append(tail, lst2))) = length(lst2)")
                            (("1" (expand "length" -1 1)
                              (("1"
                                (replace -2 -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (replace -3) (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (decompose-equality -1)
                    (("2" (inst -3 "lst2" "cdr(lst3)")
                      (("2" (assert)
                        (("2" (grind)
                          (("2" (decompose-equality 2) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (equal_append_implies_equal2 0
  (equal_append_implies_equal2-1 nil 3845994697
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "length" -2)
        (("1" (lift-if) (("1" (assert) (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -3)
            (("2" (lift-if)
              (("2" (split -3)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (inst -2 "lst2" "cdr(lst3)" "lst4")
                    (("2" (expand "append" -3)
                      (("2" (assert)
                        (("2" (decompose-equality -3)
                          (("2" (assert)
                            (("2" (grind)
                              (("2" (decompose-equality 2) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (lst2set_append_mem 0
  (lst2set_append_mem-1 nil 3830008330
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (lst2set_is_finite 0
  (lst2set_is_finite-1 nil 3830467295
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (expand "list2set" 1)
          (("2" (lemma "finite_add[T]") (("2" (inst? -1) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tail skolem-const-decl "list[T]" list_theory nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list2set def-decl "set[T]" list2set nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (set_of_lst_is_finite 0
  (set_of_lst_is_finite-1 nil 3834825607
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (case "null?(lst)")
          (("1" (case "{x | member(x, lst)} = emptyset")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)
             ("2" (hide 2 -2)
              (("2" (lemma "subset_antisymmetric[T]")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "{x | member(x, lst)} = add(car(lst), {x | member(x, cdr(lst))})")
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (rewrite "finite_add")
                  (("1" (inst -1 "cdr(lst)") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3 -1)
              (("2" (lemma "subset_antisymmetric[T]")
                (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset_antisymmetric formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (injective? const-decl "bool" functions nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member def-decl "bool" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (nth_append_uni_TCC1 0
  (nth_append_uni_TCC1-1 nil 3805617232
   ("" (skeep) (("" (rewrite "length_append") nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil))
   SHOSTAK
   (nth_append_uni subtype "list_theory.i"
    "below[length[T](append[T](lst1, lst2))]")))
 (nth_append_uni_TCC2 0
  (nth_append_uni_TCC2-1 nil 3805617232 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (nth_append_uni subtype
    "(number_fields.-)(list_theory.i, list_props[list_theory.T].length(list_theory.lst1))"
    "below[length[T](lst2)]")))
 (nth_append_uni 0
  (nth_append_uni-1 nil 3805617233
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "nth" 1 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (hide -3)
                      (("1" (grind)
                        (("1" (lemma "list_cons_eta[T]")
                          (("1" (inst -1 "lst1")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "cdr_append_uni")
                      (("2" (inst? -1)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (replace -1 2 nil t)
                              (("1"
                                (case "null?(lst1)")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "nth" 3 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (reveal -2)
                                      (("2"
                                        (inst -1 "cdr(lst1)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst -1 "i-1" "lst2")
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1 4)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (case "lst1 = null")
                        (("1" (replace -1 1)
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (expand "append" 1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (case "null?(lst1)")
                        (("1" (expand "append" 2 1)
                          (("1" (assert)
                            (("1" (expand "length" 2)
                              (("1"
                                (expand "nth" 2 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "cdr_append_uni")
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (replace -1 3)
                                (("2"
                                  (inst -2 "cdr(lst1)")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "i-1" "lst2")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -2 3)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -1 4)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "length_append") nil nil)) nil))
      nil))
    nil)
   ((length_append formula-decl nil list_props nil)
    (cdr_append_uni formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (equal_lst_nth_TCC1 0
  (equal_lst_nth_TCC1-1 nil 3805573073 ("" (tcc) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (equal_lst_nth subtype "list_theory.n" "below[length[T](lst2)]")))
 (equal_lst_nth 0
  (equal_lst_nth-1 nil 3805573130
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (flatten)
        (("1" (skeep)
          (("1" (case "null?(lst1)")
            (("1" (grind) nil nil)
             ("2" (case "lst1 = cons(car(lst1), cdr(lst1))")
              (("1" (replace -1 2)
                (("1" (hide -1)
                  (("1" (case "null?(lst2)")
                    (("1" (grind) nil nil)
                     ("2" (case "lst2 = cons(car(lst2), cdr(lst2))")
                      (("1" (replace -1 3)
                        (("1" (hide -1)
                          (("1" (inst -3 "0")
                            (("1" (expand "nth" -3)
                              (("1"
                                (inst -1 "cdr(lst1)")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "cdr(lst2)")
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (reveal -3)
                                          (("3"
                                            (inst -1 "n+1")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (typepred "n")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "list_cons_eta[T]")
                          (("2" (inst? -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (lemma "list_cons_eta[T]")
                  (("2" (grind) nil nil)) nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "below[length(cdr(lst1))]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lst1 skolem-const-decl "list[T]" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (member_nth_uni 0
  (member_nth_uni-1 nil 3804680155
   ("" (induct "lst")
    (("1" (skeep) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst? -1)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (expand "member" 2)
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "length" -1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (member_nth_uni2 0
  (member_nth_uni2-1 nil 3805569744
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" 1)
            (("2" (assert)
              (("2" (case "x = head")
                (("1" (assert)
                  (("1" (inst 1 "0")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "member(x, tail)")
                    (("1" (assert)
                      (("1" (inst -2 "x")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (inst 2 "n+1")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -1 "x")
                          (("2" (assert)
                            (("2" (case "n = 0")
                              (("1" (grind) nil nil)
                               ("2"
                                (inst 4 "n-1")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (grind)
                                  (("2"
                                    (typepred "n")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n skolem-const-decl "below[length(cons(head, tail))]" list_theory
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "below[length(tail)]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (tail skolem-const-decl "list[T]" list_theory nil)
    (head skolem-const-decl "T" list_theory nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (dot_product_sym 0
  (dot_product_sym-1 nil 3809284971
   ("" (induct "lst_nat1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dot_product" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "dot_product" 2 2)
                  (("2" (lift-if)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (dot_product_sum_lsts 0
  (dot_product_sum_lsts-1 nil 3809199014
   ("" (induct "coef")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "sum_lsts" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "dot_product" 1 1)
                  (("1" (expand "dot_product" 1 1)
                    (("1" (assert)
                      (("1" (expand "dot_product" 1)
                        (("1" (lift-if) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "dot_product" 1 1)
                  (("2" (expand "dot_product" 1 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "dot_product" 1)
                          (("2" (lift-if) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "dot_product" 3 1)
                  (("3" (expand "dot_product" 3 2)
                    (("3" (assert)
                      (("3" (expand "dot_product" 3 3)
                        (("3" (inst -1 "cdr(lst_nat1)" "cdr(lst_nat2)")
                          (("3" (assert)
                            (("3" (expand "length" -1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sum_lsts def-decl "list[nat]" list_nat_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (dot_product_zero_lst 0
  (dot_product_zero_lst-1 nil 3809245361
   ("" (induct "lst_nat1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "dot_product" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("2" (inst -2 "hd")
                  (("2" (expand "member" -2)
                    (("2" (assert)
                      (("2" (replace -2 2)
                        (("2" (assert)
                          (("2" (inst? -1)
                            (("2" (assert)
                              (("2"
                                (reveal -2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -1 "n")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (cart_prod_aux_len 0
  (cart_prod_aux_len-1 nil 3845994567
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (cart_prod_aux_mem 0
  (cart_prod_aux_mem-1 nil 3803911867
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product_aux" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" 2 2)
                  (("2" (inst -1 "cdr(lst)")
                    (("2" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (cart_prod_aux_mem2 0
  (cart_prod_aux_mem2-1 nil 3803912731
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product_aux" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "member" -1)
                  (("2" (assert)
                    (("2" (inst -2 "cdr(lst)") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (cart_prod_aux_nth_TCC1 0
  (cart_prod_aux_nth_TCC1-1 nil 3845994596
   ("" (skeep)
    (("" (use "cart_prod_aux_len") (("" (assert) nil nil)) nil)) nil)
   ((cart_prod_aux_len formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cart_prod_aux_nth subtype "list_theory.i"
    "below[length[[T, T]](cartesian_product_aux(x, lst))]")))
 (cart_prod_aux_nth 0
  (cart_prod_aux_nth-1 nil 3845994600
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "cartesian_product_aux" 1)
            (("2" (expand "nth" 1)
              (("2" (lift-if)
                (("2" (assert)
                  (("2" (prop)
                    (("2" (inst -1 "i-1" "x")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "cart_prod_aux_len") nil nil)) nil))
      nil))
    nil)
   ((cart_prod_aux_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil))
   shostak))
 (cart_prod_mem 0
  (cart_prod_mem-1 nil 3803908371
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "cartesian_product" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (lemma "member_append_uni2")
                  (("2" (inst? -1)
                    (("2" (replace -1 2)
                      (("2" (hide -1)
                        (("2" (case "x = car(lst1)")
                          (("1" (assert)
                            (("1" (expand "member" 2 1)
                              (("1"
                                (lemma "cart_prod_aux_mem")
                                (("1"
                                  (inst -1 "lst2" "x" "y")
                                  (("1"
                                    (replace -1 2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "member" 3 1)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "cdr(lst1)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "lst2" "x" "y")
                                      (("1"
                                        (replace -1 3 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma
                                             "cart_prod_aux_mem2")
                                            (("1"
                                              (inst? -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni2 formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cart_prod_aux_mem formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cart_prod_aux_mem2 formula-decl nil list_theory nil)
    (cartesian_product_aux def-decl "list[[T, T]]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (cartesian_product def-decl "list[[T, T]]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (finset2list_mem 0
  (finset2list_mem-1 nil 3830697835
   ("" (measure-induct "card(fin_set)" "fin_set")
    (("" (skolem 1 "fin_set")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "finset2list" -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (inst -2 "rest(fin_set)")
                        (("2" (prop)
                          (("1" (inst -1 "x")
                            (("1" (assert) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "card_rest")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "finset2list" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (lemma "choose_rest_or[T]")
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (inst -3 "rest(fin_set)")
                            (("1" (prop)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "card_rest")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose_rest_or formula-decl nil sets_lemmas nil)
    (empty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_rest formula-decl nil finite_sets nil)
    (rest const-decl "set" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (finset2list def-decl "list[T]" list_theory nil)
    (member const-decl "bool" sets nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (null_flatten_nth 0
  (null_flatten_nth-1 nil 3807298117
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" -3)
            (("2" (rewrite "null_append_uni")
              (("2" (flatten)
                (("2" (expand "nth" 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("2" (inst -1 "i-1")
                        (("1" (grind) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_append_uni formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (flatten def-decl "list[T]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (flatten_append 0
  (flatten_append-1 nil 3807646186
   ("" (induct "lst_of_lsts1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1 2)
            (("2" (expand "append" 1 1)
              (("2" (expand "flatten" 1 1)
                (("2" (inst? -1)
                  (("2" (replace -1 1)
                    (("2" (rewrite "append_assoc") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (flatten def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (len0_ind_flatten 0
  (len0_ind_flatten-1 nil 3807452554
   ("" (induct "lst_of_lsts")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "ind_flatten" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "flatten" -3)
                  (("1" (rewrite "length_append")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (expand "flatten" -2)
                  (("2" (rewrite "length_append")
                    (("2" (assert)
                      (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (ind_flatten def-decl "nat" list_theory nil)
    (flatten def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (ind_flatten_len 0
  (ind_flatten_len-1 nil 3807444911
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1)
            (("2" (rewrite "length_append")
              (("2" (expand "ind_flatten" 1)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil)
                       ("3" (expand "nth" -3)
                        (("3" (assert)
                          (("3" (inst? -1) (("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (flatten def-decl "list[T]" list_theory nil)
    (ind_flatten def-decl "nat" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (nth_flatten_TCC1 0
  (nth_flatten_TCC1-1 nil 3807442007
   ("" (skeep)
    (("" (lemma "ind_flatten_len")
      (("" (inst -1 "i" "j" "lst_of_lsts") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ind_flatten_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (nth_flatten subtype
    "list_theory.ind_flatten(list_theory.lst_of_lsts, list_theory.i, list_theory.j)"
    "below[length[T](flatten(lst_of_lsts))]")))
 (nth_flatten 0
  (nth_flatten-1 nil 3807442034
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "ind_flatten" 1)
                  (("1" (assert)
                    (("1" (expand "nth" -4)
                      (("1" (assert)
                        (("1" (expand "flatten" 1)
                          (("1" (lemma "nth_append_uni")
                            (("1" (inst -1 "j" "lst" "flatten(tail)")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "flatten" 2)
                  (("2" (expand "ind_flatten" 2)
                    (("2" (assert)
                      (("2" (lemma "nth_append_uni")
                        (("2" (inst? -1)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (inst? -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (lemma "ind_flatten_len")
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2 4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "ind_flatten_len")
          (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ind_flatten_len formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (ind_flatten def-decl "nat" list_theory nil)
    (flatten def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (flatten_mem 0
  (flatten_mem-1 nil 3808406898
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("lst" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" -2)
            (("2" (rewrite "member_append_uni")
              (("2" (prop)
                (("1" (inst 1 "0")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (inst -2 "x")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 1 "n+1")
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil)
                         ("2" (typepred "n") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "below[length(tail)]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (lst skolem-const-decl "list[T]" list_theory nil)
    (tail skolem-const-decl "list[list[T]]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (flatten def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (flatten_mem2 0
  (flatten_mem2-1 nil 3839167369
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1)
            (("2" (rewrite "member_append_uni")
              (("2" (prop)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (inst -2 "x")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 1 "lst") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skolem -1 "lst")
                  (("3" (prop)
                    (("3" (expand "member" -1)
                      (("3" (prop)
                        (("1" (grind) nil nil)
                         ("2" (inst -3 "x")
                          (("2" (prop)
                            (("2" (inst 1 "lst")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_append_uni formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (flatten def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (no_null_entries?_nth 0
  (no_null_entries?_nth-1 nil 3809260540
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("1" (expand "no_null_entries?" 1)
          (("1" (prop)
            (("1" (inst -3 "0") (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (inst -3 "n+1") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (no_null_entries_mem 0
  (no_null_entries_mem-1 nil 3839167529
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (no_null_entries?_mem2 0
  (no_null_entries?_mem2-1 nil 3839440277
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (flatten)
        (("3" (split 1)
          (("1" (flatten)
            (("1" (expand "no_null_entries?" 1)
              (("1" (split 1)
                (("1" (inst -2 "hd") (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (hide -3)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -1 "lst") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (expand "member" -2)
                (("2" (split -2)
                  (("1" (expand "no_null_entries?" -2)
                    (("1" (assert) nil nil)) nil)
                   ("2" (expand "no_null_entries?" -2)
                    (("2" (assert)
                      (("2" (split -2)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (inst -5 "lst")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (from_min2max_len 0
  (from_min2max_len-1 nil 3809117274
   ("" (measure-induct "max(0, n-i)" ("n" "i"))
    (("1" (skolem 1 ("n" "i"))
      (("1" (prop)
        (("1" (expand "from_min2max" 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (inst -1 "n" "i+1") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (from_min2max_len1 0
  (from_min2max_len1-1 nil 3805753929
   ("" (lemma "from_min2max_len")
    (("" (inst -1 "1" "_") (("" (skeep) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (from_min2max_len formula-decl nil list_theory nil))
   SHOSTAK))
 (from_min2max_car_TCC1 0
  (from_min2max_car_TCC1-1 nil 3805803487 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (from_min2max_car subtype
    "list_theory.from_min2max(list_theory.i, list_theory.j)"
    "(list_adt[nat].cons?)")))
 (from_min2max_car 0
  (from_min2max_car-1 nil 3805804665
   ("" (measure-induct "j" "j")
    (("1" (skolem 1 "j")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "from_min2max" 2)
            (("1" (lift-if)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (nth_from_min2max 0
  (nth_from_min2max-1 nil 3805754960
   ("" (measure-induct "n" "n")
    (("" (skolem 1 "n")
      (("" (prop)
        (("" (skeep)
          (("" (expand "from_min2max" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (expand "nth" 2)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (flatten)
                              (("2"
                                (inst -1 "n-1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (inst -1 "i+1" "j")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "from_min2max" -1)
                                        (("1"
                                          (expand "length" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (nth_from_min2max2 0
  (nth_from_min2max2-1 nil 3805988277
   ("" (skeep)
    (("" (lemma "nth_from_min2max")
      (("" (inst -1 "1" "j" "n") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((nth_from_min2max formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (from_min2max_mem 0
  (from_min2max_mem-1 nil 3830465465
   ("" (measure-induct "max(0, j-i)" ("j" "i"))
    (("1" (skolem 1 ("j" "i"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (split)
            (("1" (flatten)
              (("1" (expand "from_min2max" -1)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (hide-all-but -1) (("1" (grind) nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (inst -2 "j" "i+1")
                            (("2" (split -2)
                              (("1"
                                (inst -1 "n")
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (prop)
              (("2" (expand "from_min2max" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (inst -3 "j" "1+i")
                      (("3" (prop)
                        (("1" (inst -1 "n")
                          (("1" (split)
                            (("1" (expand "member" 2)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (from_min2max_mem2 0
  (from_min2max_mem2-1 nil 3846766109
   ("" (measure-induct "max(0, j-i)" ("j" "i"))
    (("1" (skolem 1 ("i" "j"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "from_min2max" -2)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (expand "member" -1)
                  (("3" (assert)
                    (("3" (inst -2 "i" "j+1")
                      (("3" (prop)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (<= const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (increment_len 0
  (increment_len-1 nil 3808406085
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "increment" 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "increment" 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lst_nat skolem-const-decl "list[nat]" list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (increment def-decl "list[nat]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (increment_mantains_gt0 0
  (increment_mantains_gt0-1 nil 3808937412
   ("" (induct "coef")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (skeep)
            (("2" (expand "increment" -3)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "member" -2)
                    (("1" (prop)
                      (("1" (inst -4 "hd") (("1" (grind) nil nil)) nil)
                       ("2" (inst -4 "i")
                        (("2" (expand "member" -4)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "member" -1)
                    (("2" (prop)
                      (("1" (inst -3 "hd")
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (inst -2 "n-1")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (inst -1 "i")
                              (("1" (assert) nil nil)) nil)
                             ("2" (skeep)
                              (("2"
                                (inst -3 "i!1")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (increment def-decl "list[nat]" list_theory nil)
    (> const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (increment_nth_TCC1 0
  (increment_nth_TCC1-1 nil 3847785124
   ("" (skeep) (("" (rewrite "increment_len") nil nil)) nil)
   ((increment_len formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (increment_nth subtype "list_theory.n"
    "below[length[nat](increment(coef, i, j))]")))
 (increment_nth_TCC2 0
  (increment_nth_TCC3-1 nil 3847785124
   ("" (skeep) (("" (rewrite "increment_len") nil nil)) nil)
   ((increment_len formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (increment_nth subtype "list_theory.n"
    "below[length[nat](increment(coef, i, j))]")))
 (increment_nth 0
  (increment_nth-1 nil 3847785126
   ("" (induct "coef")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (split)
            (("1" (flatten)
              (("1" (expand "increment" 1)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (flatten) (("1" (grind) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2" (inst -2 "i-1" "j" "n-1")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "increment" 2)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (prop)
                      (("1" (expand "nth" 1) (("1" (assert) nil nil))
                        nil)
                       ("2" (expand "nth" 2)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("2"
                                (inst -1 "i-1" "j" "n-1")
                                (("1" (grind) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "increment_len") nil nil)) nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "increment_len") nil nil)) nil))
      nil))
    nil)
   ((increment_len formula-decl nil list_theory nil)
    (n skolem-const-decl "nat" list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (increment def-decl "list[nat]" list_theory nil))
   shostak))
 (pos?_len 0
  (pos?_len-1 nil 3808413542
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_cor_TCC1 0
  (pos?_cor_TCC1-1 nil 3808412186
   ("" (skeep) (("" (rewrite "pos?_len") nil nil)) nil)
   ((pos?_len formula-decl nil list_theory nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (list type-decl nil list_adt nil))
   nil
   (pos?_cor subtype
    "list_theory.pos?(list_theory.x, list_theory.lst, list_theory.equal?)`2"
    "below[length[T](lst)]")))
 (pos?_cor 0
  (pos?_cor-1 nil 3808414220
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "pos?_len") nil nil)) nil)) nil))
    nil)
   ((pos?_len formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil))
   SHOSTAK))
 (pos?_cor2 0
  (pos?_cor2-1 nil 3808515431
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" -2)
            (("2" (prop)
              (("1" (expand "pos?" -4 1)
                (("1" (assert)
                  (("1" (expand "pos?" -4)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (hide -3 -4)
                          (("1" (typepred "equal?")
                            (("1" (expand "equivalence?" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "symmetric?" -2)
                                  (("1"
                                    (inst -2 "y" "hd")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "transitive?" -3)
                                        (("1"
                                          (inst -3 "x" "hd" "y")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "pos?" -4)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (expand "pos?" -4)
                          (("2" (inst -3 "equal?" "x" "y")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_equal 0
  (pos?_equal-1 nil 3808496130
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" -3)
            (("2" (prop)
              (("1" (expand "pos?" 1)
                (("1" (prop)
                  (("1" (hide 2)
                    (("1" (hide -2)
                      (("1" (typepred "equal?")
                        (("1" (expand "equivalence?" -1)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (expand "symmetric?")
                                (("1"
                                  (inst -1 "x" "y")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (expand "transitive?")
                                        (("1"
                                          (inst -2 "y" "x" "hd")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "pos?" 2)
                (("2" (prop)
                  (("2" (inst -2 "equal?" "x" "y")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_equal2 0
  (pos?_equal2-1 nil 3808506283
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "pos?" 1)
                  (("1" (assert)
                    (("1" (hide -2 2)
                      (("1" (typepred "equal?")
                        (("1" (expand "equivalence?" -1)
                          (("1" (flatten)
                            (("1" (expand "symmetric?" -2)
                              (("1"
                                (inst -2 "x" "y")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "transitive?" -3)
                                    (("1"
                                      (inst -3 "y" "x" "hd")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pos?" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 1)
                        (("1" (typepred "equal?")
                          (("1" (expand "equivalence?" -1)
                            (("1" (flatten)
                              (("1"
                                (expand "transitive?" -3)
                                (("1"
                                  (inst -3 "x" "y" "hd")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_equal3 0
  (pos?_equal3-1 nil 3836680651
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "pos?" 1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (hide -2 2)
                            (("2" (typepred "equal?")
                              (("2"
                                (expand "equivalence?" -1)
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "symmetric?" -2)
                                    (("2"
                                      (inst -2 "x" "y")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide -5)
                                          (("2"
                                            (expand "transitive?" -3)
                                            (("2"
                                              (inst -3 "y" "x" "hd")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pos?" 2 3)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (hide -2 1)
                          (("1" (typepred "equal?")
                            (("1" (expand "equivalence?" -1)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "transitive?" -3)
                                  (("1"
                                    (inst -3 "x" "y" "hd")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst -1 "equal?" "x" "y")
                          (("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (pos?_remove 0
  (pos?_remove-1 nil 3808414522
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((n skolem-const-decl "nat" list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_remove_nth 0
  (pos?_remove_nth-1 nil 3808414576
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pos?" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "remove" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "pos?" 2 2)
                        (("2" (assert)
                          (("2" (expand "nth" 2)
                            (("2" (inst? -1) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (remove def-decl "list[T]" list_theory nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_remove_ind_lt 0
  (pos?_remove_ind_lt-1 nil 3808421964
   ("" (induct "lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3"
            (name-replace "bool" "pos?(x, cons(hd, tail), equal?)`1")
            (("3"
              (name-replace "ind" "pos?(x, cons(hd, tail), equal?)`2")
              (("3" (expand "remove" 1)
                (("3" (lift-if)
                  (("3" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "pos?" 2)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (expand "ind" 1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (expand "ind" 2)
                            (("2" (expand "pos?" 2 2)
                              (("2"
                                (assert)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "bool" -1)
                                      (("2"
                                        (expand "ind" -2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ind skolem-const-decl "nat" list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (bool skolem-const-decl "bool" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_remove_ind_gt 0
  (pos?_remove_ind_gt-1 nil 3808422295
   ("" (induct "lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "remove" 1 1)
            (("3" (lift-if)
              (("3" (prop)
                (("1" (expand "pos?" 1 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pos?" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "pos?" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("2" (inst? -1)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (remove def-decl "list[T]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (pos?_mem 0
  (pos?_mem-1 nil 3836673731
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (pos?_mem2 0
  (pos?_mem2-1 nil 3847229463
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (prop)
            (("1" (expand "pos?" -1)
              (("1" (prop)
                (("1" (inst 2 "car(lst)") (("1" (grind) nil nil)) nil)
                 ("2" (inst -2 "cdr(lst)")
                  (("2" (prop)
                    (("1" (inst -1 "equal?" "x")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst 3 "y") (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "pos?" 1)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -2 "cdr(lst)")
                  (("2" (prop)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (skeep) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_len 0
  (count_elem_len-1 nil 3808404840
   ("" (induct "lst2")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "count_elem" 1 1)
            (("3" (lift-if)
              (("3" (prop)
                (("1" (expand "count_elem" 1 2)
                  (("1" (assert)
                    (("1" (inst? -2)
                      (("1" (assert)
                        (("1" (hide 1)
                          (("1" (rewrite "increment_len") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "count_elem" 2 2)
                  (("2" (assert)
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (hide 1 2)
                          (("2" (rewrite "length_append")
                            (("2" (lemma "length_append[nat]")
                              (("2"
                                (inst -1 "coef" "_")
                                (("2"
                                  (inst -1 "cons(1, null)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (increment_len formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (count_elem_len2 0
  (count_elem_len2-1 nil 3845841310
   ("" (skeep)
    (("" (lemma "count_elem_len") (("" (grind) nil nil)) nil)) nil)
   ((count_elem_len formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (count_elem_len_gt0 0
  (count_elem_len_gt0-1 nil 3847223813
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -2 "cdr(lst2)")
                  (("2" (prop)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "length" 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "count_elem" 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "pos?" -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(lst2)")
                  (("3" (prop)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (expand "length" 1)
                          (("1" (lift-if)
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "count_elem" 2 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "length_append")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_len_ge 0
  (count_elem_len_ge-1 nil 3847783250
   ("" (induct "lst2")
    (("1" (skeep) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "count_elem" 1)
            (("3" (lift-if)
              (("3" (prop)
                (("1" (inst?) nil nil)
                 ("2" (inst?)
                  (("2" (rewrite "length_append")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (increment def-decl "list[nat]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_elem_len_coef_not_matter 0
  (count_elem_len_coef_not_matter-1 nil 3847803943
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "count_elem" 1 2)
                        (("1" (assert)
                          (("1" (inst -2 "cdr(lst2)")
                            (("1" (assert)
                              (("1"
                                (prop)
                                (("1" (inst?) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "count_elem" 2 2)
                        (("2" (assert)
                          (("2" (inst -1 "cdr(lst2)")
                            (("2" (prop)
                              (("1" (inst?) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (increment def-decl "list[nat]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_null1 0
  (count_elem_null1-1 nil 3808747951
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_elem" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (expand "count_elem" -2)
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst? -2)
                    (("2" (assert)
                      (("2" (expand "count_elem" -1)
                        (("2" (grind)
                          (("2" (rewrite "null_append_uni") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_append_uni formula-decl nil list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (count_elem_null2 0
  (count_elem_null2-1 nil 3808748243
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_elem" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (rewrite "increment_len")
                      (("1" (assert)
                        (("1" (expand "count_elem" -2)
                          (("1" (expand "increment" -2)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (expand "pos?" -2)
                                      (("1"
                                        (expand "length" -4)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -2)
                  (("2" (rewrite "length_append")
                    (("2" (rewrite "length_append")
                      (("2" (assert)
                        (("2" (expand "length" -2 1)
                          (("2" (expand "length" -2 2)
                            (("2" (expand "length" -2 2)
                              (("2"
                                (expand "length" -2 3)
                                (("2"
                                  (expand "count_elem" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "null_append_uni_nat")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (null_append_uni_nat formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (increment_len formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (count_elem_gt0 0
  (count_elem_gt0-1 nil 3808749278
   ("" (induct "lst2")
    (("1" (skeep)
      (("1" (expand "count_elem" -2)
        (("1" (inst -1 "n") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_elem" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (lemma "increment_mantains_gt0")
                        (("1" (inst? -1)
                          (("1" (skeep)
                            (("1" (prop)
                              (("1"
                                (inst? -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -2)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (rewrite "member_append_uni_nat")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (member_append_uni_nat formula-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (increment_mantains_gt0 formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (> const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (count_elem_tcc_solver 0
  (count_elem_tcc_solver-4 nil 3865091648
   ("" (skeep)
    (("" (rewrite "every_nth" 1)
      (("" (skeep)
        (("" (typepred "count_elem(null, null, lst2, equal?)`2")
          (("" (rewrite "every_nth" -1)
            (("" (inst -1 "i")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (lemma "count_elem_gt0")
                      ((""
                        (inst -1 "null" "equal?" "null" "lst2"
                         "nth(count_elem(null, null, lst2, equal?)`2, i)")
                        (("" (grind)
                          (("" (lemma "member_nth[nat]")
                            (("" (hide -2)
                              (("" (inst?) (("" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member_nth formula-decl nil list_props nil)
    (member def-decl "bool" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem_gt0 formula-decl nil list_theory nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (every_nth formula-decl nil list_props nil))
   nil)
  (count_elem_tcc_solver-3 nil 3864980818
   ("" (skeep)
    (("" (rewrite "every_nth" 1)
      (("" (skeep)
        (("" (typepred "count_elem(null, null, lst2, equal?)`2")
          (("" (rewrite "every_nth" -1)
            (("" (inst -1 "i")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (lemma "count_elem_gt0")
                      ((""
                        (inst -1 "null" "equal?" "null" "lst2"
                         "nth(count_elem(null, null, lst2, equal?)`2, i)")
                        (("" (grind)
                          (("" (lemma "member_nth_uni[nat]")
                            (("" (hide -2)
                              (("" (inst?) (("" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil) nil
    (member def-decl "bool" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_elem_gt0 formula-decl nil list_theory nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil) nil
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (every_nth formula-decl nil list_props nil))
   nil)
  (count_elem_tcc_solver-2 nil 3845830249
   ("" (skeep)
    (("" (rewrite "every_nth" 1)
      (("" (skeep)
        (("" (typepred "count_elem(null, null, lst2, equal?)`2")
          (("" (rewrite "every_nth" -1)
            (("" (inst -1 "i")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (lemma "count_elem_gt0")
                      ((""
                        (inst -1 "null" "equal?" "null" "lst2"
                         "nth(count_elem(null, null, lst2, equal?)`2, i)")
                        (("" (grind)
                          (("" (lemma "member_nth_uni")
                            (("" (inst?)
                              ((""
                                (lemma "member_nth_uni")
                                ((""
                                  (lemma "member_nth_uni[nat]")
                                  ((""
                                    (hide -2)
                                    ((""
                                      (inst?)
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (count_elem_tcc_solver-1 nil 3845829417
   ("" (skeep)
    (("" (rewrite "every_nth" 1)
      (("" (skeep)
        (("" (typepred "count_elem(lst, coef, lst2, equal?)`2")
          (("" (rewrite "every_nth" -1)
            (("" (inst -1 "i")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (lemma "count_elem_gt0")
                      ((""
                        (inst -1 "coef" "equal?" "lst" "lst2"
                         "nth(count_elem(lst, coef, lst2, equal?)`2, i)")
                        (("" (grind)
                          (("1" (lemma "member_nth_uni")
                            (("1" (inst?)
                              (("1"
                                (lemma "member_nth_uni")
                                (("1"
                                  (lemma "member_nth_uni[nat]")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (inst?)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (count_elem12_no_effect 0
  (count_elem12_no_effect-1 nil 3836601820
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_mem 0
  (count_elem_mem-1 nil 3829224951
   ("" (measure-induct "length(lst2)" "lst2")
    (("" (skolem 1 "lst2")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_elem" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (inst -3 "cdr(lst2)")
                  (("1" (prop)
                    (("1" (inst? -1)
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (inst -2 "cdr(lst2)")
                  (("2" (prop)
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (lemma "member_append_uni")
                            (("1" (inst? -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (member_append_uni formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_elem_mem_cor 0
  (count_elem_mem_cor-1 nil 3846520654
   ("" (lemma "count_elem_mem") (("" (grind) nil nil)) nil)
   ((equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (T formal-type-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (member def-decl "bool" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (count_elem_mem formula-decl nil list_theory nil))
   shostak))
 (put_in_head_matrix? 0
  (put_in_head_matrix?-1 nil 3808236164
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "matrix?" -2)
            (("2" (prop)
              (("2" (expand "put_in_head" 1)
                (("2" (expand "matrix?" 1)
                  (("2" (prop)
                    (("1" (inst? -4) (("1" (assert) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   SHOSTAK))
 (put_in_head_mem 0
  (put_in_head_mem-1 nil 3808236251
   ("" (induct "matrix")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -2)
            (("2" (expand "member" -2)
              (("2" (split -2)
                (("1" (hide -2) (("1" (grind) nil nil)) nil)
                 ("2" (inst? -2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   SHOSTAK))
 (put_in_head_mem_iff 0
  (put_in_head_mem_iff-1 nil 3845055100
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand "put_in_head" -1)
                (("1" (expand "member" -1 1)
                  (("1" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (inst -2 "lst" "x") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "put_in_head" 2 1)
                (("2" (expand "member" 2 1)
                  (("2" (prop)
                    (("2" (inst -3 "lst" "x")
                      (("2" (grind)
                        (("2" (replace -2 :dir rl)
                          (("2" (decompose-equality 2) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil))
    nil)
   ((list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (put_in_head_mem2_TCC1 0
  (put_in_head_mem2_TCC1-1 nil 3825081844 ("" (subtype-tcc) nil nil)
   nil nil
   (put_in_head_mem2 subtype "list_theory.lst"
    "(list_adt[list_theory.T].cons?)")))
 (put_in_head_mem2 0
  (put_in_head_mem2-1 nil 3825106186
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -2)
            (("2" (expand "member" -2)
              (("2" (split -2)
                (("1" (grind) nil nil)
                 ("2" (inst -2 "lst" "lst2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (put_in_head_mem3 0
  (put_in_head_mem3-1 nil 3827491143
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "put_in_head" -2) (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "put_in_head" -3)
            (("2" (expand "member" -3)
              (("2" (prop)
                (("1" (replace -1 -3)
                  (("1" (hide -1 -2) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (inst -2 "lst" "lst2" "x")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (put_in_head_len 0
  (put_in_head_len-1 nil 3846013672
   ("" (induct "matrix") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (put_in_head_nth_TCC1 0
  (put_in_head_nth_TCC1-1 nil 3846013671
   ("" (skeep)
    (("" (use "put_in_head_len") (("" (assert) nil nil)) nil)) nil)
   ((put_in_head_len formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (put_in_head_nth subtype "list_theory.i"
    "below[length[list[T]](put_in_head(matrix, x))]")))
 (put_in_head_nth 0
  (put_in_head_nth-1 nil 3846013701
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "nth" 1)
        (("1" (expand "put_in_head" 1)
          (("1" (lift-if) (("1" (prop) (("1" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "nth" 1)
          (("2" (expand "put_in_head" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -1 "cdr(matrix)" "x")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "put_in_head_len") nil nil)) nil))
      nil))
    nil)
   ((put_in_head_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (put_in_head def-decl "list[list[T]]" list_theory nil))
   shostak))
 (put_col_len 0
  (put_col_len-1 nil 3846358944
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -2)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "put_col" 2)
                    (("2" (lift-if)
                      (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (put_col def-decl "list[list[T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (put_col_nth_TCC1 0
  (put_col_nth_TCC1-1 nil 3846357814
   ("" (skeep) (("" (use "put_col_len") (("" (assert) nil nil)) nil))
    nil)
   ((put_col_len formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (put_col_nth subtype "list_theory.i"
    "below[length[list[T]](put_col(col, matrix))]")))
 (put_col_nth_TCC2 0
  (put_col_nth_TCC2-1 nil 3846360017 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (put_col_nth subtype "list_theory.i"
    "below[length[list[T]](matrix)]")))
 (put_col_nth 0
  (put_col_nth-1 nil 3846359015
   ("" (induct "matrix")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -3 2)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "put_col" 1)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (expand "nth" 2)
                            (("2" (lift-if) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "nth" 2 2)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (expand "nth" 2 3)
                            (("2" (inst -1 "cdr(col)" "i-1")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (expand "put_col" 2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "length" -2)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "put_col_len")
          (("4" (inst?) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((put_col_len formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (put_col def-decl "list[list[T]]" list_theory nil))
   shostak))
 (put_col_matrix 0
  (put_col_matrix-1 nil 3846360415
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (expand "matrix?" -1)
              (("1" (prop)
                (("1" (expand "put_col" 1)
                  (("1" (lift-if)
                    (("1" (expand "length" -4)
                      (("1" (lift-if)
                        (("1" (split -4)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "matrix?" 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (inst -5 "cdr(col)" "n")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "matrix?" 1)
              (("2" (prop)
                (("1" (expand "put_col" -2)
                  (("1" (lift-if)
                    (("1" (expand "length" -4)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (split -4)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "matrix?" -3)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (inst -5 "cdr(col)" "n")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length" -3)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (assert)
                        (("2" (inst -3 "cdr(col)" "n")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (put_col def-decl "list[list[T]]" list_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (get_repeat_lst_len 0
  (get_repeat_lst_len-1 nil 3805973910
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil list_theory nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (get_repeat_lst_append 0
  (get_repeat_lst_append-1 nil 3807737981
   ("" (induct "i") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   SHOSTAK))
 (get_repeat_lst_nth_TCC1 0
  (get_repeat_lst_nth_TCC1-1 nil 3807907575
   ("" (skeep) (("" (rewrite "get_repeat_lst_len") nil nil)) nil)
   ((get_repeat_lst_len formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil list_theory nil))
   nil
   (get_repeat_lst_nth subtype "list_theory.i"
    "below[length[T](get_repeat_lst(x, n))]")))
 (get_repeat_lst_nth 0
  (get_repeat_lst_nth-1 nil 3807907586
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "nth" 1)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "get_repeat_lst" 2)
                (("2" (inst? -1)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "get_repeat_lst_len") nil nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_len formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (get_repeat_lst_mem 0
  (get_repeat_lst_mem-1 nil 3809246189
   ("" (induct "n")
    (("1" (grind) nil nil) ("2" (skeep) (("2" (grind) nil nil)) nil))
    nil)
   ((nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (get_repeat_lst_count 0
  (get_repeat_lst_count-1 nil 3808606919
   ("" (induct "n") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil list_theory nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (select_greater_lt 0
  (select_greater_lt-1 nil 3830805045
   ("" (measure-induct "length(lst_nat)" "lst_nat")
    (("" (skolem 1 "lst_nat")
      (("" (prop)
        (("" (skeep)
          (("" (expand "member" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -2 "cdr(lst_nat)")
                  (("2" (prop)
                    (("1" (inst -1 "n")
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (select_greater def-decl "nat" list_theory nil)
    (<= const-decl "bool" reals nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (select_greater_mem 0
  (select_greater_mem-1 nil 3854465949
   ("" (induct "lst_nat")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (select_greater def-decl "nat" list_theory nil)
    (member def-decl "bool" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (select_greater_plus_one_not_mem 0
  (select_greater_plus_one_not_mem-1 nil 3830804418
   ("" (measure-induct "length(lst_nat)" "lst_nat")
    (("" (skolem 1 "lst_nat")
      (("" (prop)
        (("" (expand "select_greater" -2)
          (("" (lift-if)
            (("" (prop)
              (("1" (grind) nil nil)
               ("2" (hide -2)
                (("2" (expand "max" -1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "member" -2)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (reveal -1)
                              (("2"
                                (inst? -1)
                                (("2"
                                  (prop)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "member" -1)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (lemma "select_greater_lt")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (select_greater_lt formula-decl nil list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (select_greater def-decl "nat" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (select_greater_same_elem 0
  (select_greater_same_elem-1 nil 3855923015
   ("" (skeep)
    (("" (case "select_greater(lst_nat) <= select_greater(lst_nat1)")
      (("1"
        (case "select_greater(lst_nat1) <= select_greater(lst_nat)")
        (("1" (grind) nil nil)
         ("2" (lemma "select_greater_lt")
          (("2" (inst -1 "lst_nat" "select_greater(lst_nat1)")
            (("2" (assert)
              (("2" (inst -2 "select_greater(lst_nat1)")
                (("2" (assert)
                  (("2" (use "select_greater_mem")
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "select_greater_lt")
        (("2" (inst -1 "lst_nat1" "select_greater(lst_nat)")
          (("2" (assert)
            (("2" (inst -1 "select_greater(lst_nat)")
              (("2" (assert)
                (("2" (use "select_greater_mem")
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((select_greater def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (select_greater_lt formula-decl nil list_theory nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (member def-decl "bool" list_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (select_greater_mem formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (matrix_append 0
  (matrix_append-1 nil 3808146106
   ("" (induct "lst_of_lsts1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (matrix? def-decl "bool" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (matrix_equiv 0
  (matrix_equiv-1 nil 3845192665
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (skeep)
              (("1" (expand "member" -2)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -3 "n")
                    (("2" (expand " matrix?" -2)
                      (("2" (assert)
                        (("2" (split -2)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (inst -4 "lst")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "matrix?" 1)
              (("2" (prop)
                (("1" (inst -3 "n")
                  (("1" (prop)
                    (("1" (skeep)
                      (("1" (inst -3 "lst") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "hd") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (matrix? def-decl "bool" list_theory nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (matrix_mem 0
  (matrix_mem-1 nil 3808146514
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" -3)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (expand "matrix?" -3)
                (("2" (prop)
                  (("2" (inst -4 "lst" "n") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (matrix? def-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (matrix_nth 0
  (matrix_nth-1 nil 3846500558
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -1 "j-1" "n")
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (matrix? def-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (matrix_row_len 0
  (matrix_row_len-1 nil 3834521236
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skolem 1 ("lst" "n"))
          (("2" (prop)
            (("2" (expand "member" -3)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst?)
                  (("2" (expand "matrix?" -3) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (matrix? def-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (matrix_get_col_i_exists_row_TCC1 0
  (matrix_get_col_i_exists_row_TCC1-1 nil 3834524414
   ("" (skeep)
    (("" (grind)
      (("" (lemma "matrix_mem")
        (("" (inst?)
          (("" (inst -1 "lst!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (matrix_mem formula-decl nil list_theory nil))
   nil
   (matrix_get_col_i_exists_row subtype
    "(number_fields.-)(list_theory.i, 1)" "below[length[T](lst)]")))
 (matrix_get_col_i_exists_row 0
  (matrix_get_col_i_exists_row-1 nil 3834524637
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_col_i" -3)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "member" -3)
                    (("1" (prop)
                      (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)
                       ("2" (inst -4 "i" "n" "x")
                        (("2" (expand "matrix?" -5)
                          (("2" (assert)
                            (("2" (prop)
                              (("2"
                                (skolem -3 "lst")
                                (("2"
                                  (inst 1 "lst")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (lemma "matrix_row_len")
            (("3" (inst -1 "lst" "lst_of_lsts" "n")
              (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix_row_len formula-decl nil list_theory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (matrix? def-decl "bool" list_theory nil)
    (member def-decl "bool" list_props nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (get_col_i_cdr_TCC1 0
  (get_col_i_cdr_TCC1-1 nil 3836500462
   ("" (skeep)
    (("" (lemma "matrix_mem")
      (("" (inst?)
        (("" (inst -1 "car(lst_of_lsts)") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((matrix_mem formula-decl nil list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (matrix? def-decl "bool" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil))
   nil
   (get_col_i_cdr subtype "list_theory.i"
    "below[length[T](car[list[T]](lst_of_lsts))]")))
 (get_col_i_cdr 0
  (get_col_i_cdr-1 nil 3836500470
   ("" (skeep)
    (("" (expand "get_col_i" 2 1)
      (("" (lift-if) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((get_col_i def-decl "list[T]" list_theory nil)
    (matrix? def-decl "bool" list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (get_col_i_len 0
  (get_col_i_len-1 nil 3846496176
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_col_i" 1)
            (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (matrix? def-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (get_col_i_nth_TCC1 0
  (get_col_i_nth_TCC1-1 nil 3846499648
   ("" (skeep) (("" (use "get_col_i_len") (("" (assert) nil nil)) nil))
    nil)
   ((get_col_i_len formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_col_i_nth subtype "list_theory.j"
    "below[length[T](get_col_i(lst_of_lsts, 1 + i))]")))
 (get_col_i_nth_TCC2 0
  (get_col_i_nth_TCC3-1 nil 3846499648
   ("" (skeep) (("" (use "matrix_nth") (("" (assert) nil nil)) nil))
    nil)
   ((matrix_nth formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get_col_i_nth subtype "list_theory.i"
    "below[length[T](nth[list[T]](lst_of_lsts, j))]")))
 (get_col_i_nth 0
  (get_col_i_nth-1 nil 3846499668
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (replace -1)
                  (("1" (expand "nth" 1 2)
                    (("1" (expand "get_col_i" 1)
                      (("1" (lift-if) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 3)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (expand "get_col_i" 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (inst -2 "i" "j-1" "n")
                              (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "matrix_nth")
          (("3" (inst?)
            (("3" (inst -1 "n") (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "get_col_i_len")
          (("4" (inst?)
            (("4" (inst -1 "n") (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((get_col_i_len formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix_nth formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (matrix? def-decl "bool" list_theory nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (get_col_i_put_col_i_TCC1 0
  (get_col_i_put_col_i_TCC1-1 nil 3846852546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (get_col_i_put_col_i subtype "(number_fields.-)(list_theory.i, 1)"
    "nat")))
 (get_col_i_put_col_i 0
  (get_col_i_put_col_i-1 nil 3846852547
   ("" (induct "lst_of_lsts")
    (("1" (skeep)
      (("1" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (split)
            (("1" (flatten)
              (("1" (expand "put_col" 1)
                (("1" (expand "length" -4 1)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "get_col_i" 3)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (inst? -4)
                                  (("1"
                                    (inst -4 "n")
                                    (("1"
                                      (grind)
                                      (("1"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "get_col_i" 2 2)
                (("2" (lift-if)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "put_col" 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "get_col_i" 2 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "nth" 1 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -5
                                             "cdr(col)"
                                             "i"
                                             "n")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nth def-decl "T" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (put_col def-decl "list[list[T]]" list_theory nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (matrix? def-decl "bool" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (elim_col1_len 0
  (elim_col1_len-1 nil 3846495452
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (expand "elim_col1" 1)
          (("2" (lift-if)
            (("2" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (elim_col1_matrix_TCC1 0
  (elim_col1_matrix_TCC1-1 nil 3845923849 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (elim_col1_matrix subtype "(number_fields.-)(list_theory.n, 1)"
    "nat")))
 (elim_col1_matrix 0
  (elim_col1_matrix-1 nil 3845923850
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "elim_col1" 1)
            (("2" (lift-if)
              (("2" (expand "matrix?" -2)
                (("2" (split 1)
                  (("1" (grind) nil nil)
                   ("2" (flatten)
                    (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (matrix? def-decl "bool" list_theory nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (elim_col1_get_col_i 0
  (elim_col1_get_col_i-1 nil 3845923944
   ("" (induct "lst_of_lsts" 1)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_col_i" 1 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "elim_col1" 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_col_i" 2 2)
                        (("2" (lift-if)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (expand "nth" 1 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -4 "i" "n")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_col_i def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (matrix? def-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (elim_col1_cdr_nth_TCC1 0
  (elim_col1_cdr_nth_TCC1-1 nil 3846507139
   ("" (skeep)
    (("" (use "matrix_nth")
      (("" (assert) (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((matrix_nth formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (elim_col1_cdr_nth subtype
    "list_props[list_adt[list_theory.T].list].nth(list_theory.lst_of_lsts, list_theory.i)"
    "(list_adt[list_theory.T].cons?)")))
 (elim_col1_cdr_nth_TCC2 0
  (elim_col1_cdr_nth_TCC2-1 nil 3846507139
   ("" (skeep) (("" (use "elim_col1_len") (("" (assert) nil nil)) nil))
    nil)
   ((elim_col1_len formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (elim_col1_cdr_nth subtype "list_theory.i"
    "below[length[list[T]](elim_col1(lst_of_lsts))]")))
 (elim_col1_cdr_nth 0
  (elim_col1_cdr_nth-1 nil 3846507140
   ("" (induct "lst_of_lsts")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" 1)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "i-1" "n")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (rewrite "elim_col1_len") nil nil)) nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "matrix_nth") (("4" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((matrix_nth formula-decl nil list_theory nil)
    (elim_col1_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (elim_col1 def-decl "list[list[T]]" list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (matrix? def-decl "bool" list_theory nil)
    (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (count_equiv_TCC1 0
  (count_equiv_TCC1-1 nil 3836578611 ("" (subtype-tcc) nil nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (equivalence? const-decl "bool" relations nil))
   nil (count_equiv subtype "=" "equiv")))
 (count_equiv 0
  (count_equiv-1 nil 3836578667
   ("" (induct "lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (count_eq 0
  (count_eq-1 nil 3836681320
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count" 1 1)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "count" 1 2)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (prop)
                          (("1" (inst -3 "equal?" "x" "y")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide -2 2)
                            (("2" (typepred "equal?")
                              (("2"
                                (expand "equivalence?" -1)
                                (("2"
                                  (prop)
                                  (("2"
                                    (expand "symmetric?" -2)
                                    (("2"
                                      (inst -2 "x" "y")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "transitive?" -3)
                                          (("2"
                                            (inst -3 "y" "x" "hd")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "count" 2 2)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (hide -2 1)
                            (("1" (typepred "equal?")
                              (("1"
                                (expand "equivalence?" -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "transitive?" -3)
                                    (("1"
                                      (inst -3 "x" "y" "hd")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst -1 "equal?" "x" "y")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_mem 0
  (count_mem-1 nil 3836342139
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_mem2 0
  (count_mem2-1 nil 3836593073
   ("" (induct "lst")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (equiv type-eq-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (count_gt0 0
  (count_gt0-1 nil 3808596362
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (inst 1 "0")
                  (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (inst -2 "equal?" "x")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 2 "i+1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below[length(tail)]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (hd skolem-const-decl "T" list_theory nil)
    (tail skolem-const-decl "list[T]" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (count_gt0_2 0
  (count_gt0_2-1 nil 3846182509
   ("" (skeep)
    (("" (lemma "count_gt0")
      (("" (inst?)
        (("" (assert)
          (("" (skeep)
            (("" (inst 1 "nth(lst, i)")
              (("" (assert) (("" (rewrite "member_nth_uni") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_gt0 formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil list_theory nil))
   shostak))
 (count_append_uni 0
  (count_append_uni-1 nil 3808606758
   ("" (induct "lst1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_repeat_lst_count_flatten 0
  (get_repeat_lst_count_flatten-1 nil 3809082278
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "get_repeat_lst" 1)
          (("2" (expand "map" 1)
            (("2" (expand "flatten" 1)
              (("2" (rewrite "count_append_uni")
                (("2" (assert) (("2" (inst? -1) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append_uni formula-decl nil list_theory nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (flatten def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil list_theory nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   SHOSTAK))
 (count_not_gt_len 0
  (count_not_gt_len-1 nil 3836578690
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (length def-decl "nat" list_props nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_eq_len 0
  (count_eq_len-1 nil 3836578710
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "length" -2)
                    (("1" (inst -3 "equal?" "x" "y")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide -2)
                    (("2" (lemma "count_not_gt_len")
                      (("2" (inst?) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_not_gt_len formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_elem_mem2 0
  (count_elem_mem2-1 nil 3836600034
   ("" (measure-induct "length(lst2)" "lst2")
    (("1" (skolem 1 "lst2")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "count_elem" -2)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten)
                  (("1" (expand "count_elem" 1)
                    (("1" (assert)
                      (("1" (inst -4 "x") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (inst -3 "cdr(lst2)")
                        (("1" (prop)
                          (("1" (expand "count_elem" 2)
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "count_elem" 3)
                        (("2" (assert)
                          (("2" (inst -2 "cdr(lst2)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1 4)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (rewrite "count_append_uni")
                                        (("1"
                                          (lemma "pos?_mem")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "member_append_uni")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (inst -2 "y")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "member"
                                                     -1)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (lemma
                                                           "count_mem2")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "lst"
                                                             "y")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (pos?_mem formula-decl nil list_theory nil)
    (count_mem2 formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append_uni formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (increment def-decl "list[nat]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (count def-decl "nat" list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_pos? 0
  (count_pos?-1 nil 3836687225
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_pos?2 0
  (count_pos?2-1 nil 3844776676
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count0_eq 0
  (count0_eq-1 nil 3847988425
   ("" (skeep)
    (("" (rewrite "count_pos?2" :dir rl)
      (("" (prop)
        (("1" (rewrite "pos?_mem2") nil nil)
         ("2" (rewrite "pos?_mem2") nil nil))
        nil))
      nil))
    nil)
   ((count_pos?2 formula-decl nil list_theory nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (pos?_mem2 formula-decl nil list_theory nil))
   shostak))
 (count_flatten 0
  (count_flatten-1 nil 3838991231
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "flatten" 1)
            (("2" (rewrite "count_append_uni")
              (("2" (expand "map" 1)
                (("2" (expand "sum" 1)
                  (("2" (expand "count" 1 3) (("2" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (count const-decl "nat" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (sum def-decl "nat" list_nat_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (flatten def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (pareate_append 0
  (pareate_append-1 nil 3805570156
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (expand "pareate" 1 1)
              (("" (lift-if)
                (("" (split)
                  (("1" (flatten)
                    (("1" (prop)
                      (("1" (rewrite "null_append_uni")
                        (("1" (prop) (("1" (grind) nil nil)) nil)) nil)
                       ("2" (rewrite "null_append_uni")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (case "null?(lst1)")
                      (("1" (expand "append" 3 1)
                        (("1" (assert)
                          (("1" (case "null?(new_lst1)")
                            (("1" (assert)
                              (("1"
                                (expand "append" 3 2)
                                (("1"
                                  (expand "append" 3 1)
                                  (("1"
                                    (expand "append" 3 1)
                                    (("1"
                                      (expand "pareate" 3 2)
                                      (("1"
                                        (expand "append" 3)
                                        (("1"
                                          (expand "pareate" 3 2)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (rewrite
                                                     "null_append_uni")
                                                    (("1"
                                                      (rewrite
                                                       "null_append_uni")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3 4) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "append" 4 1)
                        (("2" (assert)
                          (("2" (case "null?(new_lst1)")
                            (("1" (hide -3 2 3 4)
                              (("1" (grind) nil nil)) nil)
                             ("2" (expand "append" 5 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "pareate" 5 2)
                                  (("2"
                                    (expand "append" 5 3)
                                    (("2"
                                      (hide 1 2 3 4)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (inst -1 "cdr(lst1)")
                                          (("2"
                                            (prop)
                                            (("1"
                                              (inst
                                               -1
                                               "lst2"
                                               "cdr(new_lst1)"
                                               "new_lst2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_append_uni formula-decl nil list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (pareate_mem 0
  (pareate_mem-1 nil 3829162328
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd1" "tail1"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (inst -2 "cdr(lst2)" "pair")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (pareate_len 0
  (pareate_len-1 nil 3836416924
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "cdr(lst2)")
            (("1" (prop)
              (("1" (grind)
                (("1" (expand "pareate" 1) (("1" (grind) nil nil))
                  nil))
                nil)
               ("2" (expand "pareate" 1) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lst2 skolem-const-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (pareate_len2 0
  (pareate_len2-1 nil 3836417367
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "length" -2)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (split)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -2 "cdr(lst2)")
                      (("2" (expand "pareate" 2)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (pareate_nth_TCC1 0
  (pareate_nth_TCC1-1 nil 3836416922
   ("" (skeep) (("" (lemma "pareate_len2") (("" (grind) nil nil)) nil))
    nil)
   ((pareate_len2 formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (pareate_nth subtype "list_theory.i"
    "below[length[[T, T]](pareate(lst1, lst2))]")))
 (pareate_nth_TCC2 0
  (pareate_nth_TCC2-1 nil 3836416922 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil (pareate_nth subtype "list_theory.i" "below[length[T](lst2)]")))
 (pareate_nth 0
  (pareate_nth-1 nil 3836417155
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "pareate" 1)
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "nth" 3 1)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (expand "nth" 2 2)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "nth" 2 3)
                                  (("2"
                                    (inst -1 "cdr(lst1)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "i-1" "cdr(lst2)")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "pareate_len2") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pareate_len2 formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (len_get_lst_until_n 0
  (len_get_lst_until_n-1 nil 3805615260
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_until_n" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (prop)
                  (("2" (expand "length" 3)
                    (("2" (assert)
                      (("2" (inst -1 "cdr(lst)")
                        (("2" (prop)
                          (("1" (inst -1 "n-1")
                            (("1" (replace -1 3)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (nth_get_lst_until_n_TCC1 0
  (nth_get_lst_until_n_TCC1-1 nil 3805626352
   ("" (skeep)
    (("" (lemma "len_get_lst_until_n") (("" (grind) nil nil)) nil))
    nil)
   ((len_get_lst_until_n formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   SHOSTAK
   (nth_get_lst_until_n subtype "list_theory.i"
    "below[length[T](lst)]")))
 (nth_get_lst_until_n 0
  (nth_get_lst_until_n-1 nil 3805630671
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 ("lst"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "nth" 1 2)
            (("1" (assert)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (expand "nth" 1)
                    (("1" (assert)
                      (("1" (expand "get_lst_until_n" 1)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (hide -3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nth" 2 1)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "get_lst_until_n" 2)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "i-1" "n-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 4)
                                          (("1"
                                            (expand
                                             "get_lst_until_n"
                                             -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "len_get_lst_until_n") (("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((len_get_lst_until_n formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_lst_until_n_append 0
  (get_lst_until_n_append-1 nil 3805732972
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_until_n" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (expand "append" 3 1)
                  (("3" (lift-if)
                    (("3" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "list_cons_eta[T]")
                            (("2" (inst? -1)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (inst -2 "cdr(lst1)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (expand "length" 2 1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_lst_until_n_mem 0
  (get_lst_until_n_mem-1 nil 3839012513
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_until_n" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (len_get_lst_after_n 0
  (len_get_lst_after_n-1 nil 3805615894
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_after_n")
            (("" (lift-if)
              (("" (split)
                (("1" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (inst -1 "cdr(lst)")
                    (("2" (prop)
                      (("1" (inst -1 "n-1")
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "nat" list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (nth_get_lst_after_n_TCC1 0
  (nth_get_lst_after_n_TCC1-1 nil 3805626352 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (nth_get_lst_after_n subtype
    "(number_fields.-)(list_theory.i, list_props[list_theory.T].length(list_theory.lst1))"
    "below[length[T](lst2)]")))
 (nth_get_lst_after_n_TCC2 0
  (nth_get_lst_after_n_TCC2-1 nil 3805626352
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "len_get_lst_until_n")
        (("" (inst? -1)
          (("" (lemma "len_get_lst_after_n")
            (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((len_get_lst_until_n formula-decl nil list_theory nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil))
   SHOSTAK
   (nth_get_lst_after_n subtype "list_theory.i"
    "below[length[T](lst)]")))
 (nth_get_lst_after_n 0
  (nth_get_lst_after_n-1 nil 3805626359
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 ("lst"))
      (("1" (prop)
        (("1" (skeep)
          (("1" (name-replace "lst4" "get_lst_after_n(lst, n)")
            (("1" (name-replace "lst3" "get_lst_until_n(lst, n)")
              (("1" (expand "nth" 1 2)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (case "lst3 = null")
                        (("1" (replace -2)
                          (("1" (replace -1)
                            (("1" (hide -1 -2)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (expand "nth" 1)
                                  (("1"
                                    (expand "lst4")
                                    (("1"
                                      (case "n=0")
                                      (("1"
                                        (expand "get_lst_after_n" 1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (reveal -1 -3)
                                        (("2"
                                          (expand "get_lst_until_n" -2)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (expand
                                                     "get_lst_after_n"
                                                     -4)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2 -4 2) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "lst4" 2)
                        (("2" (expand "get_lst_after_n" 2)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "lst3" 1)
                                    (("1"
                                      (expand "get_lst_until_n" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" 1)
                                          (("1"
                                            (hide -2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (hide 1 -2)
                                        (("2"
                                          (expand ("lst3" "lst4"))
                                          (("2"
                                            (lemma
                                             "len_get_lst_after_n")
                                            (("2"
                                              (lemma
                                               "len_get_lst_until_n")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "lst3")
                                    (("2"
                                      (expand "get_lst_until_n" 3)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 3)
                                            (("2"
                                              (reveal -1)
                                              (("2"
                                                (inst -1 "cdr(lst)")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "i-1"
                                                     "n-1")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 4)
                                                        (("2"
                                                          (expand
                                                           "get_lst_until_n"
                                                           -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 4)
                                                        (("3"
                                                          (hide -1)
                                                          (("3"
                                                            (expand
                                                             "lst4")
                                                            (("3"
                                                              (expand
                                                               "get_lst_until_n"
                                                               -1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "len_get_lst_until_n")
          (("2" (inst? -1)
            (("2" (lemma "len_get_lst_after_n")
              (("2" (inst? -1) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (lst3 skolem-const-decl "list[T]" list_theory nil)
    (len_get_lst_until_n formula-decl nil list_theory nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lst4 skolem-const-decl "list[T]" list_theory nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_lst_after_n_append 0
  (get_lst_after_n_append-1 nil 3805733653
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_after_n" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (expand "append" 1) (("1" (grind) nil nil)) nil)
                 ("2" (rewrite "null_append_uni")
                  (("2" (grind) nil nil)) nil)
                 ("3" (expand "append" 3 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (grind) nil nil)
                       ("2" (assert)
                        (("2" (inst -1 "cdr(lst1)")
                          (("2" (prop)
                            (("1" (inst? -1) (("1" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null_append_uni formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (get_lst_after_n_mem 0
  (get_lst_after_n_mem-1 nil 3839012568
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_after_n" -2)
            (("2" (lift-if)
              (("2" (prop)
                (("2" (inst -2 "n-1" "x")
                  (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (get_lst_after_n def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (split_cor 0
  (split_cor-1 nil 3805572482
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 ("lst"))
      (("" (prop)
        (("" (skeep)
          (("" (lemma "equal_lst_nth")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide 2)
                  (("" (prop)
                    (("1" (rewrite "length_append")
                      (("1" (expand "split" 1 1)
                        (("1" (expand "split" 1 1)
                          (("1" (lemma "len_get_lst_after_n")
                            (("1" (hide -2)
                              (("1"
                                (inst? -1)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "len_get_lst_until_n")
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (hide -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem 1 "i")
                      (("2" (lemma "nth_append_uni")
                        (("2" (expand "split" 1 1)
                          (("2" (expand "split" 1 1)
                            (("2" (inst? -1)
                              (("2"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2 1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (lemma
                                             "nth_get_lst_until_n")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1 2)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (lemma
                                             "nth_get_lst_after_n")
                                            (("2"
                                              (inst -1 "i" "lst" "n")
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (rewrite
                                                     "length_append")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (rewrite "length_append")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_after_n def-decl "list[T]" list_theory nil)
    (get_lst_until_n def-decl "list[T]" list_theory nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_get_lst_after_n formula-decl nil list_theory nil)
    (nth_get_lst_until_n formula-decl nil list_theory nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (len_get_lst_until_n formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (equal_lst_nth formula-decl nil list_theory nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (split_append 0
  (split_append-1 nil 3805732598
   ("" (skeep)
    (("" (expand "split" 1)
      (("" (prop)
        (("1" (lemma "get_lst_until_n_append")
          (("1" (inst? -1) nil nil)) nil)
         ("2" (lemma "get_lst_after_n_append")
          (("2" (inst? -1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((split const-decl "[list[T], list[T]]" list_theory nil)
    (get_lst_after_n_append formula-decl nil list_theory nil)
    (get_lst_until_n_append formula-decl nil list_theory nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (split_append_pair 0
  (split_append_pair-1 nil 3807887700
   ("" (skeep)
    (("" (prop)
      (("1" (expand "append_pair" 1)
        (("1" (lemma "split_append")
          (("1" (inst? -1) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "append_pair" 1)
        (("2" (lemma "split_append")
          (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((split_append formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (append_pair const-decl "list[T]" list_theory nil))
   SHOSTAK))
 (split_matrix_len 0
  (split_matrix_len-1 nil 3807805875
   ("" (induct "matrix") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((split const-decl "[list[T], list[T]]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (split_matrix_nth_TCC1 0
  (split_matrix_nth_TCC1-1 nil 3807887388
   ("" (skeep)
    (("" (lemma "split_matrix_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((split_matrix_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil))
   nil
   (split_matrix_nth subtype "list_theory.i"
    "below[length[list[T]](split_matrix(matrix, n)`1)]")))
 (split_matrix_nth 0
  (split_matrix_nth-1 nil 3807887411
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "nth" 2 2)
                    (("2" (assert)
                      (("2" (inst? -1)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "split_matrix_len")
          (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((split_matrix_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil))
   SHOSTAK))
 (split_matrix_nth2_TCC1 0
  (split_matrix_nth2_TCC1-1 nil 3807902504
   ("" (skeep)
    (("" (lemma "split_matrix_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((split_matrix_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil))
   nil
   (split_matrix_nth2 subtype "list_theory.i"
    "below[length[list[T]](split_matrix(matrix, n)`2)]")))
 (split_matrix_nth2 0
  (split_matrix_nth2-1 nil 3807902504
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "nth" 1 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (expand "nth" 2 2)
                    (("2" (assert)
                      (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "split_matrix_len")
          (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((split_matrix_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil))
   SHOSTAK))
 (split_matrix_preserves_matrix 0
  (split_matrix_preserves_matrix-1 nil 3809247656
   ("" (induct "matrix" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "matrix?" 1)
              (("2" (prop)
                (("1" (expand "matrix?" -4)
                  (("1" (prop)
                    (("1" (inst? -4) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "matrix?" -3)
                  (("2" (prop)
                    (("2" (expand "split" 1)
                      (("2" (lemma "len_get_lst_until_n")
                        (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((split const-decl "[list[T], list[T]]" list_theory nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (len_get_lst_until_n formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (matrix? def-decl "bool" list_theory nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (split_matrix_preserves_matrix2_TCC1 0
  (split_matrix_preserves_matrix2_TCC1-1 nil 3809248000
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (split_matrix_preserves_matrix2 subtype
    "(number_fields.-)(list_theory.n, list_theory.i)" "nat")))
 (split_matrix_preserves_matrix2 0
  (split_matrix_preserves_matrix2-1 nil 3809248001
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("row" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "split_matrix" 1)
            (("2" (expand "matrix?" 1)
              (("2" (prop)
                (("1" (expand "matrix?" -4)
                  (("1" (prop)
                    (("1" (inst? -4) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "split" 1)
                  (("2" (lemma "len_get_lst_after_n")
                    (("2" (inst? -1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (len_get_lst_after_n formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (matrix? def-decl "bool" list_theory nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   SHOSTAK))
 (split_matrix_mem 0
  (split_matrix_mem-1 nil 3845979312
   ("" (induct "matrix")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (inst -1 "i" "lst") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (split_matrix def-decl "[list[list[T]], list[list[T]]]" list_theory
     nil)
    (split const-decl "[list[T], list[T]]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (snd_proj_pareate 0
  (snd_proj_pareate-1 nil 3805734405
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "pareate" 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "snd_proj" 3)
                    (("2" (inst -1 "cdr(lst1)")
                      (("2" (prop)
                        (("1" (inst -1 "cdr(lst2)")
                          (("1" (prop)
                            (("1" (replace -1 3)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "list_cons_eta[T]")
                                  (("1" (inst -1 "lst2") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (snd_proj def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (snd_proj_pareate2 0
  (snd_proj_pareate2-1 nil 3809084025
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "pareate" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "snd_proj" 2)
                  (("2" (inst? -1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pareate def-decl "list[[T, T]]" list_theory nil)
    (snd_proj def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_mult_len 0
  (get_lst_mult_len-1 nil 3849784417
   ("" (induct "coef")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (rewrite "length_append")
                  (("2" (rewrite "get_repeat_lst_len")
                    (("2" (expand "sum" 2)
                      (("2" (inst -1 "cdr(lst)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_append formula-decl nil list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_repeat_lst_len formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum def-decl "nat" list_nat_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (get_lst_mult_mem 0
  (get_lst_mult_mem-1 nil 3839012736
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" -2)
            (("2" (lift-if)
              (("2" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (rewrite "member_append_uni")
                    (("2" (prop)
                      (("1" (lemma "get_repeat_lst_mem")
                        (("1" (inst?) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (inst -2 "cdr(coef)" "x")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_mem formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (member_append_uni formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (get_lst_mult_count_increment 0
  (get_lst_mult_count_increment-1 nil 3808603783
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (prop)
              (("1" (expand "increment" 1 1)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "get_lst_mult" 1 1)
                        (("2" (rewrite "count_append_uni")
                          (("2" (expand "nth")
                            (("2" (assert)
                              (("2"
                                (lemma "get_repeat_lst_count")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (expand "get_lst_mult" 1 2)
                                        (("2"
                                          (rewrite "count_append_uni")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma
                                               "get_repeat_lst_count")
                                              (("2"
                                                (inst? -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "nth" -1 1)
                        (("3" (assert)
                          (("3" (expand "get_lst_mult" 2 1)
                            (("3" (rewrite "count_append_uni")
                              (("3"
                                (lemma "get_repeat_lst_count")
                                (("3"
                                  (inst? -1)
                                  (("3"
                                    (prop)
                                    (("1"
                                      (replace -2 2)
                                      (("1"
                                        (expand "get_lst_mult" 2 2)
                                        (("1"
                                          (rewrite "count_append_uni")
                                          (("1"
                                            (replace -2 2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal -2)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr(coef)"
                                                   "equal?"
                                                   "i-1"
                                                   "inc"
                                                   "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "get_lst_mult" 3 2)
                                          (("2"
                                            (rewrite
                                             "count_append_uni"
                                             3)
                                            (("2"
                                              (replace -1 3)
                                              (("2"
                                                (reveal -2)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cdr(coef)"
                                                   "equal?"
                                                   "i-1"
                                                   "inc"
                                                   "x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "increment" 2 1)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (expand "get_lst_mult" 2 1)
                              (("1"
                                (rewrite "count_append_uni")
                                (("1"
                                  (lemma "get_repeat_lst_count")
                                  (("1"
                                    (inst? -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "get_lst_mult" 2 2)
                                            (("1"
                                              (rewrite
                                               "count_append_uni")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "get_repeat_lst_count")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "increment" 3 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("2" (expand "get_lst_mult" 2 1)
                              (("2"
                                (rewrite "count_append_uni")
                                (("2"
                                  (expand "get_lst_mult" 2 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "count_append_uni")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (reveal -1)
                                          (("2"
                                            (inst
                                             -1
                                             "cdr(coef)"
                                             "equal?"
                                             "i-1"
                                             "inc"
                                             "x")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_repeat_lst_count formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (increment def-decl "list[nat]" list_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_mult_null 0
  (get_lst_mult_null-1 nil 3809368395
   ("" (skeep)
    (("" (expand "get_lst_mult" -1)
      (("" (lift-if)
        (("" (prop)
          (("" (rewrite "null_append_uni")
            (("" (prop)
              (("" (expand "get_repeat_lst" -1)
                (("" (lift-if)
                  (("" (prop)
                    (("1" (typepred "lst_pos_nat")
                      (("1" (hide -3 -4 1 2 3 4)
                        (("1" (grind)
                          (("1" (expand "every" -1)
                            (("1" (grind)
                              (("1"
                                (reveal -2)
                                (("1"
                                  (reveal 2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_lst_mult def-decl "list[T]" list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (null_append_uni formula-decl nil list_theory nil))
   SHOSTAK))
 (get_lst_mult_append 0
  (get_lst_mult_append-1 nil 3808938249
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "append" 1 1)
        (("1" (expand "length" -1)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "length" -2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (assert)
                    (("2" (expand "append" 2 2)
                      (("2" (expand "get_lst_mult" 2 1)
                        (("2" (expand "get_lst_mult" 2 2)
                          (("2" (rewrite "append_assoc")
                            (("2" (inst? -2) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_mult_count_append_uni 0
  (get_lst_mult_count_append_uni-1 nil 3808658710
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (expand "append" 1)
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "get_lst_mult" 1 3) (("1" (grind) nil nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (expand "append" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (expand "get_lst_mult" 2 1)
                    (("2" (rewrite "count_append_uni")
                      (("2" (reveal -1)
                        (("2"
                          (inst -1 "cdr(coef1)" "coef2" "equal?" "lst2"
                           "x")
                          (("2" (prop)
                            (("1" (replace -1 2)
                              (("1"
                                (hide -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "get_lst_mult" 2 2)
                                    (("1"
                                      (rewrite "count_append_uni")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_lst_mult_count_not_eq 0
  (get_lst_mult_count_not_eq-1 nil 3849437076
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "get_lst_mult" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (rewrite "count_append_uni")
                    (("2" (use "get_repeat_lst_count")
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (inst -4 "car(lst)")
                            (("1" (expand "member" -4)
                              (("1"
                                (typepred "equal?")
                                (("1"
                                  (expand "equivalence?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "symmetric?" -2)
                                      (("1"
                                        (inst -2 "y" "car(lst)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (inst -2 "cdr(lst)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst -1 "cdr(coef)" "equal?" "y")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -4 "x")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get_repeat_lst_count formula-decl nil list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append_uni formula-decl nil list_theory nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (get_lst_mult_nth_TCC1 0
  (get_lst_mult_nth_TCC1-1 nil 3849432559 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (dif_elem? const-decl "bool" list_theory nil))
   nil
   (get_lst_mult_nth subtype "list_theory.j"
    "below[length[nat](coef1)]")))
 (get_lst_mult_nth 0
  (get_lst_mult_nth-1 nil 3849433159
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "get_lst_mult" 1)
            (("1" (lift-if)
              (("1" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (hide 1 2)
                    (("2" (rewrite "count_append_uni")
                      (("2" (expand "nth" 1 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (use "get_repeat_lst_count")
                              (("1"
                                (prop)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (expand "nth" 1 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 1 1)
                                        (("1"
                                          (use
                                           "get_lst_mult_count_not_eq")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand "dif_elem?" -7)
                                                (("1"
                                                  (hide -6)
                                                  (("1"
                                                    (rewrite
                                                     "member_nth_uni2")
                                                    (("1"
                                                      (skolem -1 "n")
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "0"
                                                         "n+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "n")
                                                            (("1"
                                                              (reveal
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     3)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (typepred
                                                                           "equal?")
                                                                          (("1"
                                                                            (expand
                                                                             "equivalence?"
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "symmetric?"
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "x"
                                                                                   "car(lst1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (typepred "equal?")
                                    (("2"
                                      (expand "equivalence?" -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "reflexive?" -1)
                                          (("2"
                                            (inst -1 "car(lst1)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "nth" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (use "get_repeat_lst_count")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide -2 -3 2)
                                      (("1"
                                        (expand "dif_elem?" -2)
                                        (("1"
                                          (inst -2 "j" "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 1 -1)
                                          (("2"
                                            (expand "nth" 2 2)
                                            (("2"
                                              (inst -1 "cdr(lst1)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cdr(coef1)"
                                                   "equal?"
                                                   "j-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -3
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -3)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "dif_elem?"
                                                                                   3)
                                                                                  (("2"
                                                                                    (skolem
                                                                                     3
                                                                                     ("n1"
                                                                                      "n2"))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "dif_elem?"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         "n1+1"
                                                                                         "n2+1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   5)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -3 3)
                                                  (("2"
                                                    (reveal 3)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (count_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (get_repeat_lst_count formula-decl nil list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (get_lst_mult_count_not_eq formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (symmetric? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member_nth_uni2 formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (count def-decl "nat" list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (get_lst_mult_count 0
  (get_lst_mult_count-1 nil 3809081885
   ("" (induct "lst" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_lst_mult" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "dot_product" 1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (rewrite "map_append")
                  (("2" (rewrite "flatten_append")
                    (("2" (rewrite "count_append_uni")
                      (("2" (expand "map" 2 4)
                        (("2" (expand "map" 2 3)
                          (("2" (expand "dot_product" 2 1)
                            (("2" (assert)
                              (("2"
                                (inst? -1)
                                (("2"
                                  (replace -1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "get_repeat_lst_count_flatten")
                                      (("2"
                                        (inst? -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "count" 2 2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (map_append formula-decl nil more_map_props nil)
    (count_append_uni formula-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (get_repeat_lst_count_flatten formula-decl nil list_theory nil)
    (flatten_append formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count const-decl "nat" list_theory nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (flatten def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (remove_len 0
  (remove_len-1 nil 3806760066
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "length" 2)
                  (("2" (inst -1 "i-1")
                    (("1" (grind) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (remove_mem 0
  (remove_mem-1 nil 3855667729
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((i!1 skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (gt_nth_remove_TCC1 0
  (gt_nth_remove_TCC1-1 nil 3807099381
   ("" (skeep)
    (("" (lemma "remove_len")
      (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((remove_len formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (gt_nth_remove subtype "list_theory.n"
    "below[length[T](remove(lst, i))]")))
 (gt_nth_remove_TCC2 0
  (gt_nth_remove_TCC2-1 nil 3807099381 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (gt_nth_remove subtype "list_theory.n" "below[length[T](lst)]")))
 (gt_nth_remove 0
  (gt_nth_remove-1 nil 3807099381
   ("" (induct "lst")
    (("1" (skeep) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide -2 1) (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (assert)
                          (("2" (inst -1 "i-1" "n-1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (lemma "remove_len")
          (("4" (inst? -1) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((remove_len formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (> const-decl "bool" reals nil)
    (remove def-decl "list[T]" list_theory nil))
   SHOSTAK))
 (gt_nth_remove2_TCC1 0
  (gt_nth_remove2_TCC1-1 nil 3807099381
   ("" (skeep)
    (("" (lemma "remove_len")
      (("" (inst? -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((remove_len formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (gt_nth_remove2 subtype "(number_fields.-)(list_theory.i, 1)"
    "below[length[T](remove(lst, n))]")))
 (gt_nth_remove2 0
  (gt_nth_remove2-1 nil 3807104525
   ("" (induct "lst")
    (("1" (skeep) (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "nth" 1 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (hide -3 1) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (hide -2 1) (("1" (grind) nil nil)) nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (hide -2 1) (("1" (grind) nil nil))
                              nil)
                             ("2" (inst -1 "i-1" "n-1")
                              (("1" (grind) nil nil)
                               ("2" (assert) nil nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (assert)
          (("3" (lemma "remove_len")
            (("3" (inst? -1) (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_len formula-decl nil list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "nat" list_theory nil)
    (n skolem-const-decl "nat" list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove def-decl "list[T]" list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   SHOSTAK))
 (gt_remove_remove_TCC1 0
  (gt_remove_remove_TCC1-1 nil 3807099381 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (gt_remove_remove subtype "(number_fields.-)(list_theory.i, 1)"
    "nat")))
 (gt_remove_remove 0
  (gt_remove_remove-1 nil 3807105130
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 "lst")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "remove" 1 2)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (expand "remove" 1 3)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "remove" 1 2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "remove" 2 1)
                    (("3" (lift-if)
                      (("3" (prop)
                        (("1" (hide 1) (("1" (grind) nil nil)) nil)
                         ("2" (expand "remove" 2 4)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (expand "remove" 2 3)
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "cdr(lst)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst -1 "i-1" "n-1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 3)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (remove_append_TCC1 0
  (remove_append_TCC1-1 nil 3807517007 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (remove_append subtype
    "(number_fields.-)(list_theory.i, list_props[list_theory.T].length(list_theory.lst1))"
    "nat")))
 (remove_append 0
  (remove_append-1 nil 3807517008
   ("" (induct "lst1")
    (("1" (skeep)
      (("1" (lift-if)
        (("1" (prop)
          (("1" (hide 1) (("1" (grind) nil nil)) nil)
           ("2" (expand "append" 2)
            (("2" (expand "length" 2) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "append" 1 1)
                  (("1" (expand "remove" 1 1)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (expand "remove" 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "remove" 2 2)
                            (("2" (assert)
                              (("2"
                                (expand "append" 2 2)
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "i-1" "lst2")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "append" 2 1)
                  (("2" (expand "remove" 2 1)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (hide 1) (("1" (grind) nil nil)) nil)
                           ("2" (expand "append" 2 2)
                            (("2" (reveal -1)
                              (("2"
                                (inst -1 "i-1" "lst2")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (expand "length" 3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (expand "length" 2 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (append def-decl "list[T]" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   SHOSTAK))
 (flatten_remove 0
  (flatten_remove-1 nil 3807478749
   ("" (induct "lst_of_lsts" 1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "nth" -3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (replace -1 1)
                  (("1" (expand "remove" 1 2)
                    (("1" (expand "flatten" 1 2)
                      (("1" (expand "ind_flatten" 1)
                        (("1" (lift-if)
                          (("1" (expand "length" 1 1)
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "flatten" 1 1)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma "remove_append")
                                      (("1"
                                        (inst
                                         -1
                                         "j"
                                         "hd"
                                         "flatten(tail)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "length(hd) = 1")
                                                        (("1"
                                                          (expand
                                                           "flatten"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "append_null")
                                                              (("1"
                                                                (expand
                                                                 "remove"
                                                                 1)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       -4
                                                                       -7)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2 -5)
                                                        (("2"
                                                          (case
                                                           "length(hd) = 1")
                                                          (("1"
                                                            (expand
                                                             "remove"
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (case
                                                                         "cdr(hd) = null")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -3)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "flatten"
                                                     2
                                                     2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2)
                  (("2" (expand "remove" 2 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "flatten" 2 2)
                          (("2" (expand "flatten" 2 1)
                            (("2" (expand "ind_flatten" 2)
                              (("2"
                                (lemma "remove_append")
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 2)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (reveal -3)
                                          (("2"
                                            (inst -1 "i-1" "j")
                                            (("2"
                                              (expand "length" -3)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_append formula-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (remove def-decl "list[list[T]]" list_theory nil)
    (ind_flatten def-decl "nat" list_theory nil)
    (flatten def-decl "list[T]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   SHOSTAK))
 (flatten_remove_2 0
  (flatten_remove_2-1 nil 3839171346
   ("" (measure-induct "length(lst_of_lsts)" "lst_of_lsts")
    (("" (skolem 1 "lst_of_lsts")
      (("" (prop)
        (("" (skeep)
          (("" (expand "flatten" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (rewrite "length_append")
                  (("2" (case "n < length(car(lst_of_lsts))")
                    (("1" (inst 2 "0" "n")
                      (("1" (prop)
                        (("1" (assert)
                          (("1" (expand "length" 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "nth" 1) (("2" (propax) nil nil))
                          nil)
                         ("3" (expand "flatten" 1 1)
                          (("3" (lift-if 1)
                            (("3" (prop)
                              (("3"
                                (use "remove_append")
                                (("3"
                                  (assert)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (expand "remove" 2 2)
                                      (("3"
                                        (lift-if)
                                        (("3"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "remove" 1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (expand "append" 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "append"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (case
                                                     "length(car(lst_of_lsts)) = 1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "length")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (prop)
                                            (("2"
                                              (expand "flatten" 2 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "cdr(lst_of_lsts)")
                      (("2" (prop)
                        (("1" (inst -1 "n - length(car(lst_of_lsts))")
                          (("1" (assert)
                            (("1" (skolem -1 ("i" "j"))
                              (("1"
                                (prop)
                                (("1"
                                  (inst 3 "i+1" "j")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nth" 1)
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (expand "flatten" 1 1)
                                        (("3"
                                          (use "remove_append")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (replace -1)
                                              (("3"
                                                (expand "remove" 1 2)
                                                (("3"
                                                  (expand
                                                   "flatten"
                                                   1
                                                   2)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" list_theory nil)
    (lst_of_lsts skolem-const-decl "list[list[T]]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (remove_append formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove def-decl "list[list[T]]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (flatten def-decl "list[T]" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_remove 0
  (count_remove-1 nil 3808596619
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (hide -1)
          (("" (skeep)
            (("" (prop)
              (("1" (expand "count" 1 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "remove" 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (prop)
                            (("2" (expand "count" 2 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "equal?" "i-1" "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "remove" 2)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (prop)
                            (("1" (grind) nil nil)
                             ("2" (expand "count" 2 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst -1 "equal?" "i-1" "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "nth" -2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "count" 2 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "remove" 1)
                      (("2" (assert)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (expand "nth" 3)
                              (("1" (assert) nil nil)) nil)
                             ("2" (expand "count" 2 2)
                              (("2"
                                (reveal -1)
                                (("2"
                                  (inst -1 "cdr(lst)")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "nth" 4)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "remove" 2 1)
                      (("3" (lift-if)
                        (("3" (assert)
                          (("3" (prop)
                            (("3" (expand "count" 2 2)
                              (("3"
                                (reveal -1)
                                (("3"
                                  (inst -1 "cdr(lst)")
                                  (("3"
                                    (prop)
                                    (("1"
                                      (inst -1 "equal?" "i-1" "x")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "nth" 5 1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (remove def-decl "list[T]" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   SHOSTAK))
 (count_remove_pos 0
  (count_remove_pos-1 nil 3836682120
   ("" (skeep)
    (("" (lemma "count_remove")
      (("" (inst -1 "equal?" "pos?(x, lst, equal?)`2" "lst" "x")
        (("" (prop)
          (("1" (assert) nil nil)
           ("2" (lemma "pos?_cor")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
           ("3" (lemma "pos?_len")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((count_remove formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pos?_cor formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_len formula-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil list_theory nil))
   shostak))
 (no_null_entries_remove 0
  (no_null_entries_remove-1 nil 3839251083
   ("" (induct "lst_of_lsts")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1)
            (("2" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "no_null_entries?" -2)
                  (("2" (expand "no_null_entries?" 2)
                    (("2" (prop)
                      (("2" (inst?)
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "nat" list_theory nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (remove def-decl "list[list[T]]" list_theory nil)
    (no_null_entries? def-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (count_remove2 0
  (count_remove2-1 nil 3847818255
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand "remove" 1)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (inst -3 "equal?" "x" "y")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "count" 2)
                        (("2" (lift-if)
                          (("2" (prop)
                            (("1" (typepred "equal?")
                              (("1"
                                (expand "equivalence?" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "transitive?" -3)
                                    (("1"
                                      (inst -3 "x" "y" "hd")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -2 "equal?" "x" "y")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "remove" 2 1)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "count" 1 2)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (typepred "equal?")
                                (("1"
                                  (expand "equivalence?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "symmetric?" -2)
                                      (("1"
                                        (inst -2 "y" "hd")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "transitive?" -3)
                                            (("1"
                                              (inst -3 "x" "hd" "y")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst -2 "equal?" "x" "y")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "count" 2 1)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (expand "count" 1 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -2 "equal?" "x" "y")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "count" 2 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "equal?" "x" "y")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (transitive? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_no_effect 0
  (remove_no_effect-1 nil 3847831029
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_elem_no_effect 0
  (remove_elem_no_effect-1 nil 3847998315
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 2 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "count" 1 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (typepred "equal?")
                          (("1" (expand "equivalence?" -1)
                            (("1" (flatten)
                              (("1"
                                (expand "symmetric?" -2)
                                (("1"
                                  (inst -2 "y" "car(lst)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "transitive?" -3)
                                      (("1"
                                        (inst -3 "x" "car(lst)" "y")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "cdr(lst)")
                          (("2" (prop)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "count" 2 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (expand "count" 1 2)
                        (("1" (assert)
                          (("1" (inst -2 "cdr(lst)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "count" 2 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst -1 "cdr(lst)")
                              (("2"
                                (assert)
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (transitive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (symmetric? const-decl "bool" relations nil)
    (remove def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_append2 0
  (remove_append2-1 nil 3847832370
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1 1)
            (("2" (expand "remove" 1 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (flatten)
                    (("1" (expand "remove" 1 2)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_elem_mem 0
  (remove_elem_mem-1 nil 3847834025
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "member" -2)
            (("2" (prop)
              (("1" (expand "remove" 2)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (typepred "equal?")
                        (("1" (replace -3)
                          (("1" (expand "equivalence?" -1)
                            (("1" (flatten)
                              (("1"
                                (expand "symmetric?" -2)
                                (("1"
                                  (inst -2 "y" "hd")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "remove" 2 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_elem_mem2 0
  (remove_elem_mem2-1 nil 3847910238
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_elem_mem3 0
  (remove_elem_mem3-1 nil 3848341134
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "remove" -1)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (inst -3 "cdr(lst)")
                            (("1" (split -3)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "member" -1)
                            (("2" (split)
                              (("1"
                                (expand "member" 3 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (typepred "equal?")
                                        (("1"
                                          (expand "equivalence?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "symmetric?" -2)
                                              (("1"
                                                (inst
                                                 -2
                                                 "car(lst)"
                                                 "y")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -2 "cdr(lst)")
                                (("2"
                                  (split -2)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "remove" 2 1)
                (("2" (lift-if)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (expand "member" -2)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (prop)
                              (("1"
                                (replace -1)
                                (("1"
                                  (typepred "equal?")
                                  (("1"
                                    (expand "equivalence?" -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "symmetric?" -2)
                                        (("1"
                                          (inst -2 "y" "car(lst)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "cdr(lst)")
                                (("2"
                                  (prop)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "member" 2 1)
                      (("3" (expand "member" -1 1)
                        (("3" (lift-if)
                          (("3" (prop)
                            (("3" (inst -2 "cdr(lst)")
                              (("3"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_elem_eq 0
  (remove_elem_eq-1 nil 3849259139
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 1 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "remove" 1 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (inst -3 "cdr(lst)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (typepred "equal?")
                        (("2" (expand "equivalence?" -1)
                          (("2" (flatten)
                            (("2" (expand "symmetric?" -2)
                              (("2"
                                (inst -2 "x" "y")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "transitive?" -3)
                                    (("2"
                                      (inst -3 "y" "x" "car(lst)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "remove" 2 2)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (typepred "equal?")
                        (("1" (expand "equivalence?" -1)
                          (("1" (flatten)
                            (("1" (expand "transitive?" -3)
                              (("1"
                                (inst -3 "x" "y" "car(lst)")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality 2)
                        (("2" (inst -1 "cdr(lst)")
                          (("2" (prop)
                            (("1" (inst -1 "equal?" "x" "y")
                              (("1" (assert) nil nil)) nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (symmetric? const-decl "bool" relations nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove def-decl "list[T]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_elem_cor 0
  (remove_elem_cor-1 nil 3847911249
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_elem_com 0
  (remove_elem_com-1 nil 3847988465
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "remove" 1 2)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "remove" 1 4)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (inst?) nil nil)
                       ("2" (expand "remove" 2 3)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "remove" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "remove" 1 4)
                        (("1" (assert) (("1" (inst?) nil nil)) nil))
                        nil)
                       ("2" (expand "remove" 2 4)
                        (("2" (assert)
                          (("2" (expand "remove" 2 3)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_lst_elem_len 0
  (remove_lst_elem_len-1 nil 3847958359
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_lst_elem_mem 0
  (remove_lst_elem_mem-1 nil 3847889878
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_lst_elem_cons_null 0
  (remove_lst_elem_cons_null-1 nil 3847904870
   ("" (measure-induct "length(lst)" "lst")
    (("1" (skolem 1 "lst")
      (("1" (prop)
        (("1" (skeep)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (expand "remove" 1)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (skeep) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (decompose-equality 2)
                            (("2" (inst -2 "cdr(lst)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "remove" 2 1)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (expand "remove" 1 3)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "cdr(lst)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "remove" 2 2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "cdr(lst)")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "member" -1 1)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst 1 "x")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "remove" 2 3)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst 2 "car(lst1)")
                                      (("1"
                                        (expand "member" 2 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "remove" 2 2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (skolem -1 "x")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst 3 "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (decompose-equality 2)
                                            (("2"
                                              (inst -1 "cdr(lst)")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (grind) nil nil)) nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove def-decl "list[T]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_lst_elem_no_effect 0
  (remove_lst_elem_no_effect-1 nil 3847889900
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (inst -4 "car(lst)" "x")
                          (("1" (assert)
                            (("1" (expand "member" -4)
                              (("1"
                                (typepred "equal?")
                                (("1"
                                  (expand "equivalence?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "symmetric?" -2)
                                      (("1"
                                        (inst -2 "x" "car(lst)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (decompose-equality 2)
                        (("2" (inst -1 "cdr(lst)")
                          (("2" (prop)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -4 "x" "y")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (symmetric? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove def-decl "list[T]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_lst_elem_append 0
  (remove_lst_elem_append-1 nil 3847888965
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (expand "remove" 1 3)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (skeep)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "remove" 2 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "member_append_uni")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst 2 "x")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "x")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "remove" 2 3)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 2 "x")
                                    (("1"
                                      (rewrite "member_append_uni")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "remove" 2 2)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 3 "x")
                                            (("1"
                                              (rewrite
                                               "member_append_uni")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member_append_uni formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (remove def-decl "list[T]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_lst_elem_no_effect2 0
  (remove_lst_elem_no_effect2-1 nil 3847909633
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 2 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "remove" 1 3)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (skolem -1 "y")
                                      (("2"
                                        (inst 1 "y")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use "remove_elem_mem2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "remove" 2 3)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (skolem -1 "x1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst 1 "x1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "remove_elem_mem")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "pos?_mem2")
                                                (("1"
                                                  (inst 3 "car(lst)")
                                                  (("1"
                                                    (expand "member" 3)
                                                    (("1"
                                                      (typepred
                                                       "equal?")
                                                      (("1"
                                                        (expand
                                                         "equivalence?"
                                                         -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "symmetric?"
                                                             -2)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "x1"
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "transitive?"
                                                                   -3)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "x"
                                                                     "x1"
                                                                     "car(lst)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (decompose-equality 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (member def-decl "bool" list_props nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (remove_elem_mem formula-decl nil list_theory nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove_elem_mem2 formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_lst_elem_count 0
  (remove_lst_elem_count-1 nil 3847976667
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove" 2 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "count" 1 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (skolem -2 "x1")
                        (("1" (prop)
                          (("1" (rewrite "pos?_mem2")
                            (("1" (inst 4 "x1")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "equal?")
                                  (("1"
                                    (hide -5 1)
                                    (("1"
                                      (expand "equivalence?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "symmetric?" -2)
                                          (("1"
                                            (inst -2 "x1" "car(lst)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "transitive?"
                                                 -3)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "x"
                                                   "car(lst)"
                                                   "x1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -2 "cdr(lst)")
                        (("2" (prop)
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "count" 2 1)
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (expand "count" 1 2)
                        (("1" (assert)
                          (("1" (inst -2 "cdr(lst)")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "count" 2 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst -1 "cdr(lst)")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (remove_common_mem 0
  (remove_common_mem-1 nil 3829225264
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove_common" -2)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -3 "cdr(lst1)")
                  (("2" (prop)
                    (("1" (inst? -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (expand "member" -1)
                  (("3" (prop)
                    (("1" (grind) nil nil)
                     ("2" (inst -2 "cdr(lst1)")
                      (("2" (prop)
                        (("1" (inst? -1)
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_common_mem_count 0
  (remove_common_mem_count-1 nil 3836676441
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove_common" -2)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (inst -3 "cdr(lst1)")
                        (("1" (prop)
                          (("1"
                            (inst -1 "equal?"
                             "remove(lst2, pos?(car(lst1), lst2, equal?)`2)"
                             "x")
                            (("1" (assert)
                              (("1"
                                (expand "count" 2 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "count_remove_pos")
                                        (("1"
                                          (lemma "pos?_equal3")
                                          (("1"
                                            (inst
                                             -1
                                             "equal?"
                                             "lst2"
                                             "x"
                                             "car(lst1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide -3)
                                        (("2"
                                          (lemma "count_remove")
                                          (("2"
                                            (inst
                                             -1
                                             "equal?"
                                             "pos?(car(lst1), lst2, equal?)`2"
                                             "lst2"
                                             "x")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma "pos?_cor")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -2 1))
                                                        (("1"
                                                          (typepred
                                                           "equal?")
                                                          (("1"
                                                            (expand
                                                             "equivalence?"
                                                             -1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "symmetric?"
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "car(lst1)"
                                                                   "nth(lst2, pos?(car(lst1), lst2, equal?)`2)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -4)
                                                                      (("1"
                                                                        (expand
                                                                         "transitive?"
                                                                         -3)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "x"
                                                                           "nth(lst2, pos?(car(lst1), lst2, equal?)`2)"
                                                                           "car(lst1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "pos?_len")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "member" -1)
                        (("2" (prop)
                          (("1" (expand "count" 3 1)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1"
                                    (typepred "equal?")
                                    (("1"
                                      (expand "equivalence?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "reflexive?" -1)
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -5)
                                                (("1"
                                                  (lemma "pos?_mem")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "count_pos?")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "lst2"
                                                           "x")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "cdr(lst1)")
                            (("2" (prop)
                              (("1"
                                (inst -1 "equal?" "lst2" "x")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive? const-decl "bool" relations nil)
    (pos?_mem formula-decl nil list_theory nil)
    (count_pos? formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_remove formula-decl nil list_theory nil)
    (pos?_cor formula-decl nil list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_len formula-decl nil list_theory nil)
    (pos?_equal3 formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count_remove_pos formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (count def-decl "nat" list_theory nil)
    (> const-decl "bool" reals nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_common_count_gt 0
  (remove_common_count_gt-1 nil 3844806849
   ("" (skeep)
    (("" (lemma "remove_common_mem_count")
      (("" (lemma "count_gt0")
        (("" (inst?)
          (("" (assert)
            (("" (skolem -1 "i")
              ((""
                (name-replace "y"
                 "nth(remove_common(lst1, lst2, equal?), i)")
                (("" (inst -2 "equal?" "lst1" "lst2" "y")
                  (("" (assert)
                    (("" (prop)
                      (("1" (lemma "count_eq")
                        (("1" (inst -1 "equal?" "lst1" "x" "y")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (reveal -1)
                                (("1"
                                  (inst -1 "equal?" "lst2" "x" "y")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "y" 1)
                        (("2" (rewrite "member_nth_uni") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_common_mem_count formula-decl nil list_theory nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (count_eq formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (y skolem-const-decl "T" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_theory nil))
   shostak))
 (remove_common_no_effect 0
  (remove_common_no_effect-1 nil 3844776156
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "remove_common" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (assert) nil nil)
                 ("2" (inst -3 "car(lst1)")
                  (("2" (assert)
                    (("2" (expand "member" -3 1)
                      (("2" (hide -2 1)
                        (("2" (rewrite "count_pos?2") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(lst1)")
                  (("3" (prop)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (replace -1)
                            (("1" (decompose-equality 2) nil nil)) nil)
                           ("2" (skeep)
                            (("2" (inst -2 "x")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (count_pos?2 formula-decl nil list_theory nil)
    (remove_common def-decl "list[T]" list_theory nil)
    (count def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_common_mem_not_common 0
  (remove_common_mem_not_common-1 nil 3836675165
   ("" (skeep)
    (("" (lemma "remove_common_mem_count")
      (("" (inst?)
        (("" (assert)
          (("" (hide -2)
            (("" (lemma "remove_common_mem_count")
              (("" (inst -1 "equal?" "lst2" "lst1" "x")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove_common_mem_count formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil list_theory nil))
   shostak))
 (get_common_null 0
  (get_common_null-1 nil 3808412191
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_common" 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (hide 1) (("1" (grind) nil nil)) nil)
                 ("2" (inst? -1) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pos? def-decl "[bool, nat]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (get_common def-decl "list[T]" list_theory nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_common_remove_nth 0
  (get_common_remove_nth-1 nil 3808412255
   ("" (induct "lst2")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "get_common" 2 1)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (expand "get_common" 1 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (assert)
                        (("1"
                          (case "get_common(tail, remove(remove(lst1, n), pos?(hd, remove(lst1, n), equal?)`2), equal?) = get_common(tail, remove(lst1, pos?(hd, lst1, equal?)`2), equal?)")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (hide -3 -5)
                              (("2"
                                (name-replace
                                 "pos"
                                 "pos?(hd, lst1, equal?)`2")
                                (("2"
                                  (name-replace
                                   "pos_rem"
                                   "pos?(hd, remove(lst1, n), equal?)`2")
                                  (("2"
                                    (reveal -3)
                                    (("2"
                                      (inst
                                       -1
                                       "equal?"
                                       "remove(lst1, pos)"
                                       "_")
                                      (("2"
                                        (case "n > pos")
                                        (("1"
                                          (case "pos_rem = pos")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (inst -3 "n-1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "gt_remove_remove")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "remove_len")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "gt_nth_remove2")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 2 3)
                                            (("2"
                                              (expand "pos" 1)
                                              (("2"
                                                (expand "pos_rem")
                                                (("2"
                                                  (lemma
                                                   "pos?_remove_ind_lt")
                                                  (("2"
                                                    (inst? -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "pos"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "n = pos")
                                          (("1"
                                            (hide -2 2)
                                            (("1"
                                              (lemma "pos?_cor")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "pos?" 2)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (expand
                                                           "pos"
                                                           1)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             2
                                                             3)
                                                            (("1"
                                                              (typepred
                                                               "equal?")
                                                              (("1"
                                                                (expand
                                                                 "equivalence?"
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "symmetric?"
                                                                     -2)
                                                                    (("1"
                                                                      (inst?
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "n < pos")
                                            (("1"
                                              (hide 1 2)
                                              (("1"
                                                (case
                                                 "pos_rem = pos -1")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (inst -3 "n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (rewrite
                                                           "gt_remove_remove"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "pos"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "pos?_len")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "remove_len")
                                                          (("1"
                                                            (case
                                                             "pos < length(lst1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "pos"
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "pos?_len")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "pos"
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "pos?_len")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (rewrite
                                                           "gt_nth_remove")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "pos"
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "pos?_len")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2 2 3)
                                                  (("2"
                                                    (lemma
                                                     "pos?_remove_ind_gt")
                                                    (("2"
                                                      (expand "pos")
                                                      (("2"
                                                        (expand
                                                         "pos_rem")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 2 3)
                        (("2" (lemma "pos?_remove")
                          (("2" (inst? -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "get_common" 2 2)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (lemma "pos?_remove_nth")
                        (("1" (inst? -1)
                          (("1" (assert)
                            (("1" (hide -3)
                              (("1"
                                (hide 1 2)
                                (("1"
                                  (expand "pos?" 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (hide -2 -3 2)
                                      (("1"
                                        (typepred "equal?")
                                        (("1"
                                          (expand "equivalence?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "symmetric?" -2)
                                              (("1"
                                                (inst? -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst? -1)
                        (("2" (assert)
                          (("2" (expand "pos?" 4)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pos?_remove_nth formula-decl nil list_theory nil)
    (pos?_cor formula-decl nil list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (pos?_remove_ind_gt formula-decl nil list_theory nil)
    (gt_nth_remove formula-decl nil list_theory nil)
    (pos?_len formula-decl nil list_theory nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" list_theory nil)
    (gt_remove_remove formula-decl nil list_theory nil)
    (remove_len formula-decl nil list_theory nil)
    (gt_nth_remove2 formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos skolem-const-decl "nat" list_theory nil)
    (pos?_remove_ind_lt formula-decl nil list_theory nil)
    (pos_rem skolem-const-decl "nat" list_theory nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_remove formula-decl nil list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (get_common def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_common_bool 0
  (get_common_bool-1 nil 3808492684
   ("" (induct "lst1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (name-replace "bool2" "pos?(x, lst2, equal?)`1")
            (("3"
              (name-replace "bool1"
               "pos?(x, cons(hd, tail), equal?)`1")
              (("3"
                (name-replace "bool12"
                 "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`1")
                (("3" (expand "bool1")
                  (("3" (expand "pos?" 1)
                    (("3" (lift-if)
                      (("3" (split)
                        (("1" (flatten)
                          (("1" (expand "bool2")
                            (("1" (expand "bool12")
                              (("1"
                                (expand "get_common" 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "pos?_equal")
                                        (("1"
                                          (inst
                                           -1
                                           "equal?"
                                           "lst2"
                                           "hd"
                                           "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (expand "pos?" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -4 1)
                                                (("2"
                                                  (typepred "equal?")
                                                  (("2"
                                                    (expand
                                                     "equivalence?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "symmetric?"
                                                         -2)
                                                        (("2"
                                                          (inst? -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "equal?")
                                                (("3"
                                                  (expand
                                                   "equivalence?"
                                                   -1)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide -4 -5 -7)
                                                      (("3"
                                                        (expand
                                                         "symmetric?"
                                                         -2)
                                                        (("3"
                                                          (inst? -2)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "pos?_equal")
                                        (("2"
                                          (inst? -1)
                                          (("2"
                                            (inst -1 "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst? -3)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "bool2")
                            (("2" (expand "bool12")
                              (("2"
                                (expand "get_common" 2 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "pos?" 1 3)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -4
                                                 "equal?"
                                                 "lst2"
                                                 "x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (reveal -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "equal?"
                                                       "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                       "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lemma
                                                             "pos?_remove_nth")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "pos?_cor")
                                                                    (("1"
                                                                      (inst?
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -3
                                                                           -6)
                                                                          (("1"
                                                                            (typepred
                                                                             "equal?")
                                                                            (("1"
                                                                              (expand
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "hd"
                                                                                     "_")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "nth(lst2, pos?(hd, lst2, equal?)`2)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "transitive?"
                                                                                           -3)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -3
                                                                                             "x"
                                                                                             "nth(lst2, pos?(hd, lst2, equal?)`2)"
                                                                                             "hd")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "pos?_len")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 -3
                                                 "equal?"
                                                 "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                 "x")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst
                                                 -3
                                                 "equal?"
                                                 "remove(lst2, pos?(hd, lst2, equal?)`2)"
                                                 "x")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (hide -3 -1)
                                                      (("3"
                                                        (lemma
                                                         "pos?_remove")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "lst2"
                                                           "pos?(hd, lst2, equal?)`2"
                                                           "x")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -1 "equal?" "lst2" "x")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bool1 skolem-const-decl "bool" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (pos?_len formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (transitive? const-decl "bool" relations nil)
    (pos?_cor formula-decl nil list_theory nil)
    (pos?_remove_nth formula-decl nil list_theory nil)
    (pos?_remove formula-decl nil list_theory nil)
    (bool12 skolem-const-decl "bool" list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (pos?_equal formula-decl nil list_theory nil)
    (bool2 skolem-const-decl "bool" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (get_common def-decl "list[T]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (get_common_remove 0
  (get_common_remove-1 nil 3808504191
   ("" (induct "lst1")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3"
            (name-replace "ind12"
             "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`2")
            (("3"
              (name-replace "ind1" "pos?(x, cons(hd, tail), equal?)`2")
              (("3" (name-replace "ind2" "pos?(x, lst2, equal?)`2")
                (("3"
                  (name-replace "bool12"
                   "pos?(x, get_common(cons(hd, tail), lst2, equal?), equal?)`1")
                  (("3" (expand "get_common" 1 1)
                    (("3" (lift-if)
                      (("3" (prop)
                        (("1" (expand "remove" 1 1)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "ind12")
                                (("1"
                                  (expand "pos?" -1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "bool12")
                                          (("1"
                                            (hide -2 -3 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "get_common" -1)
                                            (("2"
                                              (case "ind1 = 0")
                                              (("1"
                                                (expand "remove" 1 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "ind2")
                                                    (("1"
                                                      (lemma
                                                       "pos?_equal2")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "equal?"
                                                         "lst2"
                                                         "x"
                                                         "hd")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "ind1")
                                                (("2"
                                                  (expand "pos?" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "remove" 2 3)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (expand "ind1" -1)
                                        (("1"
                                          (expand "pos?" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (expand "ind12")
                                                  (("1"
                                                    (expand
                                                     "get_common"
                                                     1)
                                                    (("1"
                                                      (expand "pos?" 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "get_common" 2 2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case
                                               "remove(get_common(tail, remove(lst2, pos?(hd, lst2, equal?)`2), equal?), ind12 - 1) = get_common(remove(tail, ind1 - 1), remove(remove(lst2, ind2), pos?(hd, remove(lst2, ind2), equal?)`2), equal?)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (name-replace
                                                   "ind_hd_lst2"
                                                   "pos?(hd, lst2, equal?)`2")
                                                  (("2"
                                                    (name-replace
                                                     "ind_hd_remlst2"
                                                     "pos?(hd, remove(lst2, ind2), equal?)`2")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "equal?"
                                                       "remove(lst2, ind_hd_lst2)"
                                                       "x")
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (case
                                                           "pos?(x, get_common(tail, remove(lst2, ind_hd_lst2), equal?), equal?)`2 = ind12 -1")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (case
                                                               "pos?(x, tail, equal?)`2 = ind1 -1")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -3)
                                                                (("1"
                                                                  (case
                                                                   "remove(remove(lst2, ind_hd_lst2), pos?(x, remove(lst2, ind_hd_lst2), equal?)`2) = remove(remove(lst2, ind2), ind_hd_remlst2)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("2"
                                                                        (expand
                                                                         "ind_hd_remlst2")
                                                                        (("2"
                                                                          (case
                                                                           "ind_hd_lst2 < ind2")
                                                                          (("1"
                                                                            (lemma
                                                                             "pos?_remove_ind_lt")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "equal?"
                                                                               "lst2"
                                                                               "ind2"
                                                                               "hd")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -7)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "pos?_remove_ind_gt")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "equal?"
                                                                                               "lst2"
                                                                                               "ind_hd_lst2"
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "gt_remove_remove")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ind2"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "pos?_len")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "bool12")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "get_common_bool")
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "bool12")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "get_common_bool")
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "ind2")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "ind_hd_lst2"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "ind_hd_lst2 = ind2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "pos?(x, remove(lst2, ind_hd_lst2), equal?)`2 = pos?(hd, remove(lst2, ind2), equal?)`2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   3
                                                                                   2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ind_hd_lst2"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ind2"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pos?_cor2")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "equal?"
                                                                                             "lst2"
                                                                                             "x"
                                                                                             "hd")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "pos?_equal2")
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "bool12")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "get_common_bool")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "ind_hd_lst2 > ind2")
                                                                              (("1"
                                                                                (hide
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "pos?_remove_ind_gt")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "equal?"
                                                                                     "lst2"
                                                                                     "ind2"
                                                                                     "hd")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -7)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "gt_remove_remove")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "ind_hd_lst2"
                                                                                                     "lst2"
                                                                                                     "ind2")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (prop)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "pos?(x, remove(lst2, ind_hd_lst2), equal?)`2 = ind2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "ind2")
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "pos?_remove_ind_lt")
                                                                                                                  (("2"
                                                                                                                    (inst?
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "bool12")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "get_common_bool")
                                                                                                                            (("2"
                                                                                                                              (inst?
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "ind_hd_lst2")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "pos?_len")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "ind1"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "pos?"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "ind1"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "pos?"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (prop)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "ind12"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "get_common"
                                                               1
                                                               2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "pos?"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (expand
                                                                           "ind12"
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "get_common"
                                                                             3)
                                                                            (("2"
                                                                              (expand
                                                                               "pos?"
                                                                               3
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (prop)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ind_hd_lst2")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "bool12"
                                                           -3)
                                                          (("2"
                                                            (expand
                                                             "get_common"
                                                             -3)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "pos?"
                                                                   -3
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "ind12"
                                                                     4)
                                                                    (("2"
                                                                      (expand
                                                                       "get_common"
                                                                       4)
                                                                      (("2"
                                                                        (expand
                                                                         "pos?"
                                                                         4
                                                                         1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (expand
                                                                               "ind_hd_lst2"
                                                                               4)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 2)
                                              (("2"
                                                (lemma
                                                 "pos?_remove_nth")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "ind2")
                                                        (("1"
                                                          (lemma
                                                           "pos?_cor")
                                                          (("1"
                                                            (inst? -1)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "ind1"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "pos?"
                                                                   2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (typepred
                                                                             "equal?")
                                                                            (("1"
                                                                              (expand
                                                                               "equivalence?"
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "symmetric?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "hd"
                                                                                     "nth(lst2, pos?(x, lst2, equal?)`2)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "transitive?"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "x"
                                                                                           "nth(lst2, pos?(x, lst2, equal?)`2)"
                                                                                           "hd")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "bool12")
                                                                (("2"
                                                                  (lemma
                                                                   "get_common_bool")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "pos?_len")
                                                      (("2"
                                                        (expand "ind2")
                                                        (("2"
                                                          (inst? -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "bool12")
                                                              (("2"
                                                                (lemma
                                                                 "get_common_bool")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "remove" 2 2)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1"
                                (expand "ind1")
                                (("1"
                                  (expand "pos?" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "bool12")
                                          (("1"
                                            (hide -2 1)
                                            (("1"
                                              (lemma "get_common_bool")
                                              (("1"
                                                (inst? -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma
                                                         "pos?_equal")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "equal?"
                                                           "lst2"
                                                           "x"
                                                           "hd")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "get_common" 2 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lemma "pos?_remove")
                                      (("1"
                                        (inst? -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -1 "equal?" "lst2" "x")
                                      (("2"
                                        (prop)
                                        (("1"
                                          (case
                                           "pos?(x, get_common(tail, lst2, equal?), equal?)`2 = ind12")
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (case
                                               "pos?(x, tail, equal?)`2 = ind1 - 1")
                                              (("1"
                                                (replace -1 -3)
                                                (("1"
                                                  (expand "ind2" 2)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "ind1" 1)
                                                (("2"
                                                  (expand "pos?" 1 2)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (expand "ind1" 4)
                                                      (("2"
                                                        (expand
                                                         "pos?"
                                                         4)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (prop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "ind12" 1)
                                            (("2"
                                              (expand "get_common" 1 2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "bool12")
                                          (("2"
                                            (expand "get_common" -1)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pos?_equal formula-decl nil list_theory nil)
    (pos?_remove formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pos?_equal2 formula-decl nil list_theory nil)
    (ind2 skolem-const-decl "nat" list_theory nil)
    (ind1 skolem-const-decl "nat" list_theory nil)
    (bool12 skolem-const-decl "bool" list_theory nil)
    (ind12 skolem-const-decl "nat" list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (ind_hd_lst2 skolem-const-decl "nat" list_theory nil)
    (gt_remove_remove formula-decl nil list_theory nil)
    (pos?_len formula-decl nil list_theory nil)
    (get_common_bool formula-decl nil list_theory nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_remove_ind_gt formula-decl nil list_theory nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_remove_ind_lt formula-decl nil list_theory nil)
    (> const-decl "bool" reals nil)
    (pos?_cor2 formula-decl nil list_theory nil)
    (ind_hd_remlst2 skolem-const-decl "nat" list_theory nil)
    (pos?_cor formula-decl nil list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos?_remove_nth formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (get_common def-decl "list[T]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (same_count?_get_lst_mul 0
  (same_count?_get_lst_mul-1 nil 3808601717
   ("" (induct "lst2")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("hd" "tail"))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "same_count?" 1)
            (("3" (skeep)
              (("3" (expand "count_elem" 1 1)
                (("3" (lift-if)
                  (("3" (prop)
                    (("1" (hide -2)
                      (("1" (expand "count_elem" 1 2)
                        (("1" (assert)
                          (("1"
                            (name-replace "ind_hd"
                             "pos?(hd, lst1, equal?)`2")
                            (("1" (reveal -2)
                              (("1"
                                (inst
                                 -1
                                 "increment(coef, ind_hd, 1)"
                                 "equal?"
                                 "lst1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "same_count?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite
                                             "count_append_uni")
                                            (("1"
                                              (rewrite
                                               "count_append_uni")
                                              (("1"
                                                (expand "count" 1 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "get_lst_mult_count_increment")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "coef"
                                                           "equal?"
                                                           "ind_hd"
                                                           "1"
                                                           "lst1"
                                                           "x")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "ind_hd")
                                                                (("2"
                                                                  (lemma
                                                                   "pos?_cor")
                                                                  (("2"
                                                                    (inst?
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "equal?")
                                                                        (("2"
                                                                          (expand
                                                                           "equivalence?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "transitive?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x"
                                                                                   "hd"
                                                                                   "nth(lst1, pos?(hd, lst1, equal?)`2)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "ind_hd"
                                                               1)
                                                              (("3"
                                                                (lemma
                                                                 "pos?_len")
                                                                (("3"
                                                                  (inst?
                                                                   -1)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               "ind_hd"
                                                               1)
                                                              (("4"
                                                                (lemma
                                                                 "pos?_len")
                                                                (("4"
                                                                  (inst?
                                                                   -1)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "get_lst_mult_count_increment")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "coef"
                                                         "equal?"
                                                         "ind_hd"
                                                         "1"
                                                         "lst1"
                                                         "x")
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (lemma
                                                                 "pos?_cor")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "equal?")
                                                                      (("1"
                                                                        (expand
                                                                         "equivalence?"
                                                                         -1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "symmetric?"
                                                                             -2)
                                                                            (("1"
                                                                              (reveal
                                                                               -6)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -5)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "hd"
                                                                                   "nth(lst1, ind_hd)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "transitive?"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -4
                                                                                         "x"
                                                                                         "nth(lst1, ind_hd)"
                                                                                         "hd")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "ind_hd")
                                                            (("3"
                                                              (lemma
                                                               "pos?_len")
                                                              (("3"
                                                                (inst?
                                                                 -1)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (expand
                                                             "ind_hd"
                                                             1)
                                                            (("4"
                                                              (lemma
                                                               "pos?_len")
                                                              (("4"
                                                                (inst?
                                                                 -1)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "increment_len")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "count_elem" 2 2)
                      (("2" (assert)
                        (("2"
                          (inst -1 "append(coef, cons[nat](1, null))"
                           "equal?" "append(lst1, cons(hd, null))")
                          (("2" (prop)
                            (("1" (expand "same_count?" -1)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (replace -1 2 rl)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (rewrite "count_append_uni")
                                      (("1"
                                        (rewrite "count_append_uni")
                                        (("1"
                                          (expand "count" 2 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "get_lst_mult_count_append_uni")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "get_lst_mult"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "count_append_uni")
                                                                (("1"
                                                                  (expand
                                                                   "get_lst_mult"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "count"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "get_repeat_lst_count")
                                                                      (("1"
                                                                        (inst?
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "get_lst_mult_count_append_uni")
                                                (("2"
                                                  (inst? -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "get_lst_mult"
                                                             2)
                                                            (("2"
                                                              (rewrite
                                                               "count_append_uni")
                                                              (("2"
                                                                (lemma
                                                                 "get_repeat_lst_count")
                                                                (("2"
                                                                  (inst?
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (rewrite "length_append")
                                (("2"
                                  (rewrite "length_append")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (get_lst_mult_count_append_uni formula-decl nil list_theory nil)
    (get_repeat_lst_count formula-decl nil list_theory nil)
    (get_repeat_lst def-decl "list[T]" list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_len formula-decl nil list_theory nil)
    (pos?_cor formula-decl nil list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ind_hd skolem-const-decl "nat" list_theory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_lst_mult_count_increment formula-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (count_append_uni formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (increment_len formula-decl nil list_theory nil)
    (increment def-decl "list[nat]" list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (same_count? const-decl "bool" list_theory nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   SHOSTAK))
 (same_count?_mem_remove 0
  (same_count?_mem_remove-1 nil 3839167593
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "same_count?" -3)
            (("" (inst -3 "nth(lst1, i)")
              (("" (lemma "count_remove")
                (("" (inst -1 "equal?" "i" "lst1" "nth(lst1, i)")
                  (("" (assert)
                    (("" (typepred "equal?" -1)
                      (("" (expand "equivalence?" -1)
                        (("" (flatten)
                          (("" (expand "reflexive?" -1)
                            (("" (inst?)
                              ((""
                                (assert)
                                ((""
                                  (hide -1 -2 -3 -4)
                                  ((""
                                    (replace -1)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (lemma "count_gt0")
                                        ((""
                                          (inst
                                           -1
                                           "equal?"
                                           "lst2"
                                           "nth(lst1, i)")
                                          ((""
                                            (assert)
                                            ((""
                                              (skolem -1 "j")
                                              ((""
                                                (inst 1 "j")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (hide -2)
                                                    ((""
                                                      (expand
                                                       "same_count?"
                                                       1)
                                                      ((""
                                                        (skeep)
                                                        ((""
                                                          (lemma
                                                           "count_remove")
                                                          ((""
                                                            (inst
                                                             -1
                                                             "equal?"
                                                             "i"
                                                             "lst1"
                                                             "x")
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (prop)
                                                                (("1"
                                                                  (lemma
                                                                   "count_remove")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "equal?"
                                                                     "j"
                                                                     "lst2"
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (reveal
                                                                           -10)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (replace
                                                                                 -5)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (reveal
                                                                           -6)
                                                                          (("2"
                                                                            (expand
                                                                             "transitive?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x"
                                                                               "nth(lst1, i)"
                                                                               "nth(lst2, j)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "count_remove")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "equal?"
                                                                       "j"
                                                                       "lst2"
                                                                       "x")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (reveal
                                                                             -5
                                                                             -6)
                                                                            (("1"
                                                                              (expand
                                                                               "symmetric?"
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "nth(lst1, i)"
                                                                                 "nth(lst2, j)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "transitive?"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "x"
                                                                                       "nth(lst2, j)"
                                                                                       "nth(lst1, i)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (reveal
                                                                               -10)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" list_theory nil)
    (lst1 skolem-const-decl "list[T]" list_theory nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd? const-decl "bool" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (symmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_gt0 formula-decl nil list_theory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reflexive? const-decl "bool" relations nil)
    (count_remove formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (same_count? const-decl "bool" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (mem_lst2set 0
  (mem_lst2set-1 nil 3823877038
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list2set def-decl "set[T]" list2set nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mem_lst2set_2 0
  (mem_lst2set_2-1 nil 3830008764
   ("" (induct "lst") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (member def-decl "bool" list_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mem_list2set 0
  (mem_list2set-1 nil 3835969213
   ("" (skeep)
    (("" (lemma "mem_lst2set")
      (("" (lemma "mem_lst2set_2") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((mem_lst2set formula-decl nil list_theory nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (member const-decl "bool" sets nil)
    (mem_lst2set_2 formula-decl nil list_theory nil))
   shostak))
 (is_fin_lst2set 0
  (is_fin_lst2set-1 nil 3819398855
   ("" (induct "lst_of_fin_sets")
    (("1" (expand "list2set" 1) (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (expand "list2set" 1)
        (("2" (rewrite "finite_add") nil nil)) nil))
      nil))
    nil)
   ((finite_add formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list2set def-decl "set[T]" list2set nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (is_fin_lst2set_2 0
  (is_fin_lst2set_2-1 nil 3855859703
   ("" (induct "lst")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (expand "list2set" 1)
          (("2" (rewrite "finite_add" 1) nil nil)) nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (finite_add formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (list2set def-decl "set[T]" list2set nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (mem_union_lst2set 0
  (mem_union_lst2set-1 nil 3823879127
   ("" (induct "lst_of_fin_sets")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (prop)
            (("1" (case "member(x, hd)")
              (("1" (hide -2 -3)
                (("1" (inst 1 "hd") (("1" (grind) nil nil)) nil)) nil)
               ("2" (inst -2 "x")
                (("2" (flatten)
                  (("2" (hide -3)
                    (("2" (prop)
                      (("1" (skolem -1 "fin_set")
                        (("1" (inst 2 "fin_set")
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (hide 3)
                        (("2" (expand "list2set" -1)
                          (("2" (lemma "Union_member[T]")
                            (("2" (inst? -1)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "Union_member[T]")
                                    (("2"
                                      (inst
                                       -1
                                       "extend[setof[T], finite_set[T], bool, FALSE] (add(hd, list2set(tail)))"
                                       "x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (inst 1 "a")
                                              (("2"
                                                (typepred "a")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "member" -2)
                (("2" (prop)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)
                   ("2" (inst -3 "x")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2" (prop)
                            (("1" (hide -2 -3)
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (expand "Union" 1)
                                  (("1"
                                    (expand "member" -1)
                                    (("1"
                                      (expand "Union" -1)
                                      (("1"
                                        (skolem -1 "A")
                                        (("1"
                                          (inst 1 "A")
                                          (("1"
                                            (typepred "A")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "fin_set")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (A skolem-const-decl
     "(extend[setof[T], finite_set[T], bool, FALSE](list2set(tail)))"
     list_theory nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (tail skolem-const-decl "list[finite_set[T]]" list_theory nil)
    (hd skolem-const-decl "finite_set[T]" list_theory nil)
    (a skolem-const-decl
     "(extend[setof[T], finite_set[T], bool, FALSE](add(hd, list2set(tail))))"
     list_theory nil)
    (Union_member formula-decl nil sets_lemmas nil)
    (injective? const-decl "bool" functions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list2set def-decl "set[T]" list2set nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (Union const-decl "set" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dif_elem_num_dif 0
  (dif_elem_num_dif-1 nil 3847830539
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_dif" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "length" 2 1)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (expand "remove" 2 1)
                          (("2" (lift-if)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "remove_no_effect[T]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (inst -3 "cdr(lst)")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2 -1 -2)
                                                  (("1"
                                                    (expand
                                                     "dif_elem?"
                                                     1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "dif_elem?"
                                                         -4)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "i+1"
                                                           "j+1")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "count_pos?2" :dir rl)
                                        (("2"
                                          (use "pos?_cor[T]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (name-replace
                                               "i"
                                               "pos?(car(lst), cdr(lst), equal?)`2")
                                              (("2"
                                                (expand "dif_elem?" -5)
                                                (("2"
                                                  (inst -5 "0" "i+1")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (reveal -2)
                                                      (("3"
                                                        (use
                                                         "pos?_len")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (expand "nth" 1)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (typepred "equal?")
                                  (("2"
                                    (expand "equivalence?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "reflexive?" -1)
                                        (("2"
                                          (inst -1 "car(lst)")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[T]" list_theory nil)
    (remove_no_effect formula-decl nil list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos?_cor formula-decl nil list_theory nil)
    (pos? def-decl "[bool, nat]" list_theory nil)
    (pos?_len formula-decl nil list_theory nil)
    (count_pos?2 formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (num_dif def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (dif_elem_cons_append 0
  (dif_elem_cons_append-1 nil 3847960345
   ("" (skeep)
    (("" (expand "dif_elem?" 2)
      (("" (skeep)
        (("" (rewrite "length_append")
          (("" (expand "length" -2 1)
            (("" (expand "length" -3 1)
              (("" (expand "length" -2 2)
                (("" (rewrite "nth_append_uni")
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (rewrite "nth_append_uni")
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "dif_elem?" -4)
                              (("1"
                                (inst -4 "i" "j")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (expand "nth" -1 2)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (expand "length" -5 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "pos?_mem2")
                                        (("2"
                                          (inst 2 "nth(lst, i)")
                                          (("2"
                                            (rewrite "member_nth_uni")
                                            (("2"
                                              (typepred "equal?")
                                              (("2"
                                                (expand
                                                 "equivalence?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "symmetric?"
                                                     -2)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "nth(lst, i)"
                                                       "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (expand "nth" -1 1)
                        (("2" (assert)
                          (("2" (rewrite "nth_append_uni")
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1"
                                  (rewrite "pos?_mem2")
                                  (("1"
                                    (inst 2 "nth(lst, j)")
                                    (("1"
                                      (rewrite "member_nth_uni")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" -4 2)
                                  (("2"
                                    (expand "nth" -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dif_elem? const-decl "bool" list_theory nil)
    (length_append formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append_uni formula-decl nil list_theory nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (member_nth_uni formula-decl nil list_theory nil)
    (pos?_mem2 formula-decl nil list_theory nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (num_dif_append_cons 0
  (num_dif_append_cons-1 nil 3847831888
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "append" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (expand "member" -2)
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (prop)
                            (("1" (expand "num_dif" 3 1)
                              (("1"
                                (expand "remove" 3 1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "remove_append2")
                                          (("1"
                                            (expand "append" 1 2)
                                            (("1"
                                              (expand "num_dif" 1 2)
                                              (("1"
                                                (expand "remove" 1 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "remove_append2")
                                                    (("1"
                                                      (expand
                                                       "remove"
                                                       1
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (typepred
                                                               "equal?")
                                                              (("2"
                                                                (hide
                                                                 -4
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "equivalence?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "symmetric?"
                                                                       -2)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "x"
                                                                         "car(lst)")
                                                                        (("2"
                                                                          (replace
                                                                           -5)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (typepred "equal?")
                                          (("2"
                                            (expand "equivalence?" -1)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "reflexive?"
                                                 -1)
                                                (("2"
                                                  (inst -1 "car(lst)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "num_dif" 3 1)
                              (("2"
                                (expand "append" 3 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "remove" 3 1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 3)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "remove_append2")
                                              (("1"
                                                (expand "num_dif" 1 2)
                                                (("1"
                                                  (expand "remove" 1 3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "remove_append2")
                                                      (("1"
                                                        (expand
                                                         "remove"
                                                         1
                                                         2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "remove(cdr(lst), car(lst), equal?)")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (grind)
                                                                  (("1"
                                                                    (hide
                                                                     3)
                                                                    (("1"
                                                                      (lemma
                                                                       "count_remove2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "equal?"
                                                                         "cdr(lst)"
                                                                         "car(lst)"
                                                                         "y")
                                                                        (("1"
                                                                          (lemma
                                                                           "remove_elem_mem")
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "equal?"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "equivalence?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "symmetric?"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "y"
                                                                                           "car(lst)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "equal?")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "equivalence?"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "symmetric?"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "x"
                                                                                                         "y")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "car(lst)"
                                                                                                             "y"
                                                                                                             "x")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (use
                                                                     "remove_elem_len")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (typepred "equal?")
                                              (("2"
                                                (expand
                                                 "equivalence?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "reflexive?"
                                                     -1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "car(lst)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (count_remove2 formula-decl nil list_theory nil)
    (remove_elem_mem formula-decl nil list_theory nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (transitive? const-decl "bool" relations nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (remove_append2 formula-decl nil list_theory nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_theory nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (num_dif def-decl "nat" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (remove_lst_elem_num_dif 0
  (remove_lst_elem_num_dif-1 nil 3847897437
   ("" (measure-induct "length(lst)" "lst")
    (("" (skolem 1 "lst")
      (("" (prop)
        (("" (skeep)
          (("" (expand "num_dif" 1 1)
            (("" (lift-if)
              (("" (split)
                (("1" (grind)
                  (("1" (use "remove_lst_elem_cons_null")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "num_dif" 2 3)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (expand "append" -1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert)
                          (("2" (expand "append" 2 2)
                            (("2" (expand "remove" 2 3)
                              (("2"
                                (expand "append" 2 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "append" 1 1)
                                      (("1"
                                        (rewrite "remove_append2")
                                        (("1"
                                          (use
                                           "remove_lst_elem_cons_null")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (expand "remove" 1 1)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "remove(cdr(lst), car(lst), equal?)")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "equal?"
                                                       "remove(lst1, car(lst), equal?)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "remove_lst_elem_no_effect2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "equal?"
                                                                   "remove(lst1, car(lst), equal?)"
                                                                   "cdr(lst)"
                                                                   "car(lst)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (use
                                                                         "remove_elem_cor")
                                                                        (("1"
                                                                          (rewrite
                                                                           "count_pos?2")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (use
                                                         "remove_elem_len")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred "equal?")
                                        (("2"
                                          (expand "equivalence?" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "reflexive?" -1)
                                              (("2"
                                                (inst -1 "car(lst)")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove def-decl "list[T]" list_theory nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove_elem_len formula-decl nil list_theory nil)
    (count_pos?2 formula-decl nil list_theory nil)
    (remove_elem_cor formula-decl nil list_theory nil)
    (remove_lst_elem_no_effect2 formula-decl nil list_theory nil)
    (remove_append2 formula-decl nil list_theory nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (remove_lst_elem_cons_null formula-decl nil list_theory nil)
    (append def-decl "list[T]" list_props nil)
    (remove def-decl "list[T]" list_theory nil)
    (num_dif def-decl "nat" list_theory nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_coef_remove_no_effect 0
  (count_coef_remove_no_effect-1 nil 3848342549
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_coef" 1 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (expand "count_coef" 2 3)
                    (("2" (assert)
                      (("2" (prop)
                        (("1" (decompose-equality 1)
                          (("1" (inst -1 "cdr(lst1)")
                            (("1" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -3 "x")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (decompose-equality 1)
                          (("1" (lemma "count_remove2")
                            (("1"
                              (inst -1 "equal?" "lst2" "y" "car(lst1)")
                              (("1"
                                (assert)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (inst -3 "car(lst1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (typepred "equal?")
                                            (("1"
                                              (expand
                                               "equivalence?"
                                               -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "symmetric?"
                                                   -2)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "y"
                                                     "car(lst1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "cdr(lst1)")
                            (("2" (prop)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -3 "x")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count def-decl "nat" list_theory nil)
    (symmetric? const-decl "bool" relations nil)
    (count_remove2 formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (remove def-decl "list[T]" list_theory nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_coef1 0
  (count_coef1-1 nil 3849282249
   ("" (induct "lst1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "count_coef" 1)
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (count_coef2_len 0
  (count_coef2_len-1 nil 3849360633
   ("" (measure-induct "length(lst1)" "lst1")
    (("" (skolem 1 "lst1")
      (("" (prop)
        (("" (skeep)
          (("" (expand "count_coef" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "length" 2 1)
                  (("2" (expand "length" 2 2)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (inst -1 "cdr(lst1)")
                          (("2" (prop)
                            (("1" (inst?) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (equiv type-eq-decl nil list_theory nil)
    (equivalence? const-decl "bool" relations nil)
    (PRED type-eq-decl nil defined_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_coef2_nth_TCC1 0
  (count_coef2_nth_TCC1-1 nil 3849360632
   ("" (skeep) (("" (rewrite "count_coef2_len") nil nil)) nil)
   ((count_coef2_len formula-decl nil list_theory nil)
    (T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (list type-decl nil list_adt nil))
   nil
   (count_coef2_nth subtype "list_theory.i"
    "below[length[nat](count_coef(lst1, lst2, equal?)`2)]")))
 (count_coef2_nth 0
  (count_coef2_nth-1 nil 3849361151
   ("" (measure-induct "length(lst1)" "lst1")
    (("1" (skolem 1 "lst1")
      (("1" (prop)
        (("1" (skeep)
          (("1" (expand "count_coef" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "nth" 1) (("1" (assert) nil nil))
                        nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (inst -1 "cdr(lst1)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "count_coef2_len") nil nil)) nil))
      nil))
    nil)
   ((count_coef2_len formula-decl nil list_theory nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count def-decl "nat" list_theory nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (equivalence? const-decl "bool" relations nil)
    (equiv type-eq-decl nil list_theory nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil list_theory nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (card_surj_aux 0
  (card_surj_aux-1 nil 3826485264
   ("" (skeep)
    (("" (skolem -1 "f1")
      (("" (skolem -2 "f2")
        (("" (inst 1 "o(f2, f1)")
          (("" (expand "surjective?" 1)
            (("" (skeep)
              (("" (expand "surjective?" -2)
                (("" (inst -2 "y")
                  (("" (skolem -2 "mid")
                    (("" (expand "surjective?" -1)
                      (("" (inst -1 "mid")
                        (("" (skeep)
                          (("" (inst 1 "x") (("" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil list_theory nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "T3" function_props nil)
    (surjective? const-decl "bool" functions nil))
   shostak))
 (card_surj 0
  (card_surj-1 nil 3826400681
   ("" (skeep)
    (("" (rewrite "card_def")
      (("" (rewrite "card_def")
        (("" (rewrite "Card_surjection")
          (("" (hide 2)
            (("" (name-replace "n2" "Card(fin_set2)")
              (("" (hide -1)
                (("" (lemma "Card_bijection[T]")
                  (("" (inst -1 "fin_set2" "Card[T](fin_set2)")
                    (("" (assert)
                      (("" (lemma "card_surj_aux")
                        (("" (inst? -1)
                          (("" (inst -1 "fin_set2")
                            (("" (prop)
                              ((""
                                (hide -2 2)
                                ((""
                                  (expand "bijective?" -1)
                                  ((""
                                    (skeep)
                                    (("" (inst 1 "f") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card_def formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil list_theory nil)
    (Card_surjection formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (card_surj_aux formula-decl nil list_theory nil))
   shostak)))

