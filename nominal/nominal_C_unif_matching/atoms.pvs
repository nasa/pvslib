
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Authors: Gabriel Ferreira Silva (*)
%          Ana Cristina Rocha Oliveira(*)
%          Mauricio Ayala-Rincon(*)
%          Daniele Nantes Sobrinho (*) 
%          Maribel Fernandez(**)
%          (*)Universidade de Brasilia, (**)King's College London
% Last modified: 21 March 2019
% This subtheory contains specifications and formalisations
% of atoms.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

atoms: THEORY
 BEGIN

% Atoms as natural numbers.
atom: TYPE = nat

% Permutations are lists of swappings.
perm: TYPE = list[[atom,atom]]

     a,b,c: VAR atom
     pi, pi1, pi2: VAR perm

% 'act' is the action of a permutation over an atom.
act(pi)(c): RECURSIVE atom =
CASES pi OF
    null: c,
    cons(swp,rest): LET d = act(rest)(c) IN
                    IF d = swp`1 THEN swp`2
                    ELSIF d = swp`2 THEN swp`1
                    ELSE d 
                    ENDIF
 ENDCASES 
MEASURE pi BY <<

% Applying an append of two permutations is equal 
% to apply one by one.
act_append:LEMMA
  act(append(pi1,pi2))(a) = act(pi1)(act(pi2)(a))

% Reverse of a permutation and a permutation produces identity.
act_reverse: LEMMA
  act(reverse(pi))(act(pi)(a)) = a

% Applying the reverse to the result of an action returns
% the original atom.
act_reverse_pi: LEMMA
  act(pi)(a) = b => act(reverse(pi))(b) = a

% A permutation and its reverse produces identity.
act_reverse2: LEMMA
  act(pi)(act(reverse(pi))(a)) = a

% To commute the action of a permutation and a swapping, its necessary to
% modify the swapping by applying the permutation to its atoms.
act_comm: LEMMA
  act(append(pi,(:(a,b):)))(c) = act(append((:(act(pi)(a),act(pi)(b)):),pi))(c)

% If the action of one permutation over two atoms are the same result
% then the original atoms are the same ones.
act_invariance: LEMMA
   act(pi)(a) = act(pi)(b) => a = b

% If the action of two permutations are the same, then the action of
% their reverses are the same.
act_reverse_invariance: LEMMA
   act(pi1) = act(pi2) IMPLIES act(reverse(pi1)) = act(reverse(pi2))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Atoms of a permutation
Atoms(pi): RECURSIVE list[atom] =
   CASES pi OF
         null: null,
	 cons(swp,rest): cons(swp`1, cons(swp`2, Atoms(rest)))
   ENDCASES
  MEASURE pi BY <<

% If a permutation changes an atom, then this atom is
% inside the atoms of such permutation.
act_Atoms: LEMMA
   NOT act(pi)(a) = a IMPLIES member(a, Atoms(pi))

% Atoms of an append of permutations (lists) are the
% append of the atoms of permutations.
Atoms_append: LEMMA
   Atoms(append(pi1,pi2)) = append(Atoms(pi1), Atoms(pi2))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Difference set between two permutations
ds(pi1,pi2): set[atom] = 
      {a | act(pi1)(a) /= act(pi2)(a)}

% The difference set of two permutations is inside the atoms
% of one of the permutations.
ds_in_Atoms: LEMMA
   ds(pi1, pi2)(a) IMPLIES member(a, Atoms(pi1)) OR member(a, Atoms(pi2))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	IMPORTING structure_extra[atom]
	l: VAR list[atom]

% "Difference set" of two permutations intersected 
% with a specific list.
ds_list(l, pi1, pi2): RECURSIVE list[atom] =
   CASES l OF
   	 null: null,
	 cons(head,tail): IF member(head, ds(pi1,pi2))
	 		     THEN cons(head, ds_list(tail,pi1,pi2))
			     ELSE ds_list(tail,pi1,pi2)
			  ENDIF
   ENDCASES
   MEASURE l BY <<

% Characterisation of ds_list
ds_list_member: LEMMA
   (member(a, ds(pi1, pi2)) AND member(a, l))
    = member(a, ds_list(l, pi1, pi2))

% "Difference set" of two permutations as list, i.e.,
% difference list
DS(pi1,pi2): list[atom] =
  ds_list(Atoms(append(pi1,pi2)), pi1, pi2)

% Difference set and difference list represent the
% same atoms.
DS_member: LEMMA
   member(a, ds(pi1,pi2)) = member(a, DS(pi1,pi2))


%%%%%%%%%%%%%%%%% Extra lemma needed 
act_reverse_aux1: CONJECTURE
   act((: :)) = act(append(pi, reverse(pi)))
   
end atoms
