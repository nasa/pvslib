%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Authors: Ana Cristina Rocha Oliveira(*)
%          Mauricio Ayala-Rincon(*)
%          Maribel Fernandez(**)
%          (*)Universidade de Brasilia, (**)King's College London
% Last modified: 21 March 2019
% This subtheory contains extra formalisations of
% lists (auxiliary lemmas that should be included 
% in a more general library).
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
structure_extra[T:TYPE]: THEORY
BEGIN

	  x: VAR T
    l,l1,l2: VAR list[T]

 set: TYPE = setof[T]

  a, b, c: VAR set

 append_member: LEMMA
   member(x, append(l1,l2)) = (member(x,l1) OR member(x,l2))

 nth_append_uni: LEMMA
   FORALL (i: below[length(l1) + length(l2)]):
   nth(append(l1,l2),i) = 
      IF i < length(l1) 
	     THEN nth(l1, i)
	     ELSE nth(l2, i - length(l1))
      ENDIF      

 null_append_uni: LEMMA
   null?(append(l1, l2)) => null?(l1) AND null?(l2) 

 disjoint_union: LEMMA
   disjoint?(a, union(b, c)) => disjoint?(a, b) AND disjoint?(a, c) 

 disjoint_union2: LEMMA
   disjoint?(a, b) AND disjoint?(a, c) => disjoint?(a, union(b, c))

 % a better version for the two lemmas above 
 disjoint?_union_snd: LEMMA
   disjoint?(a, union(b, c)) IFF disjoint?(a, b) AND disjoint?(a, c)

 disjoint?_union_fst: LEMMA
   disjoint?(union(a, b), c) IFF disjoint?(a, c) AND disjoint?(b, c)
   
 disjoint_symmetric: LEMMA
   disjoint?(a, b) => disjoint?(b, a)
   
END structure_extra

