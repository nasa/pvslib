(freshness
 (fresh_TCC1 0
  (fresh_TCC1-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (fresh_TCC2 0
  (fresh_TCC2-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (fresh_TCC3 0
  (fresh_TCC3-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (atom type-eq-decl nil atoms nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (fresh_TCC4 0
  (fresh_TCC4-1 nil 3624351302 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (ext_preserves_fresh 0
  (ext_preserves_fresh-2 nil 3745911502
   ("" (induct "t")
    (("1" (grind)
      (("1"
        (case "act(reverse(pi!1))(act(pi!1)(a!1)) = act(reverse(pi!1))(act(pi!1)(at1_var!1))")
        (("1" (rewrite "act_reverse")
          (("1" (rewrite "act_reverse") nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand* "ext" "fresh")
          (("2" (rewrite "reverse_append")
            (("2" (rewrite "act_append")
              (("2" (rewrite "act_reverse") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand "fresh" 1)
          (("5" (case "ord(ext(pi)(abs(abs1_var, abs2_var)))= 4")
            (("1" (expand "ord")
              (("1" (lift-if -1)
                (("1" (assert)
                  (("1" (prop)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand "ext" -1)
                                (("1"
                                  (case
                                   "act(reverse(pi))(act(pi)(a)) = act(reverse(pi))(act(pi)(abs1_var))")
                                  (("1"
                                    (rewrite "act_reverse")
                                    (("1"
                                      (rewrite "act_reverse")
                                      nil
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "ext" 2)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (expand "ext" 2)
                                (("3"
                                  (inst -2 "Delta" "a" "pi")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "ext_preserves_type")
              (("2" (expand "ord") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((ext_preserves_type formula-decl nil nominal_term nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ord const-decl "upto(5)" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (abs adt-constructor-decl "[[atom, term] -> (abs?)]" term_adt nil)
    (act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (ext def-decl "term" nominal_term nil)
    (act def-decl "atom" atoms nil)
    (fresh def-decl "bool" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (ext_preserves_fresh-1 nil 3624351769
   ("" (induct t)
    (("1" (grind)
      (("1"
        (case "act(reverse(pi!1))(act(pi!1)(a!1)) = act(reverse(pi!1))(act(pi!1)(at1_var!1))")
        (("1" (rewrite act_reverse)
          (("1" (rewrite act_reverse) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand* ext fresh)
          (("2" (rewrite reverse_append)
            (("2" (rewrite act_append)
              (("2" (rewrite act_reverse) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (expand fresh 1)
          (("5" (case "ord(ext(pi)(abs(abs1_var, abs2_var)))= 4")
            (("1" (expand ord)
              (("1" (lift-if -1)
                (("1" (assert)
                  (("1" (prop)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (expand ext -1)
                                (("1"
                                  (case
                                   "act(reverse(pi))(act(pi)(a)) = act(reverse(pi))(act(pi)(abs1_var))")
                                  (("1"
                                    (rewrite act_reverse)
                                    (("1"
                                      (rewrite act_reverse)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand ext 2)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (expand ext 2)
                                (("3" (inst -2 Delta a pi) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite ext_preserves_type)
              (("2" (expand ord) (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((ext_preserves_type formula-decl nil nominal_term nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ord const-decl "upto(5)" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (abs adt-constructor-decl "[[atom, term] -> (abs?)]" term_adt nil)
    (act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (ext def-decl "term" nominal_term nil)
    (act def-decl "atom" atoms nil)
    (fresh def-decl "bool" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (ds_fresh_invariance 0
  (ds_fresh_invariance-2 nil 3745911605
   ("" (skolem 1 ("Delta" "a" "pi1" "pi2" "_"))
    (("" (induct "t")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("1" (rewrite "reverse_append")
          (("1" (rewrite "reverse_append")
            (("1" (rewrite "act_append")
              (("1" (rewrite "act_append")
                (("1"
                  (lemma "act_reverse_invariance"
                   ("pi1" "pi1" "pi2" "pi2"))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "reverse_append")
          (("2" (rewrite "reverse_append")
            (("2" (rewrite "act_append")
              (("2" (rewrite "act_append")
                (("2"
                  (lemma "act_reverse_invariance"
                   ("pi1" "pi1" "pi2" "pi2"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (fresh def-decl "bool" freshness nil)
    (ext def-decl "term" nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (reverse_append formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (act_append formula-decl nil atoms nil)
    (act_reverse_invariance formula-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (ds_fresh_invariance-1 nil 3639154570
   ("" (skolem 1 (Delta a pi1 pi2 "_"))
    (("" (induct t)
      (("1" (grind) nil nil)
       ("2" (grind)
        (("1" (rewrite reverse_append)
          (("1" (rewrite reverse_append)
            (("1" (rewrite act_append)
              (("1" (rewrite act_append)
                (("1" (lemma act_reverse_invariance (pi1 pi1 pi2 pi2))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite reverse_append)
          (("2" (rewrite reverse_append)
            (("2" (rewrite act_append)
              (("2" (rewrite act_append)
                (("2" (lemma act_reverse_invariance (pi1 pi1 pi2 pi2))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (act def-decl "atom" atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (fresh def-decl "bool" freshness nil)
    (ext def-decl "term" nominal_term nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (reverse_append formula-decl nil list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (act_append formula-decl nil atoms nil)
    (act_reverse_invariance formula-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (ext_reverse_fresh 0
  (ext_reverse_fresh-2 nil 3745911694
   ("" (induct "t")
    (("1" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("2" (grind)
      (("1" (rewrite "reverse_append")
        (("1" (rewrite "act_append") nil nil)) nil)
       ("2" (rewrite "reverse_append")
        (("2" (rewrite "act_append") nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -4 2 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "term" nominal_term nil)
    (fresh def-decl "bool" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (ext_reverse_fresh-1 nil 3625394163
   ("" (induct t)
    (("1" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("2" (grind)
      (("1" (rewrite reverse_append)
        (("1" (rewrite act_append) nil nil)) nil)
       ("2" (rewrite reverse_append)
        (("2" (rewrite act_append) nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -4 2 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "term" nominal_term nil)
    (fresh def-decl "bool" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (fresh_weakening 0
  (fresh_weakening-2 nil 3745911803
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind)
      (("1" (hide -1 -2 -3)
        (("1" (reveal -4)
          (("1" (inst -1 "Delta!1" "Nabla!1" "a!1")
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide -1 -2 -3)
        (("2" (reveal -6)
          (("2" (inst -1 "Delta!1" "Nabla!1" "a!1")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (grind)
      (("5" (hide -1 -2 -3)
        (("5" (reveal -5)
          (("5" (inst -1 "Delta!1" "Nabla!1" "a!1")
            (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (fresh def-decl "bool" freshness nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (fresh_weakening-1 nil 3626438752
   ("" (induct t)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind)
      (("1" (hide -1 -2 -3)
        (("1" (reveal -4)
          (("1" (inst -1 Delta!1 Nabla!1 a!1) (("1" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 -2 -3)
        (("2" (reveal -6)
          (("2" (inst -1 Delta!1 Nabla!1 a!1) (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (grind)
      (("5" (hide -1 -2 -3)
        (("5" (reveal -5)
          (("5" (inst -1 Delta!1 Nabla!1 a!1) (("5" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (fresh def-decl "bool" freshness nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (fc_TCC1 0
  (fc_TCC1-1 nil 3626435094 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (atom type-eq-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil))
 (fc_member 0
  (fc_member-2 nil 3745911831
   ("" (induct "l") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (fc def-decl "fresh_context" freshness nil)
    (fresh_context type-eq-decl nil freshness nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variable type-eq-decl nil nominal_term nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (fc_member-1 nil 3626445021
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (fc def-decl "fresh_context" freshness nil)
    (fresh_context type-eq-decl nil freshness nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (variable type-eq-decl nil nominal_term nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh?_TCC1 0
  (fresh?_TCC1-1 nil 3626435094 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (fresh?_is_fresh 0
  (fresh?_is_fresh-2 nil 3745911980
   ("" (skolem 1 ("_" "a" "_"))
    (("" (induct "t")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("2" (replace -2 1 rl) (("2" (assert) nil nil)) nil)) nil)
       ("3" (grind) nil nil)
       ("4" (skeep*)
        (("4" (expand "fresh?" -3)
          (("4" (expand "x")
            (("4" (lift-if)
              (("4" (assert)
                (("4" (prop)
                  (("4" (expand "fresh" 1)
                    (("4" (inst -4 "fresh?(a, pair1_var)`1")
                      (("4" (inst -5 "fresh?(a, pair2_var)`1")
                        (("4" (lemma "fresh_weakening")
                          (("4"
                            (inst-cp -1 "fresh?(a, pair2_var)`1"
                             "Delta" "a" "pair2_var")
                            (("4"
                              (inst -1 "fresh?(a, pair1_var)`1" "Delta"
                               "a" "pair1_var")
                              (("4"
                                (assert)
                                (("4"
                                  (assert)
                                  (("4"
                                    (lemma
                                     "append_member"
                                     ("l1"
                                      "fresh?(a, pair1_var)`1"
                                      "l2"
                                      "fresh?(a, pair2_var)`1"))
                                    (("4"
                                      (split -2)
                                      (("1"
                                        (split -3)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -3 "ax")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst -2 "ax")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (fresh def-decl "bool" freshness nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (fresh_weakening formula-decl nil freshness nil)
    (append_member formula-decl nil structure_extra nil)
    (x const-decl "[fresh_context, bool]" freshness nil))
   nil)
  (fresh?_is_fresh-1 nil 3626435098
   ("" (skolem 1 ("_" a "_"))
    (("" (induct t)
      (("1" (grind) nil nil)
       ("2" (grind)
        (("2" (replace -2 1 rl) (("2" (assert) nil nil)) nil)) nil)
       ("3" (grind) nil nil)
       ("4" (skeep*)
        (("4" (expand fresh? -3)
          (("4" (expand x)
            (("4" (lift-if)
              (("4" (assert)
                (("4" (prop)
                  (("4" (expand fresh 1)
                    (("4" (inst -4 "fresh?(a, pair1_var)`1")
                      (("4" (inst -5 "fresh?(a, pair2_var)`1")
                        (("4" (lemma fresh_weakening)
                          (("4"
                            (inst-cp -1 "fresh?(a, pair2_var)`1" Delta
                             a pair2_var)
                            (("4"
                              (inst -1 "fresh?(a, pair1_var)`1" Delta a
                               pair1_var)
                              (("4"
                                (assert)
                                (("4"
                                  (assert)
                                  (("4"
                                    (lemma
                                     append_member
                                     (l1
                                      "fresh?(a, pair1_var)`1"
                                      l2
                                      "fresh?(a, pair2_var)`1"))
                                    (("4"
                                      (split -2)
                                      (("1"
                                        (split -3)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -3 ax)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst -2 ax)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (fresh def-decl "bool" freshness nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (term_induction formula-decl nil term_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (fresh_weakening formula-decl nil freshness nil)
    (append_member formula-decl nil structure_extra nil)
    (x const-decl "[fresh_context, bool]" freshness nil))
   shostak))
 (ext_reverse_fresh? 0
  (ext_reverse_fresh?-2 nil 3745912095
   ("" (induct "t")
    (("1" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("2" (grind)
      (("2" (rewrite "reverse_append")
        (("2" (rewrite "act_append") nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite "act_reverse") nil nil)
       ("2" (replace -5 1 rl) (("2" (rewrite "act_reverse2") nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "term" nominal_term nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (ext_reverse_fresh?-1 nil 3629461799
   ("" (induct t)
    (("1" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -3 1 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("2" (grind)
      (("2" (rewrite reverse_append)
        (("2" (rewrite act_append) nil nil)) nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil)
     ("5" (grind)
      (("1" (rewrite act_reverse) nil nil)
       ("2" (replace -5 1 rl) (("2" (rewrite act_reverse2) nil nil))
        nil))
      nil)
     ("6" (grind) nil nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (act_append formula-decl nil atoms nil)
    (reverse_append formula-decl nil list_props nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "term" nominal_term nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (not_fresh_is_null 0
  (not_fresh_is_null-2 nil 3745912125
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (fresh_context type-eq-decl nil freshness nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (not_fresh_is_null-1 nil 3629463037
   ("" (induct t)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (fresh_context type-eq-decl nil freshness nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak))
 (fresh?_complete 0
  (fresh?_complete-2 nil 3745912209
   ("" (induct "t")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep*)
      (("5" (expand "fresh?" 1)
        (("5" (expand "fresh" -3)
          (("5" (flatten)
            (("5" (expand "x")
              (("5" (lift-if)
                (("5" (inst -1 "Delta" "a")
                  (("5" (inst -2 "Delta" "a")
                    (("5" (assert)
                      (("5" (flatten)
                        (("5" (assert)
                          (("5" (skeep)
                            (("5" (rewrite "append_member")
                              (("5"
                                (inst -2 "b" "X")
                                (("5"
                                  (inst -4 "b" "X")
                                  (("5" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (append_member formula-decl nil structure_extra nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (member def-decl "bool" list_props nil)
    (fresh def-decl "bool" freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   nil)
  (fresh?_complete-1 nil 3630757865
   ("" (induct t)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skeep*)
      (("5" (expand fresh? 1)
        (("5" (expand fresh -3)
          (("5" (flatten)
            (("5" (expand x)
              (("5" (lift-if)
                (("5" (inst -1 Delta a)
                  (("5" (inst -2 Delta a)
                    (("5" (assert)
                      (("5" (flatten)
                        (("5" (assert)
                          (("5" (skeep)
                            (("5" (rewrite append_member)
                              (("5"
                                (inst -2 b X)
                                (("5"
                                  (inst -4 b X)
                                  (("5" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (append_member formula-decl nil structure_extra nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term_induction formula-decl nil term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (member def-decl "bool" list_props nil)
    (fresh def-decl "bool" freshness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fresh_context type-eq-decl nil freshness nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil))
   shostak)))

