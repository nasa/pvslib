(atoms
 (act_TCC1 0
  (act_TCC1-1 nil 3624185380 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil))
 (act_append 0
  (act_append-2 nil 3745849463
   ("" (induct "pi1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (append def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   nil)
  (act_append-1 nil 3624187553
   ("" (induct pi1) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (append def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   shostak))
 (act_reverse 0
  (act_reverse-2 nil 3745849591
   ("" (induct "pi")
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (rewrite "act_append") (("1" (grind) nil nil)) nil)
       ("2" (rewrite "act_append") nil nil)
       ("3" (rewrite "act_append") nil nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (act_append formula-decl nil atoms nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   nil)
  (act_reverse-1 nil 3624188548
   ("" (induct pi)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (rewrite act_append) (("1" (grind) nil nil)) nil)
       ("2" (rewrite act_append) nil nil)
       ("3" (rewrite act_append) nil nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (act_append formula-decl nil atoms nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   shostak))
 (act_reverse_pi 0
  (act_reverse_pi-2 nil 3745849643
   ("" (skeep)
    (("" (replace -1 1 rl) (("" (rewrite "act_reverse") nil nil)) nil))
    nil)
   ((perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (act_reverse formula-decl nil atoms nil))
   nil)
  (act_reverse_pi-1 nil 3624191870
   ("" (skeep)
    (("" (replace -1 1 rl) (("" (rewrite act_reverse) nil nil)) nil))
    nil)
   ((perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (act_reverse formula-decl nil atoms nil))
   shostak))
 (act_reverse2 0
  (act_reverse2-2 nil 3745850026
   ("" (skeep)
    (("" (lemma "reverse_reverse" ("l" "pi"))
      (("" (lemma "act_reverse" ("pi" "reverse(pi)" "a" "a"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (reverse_reverse formula-decl nil list_props nil)
    (act_reverse formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil))
   nil)
  (act_reverse2-1 nil 3624702666
   ("" (skeep)
    (("" (lemma reverse_reverse (l pi))
      (("" (lemma act_reverse (pi "reverse(pi)" a a))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (reverse_reverse formula-decl nil list_props nil)
    (act_reverse formula-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil))
   shostak))
 (act_comm 0
  (act_comm-2 nil 3745850103
   ("" (skeep)
    (("" (rewrite "act_append")
      (("" (rewrite "act_append")
        (("" (grind)
          (("1"
            (lemma "act_reverse_pi"
             ("pi" "pi" "a" "c" "b" "act(pi)(a)"))
            (("1" (rewrite "act_reverse") (("1" (assert) nil nil))
              nil))
            nil)
           ("2"
            (lemma "act_reverse_pi"
             ("pi" "pi" "a" "c" "b" "act(pi)(b)"))
            (("2" (rewrite "act_reverse") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((act_append formula-decl nil atoms nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (act def-decl "atom" atoms nil))
   nil)
  (act_comm-1 nil 3624192599
   ("" (skeep)
    (("" (rewrite act_append)
      (("" (rewrite act_append)
        (("" (grind)
          (("1" (lemma act_reverse_pi (pi pi a c b "act(pi)(a)"))
            (("1" (rewrite act_reverse) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma act_reverse_pi (pi pi a c b "act(pi)(b)"))
            (("2" (rewrite act_reverse) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((act_append formula-decl nil atoms nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse_pi formula-decl nil atoms nil)
    (act def-decl "atom" atoms nil))
   shostak))
 (act_invariance 0
  (act_invariance-2 nil 3745850178
   ("" (skeep)
    ((""
      (case "act(reverse(pi))(act(pi)(a)) = act(reverse(pi))(act(pi)(b))")
      (("1" (rewrite "act_reverse")
        (("1" (rewrite "act_reverse") nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil) (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (act_reverse formula-decl nil atoms nil))
   nil)
  (act_invariance-1 nil 3624370506
   ("" (skeep)
    ((""
      (case "act(reverse(pi))(act(pi)(a)) = act(reverse(pi))(act(pi)(b))")
      (("1" (rewrite act_reverse) (("1" (rewrite act_reverse) nil nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((reverse def-decl "list[T]" list_props nil)
    (act def-decl "atom" atoms nil) (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (atom type-eq-decl nil atoms nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (act_reverse formula-decl nil atoms nil))
   shostak))
 (act_reverse_invariance 0
  (act_reverse_invariance-2 nil 3745850236
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (decompose-equality -1)
        (("" (inst-cp -1 "act(reverse(pi1))(x!1)")
          (("" (rewrite "act_reverse2")
            (("" (replace -2 1)
              (("" (rewrite "act_reverse") (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (act def-decl "atom" atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)
  (act_reverse_invariance-1 nil 3625309096
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (decompose-equality -1)
        (("" (inst-cp -1 "act(reverse(pi1))(x!1)")
          (("" (rewrite act_reverse2)
            (("" (replace -2 1)
              (("" (rewrite act_reverse) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (act def-decl "atom" atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (act_reverse formula-decl nil atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (act_Atoms 0
  (act_Atoms-2 nil 3745850308
   ("" (induct "pi") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   nil)
  (act_Atoms-1 nil 3624694517
   ("" (induct pi) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (act def-decl "atom" atoms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   shostak))
 (Atoms_append 0
  (Atoms_append-2 nil 3745850402
   ("" (induct "pi1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (append def-decl "list[T]" list_props nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   nil)
  (Atoms_append-1 nil 3624696016
   ("" (induct pi1)
    (("1" (grind)
      (("1" (expand* emptyset union member)
        (("1" (decompose-equality) nil nil)) nil))
      nil)
     ("2" (grind)
      (("2" (hide -1) (("2" (expand* add union member) nil nil)) nil))
      nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (append def-decl "list[T]" list_props nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   shostak))
 (ds_in_Atoms 0
  (ds_in_Atoms-3 nil 3745909937
   ("" (induct "pi2")
    (("1" (grind) (("1" (rewrite "act_Atoms") nil nil)) nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "ds")
            (("2" (case "act(cons(head,pi1))(a) /= act(tail)(a)")
              (("1" (inst -2 "a" "cons(head,pi1)")
                (("1" (expand "Atoms" -2 1)
                  (("1" (expand "Atoms" 2 1)
                    (("1" (expand "member" -2 1)
                      (("1" (expand "member" -2 1)
                        (("1" (expand "member" 2 1)
                          (("1" (expand "member" 2 1)
                            (("1" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "act" 1 1)
                (("2" (expand "act" -3 2)
                  (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (act def-decl "atom" atoms nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_Atoms formula-decl nil atoms nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ds const-decl "set[atom]" atoms nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   nil)
  (ds_in_Atoms-2 nil 3745850570
   ("" (induct "pi2")
    (("1" (grind) (("1" (rewrite "act_Atoms") nil nil)) nil)
     ("2" (skolem 1 ("head" "tail"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand "ds")
            (("2" (case "act(cons(head,pi1))(a) /= act(tail)(a)")
              (("1" (inst -2 a "cons(head,pi1)")
                (("1" (expand "Atoms" -2 1)
                  (("1" (expand "Atoms" 2 1)
                    (("1" (expand "member" -2 1)
                      (("1" (expand "member" -2 1)
                        (("1" (expand "member" 2 1)
                          (("1" (expand "member" 2 1)
                            (("1" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "act" 1 1)
                (("2" (expand "act" -3 2)
                  (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (ds const-decl "set[atom]" atoms nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (act_Atoms formula-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (act def-decl "atom" atoms nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/= const-decl "boolean" notequal nil))
   nil)
  (ds_in_Atoms-1 nil 3627302892
   ("" (induct pi2)
    (("1" (grind) (("1" (rewrite act_Atoms) nil nil)) nil)
     ("2" (skolem 1 (head tail))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (expand ds)
            (("2" (case "act(cons(head,pi1))(a) /= act(tail)(a)")
              (("1" (inst -2 a "cons(head,pi1)")
                (("1" (expand Atoms -2 1)
                  (("1" (expand Atoms 2 1)
                    (("1" (expand member -2 1)
                      (("1" (expand member -2 1)
                        (("1" (expand member 2 1)
                          (("1" (expand member 2 1)
                            (("1" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand act 1 1)
                (("2" (expand act -3 2)
                  (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (act def-decl "atom" atoms nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_Atoms formula-decl nil atoms nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ds const-decl "set[atom]" atoms nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (perm type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil))
   shostak))
 (ds_list_TCC1 0
  (ds_list_TCC1-1 nil 3626443668 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (atom type-eq-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (ds const-decl "set[atom]" atoms nil)
    (member const-decl "bool" sets nil))
   nil))
 (ds_list_TCC2 0
  (ds_list_TCC2-1 nil 3626443668 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (atom type-eq-decl nil atoms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (ds const-decl "set[atom]" atoms nil)
    (member const-decl "bool" sets nil))
   nil))
 (ds_list_member 0
  (ds_list_member-2 nil 3745910001
   ("" (induct "l") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (ds_list def-decl "list[atom]" atoms nil)
    (member def-decl "bool" list_props nil)
    (ds const-decl "set[atom]" atoms nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (ds_list_member-1 nil 3626444539
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (ds_list def-decl "list[atom]" atoms nil)
    (member def-decl "bool" list_props nil)
    (ds const-decl "set[atom]" atoms nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (perm type-eq-decl nil atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (DS_member 0
  (DS_member-2 nil 3745910174
   ("" (skeep)
    (("" (expand "DS")
      (("" (lemma "ds_in_Atoms" ("a" "a" "pi1" "pi1" "pi2" "pi2"))
        ((""
          (lemma "ds_list_member"
           ("pi1" "pi1" "pi2" "pi2" "l" "Atoms(append(pi1, pi2))" "a"
            "a"))
          (("" (replace -1 1 rl)
            (("" (hide -1)
              (("" (rewrite "Atoms_append")
                (("" (rewrite "append_member")
                  (("" (expand "member" 1 (1 2))
                    (("" (iff) (("" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DS const-decl "list[atom]" atoms nil)
    (append def-decl "list[T]" list_props nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (ds_list_member formula-decl nil atoms nil)
    (append_member formula-decl nil structure_extra nil)
    (member const-decl "bool" sets nil)
    (Atoms_append formula-decl nil atoms nil)
    (ds_in_Atoms formula-decl nil atoms nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil))
   nil)
  (DS_member-1 nil 3626443670
   ("" (skeep)
    (("" (expand DS)
      (("" (lemma ds_in_Atoms (a a pi1 pi1 pi2 pi2))
        ((""
          (lemma ds_list_member
           (pi1 pi1 pi2 pi2 l "Atoms(append(pi1, pi2))" a a))
          (("" (replace -1 1 rl)
            (("" (hide -1)
              (("" (rewrite Atoms_append)
                (("" (rewrite append_member)
                  (("" (expand member 1 (1 2))
                    (("" (iff) (("" (prop) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DS const-decl "list[atom]" atoms nil)
    (append def-decl "list[T]" list_props nil)
    (Atoms def-decl "list[atom]" atoms nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (ds_list_member formula-decl nil atoms nil)
    (append_member formula-decl nil structure_extra nil)
    (member const-decl "bool" sets nil)
    (Atoms_append formula-decl nil atoms nil)
    (ds_in_Atoms formula-decl nil atoms nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil))
   shostak)))

