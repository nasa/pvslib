(nominalunif
 (unify_TCC1 0
  (unify_TCC1-1 nil 3626778817
   ("" (skeep)
    (("" (expand Vars_in)
      (("" (rewrite ext_preserves_Vars)
        (("" (prop)
          (("1" (expand Vars 1 2)
            (("1" (expand* subset? union member)
              (("1" (grind) nil nil)) nil))
            nil)
           ("2" (expand occurs 1) (("2" (assert) nil nil)) nil)
           ("3" (rewrite ext_preserves_occurs) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((ext_preserves_Vars formula-decl nil nominal_term nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (reverse def-decl "list[T]" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (ext_preserves_occurs formula-decl nil nominal_term nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (occurs def-decl "bool" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (singleton const-decl "(singleton?)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (Vars_in const-decl "bool" substitution nil))
   nil
   (unify subtype
    "(term_adt[atom, atoms.perm, variable, symbol].V(nominalunif.s), nominal_term.ext(list_props[[atom, atom]].reverse(term_adt[atom, atoms.perm, variable, symbol].p(nominalunif.s)))(nominalunif.t))"
    "{sigma: [nominal_term.variable, term_adt[atom, atoms.perm, variable, symbol].term] | booleans.AND(substitution.Vars_in(nominalunif.t, nominalunif.s)(sigma), (booleans.NOT)(nominal_term.occurs(sigma`1, sigma`2)))}")))
 (unify_TCC2 0
  (unify_TCC2-1 nil 3626778817 ("" (termination-tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Id const-decl "Sub" substitution nil)
    (Vars_in const-decl "bool" substitution nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (Vars const-decl "finite_set[variable]" substitution nil))
   nil
   (unify subtype "substitution.Id"
    "substitution.Subs_unif(nominalunif.t, nominalunif.s)")))
 (unify_TCC3 0
  (unify_TCC3-1 nil 3626778817
   ("" (skeep*)
    (("" (rewrite ext_preserves_occurs)
      (("" (expand Vars_in)
        (("" (rewrite ext_preserves_Vars)
          (("" (split 3)
            (("1" (hide-all-but 1)
              (("1" (expand Vars 1 2) (("1" (grind) nil nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (flatten)
                (("2" (decompose-equality -1)
                  (("2" (expand occurs 2) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars_in const-decl "bool" substitution nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (occurs def-decl "bool" nominal_term nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (reverse def-decl "list[T]" list_props nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_preserves_occurs formula-decl nil nominal_term nil))
   nil
   (unify subtype
    "(nominalunif.X, nominal_term.ext(list_props[[atom, atom]].reverse(nominalunif.pm))(nominalunif.s))"
    "{sigma: [nominal_term.variable, term_adt[atom, atoms.perm, variable, symbol].term] | booleans.AND(substitution.Vars_in(nominalunif.t, nominalunif.s)(sigma), (booleans.NOT)(nominal_term.occurs(sigma`1, sigma`2)))}")))
 (unify_TCC4 0
  (unify_TCC4-1 nil 3626778817 ("" (termination-tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Id const-decl "Sub" substitution nil)
    (Vars_in const-decl "bool" substitution nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (alpha? def-decl "[fresh_context, bool]" alpha_equivalence nil))
   nil
   (unify subtype "substitution.Id"
    "substitution.Subs_unif(nominalunif.t, nominalunif.s)")))
 (unify_TCC5 0
  (unify_TCC5-1 nil 3626778817 ("" (termination-tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Id const-decl "Sub" substitution nil)
    (Vars_in const-decl "bool" substitution nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (Vars const-decl "finite_set[variable]" substitution nil))
   nil
   (unify subtype "substitution.Id"
    "substitution.Subs_unif(nominalunif.t, nominalunif.s)")))
 (unify_TCC6 0
  (unify_TCC6-1 nil 3627301166
   ("" (skeep*)
    (("" (expand every) (("" (expand Id) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Id const-decl "Sub" substitution nil)
    (every adt-def-decl "boolean" list_adt nil))
   nil
   (unify subtype "substitution.Id"
    "substitution.Subs_unif(nominalunif.t, nominalunif.s)")))
 (unify_TCC7 0
  (unify_TCC7-1 nil 3627301166
   ("" (skeep*)
    ((""
      (lemma lex2_lt
       (i "card(Vars(Subs(sig1)(t2),Subs(sig1)(term2(s))))" j
          "depth(Subs(sig1)(t2))" m "card(Vars(t, s))" n "depth(t)"))
      (("" (assert)
        (("" (hide 2 3)
          (("" (flatten)
            (("" (expand Vars)
              (("" (expand Vars 1 (3 4))
                (("" (expand Vars 2 (3 4))
                  ((""
                    (lemma card_subset
                     (A
                      "union(Vars(Subs(sig1)(t2)), Vars(Subs(sig1)(term2(s))))"
                      B
                      "union(union(Vars(term1(t)), Vars(term2(t))), union(Vars(term1(s)), Vars(term2(s))))"))
                    (("" (split -1)
                      (("1" (expand <=)
                        (("1" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (assert)
                            (("2" (case "sig1 = Id")
                              (("1"
                                (expand* Id Subs)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand depth 2 2)
                                    (("1"
                                      (expand max)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 Subs_unif_Vars_decrease
                                 (u
                                  "t1"
                                  s
                                  "term1(s)"
                                  w
                                  "t2"
                                  t
                                  "term2(s)"
                                  gamma
                                  "sig1"))
                                (("2"
                                  (expand Vars -1)
                                  (("2"
                                    (case
                                     "union(union(Vars(t1), Vars(term1(s))), union(Vars(t2), Vars(term2(s)))) =
                                union(union(Vars(term1(t)), Vars(term2(t))), union(Vars(term1(s)), Vars(term2(s))))")
                                    (("1"
                                      (replaces -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (reveal -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (decompose-equality)
                                              (("2"
                                                (grind)
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (lemma Subs_unif_Vars_subset
                         (u "t1" s "term1(s)" w "t2" t "term2(s)" gamma
                          "sig1"))
                        (("2" (hide-all-but (-1 -2 -3 1))
                          (("2" (expand Vars -1)
                            (("2" (expand* subset? union member)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 x!1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((depth def-decl "nat" nominal_term nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (Subs_unif type-eq-decl nil substitution nil)
    (occurs def-decl "bool" nominal_term nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Vars_in const-decl "bool" substitution nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Subs def-decl "term" substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (Id const-decl "Sub" substitution nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pair adt-constructor-decl "[[term, term] -> (pair?)]" term_adt
     nil)
    (member const-decl "bool" sets nil)
    (Subs_unif_Vars_decrease formula-decl nil substitution nil)
    (<= const-decl "bool" reals nil)
    (subset? const-decl "bool" sets nil)
    (Subs_unif_Vars_subset formula-decl nil substitution nil)
    (union const-decl "set" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (unify termination
    "nominalunif.unify(substitution.Subs(nominalunif.sig1)(nominalunif.t2), substitution.Subs(nominalunif.sig1)(term_adt[atom, atoms.perm, variable, symbol].term2(nominalunif.s)))"
    "nil")))
 (unify_TCC8 0
  (unify_TCC8-1 nil 3627301166
   ("" (skeep*)
    (("" (expand x)
      (("" (split 2)
        (("1" (flatten)
          (("1"
            (lemma Subs_unif_append
             (u "t1" s "term1(s)" w "t2" t "term2(s)" sigma "sig1"
              gamma "sig2"))
            (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (flatten) (("2" (expand* Id every) nil nil)) nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, Sub, bool]" nominalunif nil)
    (Id const-decl "Sub" substitution nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (Subs_unif_append formula-decl nil substitution nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Vars_in const-decl "bool" substitution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (occurs def-decl "bool" nominal_term nil)
    (Subs_unif type-eq-decl nil substitution nil)
    (Sub type-eq-decl nil substitution nil)
    (Subs def-decl "term" substitution nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (unify subtype
    "nominalunif.x((nominalunif.Delta2, nominalunif.sig2, nominalunif.b2), (nominalunif.Delta3, nominalunif.sig1, booleans.AND(nominalunif.b1, nominalunif.b3)))"
    "[freshness.fresh_context, substitution.Subs_unif(nominalunif.t, nominalunif.s), booleans.bool]")))
 (unify_TCC9 0
  (unify_TCC9-2 "" 3833402732
   ("" (skosimp*)
    ((""
      (lemma lex2_lt
       (i "card(Vars(t1!1,term1(s!1)))" j "depth(t1!1)" m
          "card(Vars(t!1, s!1))" n "depth(t!1)"))
      (("" (assert)
        (("" (hide 2 3)
          ((""
            (lemma card_subset
             (A "Vars(t1!1, term1(s!1))" B "Vars(t!1, s!1)"))
            (("" (expand <=)
              (("" (split -1)
                (("1" (assert) nil nil) ("2" (grind) nil nil)
                 ("3" (hide-all-but (-1 1))
                  (("3" (expand Vars 1)
                    (("3" (expand Vars 1 (3 4))
                      (("3" (expand* union subset? member)
                        (("3" (skosimp) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (unify termination
    "nominalunif.unify(nominalunif.t1, term_adt[atom, atoms.perm, variable, symbol].term1(nominalunif.s))"
    "nil"))
  (unify_TCC9-1 nil 3627301166
   ("" (skeep*)
    ((""
      (lemma lex2_lt
       (i "card(Vars(Subs(sig1)(t2),Subs(sig1)(term2(s))))" j
          "depth(Subs(sig1)(t2))" m "card(Vars(t, s))" n "depth(t)"))
      (("" (assert)
        (("" (hide 2 3)
          (("" (flatten)
            (("" (expand Vars)
              (("" (expand Vars 1 (3 4))
                (("" (expand Vars 2 (3 4))
                  (("" (decompose-equality -2)
                    ((""
                      (lemma card_subset
                       (A
                        "union(Vars(Subs(sig1)(t2)), Vars(Subs(sig1)(term2(s))))"
                        B
                        "union(union(Vars(term1(t)), Vars(term2(t))), union(Vars(term1(s)), Vars(term2(s))))"))
                      (("" (split -1)
                        (("1" (expand <=)
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (assert)
                              (("2"
                                (case "sig1 = Id")
                                (("1"
                                  (expand* Id Subs)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand depth 2 2)
                                      (("1"
                                        (expand max)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   Subs_unif_Vars_decrease
                                   (u
                                    "t1"
                                    s
                                    "term1(s)"
                                    w
                                    "t2"
                                    t
                                    "term2(s)"
                                    gamma
                                    "sig1"))
                                  (("2"
                                    (expand Vars -1)
                                    (("2"
                                      (case
                                       "union(union(Vars(t1), Vars(term1(s))), union(Vars(t2), Vars(term2(s)))) =
                   union(union(Vars(term1(t)), Vars(term2(t))), union(Vars(term1(s)), Vars(term2(s))))")
                                      (("1"
                                        (replaces -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand* union member)
                                          (("2"
                                            (decompose-equality)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (lemma Subs_unif_Vars_subset
                           (u "t1" s "term1(s)" w "t2" t "term2(s)"
                            gamma "sig1"))
                          (("2" (hide-all-but (-1 -2 -3 1))
                            (("2" (expand Vars -1)
                              (("2"
                                (expand* subset? union member)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -1 x!1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((depth def-decl "nat" nominal_term nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (variable type-eq-decl nil nominal_term nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (<= const-decl "bool" reals nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unify termination
    "nominalunif.unify(nominalunif.t1, term_adt[atom, atoms.perm, variable, symbol].term1(nominalunif.s))"
    "nil")))
 (unify_TCC10 0
  (unify_TCC10-1 nil 3627301166
   ("" (skeep) (("" (expand* every Id) nil nil)) nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Id const-decl "Sub" substitution nil))
   nil
   (unify subtype "substitution.Id"
    "substitution.Subs_unif(nominalunif.t, nominalunif.s)")))
 (unify_TCC11 0
  (unify_TCC11-2 "" 3833402882 ("" (termination-tcc) nil nil) nil
   shostak
   (unify termination
    "nominalunif.unify(nominalunif.bd, term_adt[atom, atoms.perm, variable, symbol].body(nominalunif.s))"
    "nil"))
  (unify_TCC11-1 nil 3627301166
   ("" (skosimp*)
    ((""
      (lemma lex2_lt
       (i "card(Vars(t1!1,term1(s!1)))" j "depth(t1!1)" m
          "card(Vars(t!1, s!1))" n "depth(t!1)"))
      (("" (assert)
        (("" (hide 2 3)
          (("" (decompose-equality -2)
            ((""
              (lemma card_subset
               (A "Vars(t1!1, term1(s!1))" B "Vars(t!1, s!1)"))
              (("" (expand <=)
                (("" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (expand depth 2 2)
                    (("2" (expand max) (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (hide-all-but (-1 1))
                    (("3" (expand Vars 1)
                      (("3" (expand Vars 1 (3 4))
                        (("3" (expand* union subset? member)
                          (("3" (skosimp) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (occurs def-decl "bool" nominal_term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil
   (unify termination
    "nominalunif.unify(nominalunif.bd, term_adt[atom, atoms.perm, variable, symbol].body(nominalunif.s))"
    "nil")))
 (unify_TCC12 0
  (unify_TCC12-1 nil 3627301166
   ("" (skosimp*)
    (("" (typepred "v!1(bd!1, body(s!1))`2")
      (("" (hide 1)
        (("" (expand Vars_in)
          (("" (expand Vars 1 2)
            (("" (expand Vars 1 (2 3))
              (("" (assert)
                (("" (expand occurs 1 (1 2)) (("" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Subs_unif type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (occurs def-decl "bool" nominal_term nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Vars_in const-decl "bool" substitution nil)
    (every adt-def-decl "boolean" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil nominal_term nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil
   (unify subtype
    "nominalunif.unify(nominalunif.bd, term_adt[atom, atoms.perm, variable, symbol].body(nominalunif.s))"
    "[freshness.fresh_context, substitution.Subs_unif(nominalunif.t, nominalunif.s), booleans.bool]")))
 (unify_TCC13 0
  (unify_TCC13-1 nil 3627301166
   ("" (skosimp*)
    (("" (expand x)
      (("" (split 3)
        (("1" (expand* Id append)
          (("1" (typepred "sig!1")
            (("1" (flatten)
              (("1" (expand Vars_in)
                (("1" (expand Vars -1 2)
                  (("1" (expand Vars 1 2)
                    (("1" (expand Vars 1 (2 3))
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (rewrite ext_preserves_Vars)
                            (("1" (expand occurs 1 (1 2))
                              (("1"
                                (rewrite every_nth)
                                (("1"
                                  (rewrite every_nth)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst -1 "i!1")
                                      (("1"
                                        (rewrite ext_preserves_occurs)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (expand* Id every) nil nil)) nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, Sub, bool]" nominalunif nil)
    (append def-decl "list[T]" list_props nil)
    (Id const-decl "Sub" substitution nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (ext_preserves_occurs formula-decl nil nominal_term nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (every_nth formula-decl nil list_props nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (variable type-eq-decl nil nominal_term nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Vars_in const-decl "bool" substitution nil)
    (ext def-decl "term" nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (occurs def-decl "bool" nominal_term nil)
    (Subs_unif type-eq-decl nil substitution nil))
   nil
   (unify subtype
    "nominalunif.x((nominalunif.Delta2, substitution.Id, nominalunif.b2), (nominalunif.Delta1, nominalunif.sig, nominalunif.b1))"
    "[freshness.fresh_context, substitution.Subs_unif(nominalunif.t, nominalunif.s), booleans.bool]")))
 (unify_TCC14 0
  (unify_TCC14-1 nil 3627301166
   ("" (skosimp*)
    (("" (hide 1)
      ((""
        (lemma lex2_lt
         (i "card(Vars(bd!1,ext((: (a!1, abstr(s!1)) :))(body(s!1))))"
            j "depth(bd!1)" m "card(Vars(t!1, s!1))" n "depth(t!1)"))
        (("" (assert)
          (("" (hide 3)
            (("" (flatten)
              (("" (expand Vars 2)
                (("" (expand Vars 2 (3 4))
                  (("" (rewrite ext_preserves_Vars)
                    (("" (expand depth 2 2) (("" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (variable type-eq-decl nil nominal_term nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (atom type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (perm type-eq-decl nil atoms nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (ext def-decl "term" nominal_term nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (depth def-decl "nat" nominal_term nil))
   nil
   (unify termination
    "nominalunif.unify(nominalunif.bd, nominal_term.ext((: (nominalunif.a, term_adt[atom, atoms.perm, variable, symbol].abstr(nominalunif.s)) :))(term_adt[atom, atoms.perm, variable, symbol].body(nominalunif.s)))"
    "nil")))
 (unify_TCC15 0
  (unify_TCC15-1 nil 3627301166
   ("" (skeep) (("" (expand* every Id) nil nil)) nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Id const-decl "Sub" substitution nil))
   nil
   (unify subtype "substitution.Id"
    "substitution.Subs_unif(nominalunif.t, nominalunif.s)")))
 (unify_TCC16 0
  (unify_TCC16-1 nil 3627301166 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (list type-decl nil list_adt nil) (perm type-eq-decl nil atoms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (variable type-eq-decl nil nominal_term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (occurs def-decl "bool" nominal_term nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil
   (unify termination
    "nominalunif.unify(nominalunif.ag, term_adt[atom, atoms.perm, variable, symbol].arg(nominalunif.s))"
    "nil")))
 (unify_TCC17 0
  (unify_TCC17-2 nil 3833403597
   ("" (skosimp*)
    (("" (hide 1)
      (("" (decompose-equality -3)
        (("" (typepred "v!1(ag!1, arg(s!1))`2")
          (("" (expand Vars_in)
            (("" (expand Vars -1 2)
              (("" (expand Vars 1 2)
                (("" (expand Vars 1 (2 3))
                  (("" (assert)
                    (("" (expand occurs 1 (1 2))
                      (("" (replace -4) (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app adt-constructor-decl "[[symbol, term] -> (app?)]" term_adt
     nil)
    (sym adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (variable type-eq-decl nil nominal_term nil)
    (TRUE const-decl "bool" booleans nil)
    (every adt-def-decl "boolean" term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm type-eq-decl nil atoms nil) (list type-decl nil list_adt nil)
    (atom type-eq-decl nil atoms nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Vars_in const-decl "bool" substitution nil)
    (occurs def-decl "bool" nominal_term nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (depth def-decl "nat" nominal_term nil)
    (fresh_context type-eq-decl nil freshness nil)
    (Subs_unif type-eq-decl nil substitution nil))
   nil
   (unify subtype
    "nominalunif.unify(nominalunif.ag, term_adt[atom, atoms.perm, variable, symbol].arg(nominalunif.s))"
    "[freshness.fresh_context, substitution.Subs_unif(nominalunif.t, nominalunif.s), booleans.bool]"))
  (unify_TCC17-1 nil 3627301166
   ("" (skeep) (("" (expand* every Id) nil nil)) nil)
   ((Id const-decl "Sub" substitution nil)) nil
   (unify subtype
    "nominalunif.unify(nominalunif.ag, term_adt[atom, atoms.perm, variable, symbol].arg(nominalunif.s))"
    "[freshness.fresh_context, substitution.Subs_unif(nominalunif.t, nominalunif.s), booleans.bool]")))
 (unify_sound 0
  (unify_sound-2 nil 3745921861
   ("" (measure-induct "lex2(card(Vars(t,s)), depth(t))" ("t" "s"))
    (("" (skolem 1 ("T" "S"))
      (("" (prop)
        (("" (expand "unify" (-2 1))
          (("" (lift-if)
            (("" (split -2)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (expand* "Subs" "Subs" "Id")
                      (("1" (rewrite "not_occurs_subs_invariance")
                        (("1" (expand "subs")
                          (("1" (lemma "alpha_ext_invariance")
                            (("1"
                              (inst -1 "(::)" "(::)"
                               "append(p(S), reverse(p(S)))" T)
                              (("1"
                                (rewrite "ext_append")
                                (("1"
                                  (rewrite "ext_identity")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (rewrite "act_append")
                                        (("1"
                                          (rewrite "act_reverse2")
                                          (("1"
                                            (expand "act")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (hide -3 1)
                          (("1" (expand* "Id" "Subs")
                            (("1" (lemma "alpha_reflexivity")
                              (("1"
                                (inst -1 "null" "T")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split 3)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split 3)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 1 4 6)
                                              (("2"
                                                (expand*
                                                 "Subs"
                                                 "Subs"
                                                 "Id")
                                                (("2"
                                                  (lemma
                                                   "not_occurs_subs_invariance"
                                                   ("X"
                                                    "V(T)"
                                                    "t"
                                                    "S"
                                                    "s"
                                                    "ext(reverse(p(T)))(S)"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand "subs")
                                                        (("2"
                                                          (lemma
                                                           "alpha_ext_invariance")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "null"
                                                             "append(p(T), reverse(p(T)))"
                                                             "null"
                                                             "S")
                                                            (("2"
                                                              (rewrite
                                                               "ext_append")
                                                              (("2"
                                                                (rewrite
                                                                 "ext_identity")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "act_append")
                                                                      (("2"
                                                                        (rewrite
                                                                         "act_reverse2")
                                                                        (("2"
                                                                          (expand
                                                                           "act")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (prop) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "alpha?_is_alpha"
                                                 ("Delta"
                                                  "alpha?(p(T) * V(T), S)`1"
                                                  "t"
                                                  "T"
                                                  "s"
                                                  "S"))
                                                (("2"
                                                  (expand* "Id" "Subs")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -3 2 5)
                                          (("1"
                                            (expand* "Id" "Subs")
                                            (("1"
                                              (lemma
                                               "alpha_reflexivity")
                                              (("1"
                                                (inst -1 "null" "T")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "x")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "term1(T)"
                                                               "term1(S)")
                                                              (("1"
                                                                (name-replace
                                                                 "SOL1"
                                                                 "unify(term1(T), term1(S))")
                                                                (("1"
                                                                  (reveal
                                                                   -2)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "Subs(SOL1`2)(term2(T))"
                                                                     "Subs(SOL1`2)(term2(S))")
                                                                    (("1"
                                                                      (name-replace
                                                                       "SOL2"
                                                                       "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))")
                                                                      (("1"
                                                                        (lemma
                                                                         "Subs_pair"
                                                                         ("sigma"
                                                                          "append(SOL2`2, SOL1`2)"
                                                                          "t"
                                                                          "term1(T)"
                                                                          "s"
                                                                          "term2(T)"))
                                                                        (("1"
                                                                          (lemma
                                                                           "term_pair_eta"
                                                                           ("pair?_var"
                                                                            "T"))
                                                                          (("1"
                                                                            (lemma
                                                                             "term_pair_eta"
                                                                             ("pair?_var"
                                                                              "S"))
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "Subs_pair"
                                                                                   ("sigma"
                                                                                    "append(SOL2`2, SOL1`2)"
                                                                                    "t"
                                                                                    "term1(S)"
                                                                                    "s"
                                                                                    "term2(S)"))
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "alpha"
                                                                                         3)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -7)
                                                                                            (("1"
                                                                                              (split
                                                                                               3)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "Subs_append")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "Subs_append")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "fresh_subs?_alpha"
                                                                                                     ("Delta"
                                                                                                      "SOL1`1"
                                                                                                      "t"
                                                                                                      "Subs(SOL1`2)(term1(T))"
                                                                                                      "s"
                                                                                                      "Subs(SOL1`2)(term1(S))"
                                                                                                      "sigma"
                                                                                                      "SOL2`2"))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "alpha_weakening"
                                                                                                           ("Delta"
                                                                                                            "fresh_subs?(SOL2`2, SOL1`1)`1"
                                                                                                            "Nabla"
                                                                                                            "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)"
                                                                                                            "t"
                                                                                                            "Subs(SOL2`2)(Subs(SOL1`2)(term1(T)))"
                                                                                                            "s"
                                                                                                            "Subs(SOL2`2)(Subs(SOL1`2)(term1(S)))"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "append_member")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "Subs_append")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "Subs_append")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "alpha_weakening"
                                                                                                     ("Delta"
                                                                                                      "SOL2`1"
                                                                                                      "Nabla"
                                                                                                      "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)"
                                                                                                      "t"
                                                                                                      "Subs(SOL2`2)(Subs(SOL1`2)(term2(T)))"
                                                                                                      "s"
                                                                                                      "Subs(SOL2`2)(Subs(SOL1`2)(term2(S)))"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "append_member")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (rewrite
                                                                                               "lex2_lt")
                                                                                              (("3"
                                                                                                (hide
                                                                                                 4)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "card_subset"
                                                                                                   (A
                                                                                                    "Vars(term1(T), term1(S))"
                                                                                                    B
                                                                                                    "Vars(T, S)"))
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     <=)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "depth"
                                                                                                               2
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "max")
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "Vars"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               "subset?"
                                                                                                               "union"
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "Vars"
                                                                                                                   (1
                                                                                                                    2))
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     "union"
                                                                                                                     "member")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (rewrite
                                                                                             "lex2_lt")
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "card_subset"
                                                                                               ("A"
                                                                                                "Vars(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))"
                                                                                                "B"
                                                                                                "Vars(T, S)"))
                                                                                              (("3"
                                                                                                (expand
                                                                                                 <=)
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Subs_unif_Vars_subset"
                                                                                                         ("u"
                                                                                                          "term1(T)"
                                                                                                          "s"
                                                                                                          "term1(S)"
                                                                                                          "w"
                                                                                                          "term2(T)"
                                                                                                          "t"
                                                                                                          "term2(S)"
                                                                                                          "gamma"
                                                                                                          "SOL1`2"))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "Vars"
                                                                                                           -1
                                                                                                           (2
                                                                                                            3))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "Vars"
                                                                                                             2
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "Vars"
                                                                                                               2
                                                                                                               (2
                                                                                                                3))
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "SOL1`2 = Id")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-6
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             "Id"
                                                                                                             "Subs"
                                                                                                             "subs")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "depth"
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "Subs_unif_Vars_decrease"
                                                                                                         ("u"
                                                                                                          "term1(T)"
                                                                                                          "s"
                                                                                                          "term1(S)"
                                                                                                          "w"
                                                                                                          "term2(T)"
                                                                                                          "t"
                                                                                                          "term2(S)"
                                                                                                          "gamma"
                                                                                                          "SOL1`2"))
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S))) = Vars(T, S)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-6
                                                                                                              -7
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "Vars")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "Vars"
                                                                                                                 1
                                                                                                                 (5
                                                                                                                  6))
                                                                                                                (("2"
                                                                                                                  (expand*
                                                                                                                   "union"
                                                                                                                   "member")
                                                                                                                  (("2"
                                                                                                                    (decompose-equality)
                                                                                                                    (("2"
                                                                                                                      (iff)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "term_abs_eta"
                                                             ("abs?_var"
                                                              "T"))
                                                            (("2"
                                                              (lemma
                                                               "term_abs_eta"
                                                               ("abs?_var"
                                                                "S"))
                                                              (("2"
                                                                (hide
                                                                 4
                                                                 7)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -8
                                                                     "body(T)"
                                                                     "body(S)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "SOL"
                                                                       "unify(body(T), body(S))")
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         1
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "Subs_abs")
                                                                            (("1"
                                                                              (rewrite
                                                                               "Subs_abs")
                                                                              (("1"
                                                                                (expand
                                                                                 "alpha"
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "lex2_lt")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "depth"
                                                                                       6
                                                                                       2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "Vars"
                                                                                           7)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Vars"
                                                                                             7
                                                                                             (3
                                                                                              4))
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -6
                                                                     "body(T)"
                                                                     "ext((: (abstr(T), abstr(S)) :))(body(S))")
                                                                    (("2"
                                                                      (expand
                                                                       "x"
                                                                       -1)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "x")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "Id")
                                                                              (("1"
                                                                                (expand
                                                                                 "append"
                                                                                 2
                                                                                 (2
                                                                                  3))
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "SOL"
                                                                                   "unify(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "FRESH"
                                                                                     "fresh?(abstr(T), Subs(SOL`2)(body(S)))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       2
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5
                                                                                         2
                                                                                         rl)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "Subs_abs")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "Subs_abs")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "alpha"
                                                                                               2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "fresh_weakening"
                                                                                                   ("Nabla"
                                                                                                    "append(FRESH`1, SOL`1)"
                                                                                                    "Delta"
                                                                                                    "FRESH`1"
                                                                                                    "a"
                                                                                                    "abstr(T)"
                                                                                                    "t"
                                                                                                    "Subs(SOL`2)(body(S))"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "append_member")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "FRESH"
                                                                                                         (-2
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "fresh?_is_fresh")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "alpha_weakening"
                                                                                                   ("Nabla"
                                                                                                    "append(FRESH`1, SOL`1)"
                                                                                                    "Delta"
                                                                                                    "SOL`1"
                                                                                                    "t"
                                                                                                    "Subs(SOL`2)(body(T))"
                                                                                                    "s"
                                                                                                    "ext((: (abstr(T), abstr(S)) :))(Subs(SOL`2)(body(S)))"))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "Subs_perm_comm")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "append_member")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-5
                                                                            -6
                                                                            1))
                                                                          (("2"
                                                                            (rewrite
                                                                             "lex2_lt")
                                                                            (("2"
                                                                              (expand
                                                                               "depth"
                                                                               1
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "card_subset"
                                                                                 ("A"
                                                                                  "Vars(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))"
                                                                                  "B"
                                                                                  "Vars(T, S)"))
                                                                                (("2"
                                                                                  (expand
                                                                                   <=)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Vars")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Vars"
                                                                                             1
                                                                                             (3
                                                                                              4))
                                                                                            (("2"
                                                                                              (expand*
                                                                                               "subset?"
                                                                                               "union"
                                                                                               "member")
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "ext_preserves_Vars")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 5 8)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (lemma
                                                           "term_app_eta"
                                                           ("app?_var"
                                                            "T"))
                                                          (("2"
                                                            (lemma
                                                             "term_app_eta"
                                                             ("app?_var"
                                                              "S"))
                                                            (("2"
                                                              (inst
                                                               -8
                                                               "arg(T)"
                                                               "arg(S)")
                                                              (("2"
                                                                (name-replace
                                                                 "SOL"
                                                                 "unify(arg(T), arg(S))")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "Subs_app")
                                                                        (("2"
                                                                          (rewrite
                                                                           "Subs_app")
                                                                          (("2"
                                                                            (expand
                                                                             "alpha"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "lex2_lt")
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    -5
                                                                                    7))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "card_subset"
                                                                                     ("A"
                                                                                      "Vars(arg(T), arg(S))"
                                                                                      "B"
                                                                                      "Vars(T, S)"))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "depth"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           <=)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Vars")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "Vars"
                                                                                                   1
                                                                                                   (3
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "subset_reflexive")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs def-decl "term" substitution nil)
    (ext_identity formula-decl nil nominal_term nil)
    (act def-decl "atom" atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (act_append formula-decl nil atoms nil)
    (ext_append formula-decl nil nominal_term nil)
    (alpha_ext_invariance formula-decl nil alpha_equivalence nil)
    (not_occurs_subs_invariance formula-decl nil substitution nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (ds const-decl "set[atom]" atoms nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (DS const-decl "list[atom]" atoms nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (alpha? def-decl "[fresh_context, bool]" alpha_equivalence nil)
    (alpha?_is_alpha formula-decl nil alpha_equivalence nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (alpha_weakening formula-decl nil alpha_equivalence nil)
    (fresh_subs? def-decl "[fresh_context, bool]" substitution nil)
    (append_member formula-decl nil structure_extra nil)
    (fresh_subs?_alpha formula-decl nil substitution nil)
    (Subs_append formula-decl nil substitution nil)
    (Subs_unif_Vars_decrease formula-decl nil substitution nil)
    (Subs_unif_Vars_subset formula-decl nil substitution nil)
    (Subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (Subs_app formula-decl nil substitution nil)
    (sym adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (Subs_abs formula-decl nil substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (Subs_perm_comm formula-decl nil substitution nil)
    (fresh_weakening formula-decl nil freshness nil)
    (fresh?_is_fresh formula-decl nil freshness nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (alpha_reflexivity formula-decl nil alpha_equivalence nil)
    (Id const-decl "Sub" substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (Vars_in const-decl "bool" substitution nil)
    (occurs def-decl "bool" nominal_term nil)
    (Subs_unif type-eq-decl nil substitution nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (Sub type-eq-decl nil substitution nil)
    (Subs def-decl "term" substitution nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (variable type-eq-decl nil nominal_term nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil)
  (unify_sound-1 nil 3627982275
   ("" (measure-induct "lex2(card(Vars(t,s)), depth(t))" (t s))
    (("" (skolem 1 (T S))
      (("" (prop)
        (("" (expand unify (-2 1))
          (("" (lift-if)
            (("" (split -2)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (expand* Subs Subs Id)
                      (("1" (rewrite not_occurs_subs_invariance)
                        (("1" (expand subs)
                          (("1" (lemma alpha_ext_invariance)
                            (("1"
                              (inst -1 "(::)" "(::)"
                               "append(p(S), reverse(p(S)))" T)
                              (("1"
                                (rewrite ext_append)
                                (("1"
                                  (rewrite ext_identity)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (rewrite act_append)
                                        (("1"
                                          (rewrite act_reverse2)
                                          (("1"
                                            (expand act)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (hide -3 1)
                          (("1" (expand* Id Subs)
                            (("1" (lemma alpha_reflexivity)
                              (("1"
                                (inst -1 null T)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split 3)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split 3)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide -2 1 4 6)
                                              (("2"
                                                (expand* Subs Subs Id)
                                                (("2"
                                                  (lemma
                                                   not_occurs_subs_invariance
                                                   (X
                                                    "V(T)"
                                                    t
                                                    S
                                                    s
                                                    "ext(reverse(p(T)))(S)"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (expand subs)
                                                        (("2"
                                                          (lemma
                                                           alpha_ext_invariance)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             null
                                                             "append(p(T), reverse(p(T)))"
                                                             null
                                                             S)
                                                            (("2"
                                                              (rewrite
                                                               ext_append)
                                                              (("2"
                                                                (rewrite
                                                                 ext_identity)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       act_append)
                                                                      (("2"
                                                                        (rewrite
                                                                         act_reverse2)
                                                                        (("2"
                                                                          (expand
                                                                           act)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (prop) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 alpha?_is_alpha
                                                 (Delta
                                                  "alpha?(p(T) * V(T), S)`1"
                                                  t
                                                  T
                                                  s
                                                  S))
                                                (("2"
                                                  (expand* Id Subs)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -3 2 5)
                                          (("1"
                                            (expand* Id Subs)
                                            (("1"
                                              (lemma alpha_reflexivity)
                                              (("1"
                                                (inst -1 null T)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand x)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "term1(T)"
                                                               "term1(S)")
                                                              (("1"
                                                                (name-replace
                                                                 "SOL1"
                                                                 "unify(term1(T), term1(S))")
                                                                (("1"
                                                                  (reveal
                                                                   -2)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "Subs(SOL1`2)(term2(T))"
                                                                     "Subs(SOL1`2)(term2(S))")
                                                                    (("1"
                                                                      (name-replace
                                                                       "SOL2"
                                                                       "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))")
                                                                      (("1"
                                                                        (lemma
                                                                         Subs_pair
                                                                         (sigma
                                                                          "append(SOL2`2, SOL1`2)"
                                                                          t
                                                                          "term1(T)"
                                                                          s
                                                                          "term2(T)"))
                                                                        (("1"
                                                                          (lemma
                                                                           term_pair_eta
                                                                           (pair?_var
                                                                            T))
                                                                          (("1"
                                                                            (lemma
                                                                             term_pair_eta
                                                                             (pair?_var
                                                                              S))
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   Subs_pair
                                                                                   (sigma
                                                                                    "append(SOL2`2, SOL1`2)"
                                                                                    t
                                                                                    "term1(S)"
                                                                                    s
                                                                                    "term2(S)"))
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         alpha
                                                                                         3)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (split
                                                                                             -7)
                                                                                            (("1"
                                                                                              (split
                                                                                               3)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 Subs_append)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   Subs_append)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     fresh_subs?_alpha
                                                                                                     (Delta
                                                                                                      "SOL1`1"
                                                                                                      t
                                                                                                      "Subs(SOL1`2)(term1(T))"
                                                                                                      s
                                                                                                      "Subs(SOL1`2)(term1(S))"
                                                                                                      sigma
                                                                                                      "SOL2`2"))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           alpha_weakening
                                                                                                           (Delta
                                                                                                            "fresh_subs?(SOL2`2, SOL1`1)`1"
                                                                                                            Nabla
                                                                                                            "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)"
                                                                                                            t
                                                                                                            "Subs(SOL2`2)(Subs(SOL1`2)(term1(T)))"
                                                                                                            s
                                                                                                            "Subs(SOL2`2)(Subs(SOL1`2)(term1(S)))"))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 append_member)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 Subs_append)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   Subs_append)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     alpha_weakening
                                                                                                     (Delta
                                                                                                      "SOL2`1"
                                                                                                      Nabla
                                                                                                      "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)"
                                                                                                      t
                                                                                                      "Subs(SOL2`2)(Subs(SOL1`2)(term2(T)))"
                                                                                                      s
                                                                                                      "Subs(SOL2`2)(Subs(SOL1`2)(term2(S)))"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           append_member)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (rewrite
                                                                                               lex2_lt)
                                                                                              (("3"
                                                                                                (hide
                                                                                                 4)
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   card_subset
                                                                                                   (A
                                                                                                    "Vars(term1(T), term1(S))"
                                                                                                    B
                                                                                                    "Vars(T, S)"))
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     <=)
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               depth
                                                                                                               2
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 max)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             Vars
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               subset?
                                                                                                               union
                                                                                                               member)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   Vars
                                                                                                                   (1
                                                                                                                    2))
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     union
                                                                                                                     member)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (rewrite
                                                                                             lex2_lt)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               card_subset
                                                                                               (A
                                                                                                "Vars(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))"
                                                                                                B
                                                                                                "Vars(T, S)"))
                                                                                              (("3"
                                                                                                (expand
                                                                                                 <=)
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         Subs_unif_Vars_subset
                                                                                                         (u
                                                                                                          "term1(T)"
                                                                                                          s
                                                                                                          "term1(S)"
                                                                                                          w
                                                                                                          "term2(T)"
                                                                                                          t
                                                                                                          "term2(S)"
                                                                                                          gamma
                                                                                                          "SOL1`2"))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           Vars
                                                                                                           -1
                                                                                                           (2
                                                                                                            3))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             Vars
                                                                                                             2
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               Vars
                                                                                                               2
                                                                                                               (2
                                                                                                                3))
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "SOL1`2 = Id")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-6
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             Id
                                                                                                             Subs
                                                                                                             subs)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               depth
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         Subs_unif_Vars_decrease
                                                                                                         (u
                                                                                                          "term1(T)"
                                                                                                          s
                                                                                                          "term1(S)"
                                                                                                          w
                                                                                                          "term2(T)"
                                                                                                          t
                                                                                                          "term2(S)"
                                                                                                          gamma
                                                                                                          "SOL1`2"))
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S))) = Vars(T, S)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-6
                                                                                                              -7
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               Vars)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 Vars
                                                                                                                 1
                                                                                                                 (5
                                                                                                                  6))
                                                                                                                (("2"
                                                                                                                  (expand*
                                                                                                                   union
                                                                                                                   member)
                                                                                                                  (("2"
                                                                                                                    (decompose-equality)
                                                                                                                    (("2"
                                                                                                                      (iff)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             term_abs_eta
                                                             (abs?_var
                                                              T))
                                                            (("2"
                                                              (lemma
                                                               term_abs_eta
                                                               (abs?_var
                                                                S))
                                                              (("2"
                                                                (hide
                                                                 4
                                                                 7)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (inst
                                                                     -8
                                                                     "body(T)"
                                                                     "body(S)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "SOL"
                                                                       "unify(body(T), body(S))")
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         1
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             Subs_abs)
                                                                            (("1"
                                                                              (rewrite
                                                                               Subs_abs)
                                                                              (("1"
                                                                                (expand
                                                                                 alpha
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     lex2_lt)
                                                                                    (("1"
                                                                                      (expand
                                                                                       depth
                                                                                       6
                                                                                       2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           Vars
                                                                                           7)
                                                                                          (("1"
                                                                                            (expand
                                                                                             Vars
                                                                                             7
                                                                                             (3
                                                                                              4))
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -6
                                                                     "body(T)"
                                                                     "ext((: (abstr(T), abstr(S)) :))(body(S))")
                                                                    (("2"
                                                                      (expand
                                                                       x
                                                                       -1)
                                                                      (("2"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           x)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               Id)
                                                                              (("1"
                                                                                (expand
                                                                                 append
                                                                                 2
                                                                                 (2
                                                                                  3))
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "SOL"
                                                                                   "unify(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "FRESH"
                                                                                     "fresh?(abstr(T), Subs(SOL`2)(body(S)))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       2
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5
                                                                                         2
                                                                                         rl)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           Subs_abs)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             Subs_abs)
                                                                                            (("1"
                                                                                              (expand
                                                                                               alpha
                                                                                               2)
                                                                                              (("1"
                                                                                                (split
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   fresh_weakening
                                                                                                   (Nabla
                                                                                                    "append(FRESH`1, SOL`1)"
                                                                                                    Delta
                                                                                                    "FRESH`1"
                                                                                                    a
                                                                                                    "abstr(T)"
                                                                                                    t
                                                                                                    "Subs(SOL`2)(body(S))"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           append_member)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         FRESH
                                                                                                         (-2
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           fresh?_is_fresh)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   alpha_weakening
                                                                                                   (Nabla
                                                                                                    "append(FRESH`1, SOL`1)"
                                                                                                    Delta
                                                                                                    "SOL`1"
                                                                                                    t
                                                                                                    "Subs(SOL`2)(body(T))"
                                                                                                    s
                                                                                                    "ext((: (abstr(T), abstr(S)) :))(Subs(SOL`2)(body(S)))"))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     Subs_perm_comm)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           append_member)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-5
                                                                            -6
                                                                            1))
                                                                          (("2"
                                                                            (rewrite
                                                                             lex2_lt)
                                                                            (("2"
                                                                              (expand
                                                                               depth
                                                                               1
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 card_subset
                                                                                 (A
                                                                                  "Vars(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))"
                                                                                  B
                                                                                  "Vars(T, S)"))
                                                                                (("2"
                                                                                  (expand
                                                                                   <=)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           Vars)
                                                                                          (("2"
                                                                                            (expand
                                                                                             Vars
                                                                                             1
                                                                                             (3
                                                                                              4))
                                                                                            (("2"
                                                                                              (expand*
                                                                                               subset?
                                                                                               union
                                                                                               member)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     ext_preserves_Vars)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 5 8)
                                                      (("2"
                                                        (prop)
                                                        (("2"
                                                          (lemma
                                                           term_app_eta
                                                           (app?_var
                                                            T))
                                                          (("2"
                                                            (lemma
                                                             term_app_eta
                                                             (app?_var
                                                              S))
                                                            (("2"
                                                              (inst
                                                               -8
                                                               "arg(T)"
                                                               "arg(S)")
                                                              (("2"
                                                                (name-replace
                                                                 "SOL"
                                                                 "unify(arg(T), arg(S))")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         Subs_app)
                                                                        (("2"
                                                                          (rewrite
                                                                           Subs_app)
                                                                          (("2"
                                                                            (expand
                                                                             alpha
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (rewrite
                                                                                 lex2_lt)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-3
                                                                                    -5
                                                                                    7))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     card_subset
                                                                                     (A
                                                                                      "Vars(arg(T), arg(S))"
                                                                                      B
                                                                                      "Vars(T, S)"))
                                                                                    (("2"
                                                                                      (expand
                                                                                       depth
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           <=)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 Vars)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   Vars
                                                                                                   1
                                                                                                   (3
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     subset_reflexive)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs def-decl "term" substitution nil)
    (ext_identity formula-decl nil nominal_term nil)
    (act def-decl "atom" atoms nil)
    (act_reverse2 formula-decl nil atoms nil)
    (act_append formula-decl nil atoms nil)
    (ext_append formula-decl nil nominal_term nil)
    (alpha_ext_invariance formula-decl nil alpha_equivalence nil)
    (not_occurs_subs_invariance formula-decl nil substitution nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (ds const-decl "set[atom]" atoms nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (DS const-decl "list[atom]" atoms nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (alpha? def-decl "[fresh_context, bool]" alpha_equivalence nil)
    (alpha?_is_alpha formula-decl nil alpha_equivalence nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (alpha_weakening formula-decl nil alpha_equivalence nil)
    (fresh_subs? def-decl "[fresh_context, bool]" substitution nil)
    (append_member formula-decl nil structure_extra nil)
    (fresh_subs?_alpha formula-decl nil substitution nil)
    (Subs_append formula-decl nil substitution nil)
    (Subs_unif_Vars_decrease formula-decl nil substitution nil)
    (Subs_unif_Vars_subset formula-decl nil substitution nil)
    (Subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (Subs_app formula-decl nil substitution nil)
    (sym adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (Subs_abs formula-decl nil substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (Subs_perm_comm formula-decl nil substitution nil)
    (fresh_weakening formula-decl nil freshness nil)
    (fresh?_is_fresh formula-decl nil freshness nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (alpha_reflexivity formula-decl nil alpha_equivalence nil)
    (Id const-decl "Sub" substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (Vars_in const-decl "bool" substitution nil)
    (occurs def-decl "bool" nominal_term nil)
    (Subs_unif type-eq-decl nil substitution nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (Sub type-eq-decl nil substitution nil)
    (Subs def-decl "term" substitution nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (variable type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   shostak))
 (unify_complete 0
  (unify_complete-2 nil 3745923323
   ("" (measure-induct "lex2(card(Vars(t,s)), depth(t))" ("t" "s"))
    (("" (skolem 1 ("T" "S"))
      (("" (prop)
        (("" (skeep)
          (("" (expand "unify" 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (prop)
                  (("1" (hide -2)
                    (("1" (expand "less")
                      (("1" (inst 1 "sigma")
                        (("1" (expand "fresh_subs")
                          (("1" (skeep)
                            (("1" (rewrite "Subs_append")
                              (("1"
                                (expand "Subs" 1 2)
                                (("1"
                                  (expand "Subs" 1 2)
                                  (("1"
                                    (expand "subs" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (rewrite "ext_identity")
                                        (("1"
                                          (rewrite "alpha_reflexivity")
                                          (("1"
                                            (prop)
                                            (("1"
                                              (case
                                               "S = ext(p(S))((::)*V(S))")
                                              (("1"
                                                (replace -1 -4)
                                                (("1"
                                                  (rewrite
                                                   "Subs_perm_comm")
                                                  (("1"
                                                    (rewrite
                                                     "Subs_perm_comm")
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (rewrite
                                                         "ext_reverse_alpha")
                                                        (("1"
                                                          (rewrite
                                                           "reverse_reverse")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "ext" 1)
                                                (("2"
                                                  (rewrite
                                                   "append_null")
                                                  (("2"
                                                    (rewrite
                                                     "term_times_eta")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (lemma "term_at_eta" ("atom?_var" "T"))
                        (("1" (replace -1 -4 rl)
                          (("1" (hide -3)
                            (("1" (rewrite "Subs_atom")
                              (("1"
                                (expand "alpha")
                                (("1"
                                  (expand "occurs")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "Subs_atom2"
                                       ("a"
                                        "a(T)"
                                        "s"
                                        "S"
                                        "sigma"
                                        "sigma"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "less")
                                          (("1"
                                            (inst 1 "sigma")
                                            (("1"
                                              (expand "fresh_subs")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "Id")
                                                  (("1"
                                                    (rewrite
                                                     "append_null")
                                                    (("1"
                                                      (rewrite
                                                       "alpha_reflexivity")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1"
                              (lemma "term_times_eta"
                               ("susp?_var" "T"))
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "less")
                                      (("1"
                                        (inst 2 "sigma")
                                        (("1"
                                          (expand "fresh_subs")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (rewrite "Subs_append")
                                              (("1"
                                                (expand "Subs" 2 2)
                                                (("1"
                                                  (expand "Subs" 2 2)
                                                  (("1"
                                                    (expand "subs")
                                                    (("1"
                                                      (rewrite
                                                       "ext_identity")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (rewrite
                                                           "alpha_reflexivity")
                                                          (("1"
                                                            (hide 4)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (case
                                                                 "T = ext(p(T))((::)*V(T))")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -5)
                                                                  (("1"
                                                                    (replaces
                                                                     -2)
                                                                    (("1"
                                                                      (rewrite
                                                                       "Subs_perm_comm")
                                                                      (("1"
                                                                        (rewrite
                                                                         "Subs_perm_comm")
                                                                        (("1"
                                                                          (rewrite
                                                                           "alpha_symmetric"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "ext_reverse_alpha")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "ext"
                                                                   1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "append_null")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "alpha?")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "less")
                                              (("1"
                                                (inst 1 "sigma")
                                                (("1"
                                                  (case
                                                   "T = ext(p(T))((::)*V(T))")
                                                  (("1"
                                                    (case
                                                     "S = ext(p(S))((::)*V(S))")
                                                    (("1"
                                                      (replace -1 -8)
                                                      (("1"
                                                        (replace -2 -8)
                                                        (("1"
                                                          (rewrite
                                                           "Subs_perm_comm")
                                                          (("1"
                                                            (rewrite
                                                             "Subs_perm_comm")
                                                            (("1"
                                                              (replaces
                                                               -4)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "fresh_subs_character"
                                                                   ("Delta"
                                                                    "Delta"
                                                                    "sigma"
                                                                    "sigma"
                                                                    "Nabla"
                                                                    "fc(DS(p(T), p(S)), V(S))"))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (lemma
                                                                         "fc_member"
                                                                         ("a"
                                                                          "ax`1"
                                                                          "Y"
                                                                          "ax`2"
                                                                          "l"
                                                                          "DS(p(T), p(S))"
                                                                          "X"
                                                                          "V(S)"))
                                                                        (("1"
                                                                          (case
                                                                           "ax = (ax`1, ax`2)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "alpha_ds_fresh"
                                                                                     ("Delta"
                                                                                      "Delta"
                                                                                      "pi1"
                                                                                      "p(T)"
                                                                                      "pi2"
                                                                                      "p(S)"
                                                                                      "t"
                                                                                      "Subs(sigma)((: :) * V(S))"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "ax`1")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "DS_member"
                                                                                           ("pi1"
                                                                                            "p(T)"
                                                                                            "pi2"
                                                                                            "p(S)"
                                                                                            "a"
                                                                                            "ax`1"))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "Id")
                                                                    (("2"
                                                                      (rewrite
                                                                       "append_null")
                                                                      (("2"
                                                                        (rewrite
                                                                         "alpha_reflexivity")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "ext" 1)
                                                      (("2"
                                                        (rewrite
                                                         "append_null")
                                                        (("2"
                                                          (rewrite
                                                           "term_times_eta")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "ext" 1)
                                                    (("2"
                                                      (rewrite
                                                       "append_null")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (case "susp?(S)")
                                              (("1"
                                                (expand "occurs" -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "alpha_symmetric")
                                                (("2"
                                                  (replace -2 -4 rl)
                                                  (("2"
                                                    (lemma
                                                     "alpha_Subs_Vars"
                                                     ("Delta"
                                                      "Delta"
                                                      "sigma"
                                                      "sigma"
                                                      "t"
                                                      "S"
                                                      "pi"
                                                      "p(T)"
                                                      "X"
                                                      "V(T)"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "member"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "Vars_occurs")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma
                                   "alpha_Subs_ord"
                                   ("Delta"
                                    "Delta"
                                    "sigma"
                                    "sigma"
                                    "t"
                                    "T"
                                    "s"
                                    "S"))
                                  (("1"
                                    (expand "member" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "Vars_occurs")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "ord" -1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 4)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "less")
                                                    (("2"
                                                      (inst 1 "sigma")
                                                      (("2"
                                                        (expand
                                                         "fresh_subs")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "Id")
                                                            (("2"
                                                              (rewrite
                                                               "append_null")
                                                              (("2"
                                                                (rewrite
                                                                 "alpha_reflexivity")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma
                                     "alpha_Subs_ord"
                                     ("Delta"
                                      "Delta"
                                      "t"
                                      "T"
                                      "s"
                                      "S"
                                      "sigma"
                                      "sigma"))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "member" 1)
                                            (("1"
                                              (rewrite "Vars_occurs")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "ord")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 5)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (reveal 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst-cp
                                                           -3
                                                           "term1(T)"
                                                           "term1(S)")
                                                          (("2"
                                                            (split -4)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Delta"
                                                               "sigma")
                                                              (("1"
                                                                (lemma
                                                                 "term_pair_eta"
                                                                 ("pair?_var"
                                                                  "T"))
                                                                (("1"
                                                                  (lemma
                                                                   "term_pair_eta"
                                                                   ("pair?_var"
                                                                    "S"))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -7
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -7
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "Subs_pair")
                                                                        (("1"
                                                                          (rewrite
                                                                           "Subs_pair")
                                                                          (("1"
                                                                            (expand
                                                                             "alpha"
                                                                             -7)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "SOL1"
                                                                                     "unify(term1(T), term1(S))")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "less"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "alpha_Subs_invariance"
                                                                                           ("Delta"
                                                                                            "Delta"
                                                                                            "sigma"
                                                                                            "append(theta, SOL1`2)"
                                                                                            "gamma"
                                                                                            "sigma"
                                                                                            "t"
                                                                                            "term2(T)"))
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "alpha_transitive"
                                                                                               ("Delta"
                                                                                                "Delta"
                                                                                                "t1"
                                                                                                "Subs(append(theta, SOL1`2))(term2(T))"
                                                                                                "t2"
                                                                                                "Subs(sigma)(term2(T))"
                                                                                                "t3"
                                                                                                "Subs(sigma)(term2(S))"))
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "alpha_Subs_invariance"
                                                                                                 ("Delta"
                                                                                                  "Delta"
                                                                                                  "sigma"
                                                                                                  "append(theta, SOL1`2)"
                                                                                                  "gamma"
                                                                                                  "sigma"
                                                                                                  "t"
                                                                                                  "term2(S)"))
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "alpha_symmetric"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "alpha_transitive"
                                                                                                       ("Delta"
                                                                                                        "Delta"
                                                                                                        "t1"
                                                                                                        "Subs(append(theta, SOL1`2))(term2(T))"
                                                                                                        "t2"
                                                                                                        "Subs(sigma)(term2(S))"
                                                                                                        "t3"
                                                                                                        "Subs(append(theta, SOL1`2))(term2(S))"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "Subs_append"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "Subs_append"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -12
                                                                                                                 "Subs(SOL1`2)(term2(T))"
                                                                                                                 "Subs(SOL1`2)(term2(S))")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -12)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "Delta"
                                                                                                                     "theta")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (name-replace
                                                                                                                         "SOL2"
                                                                                                                         "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "x"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "less")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "fresh_subs_o_fresh_subs?"
                                                                                                                                       ("Delta"
                                                                                                                                        "Delta"
                                                                                                                                        "sigma"
                                                                                                                                        "theta!1"
                                                                                                                                        "gamma"
                                                                                                                                        "SOL2`2"
                                                                                                                                        "Nabla"
                                                                                                                                        "SOL1`1"))
                                                                                                                                      (("1"
                                                                                                                                        (iff
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     1
                                                                                                                                                     "theta!1")
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "fresh_subs_append_context")
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -14
                                                                                                                                                           "X")
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "Subs_append"
                                                                                                                                                             -14)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "alpha_Subs_invariance"
                                                                                                                                                               ("Delta"
                                                                                                                                                                "Delta"
                                                                                                                                                                "sigma"
                                                                                                                                                                "append(theta!1, SOL2`2)"
                                                                                                                                                                "gamma"
                                                                                                                                                                "theta"
                                                                                                                                                                "t"
                                                                                                                                                                "Subs(SOL1`2)((: :) * X)"))
                                                                                                                                                              (("1"
                                                                                                                                                                (prop)
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite*
                                                                                                                                                                   "Subs_append")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "alpha_transitive"
                                                                                                                                                                     ("Delta"
                                                                                                                                                                      "Delta"
                                                                                                                                                                      "t1"
                                                                                                                                                                      "Subs(theta!1)(Subs(SOL2`2)(Subs(SOL1`2)((: :) * X)))"
                                                                                                                                                                      "t2"
                                                                                                                                                                      "Subs(theta)(Subs(SOL1`2)((: :) * X))"
                                                                                                                                                                      "t3"
                                                                                                                                                                      "Subs(sigma)((: :) * X)"))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "fresh_subs_character"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "fresh_subs_character"
                                                                                                                                                       -12)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -12
                                                                                                                                                         "ax")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -4
                                                                                                                                                           "ax`2")
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "alpha_preserves_fresh"
                                                                                                                                                             ("Delta"
                                                                                                                                                              "Delta"
                                                                                                                                                              "a"
                                                                                                                                                              "ax`1"
                                                                                                                                                              "t"
                                                                                                                                                              "Subs(append(theta!1, SOL2`2))((: :) * ax`2)"
                                                                                                                                                              "s"
                                                                                                                                                              "Subs(theta)((: :) * ax`2)"))
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-10
                                                                                                                      -11
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "lex2_lt")
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "SOL1`2 = Id")
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "Id")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "Subs")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "depth"
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "max")
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "card_subset"
                                                                                                                                     ("A"
                                                                                                                                      "Vars(term2(T), term2(S))"
                                                                                                                                      "B"
                                                                                                                                      "Vars(T, S)"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       <=)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("3"
                                                                                                                                            (expand*
                                                                                                                                             "Vars"
                                                                                                                                             "subset?"
                                                                                                                                             "member")
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               "Vars"
                                                                                                                                               1
                                                                                                                                               (3
                                                                                                                                                4))
                                                                                                                                              (("3"
                                                                                                                                                (expand*
                                                                                                                                                 "union"
                                                                                                                                                 "member")
                                                                                                                                                (("3"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "Subs_unif_Vars_decrease"
                                                                                                                           ("u"
                                                                                                                            "term1(T)"
                                                                                                                            "s"
                                                                                                                            "term1(S)"
                                                                                                                            "w"
                                                                                                                            "term2(T)"
                                                                                                                            "t"
                                                                                                                            "term2(S)"
                                                                                                                            "gamma"
                                                                                                                            "SOL1`2"))
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "Vars(T, S) = union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S)))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "Vars")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "Vars"
                                                                                                                                   1
                                                                                                                                   (1
                                                                                                                                    2))
                                                                                                                                  (("2"
                                                                                                                                    (expand*
                                                                                                                                     "union"
                                                                                                                                     "member")
                                                                                                                                    (("2"
                                                                                                                                      (decompose-equality)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                -2
                                                                1))
                                                              (("2"
                                                                (rewrite
                                                                 "lex2_lt")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lemma
                                                                     "card_subset"
                                                                     ("A"
                                                                      "Vars(term1(T), term1(S))"
                                                                      "B"
                                                                      "Vars(T, S)"))
                                                                    (("2"
                                                                      (expand
                                                                       <=)
                                                                      (("2"
                                                                        (expand
                                                                         "depth"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "max")
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               3)
                                                                              (("3"
                                                                                (expand
                                                                                 "Vars"
                                                                                 1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "Vars"
                                                                                   1
                                                                                   (3
                                                                                    4))
                                                                                  (("3"
                                                                                    (expand*
                                                                                     "subset?"
                                                                                     "union"
                                                                                     "member")
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "alpha_Subs_ord"
                                     ("Delta"
                                      "Delta"
                                      "sigma"
                                      "sigma"
                                      "t"
                                      "T"
                                      "s"
                                      "S"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "member" 1)
                                            (("1"
                                              (rewrite "Vars_occurs")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 6)
                                          (("2"
                                            (expand "ord")
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (reveal 1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "term_abs_eta"
                                                                 ("abs?_var"
                                                                  "T"))
                                                                (("1"
                                                                  (lemma
                                                                   "term_abs_eta"
                                                                   ("abs?_var"
                                                                    "S"))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -6
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -6
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "Subs_abs")
                                                                        (("1"
                                                                          (rewrite
                                                                           "Subs_abs")
                                                                          (("1"
                                                                            (expand
                                                                             "alpha"
                                                                             -6)
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "body(T)"
                                                                                     "body(S)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -7)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Delta"
                                                                                         "sigma")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "lex2_lt")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "Vars"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "depth"
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Vars"
                                                                                                 1
                                                                                                 (7
                                                                                                  8))
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -7
                                                                                     "body(T)"
                                                                                     "ext(cons((abstr(T), abstr(S)), null))(body(S))")
                                                                                    (("2"
                                                                                      (split
                                                                                       -7)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Delta"
                                                                                         "sigma")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "Subs_perm_comm"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "SOL"
                                                                                                     "unify(body(T), ext(cons((abstr(T), abstr(S)), null))(body(S)))")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "less"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Subs_fresh"
                                                                                                           ("a"
                                                                                                            "abstr(T)"
                                                                                                            "sigma"
                                                                                                            "theta"
                                                                                                            "t"
                                                                                                            "Subs(SOL`2)(body(S))"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "alpha_Subs_invariance"
                                                                                                             ("Delta"
                                                                                                              "Delta"
                                                                                                              "sigma"
                                                                                                              "append(theta, SOL`2)"
                                                                                                              "gamma"
                                                                                                              "sigma"
                                                                                                              "t"
                                                                                                              "body(S)"))
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "alpha_preserves_fresh"
                                                                                                               ("Delta"
                                                                                                                "Delta"
                                                                                                                "a"
                                                                                                                "abstr(T)"
                                                                                                                "t"
                                                                                                                "Subs(append(theta, SOL`2))(body(S))"
                                                                                                                "s"
                                                                                                                "Subs(sigma)(body(S))"))
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "fresh?_complete"
                                                                                                                   ("Delta"
                                                                                                                    "Delta"
                                                                                                                    "a"
                                                                                                                    "abstr(T)"
                                                                                                                    "t"
                                                                                                                    "Subs(theta)(Subs(SOL`2)(body(S)))"))
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "Subs_append")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "less")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "theta")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "fresh_subs_append_context")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "Id")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "append"
                                                                                                                                     1
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "fresh_subs?_is_fresh3"
                                                                                                                                         ("a"
                                                                                                                                          "abstr(T)"
                                                                                                                                          "sigma"
                                                                                                                                          "theta"
                                                                                                                                          "t"
                                                                                                                                          "Subs(SOL`2)(body(S))"))
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "x")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "append_null")
                                                                                                                                            (("1"
                                                                                                                                              (decompose-equality
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "fresh_subs_weakening"
                                                                                                                                                     ("Delta"
                                                                                                                                                      "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1"
                                                                                                                                                      "sigma"
                                                                                                                                                      "theta"
                                                                                                                                                      "Nabla1"
                                                                                                                                                      "fresh_subs?(theta, fresh?(abstr(T), Subs(SOL`2)(body(S)))`1)`1"
                                                                                                                                                      "Nabla2"
                                                                                                                                                      "Delta"))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "fresh_subs?_is_fresh_subs"
                                                                                                                                                         ("sigma"
                                                                                                                                                          "theta"
                                                                                                                                                          "Nabla"
                                                                                                                                                          "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1"))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3
                                                                                                                                                             -6)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "lex2_lt")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "depth"
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Vars"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "ext_preserves_Vars")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Vars"
                                                                                                     2
                                                                                                     (3
                                                                                                      4))
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "term_app_eta"
                                                         (app?_var T))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -4
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             "term_app_eta"
                                                             (app?_var
                                                              S))
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "Subs_app")
                                                                (("1"
                                                                  (rewrite
                                                                   "Subs_app")
                                                                  (("1"
                                                                    (expand
                                                                     "alpha"
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "arg(T)"
                                                                           "arg(S)")
                                                                          (("1"
                                                                            (split
                                                                             -4)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "Delta"
                                                                               "sigma")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "lex2_lt")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "depth"
                                                                                   2
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "Vars"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Vars"
                                                                                       2
                                                                                       (3
                                                                                        4))
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Subs_fresh formula-decl nil substitution nil)
    (fresh?_complete formula-decl nil freshness nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (fresh_subs?_is_fresh_subs formula-decl nil substitution nil)
    (fresh_subs_weakening formula-decl nil substitution nil)
    (fresh_subs?_is_fresh3 formula-decl nil substitution nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (Subs_abs formula-decl nil substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (Subs_app formula-decl nil substitution nil)
    (sym adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (alpha_Subs_invariance formula-decl nil substitution nil)
    (alpha_transitive formula-decl nil alpha_equivalence nil)
    (fresh_subs_o_fresh_subs? formula-decl nil substitution nil)
    (fresh_subs? def-decl "[fresh_context, bool]" substitution nil)
    (fresh_subs_append_context formula-decl nil substitution nil)
    (alpha_preserves_fresh formula-decl nil alpha_equivalence nil)
    (Subs_unif_Vars_decrease formula-decl nil substitution nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (Subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (alpha_Subs_ord formula-decl nil substitution nil)
    (ord const-decl "upto(5)" term_adt nil)
    (alpha? def-decl "[fresh_context, bool]" alpha_equivalence nil)
    (fresh_subs_character formula-decl nil substitution nil)
    (fc def-decl "fresh_context" freshness nil)
    (DS const-decl "list[atom]" atoms nil)
    (DS_member formula-decl nil atoms nil)
    (ds const-decl "set[atom]" atoms nil)
    (alpha_ds_fresh formula-decl nil alpha_equivalence nil)
    (fc_member formula-decl nil freshness nil)
    (Vars_occurs formula-decl nil nominal_term nil)
    (alpha_Subs_Vars formula-decl nil substitution nil)
    (alpha_symmetric formula-decl nil alpha_equivalence nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (Subs_atom formula-decl nil substitution nil)
    (Subs_atom2 formula-decl nil substitution nil)
    (Id const-decl "Sub" substitution nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_at_eta formula-decl nil term_adt nil)
    (fresh_subs def-decl "bool" substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Subs_append formula-decl nil substitution nil)
    (alpha_reflexivity formula-decl nil alpha_equivalence nil)
    (Subs_perm_comm formula-decl nil substitution nil)
    (ext_reverse_alpha formula-decl nil alpha_equivalence nil)
    (term_times_eta formula-decl nil term_adt nil)
    (ext_identity formula-decl nil nominal_term nil)
    (subs def-decl "term" substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (Sub type-eq-decl nil substitution nil)
    (Vars_in const-decl "bool" substitution nil)
    (occurs def-decl "bool" nominal_term nil)
    (Subs_unif type-eq-decl nil substitution nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (Subs def-decl "term" substitution nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (variable type-eq-decl nil nominal_term nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil)
  (unify_complete-1 nil 3629617023
   ("" (measure-induct "lex2(card(Vars(t,s)), depth(t))" (t s))
    (("" (skolem 1 (T S))
      (("" (prop)
        (("" (skeep)
          (("" (expand unify 1)
            (("" (lift-if)
              (("" (split 1)
                (("1" (prop)
                  (("1" (hide -2)
                    (("1" (expand less)
                      (("1" (inst 1 sigma)
                        (("1" (expand fresh_subs)
                          (("1" (skeep)
                            (("1" (rewrite Subs_append)
                              (("1"
                                (expand Subs 1 2)
                                (("1"
                                  (expand Subs 1 2)
                                  (("1"
                                    (expand subs 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (rewrite ext_identity)
                                        (("1"
                                          (rewrite alpha_reflexivity)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (case
                                               "S = ext(p(S))((::)*V(S))")
                                              (("1"
                                                (replace -1 -4)
                                                (("1"
                                                  (rewrite
                                                   Subs_perm_comm)
                                                  (("1"
                                                    (rewrite
                                                     Subs_perm_comm)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (rewrite
                                                         ext_reverse_alpha)
                                                        (("1"
                                                          (rewrite
                                                           reverse_reverse)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand ext 1)
                                                (("2"
                                                  (rewrite append_null)
                                                  (("2"
                                                    (rewrite
                                                     "term_times_eta")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (lemma term_at_eta (atom?_var T))
                        (("1" (replace -1 -4 rl)
                          (("1" (hide -3)
                            (("1" (rewrite Subs_atom)
                              (("1"
                                (expand alpha)
                                (("1"
                                  (expand occurs)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       Subs_atom2
                                       (a "a(T)" s S sigma sigma))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand less)
                                          (("1"
                                            (inst 1 sigma)
                                            (("1"
                                              (expand fresh_subs)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand Id)
                                                  (("1"
                                                    (rewrite
                                                     append_null)
                                                    (("1"
                                                      (rewrite
                                                       alpha_reflexivity)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (lemma term_times_eta (susp?_var T))
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand less)
                                      (("1"
                                        (inst 2 sigma)
                                        (("1"
                                          (expand fresh_subs)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (rewrite Subs_append)
                                              (("1"
                                                (expand Subs 2 2)
                                                (("1"
                                                  (expand Subs 2 2)
                                                  (("1"
                                                    (expand subs)
                                                    (("1"
                                                      (rewrite
                                                       ext_identity)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (rewrite
                                                           alpha_reflexivity)
                                                          (("1"
                                                            (hide 4)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (case
                                                                 "T = ext(p(T))((::)*V(T))")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -5)
                                                                  (("1"
                                                                    (replaces
                                                                     -2)
                                                                    (("1"
                                                                      (rewrite
                                                                       Subs_perm_comm)
                                                                      (("1"
                                                                        (rewrite
                                                                         Subs_perm_comm)
                                                                        (("1"
                                                                          (rewrite
                                                                           alpha_symmetric
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             ext_reverse_alpha)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   ext
                                                                   1)
                                                                  (("2"
                                                                    (rewrite
                                                                     append_null)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand alpha?)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand less)
                                              (("1"
                                                (inst 1 sigma)
                                                (("1"
                                                  (case
                                                   "T = ext(p(T))((::)*V(T))")
                                                  (("1"
                                                    (case
                                                     "S = ext(p(S))((::)*V(S))")
                                                    (("1"
                                                      (replace -1 -8)
                                                      (("1"
                                                        (replace -2 -8)
                                                        (("1"
                                                          (rewrite
                                                           Subs_perm_comm)
                                                          (("1"
                                                            (rewrite
                                                             Subs_perm_comm)
                                                            (("1"
                                                              (replaces
                                                               -4)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   fresh_subs_character
                                                                   (Delta
                                                                    Delta
                                                                    sigma
                                                                    sigma
                                                                    Nabla
                                                                    "fc(DS(p(T), p(S)), V(S))"))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (lemma
                                                                         fc_member
                                                                         (a
                                                                          "ax`1"
                                                                          Y
                                                                          "ax`2"
                                                                          l
                                                                          "DS(p(T), p(S))"
                                                                          X
                                                                          "V(S)"))
                                                                        (("1"
                                                                          (case
                                                                           "ax = (ax`1, ax`2)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -3)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     alpha_ds_fresh
                                                                                     (Delta
                                                                                      Delta
                                                                                      pi1
                                                                                      "p(T)"
                                                                                      pi2
                                                                                      "p(S)"
                                                                                      t
                                                                                      "Subs(sigma)((: :) * V(S))"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "ax`1")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           DS_member
                                                                                           (pi1
                                                                                            "p(T)"
                                                                                            pi2
                                                                                            "p(S)"
                                                                                            a
                                                                                            "ax`1"))
                                                                                          (("1"
                                                                                            (expand
                                                                                             member
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     Id)
                                                                    (("2"
                                                                      (rewrite
                                                                       append_null)
                                                                      (("2"
                                                                        (rewrite
                                                                         alpha_reflexivity)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand ext 1)
                                                      (("2"
                                                        (rewrite
                                                         append_null)
                                                        (("2"
                                                          (rewrite
                                                           term_times_eta)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand ext 1)
                                                    (("2"
                                                      (rewrite
                                                       append_null)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (case "susp?(S)")
                                              (("1"
                                                (expand occurs -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 alpha_symmetric)
                                                (("2"
                                                  (replace -2 -4 rl)
                                                  (("2"
                                                    (lemma
                                                     alpha_Subs_Vars
                                                     (Delta
                                                      Delta
                                                      sigma
                                                      sigma
                                                      t
                                                      S
                                                      pi
                                                      "p(T)"
                                                      X
                                                      "V(T)"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         member
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           Vars_occurs)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma
                                   alpha_Subs_ord
                                   (Delta Delta sigma sigma t T s S))
                                  (("1"
                                    (expand member -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite Vars_occurs)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand ord -1)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 4)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand less)
                                                    (("2"
                                                      (inst 1 sigma)
                                                      (("2"
                                                        (expand
                                                         fresh_subs)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand Id)
                                                            (("2"
                                                              (rewrite
                                                               append_null)
                                                              (("2"
                                                                (rewrite
                                                                 alpha_reflexivity)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma
                                     alpha_Subs_ord
                                     (Delta Delta t T s S sigma sigma))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand member 1)
                                            (("1"
                                              (rewrite Vars_occurs)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand ord)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 5)
                                                (("2"
                                                  (hide 1)
                                                  (("2"
                                                    (prop)
                                                    (("2"
                                                      (reveal 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst-cp
                                                           -3
                                                           "term1(T)"
                                                           "term1(S)")
                                                          (("2"
                                                            (split -4)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               Delta
                                                               sigma)
                                                              (("1"
                                                                (lemma
                                                                 "term_pair_eta"
                                                                 (pair?_var
                                                                  T))
                                                                (("1"
                                                                  (lemma
                                                                   "term_pair_eta"
                                                                   (pair?_var
                                                                    S))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -7
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -7
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         Subs_pair)
                                                                        (("1"
                                                                          (rewrite
                                                                           Subs_pair)
                                                                          (("1"
                                                                            (expand
                                                                             alpha
                                                                             -7)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "SOL1"
                                                                                     "unify(term1(T), term1(S))")
                                                                                    (("1"
                                                                                      (expand
                                                                                       less
                                                                                       -4)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           alpha_Subs_invariance
                                                                                           (Delta
                                                                                            Delta
                                                                                            sigma
                                                                                            "append(theta, SOL1`2)"
                                                                                            gamma
                                                                                            sigma
                                                                                            t
                                                                                            "term2(T)"))
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               alpha_transitive
                                                                                               (Delta
                                                                                                Delta
                                                                                                t1
                                                                                                "Subs(append(theta, SOL1`2))(term2(T))"
                                                                                                t2
                                                                                                "Subs(sigma)(term2(T))"
                                                                                                t3
                                                                                                "Subs(sigma)(term2(S))"))
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 alpha_Subs_invariance
                                                                                                 (Delta
                                                                                                  Delta
                                                                                                  sigma
                                                                                                  "append(theta, SOL1`2)"
                                                                                                  gamma
                                                                                                  sigma
                                                                                                  t
                                                                                                  "term2(S)"))
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     alpha_symmetric
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       alpha_transitive
                                                                                                       (Delta
                                                                                                        Delta
                                                                                                        t1
                                                                                                        "Subs(append(theta, SOL1`2))(term2(T))"
                                                                                                        t2
                                                                                                        "Subs(sigma)(term2(S))"
                                                                                                        t3
                                                                                                        "Subs(append(theta, SOL1`2))(term2(S))"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             Subs_append
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               Subs_append
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -12
                                                                                                                 "Subs(SOL1`2)(term2(T))"
                                                                                                                 "Subs(SOL1`2)(term2(S))")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -12)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     Delta
                                                                                                                     theta)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (name-replace
                                                                                                                         "SOL2"
                                                                                                                         "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           x
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   less)
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       fresh_subs_o_fresh_subs?
                                                                                                                                       (Delta
                                                                                                                                        Delta
                                                                                                                                        sigma
                                                                                                                                        "theta!1"
                                                                                                                                        gamma
                                                                                                                                        "SOL2`2"
                                                                                                                                        Nabla
                                                                                                                                        "SOL1`1"))
                                                                                                                                      (("1"
                                                                                                                                        (iff
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     1
                                                                                                                                                     theta!1)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       fresh_subs_append_context)
                                                                                                                                                      (("1"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -14
                                                                                                                                                           X)
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             Subs_append
                                                                                                                                                             -14)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               alpha_Subs_invariance
                                                                                                                                                               (Delta
                                                                                                                                                                Delta
                                                                                                                                                                sigma
                                                                                                                                                                "append(theta!1, SOL2`2)"
                                                                                                                                                                gamma
                                                                                                                                                                "theta"
                                                                                                                                                                t
                                                                                                                                                                "Subs(SOL1`2)((: :) * X)"))
                                                                                                                                                              (("1"
                                                                                                                                                                (prop)
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite*
                                                                                                                                                                   Subs_append)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     alpha_transitive
                                                                                                                                                                     (Delta
                                                                                                                                                                      Delta
                                                                                                                                                                      t1
                                                                                                                                                                      "Subs(theta!1)(Subs(SOL2`2)(Subs(SOL1`2)((: :) * X)))"
                                                                                                                                                                      t2
                                                                                                                                                                      "Subs(theta)(Subs(SOL1`2)((: :) * X))"
                                                                                                                                                                      t3
                                                                                                                                                                      "Subs(sigma)((: :) * X)"))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   fresh_subs_character
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       fresh_subs_character
                                                                                                                                                       -12)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -12
                                                                                                                                                         ax)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -4
                                                                                                                                                           "ax`2")
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             alpha_preserves_fresh
                                                                                                                                                             (Delta
                                                                                                                                                              Delta
                                                                                                                                                              a
                                                                                                                                                              "ax`1"
                                                                                                                                                              t
                                                                                                                                                              "Subs(append(theta!1, SOL2`2))((: :) * ax`2)"
                                                                                                                                                              s
                                                                                                                                                              "Subs(theta)((: :) * ax`2)"))
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (-10
                                                                                                                      -11
                                                                                                                      1))
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       lex2_lt)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "SOL1`2 = Id")
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             Id)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               Subs)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 depth
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   max)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     card_subset
                                                                                                                                     (A
                                                                                                                                      "Vars(term2(T), term2(S))"
                                                                                                                                      B
                                                                                                                                      "Vars(T, S)"))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       <=)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("3"
                                                                                                                                            (expand*
                                                                                                                                             Vars
                                                                                                                                             subset?
                                                                                                                                             member)
                                                                                                                                            (("3"
                                                                                                                                              (expand
                                                                                                                                               Vars
                                                                                                                                               1
                                                                                                                                               (3
                                                                                                                                                4))
                                                                                                                                              (("3"
                                                                                                                                                (expand*
                                                                                                                                                 union
                                                                                                                                                 member)
                                                                                                                                                (("3"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           Subs_unif_Vars_decrease
                                                                                                                           (u
                                                                                                                            "term1(T)"
                                                                                                                            s
                                                                                                                            "term1(S)"
                                                                                                                            w
                                                                                                                            "term2(T)"
                                                                                                                            t
                                                                                                                            "term2(S)"
                                                                                                                            gamma
                                                                                                                            "SOL1`2"))
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "Vars(T, S) = union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S)))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 Vars)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   Vars
                                                                                                                                   1
                                                                                                                                   (1
                                                                                                                                    2))
                                                                                                                                  (("2"
                                                                                                                                    (expand*
                                                                                                                                     union
                                                                                                                                     member)
                                                                                                                                    (("2"
                                                                                                                                      (decompose-equality)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                -2
                                                                1))
                                                              (("2"
                                                                (rewrite
                                                                 lex2_lt)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lemma
                                                                     card_subset
                                                                     (A
                                                                      "Vars(term1(T), term1(S))"
                                                                      B
                                                                      "Vars(T, S)"))
                                                                    (("2"
                                                                      (expand
                                                                       <=)
                                                                      (("2"
                                                                        (expand
                                                                         depth
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           max)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               3)
                                                                              (("3"
                                                                                (expand
                                                                                 Vars
                                                                                 1)
                                                                                (("3"
                                                                                  (expand
                                                                                   Vars
                                                                                   1
                                                                                   (3
                                                                                    4))
                                                                                  (("3"
                                                                                    (expand*
                                                                                     subset?
                                                                                     union
                                                                                     member)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     alpha_Subs_ord
                                     (Delta Delta sigma sigma t T s S))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand member 1)
                                            (("1"
                                              (rewrite Vars_occurs)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 6)
                                          (("2"
                                            (expand ord)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 1)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (reveal 1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 term_abs_eta
                                                                 (abs?_var
                                                                  T))
                                                                (("1"
                                                                  (lemma
                                                                   term_abs_eta
                                                                   (abs?_var
                                                                    S))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -6
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -6
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         Subs_abs)
                                                                        (("1"
                                                                          (rewrite
                                                                           Subs_abs)
                                                                          (("1"
                                                                            (expand
                                                                             alpha
                                                                             -6)
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "body(T)"
                                                                                     "body(S)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -7)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         Delta
                                                                                         sigma)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           lex2_lt)
                                                                                          (("2"
                                                                                            (expand
                                                                                             Vars
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               depth
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 Vars
                                                                                                 1
                                                                                                 (7
                                                                                                  8))
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -7
                                                                                     "body(T)"
                                                                                     "ext(cons((abstr(T), abstr(S)), null))(body(S))")
                                                                                    (("2"
                                                                                      (split
                                                                                       -7)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         Delta
                                                                                         sigma)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           Subs_perm_comm
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             x)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "SOL"
                                                                                                     "unify(body(T), ext(cons((abstr(T), abstr(S)), null))(body(S)))")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       less
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           Subs_fresh
                                                                                                           (a
                                                                                                            "abstr(T)"
                                                                                                            sigma
                                                                                                            "theta"
                                                                                                            t
                                                                                                            "Subs(SOL`2)(body(S))"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             alpha_Subs_invariance
                                                                                                             (Delta
                                                                                                              Delta
                                                                                                              sigma
                                                                                                              "append(theta, SOL`2)"
                                                                                                              gamma
                                                                                                              sigma
                                                                                                              t
                                                                                                              "body(S)"))
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               alpha_preserves_fresh
                                                                                                               (Delta
                                                                                                                Delta
                                                                                                                a
                                                                                                                "abstr(T)"
                                                                                                                t
                                                                                                                "Subs(append(theta, SOL`2))(body(S))"
                                                                                                                s
                                                                                                                "Subs(sigma)(body(S))"))
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   fresh?_complete
                                                                                                                   (Delta
                                                                                                                    Delta
                                                                                                                    a
                                                                                                                    "abstr(T)"
                                                                                                                    t
                                                                                                                    "Subs(theta)(Subs(SOL`2)(body(S)))"))
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     Subs_append)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           less)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             theta)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 fresh_subs_append_context)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   Id)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     append
                                                                                                                                     1
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         fresh_subs?_is_fresh3
                                                                                                                                         (a
                                                                                                                                          "abstr(T)"
                                                                                                                                          sigma
                                                                                                                                          theta
                                                                                                                                          t
                                                                                                                                          "Subs(SOL`2)(body(S))"))
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           x)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             append_null)
                                                                                                                                            (("1"
                                                                                                                                              (decompose-equality
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     fresh_subs_weakening
                                                                                                                                                     (Delta
                                                                                                                                                      "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1"
                                                                                                                                                      sigma
                                                                                                                                                      theta
                                                                                                                                                      Nabla1
                                                                                                                                                      "fresh_subs?(theta, fresh?(abstr(T), Subs(SOL`2)(body(S)))`1)`1"
                                                                                                                                                      Nabla2
                                                                                                                                                      Delta))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         fresh_subs?_is_fresh_subs
                                                                                                                                                         (sigma
                                                                                                                                                          theta
                                                                                                                                                          Nabla
                                                                                                                                                          "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1"))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3
                                                                                                                                                             -6)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         3)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           lex2_lt)
                                                                                          (("2"
                                                                                            (expand
                                                                                             depth
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 Vars
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   ext_preserves_Vars)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     Vars
                                                                                                     2
                                                                                                     (3
                                                                                                      4))
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         term_app_eta
                                                         (app?_var T))
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -4
                                                           rl)
                                                          (("2"
                                                            (lemma
                                                             term_app_eta
                                                             (app?_var
                                                              S))
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -5
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 Subs_app)
                                                                (("1"
                                                                  (rewrite
                                                                   Subs_app)
                                                                  (("1"
                                                                    (expand
                                                                     alpha
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "arg(T)"
                                                                           "arg(S)")
                                                                          (("1"
                                                                            (split
                                                                             -4)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               Delta
                                                                               sigma)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               lex2_lt)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   depth
                                                                                   2
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     Vars
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       Vars
                                                                                       2
                                                                                       (3
                                                                                        4))
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Subs_fresh formula-decl nil substitution nil)
    (fresh?_complete formula-decl nil freshness nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (fresh_subs?_is_fresh_subs formula-decl nil substitution nil)
    (fresh_subs_weakening formula-decl nil substitution nil)
    (fresh_subs?_is_fresh3 formula-decl nil substitution nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (ext_preserves_Vars formula-decl nil nominal_term nil)
    (Subs_abs formula-decl nil substitution nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (Subs_app formula-decl nil substitution nil)
    (sym adt-accessor-decl "[(app?) -> symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (alpha_Subs_invariance formula-decl nil substitution nil)
    (alpha_transitive formula-decl nil alpha_equivalence nil)
    (fresh_subs_o_fresh_subs? formula-decl nil substitution nil)
    (fresh_subs? def-decl "[fresh_context, bool]" substitution nil)
    (fresh_subs_append_context formula-decl nil substitution nil)
    (alpha_preserves_fresh formula-decl nil alpha_equivalence nil)
    (Subs_unif_Vars_decrease formula-decl nil substitution nil)
    (Vars def-decl "finite_set[variable]" nominal_term nil)
    (Subs_pair formula-decl nil substitution nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (alpha_Subs_ord formula-decl nil substitution nil)
    (ord const-decl "upto(5)" term_adt nil)
    (alpha? def-decl "[fresh_context, bool]" alpha_equivalence nil)
    (fresh_subs_character formula-decl nil substitution nil)
    (fc def-decl "fresh_context" freshness nil)
    (DS const-decl "list[atom]" atoms nil)
    (DS_member formula-decl nil atoms nil)
    (ds const-decl "set[atom]" atoms nil)
    (alpha_ds_fresh formula-decl nil alpha_equivalence nil)
    (fc_member formula-decl nil freshness nil)
    (Vars_occurs formula-decl nil nominal_term nil)
    (alpha_Subs_Vars formula-decl nil substitution nil)
    (alpha_symmetric formula-decl nil alpha_equivalence nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (Subs_atom formula-decl nil substitution nil)
    (Subs_atom2 formula-decl nil substitution nil)
    (Id const-decl "Sub" substitution nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_at_eta formula-decl nil term_adt nil)
    (fresh_subs def-decl "bool" substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (susp?)]" term_adt
       nil)
    (p adt-accessor-decl "[(susp?) -> perm]" term_adt nil)
    (ext def-decl "term" nominal_term nil)
    (V adt-accessor-decl "[(susp?) -> variable]" term_adt nil)
    (susp? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (Subs_append formula-decl nil substitution nil)
    (alpha_reflexivity formula-decl nil alpha_equivalence nil)
    (Subs_perm_comm formula-decl nil substitution nil)
    (ext_reverse_alpha formula-decl nil alpha_equivalence nil)
    (term_times_eta formula-decl nil term_adt nil)
    (ext_identity formula-decl nil nominal_term nil)
    (subs def-decl "term" substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (Sub type-eq-decl nil substitution nil)
    (Vars_in const-decl "bool" substitution nil)
    (occurs def-decl "bool" nominal_term nil)
    (Subs_unif type-eq-decl nil substitution nil)
    (alpha def-decl "bool" alpha_equivalence nil)
    (Subs def-decl "term" substitution nil)
    (depth def-decl "nat" nominal_term nil)
    (Vars const-decl "finite_set[variable]" substitution nil)
    (variable type-eq-decl nil nominal_term nil)
    (term type-decl nil term_adt nil)
    (symbol type-eq-decl nil nominal_term nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   shostak)))

