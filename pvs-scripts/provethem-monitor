#!/bin/bash

function print_usage {
    myself=$(basename $0)
    echo
    echo "Usage: $myself <provethem PID> <summaries directory> ['dont-kill' | <timeout in secs.> [ <refresh in secs.> ] ]"
    echo
    echo "$myself tries to determine if proveit is non-responsive by checking the summary files in "
    echo "the directory provided. It checks the size of the youngest summary file every REFRESH seconds."
    echo "If no change is detected after TIMEOUT seconds, the proveit process is killed, unless the "
    echo "DONT-KILL option is enabled. The default value for REFRESH is half the timeout provided."
    echo "The default value for TIMEOUT is 60 seconds."
    echo
    echo "  For instance,"
    echo "     $myself 3333 summaries        looks into the summaries folder, every 30 secs with a timeout of 60"
    echo "     $myself 3333 summaries 40     looks into the summaries folder, every 20 secs with a timeout of 40"
    echo "     $myself 3333 summaries 50 10  looks into the summaries folder, every 10 secs with a timeout of 50"
}

if [[ $1 == "-h" ]] || [[ $1 == "-help" ]] || [[ $1 == "--help" ]] || [[ $1 == "help" ]] || [[ $1 == "-?" ]]; then
    print_usage
    exit 0
fi

## First argument: provethem pid  (mandatory)

[[ -z $1 ]] &&
	echo "Error: first argument is mandatory" &&
	print_usage &&
	exit 1;

if [[ "$1" =~ ^[0-9]+$ ]] ; then
    ps_out=`ps o pid,ppid,command | grep $1`
    if [ $? -eq "0" ] ; then
	# $1 is the PID of a running process
	if [[ "$ps_out" == *"provethem"* ]]; then
	    provethem_pid=$1
	else
	    echo "Error: $1 is the PID of a running process, but ir does not seem to correspond to a provethem incarnation"
	    exit 1
	fi
    else
	echo "Error: $1 is not the PID of a running process"
	exit 1
    fi
else
    echo "Error: first argument must be a PID"
    exit 1
fi

## Second argument: summaries directory (mandatory)

[[ -z $2 ]] &&
    echo "Error: second argument is mandatory" &&
    print_usage &&
    exit 1;

summaries_dir=$2
    
! [[ -d $summaries_dir ]] &&
    echo "Error: $2 is not a directory" &&
    print_usage &&
    exit 1;

## Third argument: timeout

TIMEOUT=$3

[[ -z $TIMEOUT ]] && TIMEOUT="60";

if [[ $TIMEOUT == 'dont-kill' ]]; then
    unset TIMEOUT
    echo 'Just monitor, not going to try and kill proveit...'
else
    if ! [[ "$TIMEOUT" =~ ^[0-9]+$ ]] ; then
	echo "Timeout provided is not valid"
	print_usage
	exit 1
    fi
    echo "Timeout: $TIMEOUT secs."
fi

if ! [[ -z $4 ]]; then
    REFRESH=$4;

    if ! [[ "$REFRESH" =~ ^[0-9]+$ ]] ; then
	echo "Refresh provided is not valid"
	print_usage
	exit 1
    fi
else 
    if ! [[ -z $TIMEOUT ]]; then
	REFRESH=$(($TIMEOUT/2))
    else
	REFRESH=30
    fi
fi

echo "Refresh: $REFRESH secs.";

file_size_cmd="stat -c %s"
eval $file_size_cmd" ." &> /dev/null
if ! [[ $? == 0 ]]; then
    file_size_cmd="stat -f%z"
    eval $file_size_cmd" ." &> /dev/null
    if ! [[ $? == 0 ]]; then
	echo "Error: Couldn't start stat command."
	exit 1
    fi
fi

currentProveitPID=`ps o pid,ppid,command | grep -E "[0-9]+ *$provethem_pid .*proveit" | awk '{print$1}'`

currentLibrary=`ps o pid,ppid,command | sed -n -E "s/^[[:blank:]]*$currentProveitPID *[0-9]+ *.*proveit.* ([^ ]+)$/\1/p"`
currentSummaryFile="${currentLibrary/\//-/}.summary"

if [ -z $currentProveitPID ] ; then
    echo "Error: could not find an active proveit process"
    exit 1
fi

waitUntilItStopsToGrow() # log-file pvs-pid
{
    secs_since_last_refresh=0
    fileSize=`eval $file_size_cmd" $1"`
    while true
    do
        sleep $REFRESH;
	fileSizeNew=`eval $file_size_cmd" $1"`

        if [ "$fileSize" == "$fileSizeNew" ]
        then
	    secs_since_last_refresh=$((secs_since_last_refresh + REFRESH))
            echo "[$(date +'%r') - No changes noted in $1 (after $secs_since_last_refresh secs.).]"
	    [ ! -z "$TIMEOUT" ] && if (( $TIMEOUT <= $secs_since_last_refresh )); then
		echo "[$(date +'%r') - Timeout reached ($TIMEOUT secs.). Trying to kill $2 and its descendents]" | tee -a proveit-monitor.out
		current_pvs_pid=`ps o pid,ppid,command | grep -E "[0-9]+ *$currentProveitPID .*pvs" | awk '{print$1}'`
		kill $2 && echo "[$(date +'%r') - Killed proveit ($2)]" | tee -a proveit-monitor.out
	        [ ! -z $current_pvs_pid ] &&
		    current_runtime_pid=`ps o pid,ppid,command | grep -i -E "[0-9]+ *$current_pvs_pid .*runtime.*pvs" | awk '{print$1}'` &&
		    kill $current_pvs_pid && echo "[$(date +'%r') - Killed pvs ($current_pvs_pid)]" | tee -a proveit-monitor.out &&
		    [ ! -z $current_runtime_pid ] && kill $current_runtime_pid && echo "[$(date +'%r') - Killed runtime ($current_runtime_pid)]" | tee -a proveit-monitor.out ;
		break
	    fi
	elif [ "$fileSize" -lt "$fileSizeNew" ]; then
	    echo "[$(date +'%r') - $(basename $1) has grown... $fileSize to $fileSizeNew]"
	    secs_since_last_refresh=0
	else
	    echo "[$(date +'%r') - $(basename $1) has shrink... $fileSize to $fileSizeNew. Assuming prove-it finished by itself.]"
	    secs_since_last_refresh=0
	    break
        fi

	fileSize=$fileSizeNew
    done
}

MAX_FIND_PROVEIT_ATTEMPTS=10

while true
do

    if [ ! -z "$currentProveitPID" ] ; then
        echo "[$(date +'%r') - proveit seems to be working on '$currentLibrary' (pid: $currentProveitPID). Polling on $summaries_dir/$currentSummaryFile]" | tee -a proveit-monitor.out
	waitUntilItStopsToGrow $summaries_dir/$currentSummaryFile $currentProveitPID
    else
	echo "No prove-it found"
	# no PID means proveit finished without crashing
    fi

    find_proveit_attempts=0

    while (( find_proveit_attempts < MAX_FIND_PROVEIT_ATTEMPTS ))
    do
	currentProveitPID=`ps o pid,ppid,command | grep -E "[0-9]+ *$provethem_pid .*proveit" | awk '{print$1}'`

	find_proveit_attempts=$((find_proveit_attempts + 1))

	[ ! -z $currentProveitPID ] &&
	    currentLibrary=`ps o pid,ppid,command | sed -n -E "s/^[[:blank:]]*$currentProveitPID *[0-9]+ *.*proveit.* ([^ ]+)$/\1/p"` &&
	    currentSummaryFile="${currentLibrary/\//-}.summary" && 
	    find_proveit_attempts=$MAX_FIND_PROVEIT_ATTEMPTS;
    done

    if [ -z "$currentProveitPID" ] ; then
	echo "Couldn't find an active prove-it. Assuming prove-all is done." | tee -a proveit-monitor.out
	exit
    fi
done

