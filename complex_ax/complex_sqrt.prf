(|complex_sqrt|
 (|sqrt_TCC1| 0
  (|sqrt_TCC1-1| |nil| 3385156197 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|sqrt| SUBTYPE "number_fields./(polar.arg(complex_sqrt.z), 2)" "argrng")))
 (|sqrt_nz_is_nz| 0
  (|sqrt_nz_is_nz-1| |nil| 3385156197
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (EXPAND "from_polar")
        ((""
          (LEMMA "unique_characterization"
           ("y0" "sin(arg(n0z!1) / 2) * reals@sqrt(abs(n0z!1))" "x0"
            "reals@sqrt(abs(n0z!1)) * cos(arg(n0z!1) / 2)" "x1" "0" "y1" "0"))
          (("" (REWRITE "zero_times1")
            (("" (REPLACE -1 -2)
              (("" (FLATTEN)
                (("" (HIDE -1 -2)
                  (("" (LEMMA "abs_nzcomplex" ("n0z" "n0z!1"))
                    (("" (LEMMA "sqrt_pos" ("px" "abs(n0z!1)"))
                      (("1" (NAME-REPLACE "R" "reals@sqrt(abs(n0z!1))")
                        (("1" (REWRITE "zero_times3" -3)
                          (("1" (ASSERT)
                            (("1" (REWRITE "cos_eq_0" -3)
                              (("1" (SKOSIMP)
                                (("1" (REPLACE -3)
                                  (("1" (HIDE -3)
                                    (("1" (REWRITE "sin_k_pi2")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|unique_characterization| FORMULA-DECL NIL |complex_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|cos_eq_0| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_k_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL)
    (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)
    (|abs_nzcomplex| FORMULA-DECL NIL |polar| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|sqrt_nz_is_nz| SUBTYPE "complex_sqrt.sqrt(complex_sqrt.n0z)"
    "nzcomplex")))
 (|sqrt_nnz| 0
  (|sqrt_nnz-2| "" 3790100370
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (EXPAND "abs")
        (("" (EXPAND "conjugate")
          (("" (EXPAND "arg")
            (("" (REWRITE "Re_real")
              (("" (REWRITE "Im_real")
                (("" (REWRITE "zero_times1")
                  (("" (REWRITE "zero_times1")
                    (("" (EXPAND "atan2")
                      (("" (ASSERT)
                        (("" (EXPAND "from_polar")
                          (("" (REWRITE "sin_0")
                            (("" (REWRITE "cos_0")
                              (("" (REWRITE "zero_times1")
                                (("" (REWRITE "zero_times1")
                                  (("" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|Re_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Re_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL))
   SHOSTAK)
  (|sqrt_nnz-1| |nil| 3385196945
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (EXPAND "abs")
        (("" (EXPAND "conjugate")
          (("" (EXPAND "arg")
            (("" (REWRITE "Re_real")
              (("" (REWRITE "Im_real")
                (("" (REWRITE "zero_times1")
                  (("" (REWRITE "zero_times1")
                    (("" (EXPAND "atan2")
                      (("" (ASSERT)
                        (("" (REWRITE "atan_0")
                          (("" (LIFT-IF)
                            (("" (EXPAND "from_polar")
                              (("" (REWRITE "sin_0")
                                (("" (REWRITE "cos_0")
                                  (("" (REWRITE "zero_times1")
                                    (("" (REWRITE "zero_times1")
                                      (("" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|Re_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|Re_real| FORMULA-DECL NIL |arithmetic| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|Im_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL))
   SHOSTAK))
 (|sqrt_npz_TCC1| 0
  (|sqrt_npz_TCC1-1| |nil| 3385196849
   ("" (SKOSIMP) (("" (TYPEPRED "npx!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|npreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|sqrt_npz| SUBTYPE "(number_fields.-)(complex_sqrt.npx)" "nonneg_real")))
 (|sqrt_npz| 0
  (|sqrt_npz-1| |nil| 3385197188
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (EXPAND "abs")
        (("" (EXPAND "conjugate")
          (("" (EXPAND "arg")
            (("" (REWRITE "Re_real")
              (("" (REWRITE "Im_real")
                (("" (REWRITE "zero_times1")
                  (("" (REWRITE "zero_times1")
                    (("" (ASSERT)
                      (("" (LIFT-IF)
                        (("" (ASSERT)
                          (("" (EXPAND "from_polar")
                            (("" (PROP)
                              (("1" (ASSERT)
                                (("1" (REWRITE "sin_0")
                                  (("1" (REWRITE "cos_0")
                                    (("1" (REWRITE "zero_times1")
                                      (("1" (REWRITE "zero_times1")
                                        (("1" (REPLACE -1)
                                          (("1" (REWRITE "reals@sqrt_0")
                                            (("1" (REWRITE "zero_times2") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "atan2")
                                  (("2" (REWRITE "atan_0")
                                    (("2" (REWRITE "sin_pi2")
                                      (("2" (REWRITE "cos_pi2")
                                        (("2" (REWRITE "identity_mult")
                                          (("2" (REWRITE "zero_times2")
                                            (("2"
                                              (LEMMA "sqrt_sq_neg"
                                               ("x" "npx!1"))
                                              (("2" (SPLIT -1)
                                                (("1" (EXPAND "sq")
                                                  (("1" (REPLACE -1)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (REWRITE
                                                         "commutative_mult" 2)
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|Re_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|npreal_times_npreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Re_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|npreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_square| FORMULA-DECL NIL |sqrt| |reals|)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|complex_plus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|sqrt_sq_neg| FORMULA-DECL NIL |sqrt| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|Im_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|abs| CONST-DECL "nnreal" |polar| NIL))
   SHOSTAK))
 (|sqrt_0| 0
  (|sqrt_0-1| |nil| 3385156772
   ("" (EXPAND "sqrt")
    (("" (EXPAND "abs")
      (("" (EXPAND "arg")
        (("" (EXPAND "conjugate")
          (("" (REWRITE "sqrt_0")
            (("" (REWRITE "sqrt_0")
              (("" (EXPAND "from_polar") (("" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL))
   SHOSTAK))
 (|sqrt_1| 0
  (|sqrt_1-1| |nil| 3385156811
   ("" (EXPAND "sqrt")
    (("" (EXPAND "abs")
      (("" (EXPAND "conjugate")
        (("" (EXPAND "arg")
          (("" (REWRITE "Re_real")
            (("" (REWRITE "Im_real")
              (("" (REWRITE "zero_times1")
                (("" (ASSERT)
                  (("" (EXPAND "atan2")
                    (("" (REWRITE "atan_0")
                      (("" (EXPAND "from_polar")
                        (("" (REWRITE "cos_0")
                          (("" (REWRITE "sin_0")
                            (("" (REWRITE "zero_times1")
                              (("" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|Im_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|Re_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|Re_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL))
   SHOSTAK))
 (|sqrt_neg1| 0
  (|sqrt_neg1-1| |nil| 3385197557
   ("" (LEMMA "sqrt_npz" ("npx" "-1")) (("" (ASSERT) NIL NIL)) NIL)
   ((|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|sqrt_nz_is_nz| APPLICATION-JUDGEMENT "nzcomplex" |complex_sqrt| NIL)
    (|npreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sqrt_npz| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|sqrt_eq_0| 0
  (|sqrt_eq_0-1| |nil| 3385156991
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (LEMMA "sqrt_nz_is_nz" ("n0z" "z!1"))
          (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
        NIL)
       ("2" (SKOSIMP*)
        (("2" (REPLACE -1) (("2" (REWRITE "sqrt_0") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sqrt_nz_is_nz| JUDGEMENT-TCC NIL |complex_sqrt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sqrt_0| FORMULA-DECL NIL |complex_sqrt| NIL))
   SHOSTAK))
 (|sqrt_sq_TCC1| 0
  (|sqrt_sq_TCC1-1| |nil| 3385192826 ("" (SUBTYPE-TCC) NIL NIL)
   ((|sq| CONST-DECL "numfield" |number_fields_sq| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL))
   NIL (|sqrt_sq| SUBTYPE "number_fields_sq.sq(complex_sqrt.z)" "complex")))
 (|sqrt_sq| 0
  (|sqrt_sq-1| |nil| 3385193372
   ("" (SKOSIMP)
    (("" (LIFT-IF)
      (("" (EXPAND "sqrt")
        (("" (EXPAND "sq")
          (("" (REWRITE "abs_mult")
            (("" (REWRITE "sq.sq_rew")
              (("" (REWRITE "sqrt_sq")
                (("" (CASE-REPLACE "z!1=0")
                  (("1" (EXPAND "arg")
                    (("1" (ASSERT)
                      (("1" (EXPAND "abs")
                        (("1" (EXPAND "conjugate")
                          (("1" (REWRITE "sqrt.sqrt_0")
                            (("1" (EXPAND "from_polar")
                              (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "arg_mult" ("n0x" "z!1" "n0y" "z!1"))
                    (("1" (ASSERT)
                      (("1" (PROP)
                        (("1" (ASSERT)
                          (("1" (REPLACE -3)
                            (("1"
                              (LEMMA "div_cancel1" ("x" "arg(z!1)" "n0z" "2"))
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1"
                                    (LEMMA "idempotent_polar" ("n0z" "z!1"))
                                    (("1" (EXPAND "polar")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (REPLACE -1)
                            (("2"
                              (LEMMA "div_cancel1"
                               ("x" "arg(z!1)+pi" "n0z" "2"))
                              (("2" (REPLACE -1 2)
                                (("2"
                                  (LEMMA "minus_nznum_is_nznum" ("nzx" "z!1"))
                                  (("2"
                                    (LEMMA "idempotent_polar" ("n0z" "-z!1"))
                                    (("1" (EXPAND "polar")
                                      (("1" (REWRITE "arg_neg")
                                        (("1" (REWRITE "abs_neg")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (LEMMA "minus_nznum_is_nznum" ("nzx" "z!1"))
                          (("3" (LEMMA "idempotent_polar" ("n0z" "-z!1"))
                            (("1" (EXPAND "polar")
                              (("1" (REWRITE "abs_neg")
                                (("1" (REWRITE "arg_neg")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sq| CONST-DECL "numfield" |number_fields_sq| NIL)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nznum_is_nznum| JUDGEMENT-TCC NIL |number_fields_bis| NIL)
    (|abs_neg| FORMULA-DECL NIL |polar| NIL)
    (|arg_neg| FORMULA-DECL NIL |polar| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|div_cancel1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|polar| CONST-DECL "[nnreal, argrng]" |polar| NIL)
    (|idempotent_polar| FORMULA-DECL NIL |polar| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK))
 (|sq_sqrt| 0
  (|sq_sqrt-1| |nil| 3385159230
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (CASE-REPLACE "z!1=0")
        (("1" (EXPAND "sq")
          (("1" (EXPAND "abs")
            (("1" (EXPAND "conjugate")
              (("1" (EXPAND "arg")
                (("1" (REWRITE "sqrt.sqrt_0")
                  (("1" (REWRITE "sqrt.sqrt_0")
                    (("1" (EXPAND "from_polar") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (LEMMA "abs_nzcomplex" ("n0z" "z!1"))
            (("2" (EXPAND "arg")
              (("2" (EXPAND "from_polar")
                (("2" (EXPAND "sq")
                  (("2" (CASE-REPLACE "Im(z!1) < 0")
                    (("1" (REWRITE "sq.sq_rew" 2)
                      (("1" (ASSERT)
                        (("1" (ASSERT)
                          (("1"
                            (CASE-REPLACE
                             "cos((atan2(Re(z!1), Im(z!1)) - 2 * pi) / 2) *
               sin((atan2(Re(z!1), Im(z!1)) - 2 * pi) / 2) = sin(atan2(Re(z!1), Im(z!1)) - 2 * pi)/2")
                            (("1" (HIDE -1)
                              (("1"
                                (CASE-REPLACE
                                 "sin((atan2(Re(z!1), Im(z!1)) - 2 * pi) / 2) *
                sin((atan2(Re(z!1), Im(z!1)) - 2 * pi) / 2)= (1-cos(atan2(Re(z!1), Im(z!1)) - 2 * pi))/2")
                                (("1" (HIDE -1)
                                  (("1"
                                    (LEMMA "idempotent_polar" ("n0z" "z!1"))
                                    (("1" (EXPAND "polar")
                                      (("1" (EXPAND "from_polar")
                                        (("1" (EXPAND "arg")
                                          (("1"
                                            (NAME-REPLACE "TH"
                                             "atan2(Re(z!1), Im(z!1)) - 2 * pi")
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "sq" 2)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "cos(TH / 2) * cos(TH / 2)=(cos(TH)+1)/2")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (REWRITE "sq.sq_rew" 2)
                                                      (("1"
                                                        (REWRITE "times_div1"
                                                         2)
                                                        (("1"
                                                          (REWRITE "times_div2"
                                                           2)
                                                          (("1"
                                                            (REWRITE
                                                             "div_cancel1" 2)
                                                            (("1"
                                                              (NAME-REPLACE
                                                               "DRL1"
                                                               "abs(z!1) * sin(TH) * i")
                                                              (("1"
                                                                (REWRITE
                                                                 "minus_div2" 2
                                                                 :DIR RL)
                                                                (("1"
                                                                  (REWRITE
                                                                   "div_distributes"
                                                                   2 :DIR RL)
                                                                  (("1"
                                                                    (HIDE -1)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "both_sides_times2"
                                                                       ("n0z"
                                                                        "abs(z!1)"
                                                                        "x"
                                                                        "cos(TH)"
                                                                        "y"
                                                                        "(1 / 2 - cos(TH) / 2) * i * i+((1 / 2) + (cos(TH) / 2))"))
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (SPLIT
                                                                             -1)
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               3
                                                                               -1)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "associative_mult"
                                                                                   ("y"
                                                                                    "i"
                                                                                    "z"
                                                                                    "i"))
                                                                                  (("2"
                                                                                    (INST-CP
                                                                                     -
                                                                                     "1/2")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -
                                                                                       "cos(TH)/2")
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "i_axiom")
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -1)
                                                                                          (("2"
                                                                                            (REPLACE
                                                                                             -2
                                                                                             1
                                                                                             RL)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2"
                                                      (LEMMA "cos_2a_cos"
                                                       ("a" "TH/2"))
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT 1)
                                  (("2"
                                    (NAME-REPLACE "TH"
                                     "atan2(Re(z!1), Im(z!1)) - 2 * pi")
                                    (("2" (LEMMA "cos_2a_sin" ("a" "TH/2"))
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2"
                                (NAME-REPLACE "TH"
                                 "atan2(Re(z!1), Im(z!1)) - 2 * pi")
                                (("2" (LEMMA "sin_2a" ("a" "TH/2"))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2"
                        (CASE-REPLACE
                         "cos(atan2(Re(z!1), Im(z!1)) / 2) * sin(atan2(Re(z!1), Im(z!1)) / 2) = sin(atan2(Re(z!1), Im(z!1)))/2")
                        (("1" (HIDE -1)
                          (("1"
                            (CASE-REPLACE
                             "sin(atan2(Re(z!1), Im(z!1)) / 2) * sin(atan2(Re(z!1), Im(z!1)) / 2) = (1-cos(atan2(Re(z!1), Im(z!1))))/2")
                            (("1" (HIDE -1)
                              (("1"
                                (CASE-REPLACE
                                 "cos(atan2(Re(z!1), Im(z!1)) / 2) * cos(atan2(Re(z!1), Im(z!1)) / 2) = (cos(atan2(Re(z!1), Im(z!1)))+1)/2")
                                (("1" (HIDE -1)
                                  (("1" (ASSERT)
                                    (("1" (REWRITE "sq.sq_rew")
                                      (("1"
                                        (LEMMA "complex_is_ne_0_Re_Im"
                                         ("z" "z!1"))
                                        (("1" (ASSERT)
                                          (("1"
                                            (LEMMA "sin_atan2"
                                             ("x" "Re(z!1)" "y" "Im(z!1)"))
                                            (("1"
                                              (LEMMA "cos_atan2"
                                               ("x" "Re(z!1)" "y" "Im(z!1)"))
                                              (("1" (ASSERT)
                                                (("1" (REPLACE -3)
                                                  (("1"
                                                    (CASE-REPLACE
                                                     "2 * (abs(z!1) * (sin(atan2(Re(z!1), Im(z!1))) / 2) * i) +
                   abs(z!1) * ((1 - cos(atan2(Re(z!1), Im(z!1)))) / 2) * i * i
                   + abs(z!1) * ((1 + cos(atan2(Re(z!1), Im(z!1)))) / 2) = abs(z!1)*(sin(atan2(Re(z!1), Im(z!1)))*i + cos(atan2(Re(z!1), Im(z!1))))")
                                                    (("1" (HIDE -1)
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "Re(z!1)=0")
                                                        (("1" (REPLACE -2)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (LEMMA
                                                               "complex_is_Re_Im"
                                                               ("z" "z!1"))
                                                              (("1"
                                                                (REPLACE -2)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -4)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (CASE-REPLACE
                                                                         "abs(z!1)=Im(z!1)")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (EXPAND
                                                                           "abs")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "conjugate")
                                                                            (("2"
                                                                              (REPLACE
                                                                               -2)
                                                                              (("2"
                                                                                (REWRITE
                                                                                 "zero_times1")
                                                                                (("2"
                                                                                  (CASE-REPLACE
                                                                                   "0 - Im(z!1) * i * z!1 = sq(Im(z!1))")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "sqrt.sqrt_sq")
                                                                                    (("1"
                                                                                      (INST
                                                                                       -
                                                                                       "Im(z!1)")
                                                                                      (("1"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "sq")
                                                                                          (("1"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (EXPAND
                                                                                     "sq")
                                                                                    (("2"
                                                                                      (NAME-REPLACE
                                                                                       "IMMM"
                                                                                       "Im(z!1)")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (HIDE-ALL-BUT
                                                                                           1)
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "sq_rew")
                                                                                            (("2"
                                                                                              (REWRITE
                                                                                               "sq_times")
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "sq_rew")
                                                                                                (("2"
                                                                                                  (CASE-REPLACE
                                                                                                   "sq(i)=-1")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "sq")
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "sq")
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "i_axiom")
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT)
                                                          (("2"
                                                            (LEMMA
                                                             "idempotent_polar"
                                                             ("n0z" "z!1"))
                                                            (("2"
                                                              (EXPAND
                                                               "from_polar")
                                                              (("2"
                                                                (EXPAND
                                                                 "polar")
                                                                (("2"
                                                                  (EXPAND
                                                                   "arg")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT (-4 1))
                                                      (("2"
                                                        (NAME-REPLACE "ATT"
                                                         "atan2(Re(z!1), Im(z!1))")
                                                        (("2"
                                                          (NAME-REPLACE "ABS"
                                                           "abs(z!1)")
                                                          (("2"
                                                            (NAME-REPLACE "S"
                                                             "sin(ATT)")
                                                            (("2"
                                                              (NAME-REPLACE
                                                               "COSATT"
                                                               "cos(ATT)")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REWRITE
                                                                   "times_div1")
                                                                  (("2"
                                                                    (REWRITE
                                                                     "times_div2")
                                                                    (("2"
                                                                      (REWRITE
                                                                       "div_cancel1")
                                                                      (("2"
                                                                        (REWRITE
                                                                         "minus_div2"
                                                                         1 :DIR
                                                                         RL)
                                                                        (("2"
                                                                          (REWRITE
                                                                           "div_distributes"
                                                                           1
                                                                           :DIR
                                                                           RL)
                                                                          (("2"
                                                                            (REWRITE
                                                                             "distributive")
                                                                            (("2"
                                                                              (REWRITE
                                                                               "associative_mult"
                                                                               1
                                                                               :DIR
                                                                               RL)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "i_axiom")
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "associative_mult")
                                                                                    (("2"
                                                                                      (INST-CP
                                                                                       -
                                                                                       "ABS"
                                                                                       "i"
                                                                                       "i")
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -3)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -2
                                                                                           1
                                                                                           RL)
                                                                                          (("2"
                                                                                            (INST
                                                                                             -
                                                                                             "(ABS*(COSATT/2))"
                                                                                             "i"
                                                                                             "i")
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -3)
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 *
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT 1)
                                  (("2"
                                    (NAME-REPLACE "TH"
                                     "atan2(Re(z!1), Im(z!1))")
                                    (("2" (LEMMA "cos_2a_cos" ("a" "TH/2"))
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2"
                                (NAME-REPLACE "TH" "atan2(Re(z!1), Im(z!1))")
                                (("2" (LEMMA "cos_2a_sin" ("a" "TH/2"))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (NAME-REPLACE "TH" "atan2(Re(z!1), Im(z!1))")
                            (("2" (LEMMA "sin_2a" ("a" "TH/2"))
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_atan2| FORMULA-DECL NIL |atan2| |trig|)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|nnreal_lt_2pi| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|)
    (|complex_is_Re_Im| FORMULA-DECL NIL |arithmetic| NIL)
    (|sqrt_sq| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_times| FORMULA-DECL NIL |number_fields_sq| NIL)
    (|sq_rew| FORMULA-DECL NIL |number_fields_sq| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|sin_atan2| FORMULA-DECL NIL |atan2| |trig|)
    (|complex_is_ne_0_Re_Im| FORMULA-DECL NIL |arithmetic| NIL)
    (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Re| CONST-DECL "{x | EXISTS y: z = x + y * i}" |complex_types| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|complex_plus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|sin_2a| FORMULA-DECL NIL |trig_basic| |trig|)
    (|cos_2a_sin| FORMULA-DECL NIL |trig_basic| |trig|)
    (|polar| CONST-DECL "[nnreal, argrng]" |polar| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|times_div2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_div_nzcomplex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|div_distributes| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_minus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_div2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|div_cancel1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|times_div1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_2a_cos| FORMULA-DECL NIL |trig_basic| |trig|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|idempotent_polar| FORMULA-DECL NIL |polar| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|Im| CONST-DECL "{y | EXISTS x: z = x + y * i}" |complex_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|abs_nzcomplex| FORMULA-DECL NIL |polar| NIL)
    (|sq| CONST-DECL "numfield" |number_fields_sq| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|Im_is_real| APPLICATION-JUDGEMENT "real" |complex_types| NIL)
    (|conjugate| CONST-DECL "complex" |arithmetic| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|sqrt_times| 0
  (|sqrt_times-2| "" 3790100383
   ("" (SKOSIMP)
    (("" (CASE-REPLACE "x!1=0")
      (("1" (REWRITE "zero_times1")
        (("1" (REWRITE "sqrt_0")
          (("1" (REWRITE "zero_times1")
            (("1" (LIFT-IF) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (CASE-REPLACE "y!1=0")
        (("1" (REWRITE "zero_times2")
          (("1" (REWRITE "sqrt_0")
            (("1" (REWRITE "zero_times2")
              (("1" (REWRITE "zero_times2")
                (("1" (LIFT-IF) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "arg_mult" ("n0x" "x!1" "n0y" "y!1"))
          (("1" (ASSERT)
            (("1" (EXPAND "sqrt")
              (("1" (REWRITE "abs_mult")
                (("1" (REWRITE "sqrt_times")
                  (("1" (NAME-REPLACE "RX" "reals@sqrt(abs(x!1))")
                    (("1" (NAME-REPLACE "RY" "reals@sqrt(abs(y!1))")
                      (("1" (NAME-REPLACE "TX" "arg(x!1)")
                        (("1" (NAME-REPLACE "TY" "arg(y!1)")
                          (("1" (CASE-REPLACE "TX + TY > pi")
                            (("1" (ASSERT)
                              (("1" (REPLACE -2)
                                (("1" (ASSERT)
                                  (("1" (HIDE -2)
                                    (("1"
                                      (CASE-REPLACE
                                       "(TX - 2 * pi + TY) / 2 = TX/2+TY/2-pi")
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "from_polar")
                                          (("1" (REWRITE "sin_minus")
                                            (("1" (REWRITE "cos_minus")
                                              (("1" (REWRITE "cos_pi")
                                                (("1" (REWRITE "sin_pi")
                                                  (("1" (REWRITE "zero_times1")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (REWRITE "cos_plus")
                                                        (("1"
                                                          (REWRITE "sin_plus")
                                                          (("1"
                                                            (LEMMA
                                                             "number_fields_negative_times"
                                                             ("x" "1" "y"
                                                              "sin(TX / 2) * RX * i + RX * cos(TX / 2)"))
                                                            (("1"
                                                              (REWRITE
                                                               "identity_mult"
                                                               -1)
                                                              (("1"
                                                                (REPLACE -1 3
                                                                         RL)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (NAME-REPLACE
                                                                       "DRL1"
                                                                       "sin(TX / 2) * sin(TY / 2) * RX * RY")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "associative_mult"
                                                                         3 :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (REWRITE
                                                                           "i_axiom")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE-REPLACE "TX + TY <= -pi")
                              (("1" (ASSERT)
                                (("1" (REPLACE -2)
                                  (("1" (HIDE -2)
                                    (("1"
                                      (CASE-REPLACE
                                       "(TX + TY + 2 * pi) / 2 = TX/2+TY/2+pi")
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "from_polar")
                                          (("1" (REWRITE "sin_plus")
                                            (("1" (REWRITE "sin_plus")
                                              (("1" (REWRITE "cos_plus")
                                                (("1" (REWRITE "cos_plus")
                                                  (("1" (REWRITE "cos_pi")
                                                    (("1" (REWRITE "sin_pi")
                                                      (("1"
                                                        (REWRITE "zero_times2")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REWRITE
                                                             "cos_plus")
                                                            (("1"
                                                              (LEMMA
                                                               "number_fields_negative_times"
                                                               ("x" "1" "y"
                                                                "sin(TX / 2) * RX * i + RX * cos(TX / 2)"))
                                                              (("1"
                                                                (REWRITE
                                                                 "identity_mult"
                                                                 -1)
                                                                (("1"
                                                                  (REPLACE -1 4
                                                                           RL)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (NAME-REPLACE
                                                                       "DRL1"
                                                                       "sin(TX / 2) * sin(TY / 2) * RX * RY")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "associative_mult"
                                                                         4 :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (REWRITE
                                                                           "i_axiom")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (REPLACE -1)
                                  (("2" (HIDE -1)
                                    (("2" (REWRITE "div_distributes" 5 :DIR RL)
                                      (("2" (EXPAND "from_polar")
                                        (("2" (REWRITE "sin_plus")
                                          (("2" (REWRITE "cos_plus")
                                            (("2" (ASSERT)
                                              (("2"
                                                (NAME-REPLACE "DRL101"
                                                 "sin((TX / 2)) * sin((TY / 2)) * RX * RY")
                                                (("2"
                                                  (REWRITE "associative_mult" 5
                                                   :DIR RL)
                                                  (("2" (REWRITE "i_axiom")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sqrt_0| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|div_distributes| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|complex_plus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|complex_minus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL))
   SHOSTAK)
  (|sqrt_times-1| |nil| 3385198032
   ("" (SKOSIMP)
    (("" (CASE-REPLACE "x!1=0")
      (("1" (REWRITE "zero_times1")
        (("1" (REWRITE "sqrt_0")
          (("1" (REWRITE "zero_times1")
            (("1" (LIFT-IF) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (CASE-REPLACE "y!1=0")
        (("1" (REWRITE "zero_times2")
          (("1" (REWRITE "sqrt_0")
            (("1" (REWRITE "zero_times2")
              (("1" (REWRITE "zero_times2")
                (("1" (LIFT-IF) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "arg_mult" ("n0x" "x!1" "n0y" "y!1"))
          (("1" (ASSERT)
            (("1" (EXPAND "sqrt")
              (("1" (REWRITE "abs_mult")
                (("1" (REWRITE "sqrt_times")
                  (("1" (NAME-REPLACE "RX" "sqrt.sqrt(abs(x!1))")
                    (("1" (NAME-REPLACE "RY" "sqrt.sqrt(abs(y!1))")
                      (("1" (NAME-REPLACE "TX" "arg(x!1)")
                        (("1" (NAME-REPLACE "TY" "arg(y!1)")
                          (("1" (CASE-REPLACE "TX + TY > pi")
                            (("1" (ASSERT)
                              (("1" (REPLACE -2)
                                (("1" (ASSERT)
                                  (("1" (HIDE -2)
                                    (("1"
                                      (CASE-REPLACE
                                       "(TX - 2 * pi + TY) / 2 = TX/2+TY/2-pi")
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "from_polar")
                                          (("1" (REWRITE "sin_minus")
                                            (("1" (REWRITE "cos_minus")
                                              (("1" (REWRITE "cos_pi")
                                                (("1" (REWRITE "sin_pi")
                                                  (("1" (REWRITE "zero_times1")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (REWRITE "cos_plus")
                                                        (("1"
                                                          (REWRITE "sin_plus")
                                                          (("1"
                                                            (LEMMA
                                                             "number_fields_negative_times"
                                                             ("x" "1" "y"
                                                              "sin(TX / 2) * RX * i + RX * cos(TX / 2)"))
                                                            (("1"
                                                              (REWRITE
                                                               "identity_mult"
                                                               -1)
                                                              (("1"
                                                                (REPLACE -1 3
                                                                         RL)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (NAME-REPLACE
                                                                       "DRL1"
                                                                       "sin(TX / 2) * sin(TY / 2) * RX * RY")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "associative_mult"
                                                                         3 :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (REWRITE
                                                                           "i_axiom")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (CASE-REPLACE "TX + TY <= -pi")
                              (("1" (ASSERT)
                                (("1" (REPLACE -2)
                                  (("1" (HIDE -2)
                                    (("1"
                                      (CASE-REPLACE
                                       "(TX + TY + 2 * pi) / 2 = TX/2+TY/2+pi")
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "from_polar")
                                          (("1" (REWRITE "sin_plus")
                                            (("1" (REWRITE "sin_plus")
                                              (("1" (REWRITE "cos_plus")
                                                (("1" (REWRITE "cos_plus")
                                                  (("1" (REWRITE "cos_pi")
                                                    (("1" (REWRITE "sin_pi")
                                                      (("1"
                                                        (REWRITE "zero_times2")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REWRITE
                                                             "cos_plus")
                                                            (("1"
                                                              (LEMMA
                                                               "number_fields_negative_times"
                                                               ("x" "1" "y"
                                                                "sin(TX / 2) * RX * i + RX * cos(TX / 2)"))
                                                              (("1"
                                                                (REWRITE
                                                                 "identity_mult"
                                                                 -1)
                                                                (("1"
                                                                  (REPLACE -1 4
                                                                           RL)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (NAME-REPLACE
                                                                       "DRL1"
                                                                       "sin(TX / 2) * sin(TY / 2) * RX * RY")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "associative_mult"
                                                                         4 :DIR
                                                                         RL)
                                                                        (("1"
                                                                          (REWRITE
                                                                           "i_axiom")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (REPLACE -1)
                                  (("2" (HIDE -1)
                                    (("2" (ASSERT)
                                      (("2"
                                        (REWRITE "div_distributes" 5 :DIR RL)
                                        (("2" (EXPAND "from_polar")
                                          (("2" (REWRITE "sin_plus")
                                            (("2" (REWRITE "cos_plus")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (NAME-REPLACE "DRL101"
                                                   "sin((TX / 2)) * sin((TY / 2)) * RX * RY")
                                                  (("2"
                                                    (REWRITE "associative_mult"
                                                     5 :DIR RL)
                                                    (("2" (REWRITE "i_axiom")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|arg_mult| FORMULA-DECL NIL |polar| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|)
    (|div_distributes| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|complex_plus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|cos_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|complex_minus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|cos_plus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos_pi| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_minus| FORMULA-DECL NIL |sincos| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|abs_mult| FORMULA-DECL NIL |polar| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|sqrt_neg| 0
  (|sqrt_neg-2| "" 3790100384
   ("" (SKOSIMP)
    (("" (LEMMA "sqrt_times" ("x" "-1" "y" "z!1"))
      (("" (REWRITE "sqrt_neg1")
        (("" (REWRITE "number_fields_negative_times" -1)
          (("" (REWRITE "identity_mult" -1)
            (("" (EXPAND "arg" -1 1)
              (("" (EXPAND "arg" -1 2)
                (("" (REWRITE "Re_real")
                  (("" (REWRITE "Im_real")
                    (("" (ASSERT)
                      (("" (EXPAND "atan2")
                        (("" (REWRITE "atan_0")
                          (("" (ASSERT)
                            (("" (CASE-REPLACE "arg(z!1) <= 0")
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sqrt_times| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Re_real| FORMULA-DECL NIL |arithmetic| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|Im_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|minus_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (|sqrt_nz_is_nz| APPLICATION-JUDGEMENT "nzcomplex" |complex_sqrt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|sqrt_neg1| FORMULA-DECL NIL |complex_sqrt| NIL))
   SHOSTAK)
  (|sqrt_neg-1| |nil| 3385196467
   ("" (SKOSIMP)
    (("" (LEMMA "sqrt_times" ("x" "-1" "y" "z!1"))
      (("1" (REWRITE "sqrt_neg1")
        (("1" (REWRITE "number_fields_negative_times" -1)
          (("1" (REWRITE "identity_mult" -1)
            (("1" (EXPAND "arg" -1 1)
              (("1" (EXPAND "arg" -1 2)
                (("1" (REWRITE "Re_real")
                  (("1" (REWRITE "Im_real")
                    (("1" (ASSERT)
                      (("1" (EXPAND "atan2")
                        (("1" (REWRITE "atan_0")
                          (("1" (ASSERT)
                            (("1" (ASSERT)
                              (("1" (CASE-REPLACE "arg(z!1) <= 0")
                                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (REWRITE "real_is_complex") NIL NIL))
      NIL))
    NIL)
   ((|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|Re_real| FORMULA-DECL NIL |arithmetic| NIL)
    (NIL APPLICATION-JUDGEMENT "nnreal_lt_2pi" |atan2| |trig|)
    (|atan_0| FORMULA-DECL NIL |atan| |trig|)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|atan2| CONST-DECL "real" |atan2| |trig|)
    (|Im_real| FORMULA-DECL NIL |arithmetic| NIL)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|minus_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|))
   SHOSTAK))
 (|sqrt_inv| 0
  (|sqrt_inv-3| "" 3884587553
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (REWRITE "abs_inv")
        (("" (LEMMA "sqrt_div" ("nny" "1" "nnz" "abs(n0z!1)"))
          (("" (LEMMA "abs_nzcomplex" ("n0z" "n0z!1"))
            (("" (ASSERT)
              (("" (REPLACE -2)
                (("" (LEMMA "sqrt_pos" ("px" "abs(n0z!1)"))
                  (("" (NAME-REPLACE "R" "sqrt.sqrt(abs(n0z!1))")
                    (("" (HIDE -2 -3)
                      (("" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                        (("" (EXPAND "from_polar")
                          (("" (REPLACE -1 1)
                            (("" (HIDE -1)
                              (("" (CASE-REPLACE "arg(n0z!1) = 0")
                                (("1" (REWRITE "sin_0")
                                  (("1" (REWRITE "cos_0")
                                    (("1" (REWRITE "zero_times1")
                                      (("1" (REWRITE "zero_times1")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE-REPLACE "arg(n0z!1) = pi")
                                  (("1" (ASSERT)
                                    (("1" (REWRITE "sin_pi2")
                                      (("1" (REWRITE "cos_pi2")
                                        (("1" (REWRITE "identity_mult")
                                          (("1" (REWRITE "identity_mult")
                                            (("1" (REWRITE "zero_times2")
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "div_cancel4" 2)
                                                  (("1"
                                                    (REWRITE "associative_mult"
                                                     2 :DIR RL)
                                                    (("1"
                                                      (REWRITE
                                                       "associative_mult" 2
                                                       :DIR RL)
                                                      (("1"
                                                        (REWRITE
                                                         "associative_mult" 2
                                                         :DIR RL)
                                                        (("1"
                                                          (REWRITE "i_axiom")
                                                          (("1"
                                                            (REWRITE
                                                             "associative_mult")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (LEMMA "sin_neg" ("a" "arg(n0z!1) / 2"))
                                      (("2" (REPLACE -1)
                                        (("2"
                                          (LEMMA "cos_neg"
                                           ("a" "arg(n0z!1) / 2"))
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1 -2)
                                              (("2"
                                                (NAME-REPLACE "TH"
                                                 "arg(n0z!1) / 2")
                                                (("2" (REWRITE "div_cancel4" 3)
                                                  (("2"
                                                    (LEMMA
                                                     "number_fields_negative_times"
                                                     ("x" "1" "y" "sin(TH)"))
                                                    (("2"
                                                      (REWRITE "identity_mult")
                                                      (("2" (REPLACE -1 * RL)
                                                        (("2" (HIDE -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REWRITE
                                                               "sq.sq_rew")
                                                              (("2"
                                                                (REWRITE
                                                                 "sq.sq_rew")
                                                                (("2"
                                                                  (REWRITE
                                                                   "associative_mult"
                                                                   3 :DIR RL)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "i_axiom")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "sin2_cos2"
                                                                         ("a"
                                                                          "TH"))
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sqrt_inv-2| "" 3790100386
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (REWRITE "abs_inv")
        (("" (LEMMA "sqrt_div" ("nny" "1" "nnz" "abs(n0z!1)"))
          (("" (LEMMA "abs_nzcomplex" ("n0z" "n0z!1"))
            (("" (ASSERT)
              (("" (REPLACE -2)
                (("" (LEMMA "sqrt_pos" ("px" "abs(n0z!1)"))
                  (("" (NAME-REPLACE "R" "sqrt.sqrt(abs(n0z!1))")
                    (("" (HIDE -2 -3)
                      (("" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                        (("" (EXPAND "from_polar")
                          (("" (REPLACE -1 1)
                            (("" (HIDE -1)
                              (("" (CASE-REPLACE "arg(n0z!1) = 0")
                                (("1" (REWRITE "sin_0")
                                  (("1" (REWRITE "cos_0")
                                    (("1" (REWRITE "zero_times1")
                                      (("1" (REWRITE "zero_times1")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE-REPLACE "arg(n0z!1) = pi")
                                  (("1" (ASSERT)
                                    (("1" (REWRITE "sin_pi2")
                                      (("1" (REWRITE "cos_pi2")
                                        (("1" (REWRITE "identity_mult")
                                          (("1" (REWRITE "identity_mult")
                                            (("1" (REWRITE "zero_times2")
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "div_cancel4" 2)
                                                  (("1"
                                                    (REWRITE "associative_mult"
                                                     2 :DIR RL)
                                                    (("1"
                                                      (REWRITE
                                                       "associative_mult" 2
                                                       :DIR RL)
                                                      (("1"
                                                        (REWRITE
                                                         "associative_mult" 2
                                                         :DIR RL)
                                                        (("1"
                                                          (REWRITE "i_axiom")
                                                          (("1"
                                                            (REWRITE
                                                             "associative_mult")
                                                            NIL NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (LEMMA "sin_neg" ("a" "arg(n0z!1) / 2"))
                                      (("2" (REPLACE -1)
                                        (("2"
                                          (LEMMA "cos_neg"
                                           ("a" "arg(n0z!1) / 2"))
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1 -2)
                                              (("2"
                                                (NAME-REPLACE "TH"
                                                 "arg(n0z!1) / 2")
                                                (("2" (REWRITE "div_cancel4" 3)
                                                  (("2"
                                                    (LEMMA
                                                     "number_fields_negative_times"
                                                     ("x" "1" "y" "sin(TH)"))
                                                    (("2"
                                                      (REWRITE "identity_mult")
                                                      (("2" (REPLACE -1 * RL)
                                                        (("2" (HIDE -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REWRITE
                                                               "sq.sq_rew")
                                                              (("2"
                                                                (REWRITE
                                                                 "sq.sq_rew")
                                                                (("2"
                                                                  (REWRITE
                                                                   "associative_mult"
                                                                   3 :DIR RL)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "i_axiom")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "sin2_cos2"
                                                                         ("a"
                                                                          "TH"))
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|abs| CONST-DECL "nnreal" |polar| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|nzcomplex_div_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|div_cancel4| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sin_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin2_cos2| FORMULA-DECL NIL |sincos_def| |trig|)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|complex_plus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|abs_nzcomplex| FORMULA-DECL NIL |polar| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|abs_inv| FORMULA-DECL NIL |polar| NIL))
   SHOSTAK)
  (|sqrt_inv-1| |nil| 3385200646
   ("" (SKOSIMP)
    (("" (EXPAND "sqrt")
      (("" (REWRITE "abs_inv")
        (("" (LEMMA "sqrt_div" ("nny" "1" "nnz" "abs(n0z!1)"))
          (("" (LEMMA "abs_nzcomplex" ("n0z" "n0z!1"))
            (("" (ASSERT)
              (("" (REPLACE -2)
                (("" (LEMMA "sqrt_pos" ("px" "abs(n0z!1)"))
                  (("" (NAME-REPLACE "R" "sqrt.sqrt(abs(n0z!1))")
                    (("" (HIDE -2 -3)
                      (("" (LEMMA "arg_inv" ("n0z" "n0z!1"))
                        (("" (EXPAND "from_polar")
                          (("" (REPLACE -1 1)
                            (("" (HIDE -1)
                              (("" (CASE-REPLACE "arg(n0z!1) = 0")
                                (("1" (REWRITE "sin_0")
                                  (("1" (REWRITE "cos_0")
                                    (("1" (REWRITE "zero_times1")
                                      (("1" (REWRITE "zero_times1")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (CASE-REPLACE "arg(n0z!1) = pi")
                                  (("1" (ASSERT)
                                    (("1" (REWRITE "sin_pi2")
                                      (("1" (REWRITE "cos_pi2")
                                        (("1" (REWRITE "identity_mult")
                                          (("1" (REWRITE "identity_mult")
                                            (("1" (REWRITE "zero_times2")
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "div_cancel4" 2)
                                                  (("1"
                                                    (REWRITE "associative_mult"
                                                     2 :DIR RL)
                                                    (("1"
                                                      (REWRITE
                                                       "associative_mult" 2
                                                       :DIR RL)
                                                      (("1"
                                                        (REWRITE
                                                         "associative_mult" 2
                                                         :DIR RL)
                                                        (("1"
                                                          (REWRITE "i_axiom")
                                                          (("1"
                                                            (REWRITE
                                                             "associative_mult")
                                                            (("1"
                                                              (REWRITE
                                                               "div_cancel2")
                                                              (("1" (POSTPONE)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2"
                                      (LEMMA "sin_neg" ("a" "arg(n0z!1) / 2"))
                                      (("2" (REPLACE -1)
                                        (("2"
                                          (LEMMA "cos_neg"
                                           ("a" "arg(n0z!1) / 2"))
                                          (("2" (REPLACE -1)
                                            (("2" (HIDE -1 -2)
                                              (("2"
                                                (NAME-REPLACE "TH"
                                                 "arg(n0z!1) / 2")
                                                (("2" (REWRITE "div_cancel4" 3)
                                                  (("2"
                                                    (LEMMA
                                                     "number_fields_negative_times"
                                                     ("x" "1" "y" "sin(TH)"))
                                                    (("2"
                                                      (REWRITE "identity_mult")
                                                      (("2" (REPLACE -1 * RL)
                                                        (("2" (HIDE -1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REWRITE
                                                               "sq.sq_rew")
                                                              (("2"
                                                                (REWRITE
                                                                 "sq.sq_rew")
                                                                (("2"
                                                                  (REWRITE
                                                                   "associative_mult"
                                                                   3 :DIR RL)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "i_axiom")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "sin2_cos2"
                                                                         ("a"
                                                                          "TH"))
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs| CONST-DECL "nnreal" |polar| NIL)
    (|sqrt_div| FORMULA-DECL NIL |sqrt| |reals|)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|nzcomplex_div_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_pos| JUDGEMENT-TCC NIL |sqrt| |reals|)
    (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)
    (|from_polar| CONST-DECL "complex" |polar| NIL)
    (|sin_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|div_cancel4| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|cos_pi2| FORMULA-DECL NIL |sincos| |trig|)
    (|sin_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos_neg| FORMULA-DECL NIL |sincos_def| |trig|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|sq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sin2_cos2| FORMULA-DECL NIL |sincos_def| |trig|)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|complex_plus_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|abs_nzcomplex| FORMULA-DECL NIL |polar| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|abs_inv| FORMULA-DECL NIL |polar| NIL))
   SHOSTAK))
 (|sqrt_div| 0
  (|sqrt_div-3| "" 3884616975
   ("" (SKOSIMP)
    (("" (REWRITE "div_def" 1)
      (("" (REWRITE "sqrt_times")
        (("" (REWRITE "sqrt_inv")
          (("" (REWRITE "arg_inv")
            (("" (CASE-REPLACE "arg(n0y!1)=pi")
              (("1" (ASSERT)
                (("1" (CASE-REPLACE "arg(x!1)>0")
                  (("1" (ASSERT)
                    (("1" (REWRITE "times_div1" 1)
                      (("1" (REWRITE "neg_times_neg")
                        (("1" (REWRITE "number_fields_left_identity_mult") NIL
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (REWRITE "times_div1" 2)
                      (("2" (ASSERT)
                        (("2" (REWRITE "commutative_mult" 2)
                          (("2" (REWRITE "number_fields_negative_times" 2)
                            (("2" (REWRITE "identity_mult") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (CASE-REPLACE "arg(n0y!1)=0")
                  (("1" (ASSERT) (("1" (REWRITE "div_def" 2 :DIR RL) NIL NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (CASE-REPLACE "arg(x!1) - arg(n0y!1) <= -pi")
                      (("1" (ASSERT) (("1" (REWRITE "times_div1" 3) NIL NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (REWRITE "minus_add" 4 :DIR RL)
                          (("2" (LIFT-IF 4)
                            (("2" (REWRITE "times_div1" 4)
                              (("2" (REWRITE "times_div1" 4)
                                (("2" (PROP) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sqrt_div-2| "" 3790100387
   ("" (SKOSIMP)
    (("" (REWRITE "div_def" 1)
      (("" (REWRITE "sqrt_times")
        (("" (REWRITE "sqrt_inv")
          (("" (REWRITE "arg_inv")
            (("" (CASE-REPLACE "arg(n0y!1)=pi")
              (("1" (ASSERT)
                (("1" (CASE-REPLACE "arg(x!1)>0")
                  (("1" (ASSERT)
                    (("1" (REWRITE "times_div1" 1)
                      (("1" (REWRITE "neg_times_neg") NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (REWRITE "times_div1" 2)
                      (("2" (ASSERT)
                        (("2" (REWRITE "commutative_mult" 2)
                          (("2" (REWRITE "number_fields_negative_times" 2)
                            (("2" (REWRITE "identity_mult") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (CASE-REPLACE "arg(n0y!1)=0")
                  (("1" (ASSERT) (("1" (REWRITE "div_def" 2 :DIR RL) NIL NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (CASE-REPLACE "arg(x!1) - arg(n0y!1) <= -pi")
                      (("1" (ASSERT) (("1" (REWRITE "times_div1" 3) NIL NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (REWRITE "minus_add" 4 :DIR RL)
                          (("2" (LIFT-IF 4)
                            (("2" (REWRITE "times_div1" 4)
                              (("2" (REWRITE "times_div1" 4)
                                (("2" (PROP) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|nzcomplex_div_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|sqrt_inv| FORMULA-DECL NIL |complex_sqrt| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (> CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sqrt| CONST-DECL "complex" |complex_sqrt| NIL)
    (|times_div1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|number_fields_left_identity_mult| FORMULA-DECL NIL |number_fields_bis|
     NIL)
    (|neg_times_neg| FORMULA-DECL NIL |number_fields_bis| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_div_nzcomplex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_nz_is_nz| APPLICATION-JUDGEMENT "nzcomplex" |complex_sqrt| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sqrt_times| FORMULA-DECL NIL |complex_sqrt| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL))
   SHOSTAK)
  (|sqrt_div-1| |nil| 3385202953
   ("" (SKOSIMP)
    (("" (REWRITE "div_def" 1)
      (("" (REWRITE "sqrt_times")
        (("1" (REWRITE "sqrt_inv")
          (("1" (REWRITE "arg_inv")
            (("1" (CASE-REPLACE "arg(n0y!1)=pi")
              (("1" (ASSERT)
                (("1" (CASE-REPLACE "arg(x!1)>0")
                  (("1" (ASSERT)
                    (("1" (REWRITE "times_div1" 1)
                      (("1" (REWRITE "neg_times_neg") NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (REWRITE "times_div1" 2)
                      (("2" (ASSERT)
                        (("2" (REWRITE "commutative_mult" 2)
                          (("2" (REWRITE "number_fields_negative_times" 2)
                            (("2" (REWRITE "identity_mult") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (CASE-REPLACE "arg(n0y!1)=0")
                  (("1" (ASSERT) (("1" (REWRITE "div_def" 2 :DIR RL) NIL NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (CASE-REPLACE "arg(x!1) - arg(n0y!1) <= -pi")
                      (("1" (ASSERT) (("1" (REWRITE "times_div1" 3) NIL NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (ASSERT)
                          (("2" (REWRITE "minus_add" 4 :DIR RL)
                            (("2" (ASSERT)
                              (("2" (LIFT-IF 4)
                                (("2" (REWRITE "times_div1" 4)
                                  (("2" (REWRITE "times_div1" 4)
                                    (("2" (PROP) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "real_is_complex" ("x" "1"))
          (("2" (REWRITE "closed_divides") NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|pi_bound| NAME-JUDGEMENT
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|nzcomplex_div_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|arg| CONST-DECL "argrng" |polar| NIL)
    (|argrng| NONEMPTY-TYPE-EQ-DECL NIL |polar| NIL)
    (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def|
     |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|times_div1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|neg_times_neg| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|complex_div_nzcomplex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|arg_inv| FORMULA-DECL NIL |polar| NIL))
   SHOSTAK)))

