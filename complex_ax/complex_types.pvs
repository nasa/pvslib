%------------------------------------------------------------------------------
% Basic Definitions of Complex Number Types.
%
%     Author: David Lester, Manchester University & NIA
%
%
% The complex numbers are defined (axiomatically) in this way so that we can
% conveniently use the numeric constants 0, 1, 2 etc.
%
% The alternative -- using pairs of reals to represent the real and imaginary
% components -- would lead to the somewhat unappealing formulation of Euler's
% result as "exp((0,1)*(pi,0)) = (-1,0)". As a matter of taste, I prefer the
% somewhat more elegant formulation: "exp(i*pi) = -1".
%
% When theory interpretations can handle this, we'll be able to prove that the
% two formulations are equivalent, and hence use the beautiful version, and
% consigning the undignified version to the background!
%
% If we get really lucky, the number_fields_bis ("bis" from the Italian for
% extra) can be consigned to the dustbin of history, and it's functions
% incorporated into the general PVS decision procedures. In the mean time...
%
%
%     Version 1.0            5/29/04   Initial version (DRL)
%------------------------------------------------------------------------------

complex_types: THEORY

  BEGIN

  IMPORTING number_fields_bis

  complex: TYPE+ FROM number_field

  i : complex

  nf:                VAR numfield
  z,z1,z2:           VAR complex
  x,x0,x1,y,y0,y1,r: VAR real

  i_axiom:                  AXIOM i*i = -1
  complex_characterization: AXIOM complex_pred(nf) IFF EXISTS x,y: nf = x+y*i

  real_complex: LEMMA complex_pred(x)
  i_not_real:   LEMMA r /= i

  unique_characterization: LEMMA x0+y0*i = x1+y1*i IFF x0 = x1 AND y0 = y1

  real_is_complex: JUDGEMENT real SUBTYPE_OF complex

  Re(z): {x | EXISTS y: z = x + y*i}
  Im(z): {y | EXISTS x: z = x + y*i}

  Re_def            : LEMMA (EXISTS y: z = x+y*i) IFF Re(z) = x
  Im_def            : LEMMA (EXISTS x: z = x+y*i) IFF Im(z) = y
  Re_is_real        : JUDGEMENT Re(z) HAS_TYPE real
  Im_is_real        : JUDGEMENT Im(z) HAS_TYPE real

  nonzero_complex   : TYPE+ = {z: complex | z /= 0} CONTAINING 1
  nzcomplex         : TYPE+ = nonzero_complex
  nzcomplex_is_nznum: JUDGEMENT nonzero_complex SUBTYPE_OF nonzero_number

  nzx, nzy, n0z:  VAR nzcomplex

  closed_plus       : LEMMA complex_pred(z1 + z2)
  closed_neg        : LEMMA complex_pred(-z)
  closed_minus      : LEMMA complex_pred(z1 - z2)
  closed_times      : LEMMA complex_pred(z1 * z2)
  closed_divides    : LEMMA complex_pred(z / n0z)

  complex_plus_complex_is_complex       : JUDGEMENT +(z1,z2) HAS_TYPE complex
  complex_minus_complex_is_complex      : JUDGEMENT -(z1,z2) HAS_TYPE complex
  complex_times_complex_is_complex      : JUDGEMENT *(z1,z2) HAS_TYPE complex
  complex_div_nzcomplex_is_complex      : JUDGEMENT /(z,n0z) HAS_TYPE complex
  minus_complex_is_complex              : JUDGEMENT -(z)     HAS_TYPE complex

  nzcomplex_times_nzcomplex_is_nzcomplex:
                                        JUDGEMENT *(nzx,nzy) HAS_TYPE nzcomplex
  nzcomplex_div_nzcomplex_is_nzcomplex: JUDGEMENT /(nzx,nzy) HAS_TYPE nzcomplex
  minus_nzcomplex_is_nzcomplex:         JUDGEMENT -(nzx)     HAS_TYPE nzcomplex

  END complex_types
