(|complex_types|
 (|real_complex| 0
  (|real_complex-1| |nil| 3280216396
   ("" (SKOSIMP*)
    (("" (TYPEPRED "x!1")
      (("" (LEMMA "complex_characterization" ("nf" "x!1"))
        (("" (REPLACE -1 1)
          (("" (INST + "x!1" "0")
            (("" (REWRITE "zero_times1") (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|i_not_real| 0
  (|i_not_real-1| |nil| 3280216458
   ("" (SKOSIMP)
    (("" (CASE "FORALL (x:real): x*x >= 0")
      (("1" (INST - "r!1")
        (("1" (LEMMA "i_axiom")
          (("1" (REPLACE -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (HIDE -1)
        (("2" (SKOSIMP)
          (("2" (LEMMA "trichotomy" ("x" "x!1"))
            (("2" (SPLIT)
              (("1"
                (LEMMA "posreal_times_posreal_is_posreal"
                 ("px" "x!1" "py" "x!1"))
                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)
               ("2" (ASSERT) NIL NIL)
               ("3"
                (LEMMA "negreal_times_negreal_is_posreal"
                 ("nx" "x!1" "ny" "x!1"))
                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL))
   SHOSTAK))
 (|unique_characterization| 0
  (|unique_characterization-1| |nil| 3280217956
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1"
          (LEMMA "both_sides_minus1"
           ("x" "x0!1 + y0!1 * i" "y" "x1!1 + y1!1 * i" "z" "x1!1+y0!1*i"))
          (("1" (REPLACE -1 -2 RL)
            (("1" (HIDE -1)
              (("1"
                (CASE-REPLACE
                 "x0!1 + y0!1 * i - (x1!1 + y0!1 * i) = x0!1-x1!1")
                (("1"
                  (CASE-REPLACE
                   "x1!1 + y1!1 * i - (x1!1 + y0!1 * i) = (y1!1-y0!1)*i")
                  (("1" (HIDE -1 -2)
                    (("1" (CASE "FORALL (x, y: nzreal): x /= y * i")
                      (("1" (CASE-REPLACE "y0!1 =y1!1")
                        (("1" (REWRITE "zero_times1" -3)
                          (("1" (ASSERT) NIL NIL)) NIL)
                         ("2"
                          (LEMMA "div_cancel3"
                           ("x" "x0!1-x1!1" "y" "i" "n0z" "y1!1-y0!1"))
                          (("1" (REWRITE "commutative_mult" -3)
                            (("1"
                              (LEMMA "i_not_real"
                               ("r" "(x0!1 - x1!1) / (y1!1 - y0!1)"))
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (SKOSIMP*)
                          (("2"
                            (LEMMA "div_cancel3"
                             ("x" "x!1" "y" "i" "n0z" "y!1"))
                            (("2" (REWRITE "commutative_mult" -2)
                              (("2" (REPLACE -2 -1 RL)
                                (("2" (LEMMA "i_not_real" ("r" "x!1/y!1"))
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (GRIND)
                      (("2" (REWRITE "commutative_mult")
                        (("2" (ASSERT)
                          (("2" (REWRITE "commutative_mult") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|i| CONST-DECL "complex" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|both_sides_minus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|div_cancel3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|i_not_real| FORMULA-DECL NIL |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|real_is_complex| 0
  (|real_is_complex-1| |nil| 3280044189
   ("" (SKOSIMP*)
    (("" (LEMMA "real_complex" ("x" "x!1")) (("" (PROPAX) NIL NIL)) NIL)) NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_complex| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK (|real_is_complex| SUBTYPE "complex_types.x" "complex")))
 (|Re_TCC1| 0
  (|Re_TCC1-1| |nil| 3280223572
   ("" (INST + "lambda z: choose({x | EXISTS (y:real): z = x + y*i})")
    (("" (EXPAND "nonempty?")
      (("" (EXPAND "empty?")
        (("" (EXPAND "member")
          (("" (SKOSIMP*)
            (("" (TYPEPRED "z!1")
              (("" (LEMMA "complex_characterization" ("nf" "z!1"))
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST - "x!1") (("" (INST + "y!1") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL))
   SHOSTAK
   (|Re| EXISTENCE ""
    "[z: complex -> {x | EXISTS y: z = (number_fields.+)(complex_types.x, number_fields.*(complex_types.y, complex_types.i))}]")))
 (|Im_TCC1| 0
  (|Im_TCC1-1| |nil| 3280223572
   ("" (INST + "lambda z: choose({y | EXISTS (x:real): z = x + y*i})")
    (("" (EXPAND "nonempty?")
      (("" (EXPAND "empty?")
        (("" (EXPAND "member")
          (("" (SKOSIMP*)
            (("" (TYPEPRED "z!1")
              (("" (LEMMA "complex_characterization" ("nf" "z!1"))
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST - "y!1") (("" (INST + "x!1") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL))
   SHOSTAK
   (|Im| EXISTENCE ""
    "[z: complex -> {y | EXISTS x: z = (number_fields.+)(complex_types.x, number_fields.*(complex_types.y, complex_types.i))}]")))
 (|Re_def| 0
  (|Re_def-1| |nil| 3280223923
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (SKOSIMP*)
        (("1" (TYPEPRED "Re(z!1)")
          (("1" (SKOSIMP*)
            (("1"
              (LEMMA "unique_characterization"
               ("x1" "Re(z!1)" "x0" "x!1" "y1" "y!2" "y0" "y!1"))
              (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (TYPEPRED "Re(z!1)")
          (("2" (SKOSIMP*)
            (("2" (INST + "y!1")
              (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Re| CONST-DECL "{x | EXISTS y: z = x + y * i}" |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|unique_characterization| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|Im_def| 0
  (|Im_def-1| |nil| 3280293826
   ("" (SKOSIMP*)
    (("" (TYPEPRED "Im(z!1)")
      (("" (SKOSIMP*)
        (("" (SPLIT 1)
          (("1" (SKOSIMP*)
            (("1"
              (LEMMA "unique_characterization"
               ("x0" "x!1" "x1" "x!2" "y0" "Im(z!1)" "y1" "y!1"))
              (("1" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (FLATTEN)
            (("2" (REPLACE -1) (("2" (INST + "x!1") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Im| CONST-DECL "{y | EXISTS x: z = x + y * i}" |complex_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|unique_characterization| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|closed_plus| 0
  (|closed_plus-1| |nil| 3280156141
   ("" (SKOSIMP*)
    (("" (TYPEPRED "z1!1")
      (("" (TYPEPRED "z2!1")
        (("" (REWRITE "complex_characterization")
          (("" (REWRITE "complex_characterization")
            (("" (REWRITE "complex_characterization")
              (("" (SKOSIMP*)
                (("" (INST + "x!1+x!2" "y!1+y!2")
                  (("" (GRIND)
                    (("" (REWRITE "commutative_mult" 1)
                      (("" (ASSERT)
                        (("" (REWRITE "commutative_mult" 1) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|closed_neg| 0
  (|closed_neg-2| "" 3884621023
   ("" (SKOSIMP*)
    (("" (TYPEPRED "z!1")
      (("" (REWRITE "complex_characterization")
        (("" (REWRITE "complex_characterization")
          (("" (SKOSIMP*)
            (("" (HIDE -1)
              (("" (REPLACE -1 1)
                (("" (INST + "-x!1" "-y!1")
                  (("" (CASE-REPLACE "-(x!1 + y!1 * i) = -x!1 + -(y!1*i)")
                    (("1" (ASSERT)
                      (("1" (HIDE-ALL-BUT 1)
                        (("1"
                          (LEMMA "both_sides_plus2"
                           ("z" "y!1*i" "x" "-(y!1 * i)" "y" "-y!1 * i"))
                          (("1" (REPLACE -1 1 RL)
                            (("1" (HIDE -1)
                              (("1" (REWRITE "inverse_add" 1)
                                (("1"
                                  (LEMMA "distributive"
                                   ("x" "i" "y" "y!1" "z" "-y!1"))
                                  (("1" (REWRITE "inverse_add" -1)
                                    (("1" (REWRITE "zero_times2" -1)
                                      (("1" (REWRITE "commutative_mult" 1)
                                        (("1" (REPLACE -1 1)
                                          (("1" (HIDE -1)
                                            (("1" (ASSERT)
                                              (("1"
                                                (REWRITE "commutative_mult" 1)
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2"
                        (LEMMA "both_sides_plus2"
                         ("z" "x!1 + y!1 * i" "x" "-(x!1 + y!1 * i)" "y"
                          "-x!1 + -(y!1 * i)"))
                        (("2" (REPLACE -1 1 RL)
                          (("2" (HIDE -1)
                            (("2" (REWRITE "inverse_add" 1)
                              (("2" (LEMMA "inverse_add" ("x" "x!1"))
                                (("2" (LEMMA "inverse_add" ("x" "y!1*i"))
                                  (("2" (ASSERT)
                                    (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK)
  (|closed_neg-1| |nil| 3280217166
   ("" (SKOSIMP*)
    (("" (TYPEPRED "z!1")
      (("" (REWRITE "complex_characterization")
        (("" (REWRITE "complex_characterization")
          (("" (SKOSIMP*)
            (("" (REPLACE -2 1)
              (("" (INST + "-x!1" "-y!1")
                (("" (CASE-REPLACE "-(x!1 + y!1 * i) = -x!1 + -(y!1*i)")
                  (("1" (ASSERT)
                    (("1" (HIDE-ALL-BUT 1)
                      (("1"
                        (LEMMA "both_sides_plus2"
                         ("z" "y!1*i" "x" "-(y!1 * i)" "y" "-y!1 * i"))
                        (("1" (REPLACE -1 1 RL)
                          (("1" (HIDE -1)
                            (("1" (REWRITE "inverse_add" 1)
                              (("1"
                                (LEMMA "distributive"
                                 ("x" "i" "y" "y!1" "z" "-y!1"))
                                (("1" (REWRITE "inverse_add" -1)
                                  (("1" (REWRITE "zero_times2" -1)
                                    (("1" (REWRITE "commutative_mult" 1)
                                      (("1" (REPLACE -1 1)
                                        (("1" (HIDE -1)
                                          (("1" (ASSERT)
                                            (("1"
                                              (REWRITE "commutative_mult" 1)
                                              NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2"
                      (LEMMA "both_sides_plus2"
                       ("z" "x!1 + y!1 * i" "x" "-(x!1 + y!1 * i)" "y"
                        "-x!1 + -(y!1 * i)"))
                      (("2" (REPLACE -1 1 RL)
                        (("2" (HIDE -1)
                          (("2" (REWRITE "inverse_add" 1)
                            (("2" (LEMMA "inverse_add" ("x" "x!1"))
                              (("2" (LEMMA "inverse_add" ("x" "y!1*i"))
                                (("2" (ASSERT)
                                  (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|closed_minus| 0
  (|closed_minus-1| |nil| 3280155561
   ("" (SKOSIMP*)
    (("" (REWRITE "minus_add")
      (("" (LEMMA "closed_neg" ("z" "z2!1"))
        (("" (LEMMA "closed_plus" ("z1" "-z2!1" "z2" "z1!1"))
          (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|closed_plus| FORMULA-DECL NIL |complex_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|closed_neg| FORMULA-DECL NIL |complex_types| NIL))
   SHOSTAK))
 (|closed_times| 0
  (|closed_times-3| "" 3884621201
   ("" (SKOSIMP*)
    (("" (TYPEPRED "z1!1")
      (("" (HIDE -1)
        (("" (TYPEPRED "z2!1")
          (("" (HIDE -1)
            (("" (REWRITE "complex_characterization")
              (("" (REWRITE "complex_characterization")
                (("" (REWRITE "complex_characterization")
                  (("" (SKOSIMP*)
                    (("" (INST + "x!1*x!2-y!1*y!2" "x!2*y!1+x!1*y!2")
                      (("" (REPLACE -1)
                        (("" (REWRITE "distributive" 1)
                          (("" (REPLACE -2)
                            (("" (HIDE-ALL-BUT 1)
                              (("" (LEMMA "commutative_mult")
                                (("" (INST-CP - "x!2 + y!2 * i" "y!1 * i")
                                  (("" (REWRITE "distributive" -2)
                                    (("" (REPLACE -2)
                                      (("" (HIDE -2)
                                        (("" (INST-CP - "x!2 + y!2 * i" "x!1")
                                          (("" (REWRITE "distributive" -2)
                                            (("" (REPLACE -2)
                                              (("" (HIDE -2)
                                                ((""
                                                  (INST-CP -
                                                   "x!2 * y!1 + x!1 * y!2" "i")
                                                  ((""
                                                    (REWRITE "distributive" -2)
                                                    (("" (REPLACE -2)
                                                      (("" (HIDE -2)
                                                        (("" (ASSERT)
                                                          ((""
                                                            (LEMMA "i_axiom")
                                                            (("" (REPLACE -1)
                                                              ((""
                                                                (INST -
                                                                 "x!1*y!2" "i")
                                                                ((""
                                                                  (LEMMA
                                                                   "associative_mult")
                                                                  ((""
                                                                    (INST-CP -
                                                                     "x!1"
                                                                     "y!2" "i")
                                                                    ((""
                                                                      (REPLACE
                                                                       -2)
                                                                      ((""
                                                                        (REPLACE
                                                                         -4)
                                                                        ((""
                                                                          (HIDE
                                                                           -2
                                                                           -4
                                                                           -3)
                                                                          ((""
                                                                            (ASSERT)
                                                                            ((""
                                                                              (INST
                                                                               -
                                                                               "i"
                                                                               "x!2"
                                                                               "y!1")
                                                                              ((""
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK)
  (|closed_times-2| "" 3790100292
   ("" (SKOSIMP*)
    (("" (TYPEPRED "z1!1")
      (("" (TYPEPRED "z2!1")
        (("" (REWRITE "complex_characterization")
          (("" (REWRITE "complex_characterization")
            (("" (REWRITE "complex_characterization")
              (("" (SKOSIMP*)
                (("" (INST + "x!1*x!2-y!1*y!2" "x!2*y!1+x!1*y!2")
                  (("" (REPLACE -2)
                    (("" (REWRITE "distributive" 1)
                      (("" (REPLACE -4)
                        (("" (HIDE-ALL-BUT 1)
                          (("" (LEMMA "commutative_mult")
                            (("" (INST-CP - "x!2 + y!2 * i" "y!1 * i")
                              (("" (REWRITE "distributive" -2)
                                (("" (REPLACE -2)
                                  (("" (HIDE -2)
                                    (("" (INST-CP - "x!2 + y!2 * i" "x!1")
                                      (("" (REWRITE "distributive" -2)
                                        (("" (REPLACE -2)
                                          (("" (HIDE -2)
                                            ((""
                                              (INST-CP -
                                               "x!2 * y!1 + x!1 * y!2" "i")
                                              (("" (REWRITE "distributive" -2)
                                                (("" (REPLACE -2)
                                                  (("" (HIDE -2)
                                                    (("" (ASSERT)
                                                      (("" (LEMMA "i_axiom")
                                                        (("" (REPLACE -1)
                                                          ((""
                                                            (INST - "x!1*y!2"
                                                             "i")
                                                            ((""
                                                              (LEMMA
                                                               "associative_mult")
                                                              ((""
                                                                (INST-CP -
                                                                 "x!1" "y!2"
                                                                 "i")
                                                                ((""
                                                                  (REPLACE -2)
                                                                  ((""
                                                                    (REPLACE
                                                                     -4)
                                                                    ((""
                                                                      (HIDE -2
                                                                       -4 -3)
                                                                      ((""
                                                                        (ASSERT)
                                                                        ((""
                                                                          (INST
                                                                           -
                                                                           "i"
                                                                           "x!2"
                                                                           "y!1")
                                                                          ((""
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|closed_times-1| |nil| 3280219956
   ("" (SKOSIMP*)
    (("" (TYPEPRED "z1!1")
      (("" (TYPEPRED "z2!1")
        (("" (REWRITE "complex_characterization")
          (("" (REWRITE "complex_characterization")
            (("" (REWRITE "complex_characterization")
              (("" (SKOSIMP*)
                (("" (INST + "x!1*x!2-y!1*y!2" "x!2*y!1+x!1*y!2")
                  (("" (REPLACE -2)
                    (("" (REWRITE "distributive" 1)
                      (("" (REPLACE -4)
                        (("" (HIDE-ALL-BUT 1)
                          (("" (LEMMA "commutative_mult")
                            (("" (INST-CP - "x!2 + y!2 * i" "y!1 * i")
                              (("" (REWRITE "distributive" -2)
                                (("" (REPLACE -2)
                                  (("" (HIDE -2)
                                    (("" (INST-CP - "x!2 + y!2 * i" "x!1")
                                      (("" (REWRITE "distributive" -2)
                                        (("" (REPLACE -2)
                                          (("" (HIDE -2)
                                            ((""
                                              (INST-CP -
                                               "x!2 * y!1 + x!1 * y!2" "i")
                                              (("" (REWRITE "distributive" -2)
                                                (("" (REPLACE -2)
                                                  (("" (HIDE -2)
                                                    (("" (ASSERT)
                                                      (("" (LEMMA "i_axiom")
                                                        (("" (EXPAND "sq")
                                                          (("" (REPLACE -1)
                                                            ((""
                                                              (INST - "x!1*y!2"
                                                               "i")
                                                              ((""
                                                                (LEMMA
                                                                 "associative_mult")
                                                                ((""
                                                                  (INST-CP -
                                                                   "x!1" "y!2"
                                                                   "i")
                                                                  ((""
                                                                    (REPLACE
                                                                     -2)
                                                                    ((""
                                                                      (REPLACE
                                                                       -4)
                                                                      ((""
                                                                        (HIDE
                                                                         -2 -4
                                                                         -3)
                                                                        ((""
                                                                          (ASSERT)
                                                                          ((""
                                                                            (INST
                                                                             -
                                                                             "i"
                                                                             "x!2"
                                                                             "y!1")
                                                                            ((""
                                                                              (ASSERT)
                                                                              ((""
                                                                                (REPLACE
                                                                                 -1
                                                                                 1)
                                                                                ((""
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|closed_divides| 0
  (|closed_divides-3| "" 3884621581
   ("" (SKOSIMP)
    (("" (CASE "complex_pred(1/n0z!1)")
      (("1" (REWRITE "div_def" 1)
        (("1" (LEMMA "closed_times" ("z1" "z!1" "z2" "1/n0z!1"))
          (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (TYPEPRED "n0z!1")
          (("2" (HIDE -1)
            (("2" (REWRITE "complex_characterization")
              (("2" (REWRITE "complex_characterization")
                (("2" (SKOSIMP)
                  (("2" (CASE "FORALL (x:real): x*x >= 0")
                    (("1" (CASE "FORALL (nzx:nzreal): nzx*nzx > 0")
                      (("1" (NAME "D" "x!1*x!1+y!1*y!1")
                        (("1" (CASE "D>0")
                          (("1" (INST + "x!1/D" "-y!1/D")
                            (("1"
                              (LEMMA "div_distributes"
                               ("x" "x!1" "y" "-y!1*i" "n0z" "D"))
                              (("1" (REWRITE "times_div2" 2)
                                (("1" (REPLACE -1 2)
                                  (("1" (REWRITE "cross_mult" 2)
                                    (("1" (REPLACE -6 2)
                                      (("1" (EXPAND "D" 2)
                                        (("1" (LEMMA "i_axiom")
                                          (("1" (ASSERT)
                                            (("1" (HIDE-ALL-BUT (-1 2))
                                              (("1"
                                                (REWRITE "associative_mult"
                                                 :DIR RL)
                                                (("1" (REPLACE -1)
                                                  (("1" (HIDE -1)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (LEMMA
                                                         "commutative_mult")
                                                        (("1"
                                                          (INST-CP - "-y!1"
                                                           "i")
                                                          (("1" (REPLACE -2)
                                                            (("1"
                                                              (LEMMA
                                                               "distributive"
                                                               ("x" "i" "y"
                                                                "-y!1*x!1" "z"
                                                                "x!1*y!1"))
                                                              (("1"
                                                                (REWRITE
                                                                 "associative_mult"
                                                                 1 :DIR RL)
                                                                (("1"
                                                                  (REWRITE
                                                                   "associative_mult"
                                                                   1 :DIR RL)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             1
                                                                             :DIR
                                                                             RL)
                                                                    (("1"
                                                                      (HIDE -1
                                                                       -3)
                                                                      (("1"
                                                                        (INST-CP
                                                                         -
                                                                         "-y!1"
                                                                         "x!1")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -2)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "distributive"
                                                                             ("x"
                                                                              "x!1"
                                                                              "y"
                                                                              "-y!1"
                                                                              "z"
                                                                              "y!1"))
                                                                            (("1"
                                                                              (REPLACE
                                                                               -1
                                                                               1
                                                                               RL)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "inverse_add"
                                                                                 ("x"
                                                                                  "y!1"))
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "commutative_add"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "zero_times2")
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "minus_add"
                                                                                         1)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (CASE-REPLACE "x!1=0")
                            (("1" (CASE-REPLACE "y!1=0")
                              (("1" (REWRITE "zero_times1" -6) NIL NIL)
                               ("2" (INST -3 "y!1")
                                (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (INST -2 "x!1")
                              (("1" (INST -3 "y!1") (("1" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (SKOSIMP)
                          (("2" (LEMMA "trichotomy" ("x" "nzx!1"))
                            (("2" (SPLIT)
                              (("1"
                                (LEMMA "posreal_times_posreal_is_posreal"
                                 ("px" "nzx!1" "py" "nzx!1"))
                                (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL)
                               ("3"
                                (LEMMA "negreal_times_negreal_is_posreal"
                                 ("nx" "nzx!1" "ny" "nzx!1"))
                                (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (SKOSIMP)
                        (("2" (LEMMA "trichotomy" ("x" "x!2"))
                          (("2" (SPLIT)
                            (("1"
                              (LEMMA "posreal_times_posreal_is_posreal"
                               ("px" "x!2" "py" "x!2"))
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL)
                             ("3"
                              (LEMMA "negreal_times_negreal_is_posreal"
                               ("nx" "x!2" "ny" "x!2"))
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|closed_times| FORMULA-DECL NIL |complex_types| NIL)
    (|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|complex_characterization| FORMULA-DECL NIL |complex_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal"
     |real_types| NIL)
    (|i| CONST-DECL "complex" |complex_types| NIL)
    (|div_distributes| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|i_axiom| FORMULA-DECL NIL |complex_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cross_mult| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|times_div2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (D SKOLEM-CONST-DECL "real" |complex_types| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|x!1| SKOLEM-CONST-DECL "real" |complex_types| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|y!1| SKOLEM-CONST-DECL "real" |complex_types| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK)
  (|closed_divides-2| "" 3790100293
   ("" (SKOSIMP)
    (("" (CASE "complex_pred(1/n0z!1)")
      (("1" (REWRITE "div_def" 1)
        (("1" (LEMMA "closed_times" ("z1" "z!1" "z2" "1/n0z!1"))
          (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (TYPEPRED "n0z!1")
          (("2" (REWRITE "complex_characterization")
            (("2" (REWRITE "complex_characterization")
              (("2" (SKOSIMP)
                (("2" (CASE "FORALL (x:real): x*x >= 0")
                  (("1" (CASE "FORALL (nzx:nzreal): nzx*nzx > 0")
                    (("1" (NAME "D" "x!1*x!1+y!1*y!1")
                      (("1" (CASE "D>0")
                        (("1" (INST + "x!1/D" "-y!1/D")
                          (("1"
                            (LEMMA "div_distributes"
                             ("x" "x!1" "y" "-y!1*i" "n0z" "D"))
                            (("1" (REWRITE "times_div2" 2)
                              (("1" (REPLACE -1 2)
                                (("1" (REWRITE "cross_mult" 2)
                                  (("1" (REPLACE -7 2)
                                    (("1" (EXPAND "D" 2)
                                      (("1" (LEMMA "i_axiom")
                                        (("1" (ASSERT)
                                          (("1" (HIDE-ALL-BUT (-1 2))
                                            (("1"
                                              (REWRITE "associative_mult" :DIR
                                               RL)
                                              (("1" (REPLACE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "commutative_mult")
                                                      (("1"
                                                        (INST-CP - "-y!1" "i")
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (LEMMA
                                                             "distributive"
                                                             ("x" "i" "y"
                                                              "-y!1*x!1" "z"
                                                              "x!1*y!1"))
                                                            (("1"
                                                              (REWRITE
                                                               "associative_mult"
                                                               1 :DIR RL)
                                                              (("1"
                                                                (REWRITE
                                                                 "associative_mult"
                                                                 1 :DIR RL)
                                                                (("1"
                                                                  (REPLACE -1 1
                                                                           :DIR
                                                                           RL)
                                                                  (("1"
                                                                    (HIDE -1
                                                                     -3)
                                                                    (("1"
                                                                      (INST-CP
                                                                       - "-y!1"
                                                                       "x!1")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "distributive"
                                                                           ("x"
                                                                            "x!1"
                                                                            "y"
                                                                            "-y!1"
                                                                            "z"
                                                                            "y!1"))
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             1
                                                                             RL)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "inverse_add"
                                                                               ("x"
                                                                                "y!1"))
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "commutative_add"
                                                                                 -1)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "zero_times2")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "minus_add"
                                                                                       1)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (CASE-REPLACE "x!1=0")
                          (("1" (CASE-REPLACE "y!1=0")
                            (("1" (REWRITE "zero_times1" -7) NIL NIL)
                             ("2" (INST -3 "y!1")
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (INST -2 "x!1")
                            (("1" (INST -3 "y!1") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (SKOSIMP)
                        (("2" (LEMMA "trichotomy" ("x" "nzx!1"))
                          (("2" (SPLIT)
                            (("1"
                              (LEMMA "posreal_times_posreal_is_posreal"
                               ("px" "nzx!1" "py" "nzx!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL)
                             ("3"
                              (LEMMA "negreal_times_negreal_is_posreal"
                               ("nx" "nzx!1" "ny" "nzx!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKOSIMP)
                      (("2" (LEMMA "trichotomy" ("x" "x!2"))
                        (("2" (SPLIT)
                          (("1"
                            (LEMMA "posreal_times_posreal_is_posreal"
                             ("px" "x!2" "py" "x!2"))
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL)
                           ("3"
                            (LEMMA "negreal_times_negreal_is_posreal"
                             ("nx" "x!2" "ny" "x!2"))
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|closed_divides-1| |nil| 3280157418
   ("" (SKOSIMP)
    (("" (CASE "complex_pred(1/n0z!1)")
      (("1" (REWRITE "div_def" 1)
        (("1" (LEMMA "closed_times" ("z1" "z!1" "z2" "1/n0z!1"))
          (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (TYPEPRED "n0z!1")
          (("2" (REWRITE "complex_characterization")
            (("2" (REWRITE "complex_characterization")
              (("2" (SKOSIMP)
                (("2" (CASE "FORALL (x:real): x*x >= 0")
                  (("1" (CASE "FORALL (nzx:nzreal): nzx*nzx > 0")
                    (("1" (NAME "D" "x!1*x!1+y!1*y!1")
                      (("1" (CASE "D>0")
                        (("1" (INST + "x!1/D" "-y!1/D")
                          (("1"
                            (LEMMA "div_distributes"
                             ("x" "x!1" "y" "-y!1*i" "n0z" "D"))
                            (("1" (REWRITE "times_div2" 2)
                              (("1" (REPLACE -1 2)
                                (("1" (REWRITE "cross_mult" 2)
                                  (("1" (REPLACE -7 2)
                                    (("1" (EXPAND "D" 2)
                                      (("1" (LEMMA "i_axiom")
                                        (("1" (ASSERT)
                                          (("1" (HIDE-ALL-BUT (-1 2))
                                            (("1"
                                              (REWRITE "associative_mult" :DIR
                                               RL)
                                              (("1" (REPLACE -1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "commutative_mult")
                                                      (("1"
                                                        (INST-CP - "-y!1" "i")
                                                        (("1" (REPLACE -2)
                                                          (("1"
                                                            (LEMMA
                                                             "distributive"
                                                             ("x" "i" "y"
                                                              "-y!1*x!1" "z"
                                                              "x!1*y!1"))
                                                            (("1"
                                                              (REWRITE
                                                               "associative_mult"
                                                               1 :DIR RL)
                                                              (("1"
                                                                (REWRITE
                                                                 "associative_mult"
                                                                 1 :DIR RL)
                                                                (("1"
                                                                  (REPLACE -1 1
                                                                           :DIR
                                                                           RL)
                                                                  (("1"
                                                                    (HIDE -1
                                                                     -3)
                                                                    (("1"
                                                                      (INST-CP
                                                                       - "-y!1"
                                                                       "x!1")
                                                                      (("1"
                                                                        (REPLACE
                                                                         -2)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "distributive"
                                                                           ("x"
                                                                            "x!1"
                                                                            "y"
                                                                            "-y!1"
                                                                            "z"
                                                                            "y!1"))
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             1
                                                                             RL)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "inverse_add"
                                                                               ("x"
                                                                                "y!1"))
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "commutative_add"
                                                                                 -1)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "zero_times2")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "minus_add"
                                                                                       1)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (CASE-REPLACE "x!1=0")
                          (("1" (CASE-REPLACE "y!1=0")
                            (("1" (REWRITE "zero_times1" -7) NIL NIL)
                             ("2" (INST -3 "y!1")
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (INST -2 "x!1")
                            (("1" (INST -3 "y!1") (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (SKOSIMP)
                        (("2" (LEMMA "trichotomy" ("x" "nzx!1"))
                          (("2" (SPLIT)
                            (("1"
                              (LEMMA "posreal_times_posreal_is_posreal"
                               ("px" "nzx!1" "py" "nzx!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL)
                             ("3"
                              (LEMMA "negreal_times_negreal_is_posreal"
                               ("nx" "nzx!1" "ny" "nzx!1"))
                              (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKOSIMP)
                      (("2" (LEMMA "trichotomy" ("x" "x!2"))
                        (("2" (SPLIT)
                          (("1"
                            (LEMMA "posreal_times_posreal_is_posreal"
                             ("px" "x!2" "py" "x!2"))
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL)
                           ("3"
                            (LEMMA "negreal_times_negreal_is_posreal"
                             ("nx" "x!2" "ny" "x!2"))
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|complex_plus_complex_is_complex| 0
  (|complex_plus_complex_is_complex-1| |nil| 3280294602
   ("" (LEMMA "closed_plus") (("" (PROPAX) NIL NIL)) NIL)
   ((|closed_plus| FORMULA-DECL NIL |complex_types| NIL)) SHOSTAK
   (|complex_plus_complex_is_complex| SUBTYPE
    "(number_fields.+)(complex_types.z1, complex_types.z2)" "complex")))
 (|complex_minus_complex_is_complex| 0
  (|complex_minus_complex_is_complex-1| |nil| 3280294602
   ("" (LEMMA "closed_minus") (("" (PROPAX) NIL NIL)) NIL)
   ((|closed_minus| FORMULA-DECL NIL |complex_types| NIL)) SHOSTAK
   (|complex_minus_complex_is_complex| SUBTYPE
    "(number_fields.-)(complex_types.z1, complex_types.z2)" "complex")))
 (|complex_times_complex_is_complex| 0
  (|complex_times_complex_is_complex-1| |nil| 3280294603
   ("" (LEMMA "closed_times") (("" (PROPAX) NIL NIL)) NIL)
   ((|closed_times| FORMULA-DECL NIL |complex_types| NIL)) SHOSTAK
   (|complex_times_complex_is_complex| SUBTYPE
    "number_fields.*(complex_types.z1, complex_types.z2)" "complex")))
 (|complex_div_nzcomplex_is_complex| 0
  (|complex_div_nzcomplex_is_complex-1| |nil| 3280294603
   ("" (LEMMA "closed_divides") (("" (PROPAX) NIL NIL)) NIL)
   ((|closed_divides| FORMULA-DECL NIL |complex_types| NIL)) SHOSTAK
   (|complex_div_nzcomplex_is_complex| SUBTYPE
    "number_fields./(complex_types.z, complex_types.n0z)" "complex")))
 (|minus_complex_is_complex| 0
  (|minus_complex_is_complex-1| |nil| 3280294603
   ("" (LEMMA "closed_neg") (("" (PROPAX) NIL NIL)) NIL)
   ((|closed_neg| FORMULA-DECL NIL |complex_types| NIL)) SHOSTAK
   (|minus_complex_is_complex| SUBTYPE "(number_fields.-)(complex_types.z)"
    "complex")))
 (|nzcomplex_times_nzcomplex_is_nzcomplex| 0
  (|nzcomplex_times_nzcomplex_is_nzcomplex-1| |nil| 3280294968
   ("" (SKOSIMP*)
    (("" (TYPEPRED "nzx!1")
      (("" (TYPEPRED "nzy!1")
        (("" (LEMMA "zero_times3" ("x" "nzx!1" "y" "nzy!1"))
          (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|complex_times_complex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL))
   SHOSTAK
   (|nzcomplex_times_nzcomplex_is_nzcomplex| SUBTYPE
    "number_fields.*(complex_types.nzx, complex_types.nzy)" "nzcomplex")))
 (|nzcomplex_div_nzcomplex_is_nzcomplex| 0
  (|nzcomplex_div_nzcomplex_is_nzcomplex-1| |nil| 3280294968
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def")
      (("" (LEMMA "inv_ne_0" ("n0x" "nzy!1"))
        ((""
          (LEMMA "nzcomplex_times_nzcomplex_is_nzcomplex"
           ("nzx" "nzx!1" "nzy" "1/nzy!1"))
          (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|complex_div_nzcomplex_is_complex| APPLICATION-JUDGEMENT "complex"
     |complex_types| NIL)
    (|nzcomplex_times_nzcomplex_is_nzcomplex| APPLICATION-JUDGEMENT "nzcomplex"
     |complex_types| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nzcomplex_times_nzcomplex_is_nzcomplex| JUDGEMENT-TCC NIL |complex_types|
     NIL)
    (|inv_ne_0| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK
   (|nzcomplex_div_nzcomplex_is_nzcomplex| SUBTYPE
    "number_fields./(complex_types.nzx, complex_types.nzy)" "nzcomplex")))
 (|minus_nzcomplex_is_nzcomplex| 0
  (|minus_nzcomplex_is_nzcomplex-1| |nil| 3280294968 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|complex_pred| CONST-DECL "[number_field -> boolean]" |complex_types| NIL)
    (|complex| NONEMPTY-TYPE-FROM-DECL NIL |complex_types| NIL)
    (|nzcomplex| NONEMPTY-TYPE-EQ-DECL NIL |complex_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|minus_complex_is_complex| APPLICATION-JUDGEMENT "complex" |complex_types|
     NIL)
    (|minus_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum" |number_fields_bis|
     NIL))
   SHOSTAK
   (|minus_nzcomplex_is_nzcomplex| SUBTYPE
    "(number_fields.-)(complex_types.nzx)" "nzcomplex"))))

