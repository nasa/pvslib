(|number_fields_bis|
 (|number_fields_left_identity_add| 0
  (|number_fields_left_identity_add-1| |nil| 3294676177 ("" (GRIND) NIL NIL)
   NIL SHOSTAK))
 (|number_fields_right_identity_add| 0
  (|number_fields_right_identity_add-1| |nil| 3294676190 ("" (GRIND) NIL NIL)
   NIL SHOSTAK))
 (|number_fields_left_identity_mult| 0
  (|number_fields_left_identity_mult-1| |nil| 3294676195
   ("" (SKOSIMP) (("" (REWRITE "identity_mult") NIL NIL)) NIL)
   ((|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|number_fields_right_identity_mult| 0
  (|number_fields_right_identity_mult-1| |nil| 3294676212
   ("" (SKOSIMP)
    (("" (LEMMA "commutative_mult" ("x" "x!1" "y" "1"))
      (("" (REWRITE "identity_mult") NIL NIL)) NIL))
    NIL)
   ((|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|number_fields_negate_is_left_inverse| 0
  (|number_fields_negate_is_left_inverse-1| |nil| 3294676243
   ("" (SKOSIMP)
    (("" (LEMMA "commutative_add" ("x" "-x!1" "y" "x!1"))
      (("" (REWRITE "inverse_add") NIL NIL)) NIL))
    NIL)
   ((|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|number_fields_negate_is_right_inverse| 0
  (|number_fields_negate_is_right_inverse-1| |nil| 3294676289
   ("" (SKOSIMP) (("" (REWRITE "inverse_add") NIL NIL)) NIL)
   ((|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|both_sides_plus1| 0
  (|both_sides_plus1-1| |nil| 3280126152 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|both_sides_plus2| 0
  (|both_sides_plus2-1| |nil| 3280126162 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|both_sides_minus1| 0
  (|both_sides_minus1-1| |nil| 3280126168 ("" (GRIND) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|both_sides_minus2| 0
  (|both_sides_minus2-1| |nil| 3280126174
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (REWRITE "minus_add")
          (("1" (REWRITE "minus_add")
            (("1" (LEMMA "both_sides_plus1" ("x" "-x!1" "y" "-y!1" "z" "z!1"))
              (("1" (ASSERT)
                (("1" (HIDE -1)
                  (("1" (LEMMA "inverse_add" ("x" "x!1"))
                    (("1"
                      (LEMMA "both_sides_plus2"
                       ("x" "-x!1" "y" "-y!1" "z" "x!1"))
                      (("1" (REPLACE -2 -1)
                        (("1" (GRIND)
                          (("1"
                            (LEMMA "both_sides_plus2"
                             ("z" "y!1" "x" "0" "y" "-y!1+x!1"))
                            (("1" (REWRITE "identity_add" -1)
                              (("1"
                                (LEMMA "associative_add"
                                 ("x" "y!1" "y" "-y!1" "z" "x!1"))
                                (("1" (REWRITE "inverse_add" -1)
                                  (("1" (REWRITE "identity_add" -1)
                                    (("1" (REPLACE -1 -2)
                                      (("1" (HIDE -1 -4)
                                        (("1"
                                          (LEMMA "commutative_add"
                                           ("x" "0" "y" "x!1"))
                                          (("1"
                                            (LEMMA "identity_add" ("x" "x!1"))
                                            (("1" (REPLACE -1)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|both_sides_plus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|identity_add| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|associative_add| FORMULA-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|number_fields_negate_negate| 0
  (|number_fields_negate_negate-1| |nil| 3294676300
   ("" (SKOSIMP)
    (("" (LEMMA "both_sides_plus1" ("z" "-x!1" "x" "-(-x!1)" "y" "x!1"))
      (("" (REWRITE "inverse_add" -1)
        (("" (LEMMA "commutative_add" ("x" "-(-x!1)" "y" "-x!1"))
          (("" (REWRITE "inverse_add" -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|both_sides_plus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|zero_times1| 0
  (|zero_times1-2| "" 3744317886
   ("" (SKEEP) (("" (REWRITE "commutative_mult") NIL NIL)) NIL)
   ((|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL))
   SHOSTAK)
  (|zero_times1-1| |nil| 3280124273
   ("" (SKOSIMP*)
    (("" (LEMMA "inverse_add" ("x" "x!1"))
      (("" (LEMMA "distributive" ("x" "0" "y" "x!1" "z" "-x!1"))
        (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|zero_times2| 0
  (|zero_times2-1| |nil| 3280124509
   ("" (SKOSIMP*)
    (("" (REWRITE "commutative_mult") (("" (REWRITE "zero_times1") NIL NIL))
      NIL))
    NIL)
   ((|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|nznum_times_nznum_is_nznum| 0
  (|nznum_times_nznum_is_nznum-2| "" 3884622449
   ("" (SKOSIMP*)
    (("" (TYPEPRED "nzx!1")
      (("" (HIDE -1)
        (("" (TYPEPRED "nzy!1")
          (("" (HIDE -1)
            (("" (CASE "FORALL (x:nznum, y:numfield): x*y = 0 => y = 0")
              (("1" (INST - "nzx!1" "nzy!1") (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKOSIMP*)
                  (("2" (TYPEPRED "x!1")
                    (("2" (HIDE -1)
                      (("2" (LEMMA "inverse_mult" ("n0x" "x!1"))
                        (("2"
                          (CASE "FORALL (x,y,z:numfield): x=y => x*z = y*z")
                          (("1" (INST - "x!1 * (1 / x!1)" "1" "y!1")
                            (("1" (SPLIT -1)
                              (("1" (REWRITE "identity_mult" -1)
                                (("1" (HIDE -2)
                                  (("1" (LEMMA "associative_mult")
                                    (("1" (INST-CP - "x!1" "1/x!1" "y!1")
                                      (("1"
                                        (LEMMA "commutative_mult"
                                         ("x" "1/x!1" "y" "y!1"))
                                        (("1" (REPLACE -1 -3)
                                          (("1" (INST - "x!1" "y!1" "1/x!1")
                                            (("1" (REPLACE -4)
                                              (("1" (REPLACE -3 -2)
                                                (("1" (REPLACE -6 -2)
                                                  (("1"
                                                    (REWRITE "zero_times1" -2)
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|inverse_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK
   (|nznum_times_nznum_is_nznum| SUBTYPE
    "number_fields.*(number_fields_bis.nzx, number_fields_bis.nzy)" "nznum"))
  (|nznum_times_nznum_is_nznum-1| |nil| 3280139881
   ("" (SKOSIMP*)
    (("" (TYPEPRED "nzx!1")
      (("" (TYPEPRED "nzy!1")
        (("" (HIDE -1 -3)
          (("" (CASE "FORALL (x:nznum, y:numfield): x*y = 0 => y = 0")
            (("1" (INST - "nzx!1" "nzy!1") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (HIDE-ALL-BUT 1)
              (("2" (SKOSIMP*)
                (("2" (TYPEPRED "x!1")
                  (("2" (HIDE -1)
                    (("2" (LEMMA "inverse_mult" ("n0x" "x!1"))
                      (("2" (CASE "FORALL (x,y,z:numfield): x=y => x*z = y*z")
                        (("1" (INST - "x!1 * (1 / x!1)" "1" "y!1")
                          (("1" (SPLIT -1)
                            (("1" (REWRITE "identity_mult" -1)
                              (("1" (HIDE -2)
                                (("1" (LEMMA "associative_mult")
                                  (("1" (INST-CP - "x!1" "1/x!1" "y!1")
                                    (("1"
                                      (LEMMA "commutative_mult"
                                       ("x" "1/x!1" "y" "y!1"))
                                      (("1" (REPLACE -1 -3)
                                        (("1" (INST - "x!1" "y!1" "1/x!1")
                                          (("1" (REPLACE -4)
                                            (("1" (REPLACE -3 -2)
                                              (("1" (REPLACE -6 -2)
                                                (("1"
                                                  (REWRITE "zero_times1" -2)
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|nznum_times_nznum_is_nznum| SUBTYPE
    "number_fields.*(number_fields_bis.nzx, number_fields_bis.nzy)" "nznum")))
 (|minus_nznum_is_nznum| 0
  (|minus_nznum_is_nznum-2| "" 3884622497
   ("" (SKOSIMP*)
    (("" (TYPEPRED "nzx!1")
      (("" (HIDE -1)
        (("" (LEMMA "inverse_add" ("x" "nzx!1"))
          (("" (REPLACE -3)
            (("" (REWRITE "identity_add" -1)
              (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|identity_add| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK
   (|minus_nznum_is_nznum| SUBTYPE "(number_fields.-)(number_fields_bis.nzx)"
    "nznum"))
  (|minus_nznum_is_nznum-1| |nil| 3280140087
   ("" (SKOSIMP*)
    (("" (TYPEPRED "nzx!1")
      (("" (LEMMA "inverse_add" ("x" "nzx!1"))
        (("" (REPLACE -4)
          (("" (REWRITE "identity_add" -1)
            (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|minus_nznum_is_nznum| SUBTYPE "(number_fields.-)(number_fields_bis.nzx)"
    "nznum")))
 (|zero_times3| 0
  (|zero_times3-1| |nil| 3280133331
   ("" (SKOSIMP*)
    (("" (CASE-REPLACE "x!1=0")
      (("1" (REWRITE "zero_times1") (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (CASE-REPLACE "y!1=0")
        (("1" (REWRITE "zero_times2") (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (ASSERT)
          (("2" (LEMMA "nznum_times_nznum_is_nznum" ("nzx" "x!1" "nzy" "y!1"))
            (("2" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum_times_nznum_is_nznum| JUDGEMENT-TCC NIL |number_fields_bis| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|neg_times_neg| 0
  (|neg_times_neg-1| |nil| 3280141326
   ("" (SKOSIMP*)
    (("" (LEMMA "inverse_add" ("x" "y!1"))
      (("" (LEMMA "distributive" ("x" "x!1" "y" "y!1" "z" "-y!1"))
        (("" (REPLACE -2 -1)
          (("" (REWRITE "zero_times2" -1)
            ((""
              (LEMMA "both_sides_minus1"
               ("x" "0" "y" "(x!1 * y!1) + (x!1 * -y!1)" "z" "x!1 * -y!1"))
              (("" (ASSERT)
                (("" (LEMMA "associative_mult" ("x" "-1" "y" "x!1" "z" "-y!1"))
                  (("" (CASE-REPLACE "-1*x!1=-x!1")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (GRIND)
                        (("2"
                          (LEMMA "both_sides_plus2"
                           ("z" "x!1" "x" "-1*x!1" "y" "-x!1"))
                          (("2" (REWRITE "inverse_add" -1)
                            (("2" (LEMMA "inverse_add" ("x" "1"))
                              (("2" (LEMMA "zero_times1" ("x" "x!1"))
                                (("2"
                                  (LEMMA "distributive"
                                   ("x" "x!1" "y" "1" "z" "-1"))
                                  (("2" (LEMMA "commutative_mult")
                                    (("2" (INST-CP - "x!1" "1+ -1")
                                      (("2" (REPLACE -2 -3)
                                        (("2" (REPLACE -5)
                                          (("2" (REPLACE -4)
                                            (("2" (INST-CP - "x!1" "1")
                                              (("2"
                                                (REWRITE "identity_mult" -2)
                                                (("2" (REPLACE -2)
                                                  (("2" (INST - "x!1" "-1")
                                                    (("2" (REPLACE -1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|both_sides_minus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|zero_is_neg_zero| 0
  (|zero_is_neg_zero-2| "" 3790100296 ("" (PROPAX) NIL NIL) NIL SHOSTAK)
  (|zero_is_neg_zero-1| |nil| 3280127050 ("" (GRIND) NIL NIL) NIL SHOSTAK))
 (|both_sides_times1| 0
  (|both_sides_times1-2| "" 3884623009
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1"
          (LEMMA "both_sides_minus1"
           ("x" "x!1*n0z!1" "y" "y!1*n0z!1" "z" "y!1 * n0z!1"))
          (("1" (LEMMA "inverse_add" ("x" "y!1 * n0z!1"))
            (("1" (LEMMA "minus_add" ("x" "y!1 * n0z!1" "y" "y!1 * n0z!1"))
              (("1" (REPLACE -1 -2 RL)
                (("1" (REPLACE -2 -3)
                  (("1" (HIDE -1 -2)
                    (("1" (ASSERT)
                      (("1" (HIDE -2)
                        (("1"
                          (CASE-REPLACE
                           "x!1 * n0z!1 - y!1 * n0z!1 = n0z!1*(x!1-y!1)")
                          (("1"
                            (LEMMA "zero_times3" ("x" "n0z!1" "y" "x!1-y!1"))
                            (("1" (REPLACE -3 -1)
                              (("1" (HIDE -2 -3)
                                (("1" (FLATTEN -1)
                                  (("1" (TYPEPRED "n0z!1")
                                    (("1" (HIDE -1)
                                      (("1" (SPLIT -2)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (HIDE -2)
                                          (("2"
                                            (LEMMA "both_sides_plus1"
                                             ("x" "x!1-y!1" "y" "0" "z" "y!1"))
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 2)
                            (("2" (REWRITE "minus_add")
                              (("2" (REWRITE "minus_add")
                                (("2" (REWRITE "distributive" 1)
                                  (("2"
                                    (LEMMA "commutative_mult"
                                     ("x" "x!1" "y" "n0z!1"))
                                    (("2" (REPLACE -1)
                                      (("2" (ASSERT)
                                        (("2" (HIDE -1)
                                          (("2"
                                            (LEMMA "inverse_add" ("x" "y!1"))
                                            (("2"
                                              (LEMMA "distributive"
                                               ("x" "n0z!1" "y" "y!1" "z"
                                                "-y!1"))
                                              (("2" (REPLACE -2)
                                                (("2"
                                                  (REWRITE "zero_times2" -1)
                                                  (("2"
                                                    (REWRITE "commutative_mult"
                                                     -1)
                                                    (("2"
                                                      (LEMMA "both_sides_plus2"
                                                       ("z" "-(y!1 * n0z!1)"
                                                        "x" "0" "y"
                                                        "y!1 * n0z!1 + (n0z!1 * -y!1)"))
                                                      (("2"
                                                        (LEMMA "identity_add"
                                                         ("x" "-(y!1*n0z!1)"))
                                                        (("2" (REPLACE -1)
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "inverse_add"
                                                               ("x"
                                                                "y!1*n0z!1"))
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "-(y!1 * n0z!1) + (y!1 * n0z!1 + (n0z!1 * -y!1)) = (n0z!1 * -y!1)")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE 2 -2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "associative_add"
                                                                     ("x"
                                                                      "-(y!1 * n0z!1)"
                                                                      "y"
                                                                      "y!1 * n0z!1"
                                                                      "z"
                                                                      "n0z!1 * -y!1"))
                                                                    (("2"
                                                                      (LEMMA
                                                                       "commutative_add"
                                                                       ("x"
                                                                        "y!1 * n0z!1"
                                                                        "y"
                                                                        "-(y!1 * n0z!1)"))
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1 -2
                                                                         :DIR
                                                                         RL)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -3
                                                                             1)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "commutative_add"
                                                                               1)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|both_sides_minus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|both_sides_plus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|commutative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|associative_add| FORMULA-DECL NIL |number_fields| NIL)
    (|identity_add| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK)
  (|both_sides_times1-1| |nil| 3280127668
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1"
          (LEMMA "both_sides_minus1"
           ("x" "x!1*n0z!1" "y" "y!1*n0z!1" "z" "y!1 * n0z!1"))
          (("1" (LEMMA "inverse_add" ("x" "y!1 * n0z!1"))
            (("1" (LEMMA "minus_add" ("x" "y!1 * n0z!1" "y" "y!1 * n0z!1"))
              (("1" (REPLACE -1 -2 RL)
                (("1" (REPLACE -2 -3)
                  (("1" (HIDE -1 -2)
                    (("1" (ASSERT)
                      (("1" (HIDE -2)
                        (("1"
                          (CASE-REPLACE
                           "x!1 * n0z!1 - y!1 * n0z!1 = n0z!1*(x!1-y!1)")
                          (("1"
                            (LEMMA "zero_times3" ("x" "n0z!1" "y" "x!1-y!1"))
                            (("1" (REPLACE -3 -1)
                              (("1" (HIDE -2 -3)
                                (("1" (FLATTEN -1)
                                  (("1" (TYPEPRED "n0z!1")
                                    (("1" (SPLIT -3)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE -2 -3)
                                        (("2"
                                          (LEMMA "both_sides_plus1"
                                           ("x" "x!1-y!1" "y" "0" "z" "y!1"))
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE -1 2)
                            (("2" (REWRITE "minus_add")
                              (("2" (REWRITE "minus_add")
                                (("2" (REWRITE "distributive" 1)
                                  (("2"
                                    (LEMMA "commutative_mult"
                                     ("x" "x!1" "y" "n0z!1"))
                                    (("2" (REPLACE -1)
                                      (("2" (ASSERT)
                                        (("2" (HIDE -1)
                                          (("2"
                                            (LEMMA "inverse_add" ("x" "y!1"))
                                            (("2"
                                              (LEMMA "distributive"
                                               ("x" "n0z!1" "y" "y!1" "z"
                                                "-y!1"))
                                              (("2" (REPLACE -2)
                                                (("2"
                                                  (REWRITE "zero_times2" -1)
                                                  (("2"
                                                    (REWRITE "commutative_mult"
                                                     -1)
                                                    (("2"
                                                      (LEMMA "both_sides_plus2"
                                                       ("z" "-(y!1 * n0z!1)"
                                                        "x" "0" "y"
                                                        "y!1 * n0z!1 + (n0z!1 * -y!1)"))
                                                      (("2"
                                                        (LEMMA "identity_add"
                                                         ("x" "-(y!1*n0z!1)"))
                                                        (("2" (REPLACE -1)
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (LEMMA
                                                               "inverse_add"
                                                               ("x"
                                                                "y!1*n0z!1"))
                                                              (("2"
                                                                (CASE-REPLACE
                                                                 "-(y!1 * n0z!1) + (y!1 * n0z!1 + (n0z!1 * -y!1)) = (n0z!1 * -y!1)")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (HIDE 2 -2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "associative_add"
                                                                     ("x"
                                                                      "-(y!1 * n0z!1)"
                                                                      "y"
                                                                      "y!1 * n0z!1"
                                                                      "z"
                                                                      "n0z!1 * -y!1"))
                                                                    (("2"
                                                                      (LEMMA
                                                                       "commutative_add"
                                                                       ("x"
                                                                        "y!1 * n0z!1"
                                                                        "y"
                                                                        "-(y!1 * n0z!1)"))
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1 -2
                                                                         :DIR
                                                                         RL)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -3
                                                                             1)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "commutative_add"
                                                                               1)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|both_sides_times2| 0
  (|both_sides_times2-1| |nil| 3280128353
   ("" (SKOSIMP*)
    (("" (REWRITE "commutative_mult")
      (("" (LEMMA "commutative_mult" ("x" "n0z!1" "y" "y!1"))
        (("" (REPLACE -1)
          (("" (LEMMA "both_sides_times1" ("x" "x!1" "y" "y!1" "n0z" "n0z!1"))
            (("" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|inv_ne_0| 0
  (|inv_ne_0-2| "" 3884623137
   ("" (SKOSIMP*)
    (("" (LEMMA "inverse_mult" ("n0x" "n0x!1"))
      (("" (TYPEPRED "n0x!1")
        (("" (HIDE -1)
          (("" (REPLACE -3)
            (("" (LEMMA "zero_times2" ("x" "n0x!1"))
              (("" (REPLACE -1 -3)
                (("" (HIDE-ALL-BUT -3) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|inverse_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   SHOSTAK)
  (|inv_ne_0-1| |nil| 3280127243
   ("" (SKOSIMP*)
    (("" (LEMMA "inverse_mult" ("n0x" "n0x!1"))
      (("" (TYPEPRED "n0x!1")
        (("" (REPLACE -4)
          (("" (LEMMA "zero_times2" ("x" "n0x!1"))
            (("" (REPLACE -1 -4)
              (("" (HIDE-ALL-BUT -4) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|nznum_div_nznum_is_nznum| 0
  (|nznum_div_nznum_is_nznum-1| |nil| 3280140171
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def")
      (("" (LEMMA "inv_ne_0" ("n0x" "nzy!1"))
        ((""
          (LEMMA "nznum_times_nznum_is_nznum" ("nzx" "nzx!1" "nzy" "1/nzy!1"))
          (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_times_nznum_is_nznum| JUDGEMENT-TCC NIL |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|inv_ne_0| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK
   (|nznum_div_nznum_is_nznum| SUBTYPE
    "number_fields./(number_fields_bis.nzx, number_fields_bis.nzy)" "nznum")))
 (|both_sides_div1| 0
  (|both_sides_div1-2| "" 3790100297
   ("" (SKOSIMP*)
    (("" (LEMMA "div_def" ("y" "x!1" "n0x" "n0z!1"))
      (("" (LEMMA "div_def" ("y" "y!1" "n0x" "n0z!1"))
        (("" (REPLACE -1)
          (("" (REPLACE -2)
            ((""
              (LEMMA "both_sides_times1" ("x" "x!1" "y" "y!1" "n0z" "1/n0z!1"))
              (("" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL))
   SHOSTAK)
  (|both_sides_div1-1| |nil| 3280130887
   ("" (SKOSIMP*)
    (("" (LEMMA "div_def" ("y" "x!1" "n0x" "n0z!1"))
      (("" (LEMMA "div_def" ("y" "y!1" "n0x" "n0z!1"))
        (("" (REPLACE -1)
          (("" (REPLACE -2)
            ((""
              (LEMMA "both_sides_times1" ("x" "x!1" "y" "y!1" "n0z" "1/n0z!1"))
              (("1" (PROPAX) NIL NIL) ("2" (REWRITE "inv_ne_0" 1) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|both_sides_div2| 0
  (|both_sides_div2-1| |nil| 3280142404
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def")
      (("" (LEMMA "div_def" ("y" "n0z!1" "n0x" "n0y!1"))
        (("" (REPLACE -1 1)
          ((""
            (LEMMA "both_sides_times2"
             ("n0z" "n0z!1" "x" "1/n0x!1" "y" "1/n0y!1"))
            (("" (REPLACE -1 1)
              (("" (HIDE -1 -2)
                (("" (SPLIT)
                  (("1" (FLATTEN)
                    (("1"
                      (LEMMA "both_sides_times2"
                       ("n0z" "n0x!1" "x" "1 / n0x!1" "y" "1 / n0y!1"))
                      (("1" (REWRITE "inverse_mult" -1)
                        (("1" (ASSERT)
                          (("1" (HIDE -2)
                            (("1"
                              (LEMMA "both_sides_times1"
                               ("n0z" "n0y!1" "x" "1" "y"
                                "n0x!1 * (1 / n0y!1)"))
                              (("1" (REWRITE "identity_mult" -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -1 1)
                                    (("1" (HIDE -1 -2)
                                      (("1"
                                        (LEMMA "identity_mult" ("x" "n0x!1"))
                                        (("1"
                                          (LEMMA "inverse_mult"
                                           ("n0x" "n0y!1"))
                                          (("1" (LEMMA "commutative_mult")
                                            (("1"
                                              (INST-CP - "1 / n0y!1" "n0x!1")
                                              (("1" (REPLACE -2 1)
                                                (("1"
                                                  (LEMMA "associative_mult"
                                                   ("x" "n0x!1" "y" "1/n0y!1"
                                                    "z" "n0y!1"))
                                                  (("1" (REPLACE -1 1 RL)
                                                    (("1" (HIDE -1 -3)
                                                      (("1"
                                                        (INST-CP - "1 / n0y!1"
                                                         "n0y!1")
                                                        (("1" (REPLACE -3 -2)
                                                          (("1" (REPLACE -2)
                                                            (("1"
                                                              (INST - "1"
                                                               "n0x!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|times_plus| 0
  (|times_plus-1| |nil| 3280126622
   ("" (SKOSIMP*)
    (("" (LEMMA "distributive" ("x" "x!1+y!1" "y" "z!1" "z" "w!1"))
      (("" (REPLACE -1 1)
        (("" (REWRITE "commutative_mult" 1)
          (("" (LEMMA "commutative_mult" ("x" "x!1+y!1" "y" "w!1"))
            (("" (REPLACE -1 1)
              (("" (ASSERT)
                (("" (REWRITE "commutative_mult" 1)
                  (("" (ASSERT) (("" (REWRITE "commutative_mult" 1) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|times_div1| 0
  (|times_div1-1| |nil| 3280129158
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def")
      (("" (LEMMA "div_def" ("y" "x!1*y!1" "n0x" "n0z!1"))
        (("" (REPLACE -1) (("" (REWRITE "associative_mult" 1) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|times_div2| 0
  (|times_div2-1| |nil| 3280129233
   ("" (SKOSIMP*)
    (("" (REWRITE "commutative_mult")
      (("" (REWRITE "times_div1") (("" (REWRITE "commutative_mult") NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|times_div1| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|div_eq_zero| 0
  (|div_eq_zero-1| |nil| 3280134605
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def")
      (("" (LEMMA "inv_ne_0" ("n0x" "n0z!1"))
        (("" (LEMMA "zero_times3" ("x" "x!1" "y" "1/n0z!1"))
          (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|inv_ne_0| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|div_simp| 0
  (|div_simp-1| |nil| 3280126859
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def") (("" (REWRITE "inverse_mult") NIL NIL)) NIL)) NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|inverse_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|div_cancel1| 0
  (|div_cancel1-1| |nil| 3280135297
   ("" (SKOSIMP*)
    (("" (REWRITE "div_def")
      (("" (LEMMA "inverse_mult" ("n0x" "n0z!1"))
        (("" (CASE-REPLACE "x!1=0")
          (("1" (REWRITE "zero_times1") (("1" (REWRITE "zero_times2") NIL NIL))
            NIL)
           ("2"
            (LEMMA "both_sides_times1"
             ("n0z" "x!1" "x" "n0z!1 * (1 / n0z!1)" "y" "1"))
            (("1" (REWRITE "identity_mult" -1)
              (("1"
                (LEMMA "associative_mult"
                 ("x" "n0z!1" "y" "1/n0z!1" "z" "x!1"))
                (("1" (LEMMA "commutative_mult" ("x" "1/n0z!1" "y" "x!1"))
                  (("1" (REPLACE -1 -2)
                    (("1" (REPLACE -2 2)
                      (("1" (REPLACE -3 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|zero_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|both_sides_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|inverse_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|div_cancel2| 0
  (|div_cancel2-1| |nil| 3280134780
   ("" (SKOSIMP*)
    (("" (REWRITE "commutative_mult") (("" (REWRITE "div_cancel1") NIL NIL))
      NIL))
    NIL)
   ((|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|div_cancel1| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|div_cancel3| 0
  (|div_cancel3-1| |nil| 3280142714
   ("" (SKOSIMP*)
    (("" (LEMMA "div_cancel1" ("n0z" "n0z!1" "x" "x!1"))
      ((""
        (LEMMA "both_sides_times2" ("n0z" "n0z!1" "x" "x!1 / n0z!1" "y" "y!1"))
        (("" (REPLACE -2 -1)
          (("" (REWRITE "commutative_mult" -1)
            (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|div_cancel1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|both_sides_times2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|div_cancel4| 0
  (|div_cancel4-1| |nil| 3280134879
   ("" (SKOSIMP*)
    (("" (LEMMA "div_cancel3" ("x" "x!1" "y" "y!1" "n0z" "n0z!1"))
      (("" (SPLIT)
        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|div_cancel3| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|cross_mult| 0
  (|cross_mult-1| |nil| 3280134974
   ("" (SKOSIMP*)
    (("" (LEMMA "div_cancel3" ("x" "x!1" "n0z" "n0x!1" "y" "y!1/n0y!1"))
      (("" (REWRITE "times_div2" -1)
        (("" (LEMMA "div_cancel4" ("y" "x!1" "x" "y!1*n0x!1" "n0z" "n0y!1"))
          (("" (REPLACE -2 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|div_cancel3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|div_cancel4| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|times_div2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|div_times| 0
  (|div_times-1| |nil| 3280136949
   ("" (SKOSIMP*)
    (("" (LEMMA "times_div1" ("x" "x!1/n0x!1" "y" "y!1" "n0z" "n0y!1"))
      (("" (REPLACE -1 1)
        (("" (HIDE -1)
          ((""
            (LEMMA "cross_mult"
             ("x" "x!1 / n0x!1 * y!1" "n0x" "n0y!1" "y" "x!1 * y!1" "n0y"
              "n0x!1 * n0y!1"))
            (("" (REPLACE -1 1)
              (("" (HIDE -1)
                (("" (REWRITE "associative_mult")
                  (("" (REWRITE "div_cancel2" 1) (("" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|times_div1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|div_cancel2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cross_mult| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL))
   SHOSTAK))
 (|add_div| 0
  (|add_div-1| |nil| 3280145209
   ("" (SKOSIMP*)
    ((""
      (LEMMA "div_cancel4"
       ("y" "(x!1 / n0x!1) + (y!1 / n0y!1)" "x" "x!1 * n0y!1 + y!1 * n0x!1"
        "n0z" "n0x!1 * n0y!1"))
      (("" (REPLACE -1 1)
        (("" (HIDE -1)
          (("" (LEMMA "commutative_mult")
            (("" (INST-CP - "(x!1 / n0x!1) + (y!1 / n0y!1)" "n0x!1 * n0y!1")
              (("" (REPLACE -2 1)
                ((""
                  (LEMMA "distributive"
                   ("x" "n0x!1*n0y!1" "y" "x!1 / n0x!1" "z" "y!1 / n0y!1"))
                  (("" (REPLACE -1 1)
                    (("" (HIDE -1 -3)
                      (("" (INST-CP - "n0x!1" "n0y!1")
                        (("" (LEMMA "associative_mult")
                          (("" (INST-CP - "n0y!1" "n0x!1" "x!1 / n0x!1")
                            (("" (REPLACE -4 -2 RL)
                              (("" (LEMMA "div_cancel1")
                                (("" (INST-CP - "n0x!1" "x!1")
                                  (("" (REPLACE -2 -4)
                                    (("" (REPLACE -4 1 RL)
                                      (("" (HIDE -2 -4 -6)
                                        (("" (INST - "n0y!1" "y!1")
                                          ((""
                                            (INST - "n0x!1" "n0y!1"
                                             "y!1/n0y!1")
                                            (("" (REPLACE -1 -2)
                                              (("" (REPLACE -2 1 RL)
                                                (("" (HIDE -1 -2)
                                                  ((""
                                                    (INST-CP - "n0y!1" "x!1")
                                                    (("" (INST - "n0x!1" "y!1")
                                                      (("" (REPLACE -1 1)
                                                        (("" (REPLACE -2 1)
                                                          (("" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|div_cancel4| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|div_cancel1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|minus_div1| 0
  (|minus_div1-1| |nil| 3280143033
   ("" (SKOSIMP*)
    (("" (LEMMA "add_div" ("x" "x!1" "y" "-y!1" "n0x" "n0x!1" "n0y" "n0y!1"))
      (("" (CASE "FORALL (x,y:numfield): (-x*y) = -(x*y)")
        (("1" (INST-CP - "y!1" "n0x!1")
          (("1" (REPLACE -2 -3)
            (("1" (LEMMA "minus_add" ("x" "x!1*n0y!1" "y" "y!1*n0x!1"))
              (("1" (REPLACE -1 -4 RL)
                (("1" (REPLACE -4 1 RL)
                  (("1" (HIDE -4 -1 -3)
                    (("1" (REWRITE "minus_add" 1)
                      (("1" (ASSERT)
                        (("1" (REWRITE "div_def")
                          (("1" (LEMMA "div_def" ("y" "-y!1" "n0x" "n0y!1"))
                            (("1" (REPLACE -1 1)
                              (("1" (INST - "y!1" "1/n0y!1")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (SKOSIMP*)
            (("2"
              (LEMMA "both_sides_plus2"
               ("z" "x!2*y!2" "x" "(-x!2 * y!2)" "y" "-(x!2 * y!2)"))
              (("2" (REPLACE -1 1 RL)
                (("2" (REWRITE "inverse_add" 1)
                  (("2" (HIDE -1)
                    (("2" (LEMMA "inverse_add" ("x" "x!2"))
                      (("2"
                        (LEMMA "distributive" ("x" "y!2" "y" "x!2" "z" "-x!2"))
                        (("2" (REPLACE -2)
                          (("2" (REWRITE "zero_times2" -1)
                            (("2" (HIDE -2)
                              (("2" (LEMMA "commutative_mult")
                                (("2" (INST-CP - "y!2" "x!2")
                                  (("2" (REPLACE -2)
                                    (("2" (INST - "y!2" "-x!2")
                                      (("2" (REPLACE -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|add_div| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|minus_div2| 0
  (|minus_div2-1| |nil| 3280143932
   ("" (SKOSIMP*)
    (("" (LEMMA "div_def" ("n0x" "n0x!1"))
      (("" (INST-CP - "x!1")
        (("" (INST-CP - "y!1")
          (("" (INST - "x!1-y!1")
            (("" (REPLACE -1)
              (("" (REPLACE -2)
                (("" (REPLACE -3)
                  (("" (HIDE-ALL-BUT 1)
                    (("" (LEMMA "commutative_mult" ("y" "1/n0x!1"))
                      (("" (INST-CP - "x!1")
                        (("" (INST-CP - "y!1")
                          (("" (INST - "x!1-y!1")
                            (("" (REPLACE -1)
                              (("" (REPLACE -2)
                                (("" (REPLACE -3)
                                  (("" (HIDE-ALL-BUT 1)
                                    ((""
                                      (LEMMA "distributive"
                                       ("x" "1/n0x!1" "y" "x!1" "z" "-y!1"))
                                      (("" (LEMMA "minus_add")
                                        (("" (INST-CP - "x!1" "y!1")
                                          (("" (REPLACE -2)
                                            (("" (REPLACE -3)
                                              ((""
                                                (INST - "1 / n0x!1 * x!1"
                                                 "1 / n0x!1 * y!1")
                                                (("" (REPLACE -1)
                                                  (("" (HIDE-ALL-BUT 1)
                                                    (("" (ASSERT)
                                                      ((""
                                                        (LEMMA
                                                         "both_sides_plus2"
                                                         ("z" "1 / n0x!1 * y!1"
                                                          "x"
                                                          "-(1 / n0x!1 * y!1)"
                                                          "y"
                                                          "1 / n0x!1 * -y!1"))
                                                        (("" (REPLACE -1 1 RL)
                                                          (("" (HIDE -1)
                                                            ((""
                                                              (REWRITE
                                                               "inverse_add")
                                                              ((""
                                                                (LEMMA
                                                                 "distributive"
                                                                 ("x" "1/n0x!1"
                                                                  "y" "y!1" "z"
                                                                  "-y!1"))
                                                                ((""
                                                                  (REPLACE -1 1
                                                                           RL)
                                                                  ((""
                                                                    (REWRITE
                                                                     "inverse_add"
                                                                     1)
                                                                    ((""
                                                                      (REWRITE
                                                                       "zero_times2"
                                                                       1)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|div_distributes| 0
  (|div_distributes-1| |nil| 3280144554
   ("" (SKOSIMP*)
    (("" (LEMMA "div_def" ("n0x" "n0z!1"))
      (("" (INST-CP - "x!1")
        (("" (INST-CP - "y!1")
          (("" (INST - "x!1+y!1")
            (("" (REPLACE -1)
              (("" (REPLACE -2)
                (("" (REPLACE -3)
                  (("" (HIDE-ALL-BUT 1)
                    (("" (LEMMA "commutative_mult" ("y" "1/n0z!1"))
                      (("" (INST-CP - "x!1")
                        (("" (INST-CP - "y!1")
                          (("" (INST - "x!1+y!1")
                            (("" (REPLACE -1)
                              (("" (REPLACE -2)
                                (("" (REPLACE -3)
                                  (("" (HIDE-ALL-BUT 1)
                                    ((""
                                      (LEMMA "distributive"
                                       ("x" "1/n0z!1" "y" "x!1" "z" "y!1"))
                                      (("" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|div_def| FORMULA-DECL NIL |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|div_distributes_minus| 0
  (|div_distributes_minus-1| |nil| 3280137015
   ("" (SKOSIMP*)
    (("" (LEMMA "minus_div2" ("x" "x!1" "y" "y!1" "n0x" "n0z!1"))
      (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|minus_div2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|div_div1| 0
  (|div_div1-1| |nil| 3280144769
   ("" (SKOSIMP*)
    (("" (LEMMA "nznum_div_nznum_is_nznum" ("nzx" "n0y!1" "nzy" "n0z!1"))
      ((""
        (LEMMA "cross_mult"
         ("x" "x!1" "n0x" "n0y!1 / n0z!1" "y" "x!1 * n0z!1" "n0y" "n0y!1"))
        (("" (REPLACE -1 1)
          (("" (HIDE -1)
            (("" (LEMMA "div_cancel1" ("x" "n0y!1" "n0z" "n0z!1"))
              ((""
                (LEMMA "associative_mult"
                 ("x" "x!1" "y" "n0z!1" "z" "n0y!1/n0z!1"))
                (("" (REPLACE -2 -1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nznum_div_nznum_is_nznum| JUDGEMENT-TCC NIL |number_fields_bis| NIL)
    (|div_cancel1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cross_mult| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum_div_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL))
   SHOSTAK))
 (|div_div2| 0
  (|div_div2-1| |nil| 3280145858
   ("" (SKOSIMP*)
    (("" (LEMMA "nznum_times_nznum_is_nznum" ("nzx" "n0y!1" "nzy" "n0z!1"))
      ((""
        (LEMMA "cross_mult"
         ("x" "x!1 / n0y!1" "n0x" "n0z!1" "y" "x!1" "n0y" "n0y!1 * n0z!1"))
        (("" (REPLACE -1 1)
          (("" (HIDE -1)
            (("" (REWRITE "associative_mult")
              (("" (LEMMA "div_cancel2" ("x" "x!1" "n0z" "n0y!1"))
                (("" (REPLACE -1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nznum_times_nznum_is_nznum| JUDGEMENT-TCC NIL |number_fields_bis| NIL)
    (|associative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|div_cancel2| FORMULA-DECL NIL |number_fields_bis| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cross_mult| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL))
   SHOSTAK))
 (|idem_add_is_zero| 0
  (|idem_add_is_zero-1| |nil| 3280137061
   ("" (SKOSIMP*)
    (("" (GRIND)
      (("" (CASE "x!1/=0")
        (("1" (LEMMA "both_sides_times1" ("n0z" "x!1" "x" "2" "y" "1"))
          (("1" (ASSERT) (("1" (REWRITE "identity_mult" 1) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|both_sides_times1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL))
   SHOSTAK))
 (|nonzero_times1| 0
  (|nonzero_times1-1| |nil| 3280295656
   ("" (SKOSIMP*)
    (("" (LEMMA "zero_times3" ("x" "n0x!1" "y" "y!1")) (("" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|nonzero_times2| 0
  (|nonzero_times2-1| |nil| 3280295688
   ("" (SKOSIMP*)
    (("" (LEMMA "zero_times3" ("x" "x!1" "y" "n0y!1")) (("" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|nonzero_times3| 0
  (|nonzero_times3-1| |nil| 3280295710
   ("" (SKOSIMP*)
    (("" (LEMMA "zero_times3" ("x" "n0x!1" "y" "n0y!1"))
      (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|nznum_times_nznum_is_nznum| APPLICATION-JUDGEMENT "nznum"
     |number_fields_bis| NIL))
   SHOSTAK))
 (|idem_mult| 0
  (|idem_mult-2| "" 3790100304
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (LEMMA "both_sides_minus1" ("z" "x!1" "x" "x!1*x!1" "y" "x!1"))
          (("1" (REPLACE -1 -2 RL)
            (("1" (HIDE -1)
              (("1" (LEMMA "inverse_add" ("x" "x!1"))
                (("1" (LEMMA "minus_add" ("x" "x!1" "y" "x!1"))
                  (("1" (REPLACE -2)
                    (("1" (REPLACE -1)
                      (("1" (HIDE -1 -2)
                        (("1"
                          (LEMMA "distributive" ("x" "x!1" "y" "x!1" "z" "-1"))
                          (("1"
                            (CASE-REPLACE
                             "(x!1 * x!1) + (x!1 * -1) = x!1 * x!1 - x!1")
                            (("1" (REPLACE -3)
                              (("1" (HIDE -3 -1)
                                (("1"
                                  (LEMMA "zero_times3"
                                   ("x" "x!1" "y" "x!1 + -1"))
                                  (("1" (ASSERT)
                                    (("1" (HIDE -2 1)
                                      (("1"
                                        (LEMMA "both_sides_minus1"
                                         ("z" "1" "x" "x!1" "y" "1"))
                                        (("1" (REPLACE -1 1 RL)
                                          (("1" (HIDE -1)
                                            (("1" (REPLACE -1 1)
                                              (("1" (HIDE -1)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (ASSERT)
                                (("2" (REWRITE "commutative_mult") NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|both_sides_minus1| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|minus_add| FORMULA-DECL NIL |number_fields| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times3| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|inverse_add| FORMULA-DECL NIL |number_fields| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL))
   SHOSTAK)
  (|idem_mult-1| |nil| 3280295888
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (FLATTEN)
        (("1" (LEMMA "both_sides_minus1" ("z" "x!1" "x" "x!1*x!1" "y" "x!1"))
          (("1" (REPLACE -1 -2 RL)
            (("1" (HIDE -1)
              (("1" (LEMMA "inverse_add" ("x" "x!1"))
                (("1" (LEMMA "minus_add" ("x" "x!1" "y" "x!1"))
                  (("1" (REPLACE -2)
                    (("1" (REPLACE -1)
                      (("1" (HIDE -1 -2)
                        (("1"
                          (LEMMA "distributive" ("x" "x!1" "y" "x!1" "z" "-1"))
                          (("1"
                            (CASE-REPLACE
                             "(x!1 * x!1) + (x!1 * -1) = x!1 * x!1 - x!1")
                            (("1" (REPLACE -3)
                              (("1" (HIDE -3 -1)
                                (("1"
                                  (LEMMA "zero_times3"
                                   ("x" "x!1" "y" "x!1 + -1"))
                                  (("1" (ASSERT)
                                    (("1" (HIDE -2 1)
                                      (("1"
                                        (LEMMA "both_sides_minus1"
                                         ("z" "1" "x" "x!1" "y" "1"))
                                        (("1" (REPLACE -1 1 RL)
                                          (("1" (HIDE -1)
                                            (("1" (REPLACE -1 1)
                                              (("1" (HIDE -1)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (ASSERT)
                                (("2" (REWRITE "commutative_mult")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|number_fields_negative_times| 0
  (|number_fields_negative_times-1| |nil| 3294692619
   ("" (SKOSIMP)
    (("" (LEMMA "number_fields_negate_is_right_inverse" ("x" "x!1*y!1"))
      (("" (LEMMA "number_fields_negate_is_right_inverse" ("x" "x!1"))
        (("" (LEMMA "distributive" ("x" "y!1" "y" "x!1" "z" "-x!1"))
          (("" (REPLACE -2 -1)
            (("" (LEMMA "commutative_mult" ("x" "y!1" "y" "x!1"))
              (("" (LEMMA "commutative_mult" ("x" "y!1" "y" "-x!1"))
                (("" (REPLACE -1 -3)
                  (("" (REPLACE -2 -3)
                    (("" (REWRITE "zero_times2")
                      (("" (REPLACE -3 -5) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_fields_negate_is_right_inverse| FORMULA-DECL NIL
     |number_fields_bis| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|commutative_mult| FORMULA-DECL NIL |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|number_fields_times_negative| 0
  (|number_fields_times_negative-1| |nil| 3294693138
   ("" (SKOSIMP)
    (("" (LEMMA "number_fields_negate_is_right_inverse" ("x" "x!1 * y!1"))
      (("" (LEMMA "number_fields_negate_is_right_inverse" ("x" "y!1"))
        (("" (LEMMA "distributive" ("x" "x!1" "y" "y!1" "z" "-y!1"))
          (("" (REPLACE -2 -1)
            (("" (REWRITE "zero_times2")
              (("" (REPLACE -1 -3)
                (("" (HIDE -1 -2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_fields_negate_is_right_inverse| FORMULA-DECL NIL
     |number_fields_bis| NIL)
    (|distributive| FORMULA-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|zero_times2| FORMULA-DECL NIL |number_fields_bis| NIL))
   SHOSTAK))
 (|number_fields_neg1_times| 0
  (|number_fields_neg1_times-1| |nil| 3596478685
   ("" (SKEEP)
    (("" (REWRITE "number_fields_negative_times")
      (("" (REWRITE "identity_mult") NIL NIL)) NIL))
    NIL)
   ((|number_fields_negative_times| FORMULA-DECL NIL |number_fields_bis| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|identity_mult| FORMULA-DECL NIL |number_fields| NIL))
   SHOSTAK)))

