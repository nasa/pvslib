(|sin_props| (|sin_iter_alt_series_TCC1| 0 (|sin_iter_alt_series_TCC1-1| |nil| 3633867268 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|sin_iter_alt_series| SUBTYPE "(number_fields.-)(sin_props.n, 1)" "nat"))) (|sin_iter_alt_series_TCC2| 0 (|sin_iter_alt_series_TCC2-1| |nil| 3633867268 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_iter_alt_series| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.n), 1))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|sin_iter_alt_series_TCC3| 0 (|sin_iter_alt_series_TCC3-1| |nil| 3634041961 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_iter_alt_series| SUBTYPE "2" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|sin_iter_alt_series| 0 (|sin_iter_alt_series-3| "" 3884581344 ("" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "sin_approx_iter_alt") (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "sin_approx") (("1" (REWRITE "sigma_last" 1) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REPLACES -8) (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "sin_term") (("1" (EXPAND "pm1") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -1 :DIR RL) (("2" (LABEL "n0" 1) (("2" (HIDE 1) (("2" (SIMPLIFY 1) (("2" (INST -11 "1+n") (("2" (REPLACES -11) (("2" (EXPAND "sin_term") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACES -8) (("2" (GRIND 1 :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "expt_x2" -10) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|sin_iter_alt_series-2| "" 3790100030 ("" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "sin_approx_iter_alt") (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "sin_approx") (("1" (REWRITE "sigma_last" 1) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REPLACES -8) (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "sin_term") (("1" (EXPAND "pm1") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -1 :DIR RL) (("2" (LABEL "n0" 1) (("2" (HIDE 1) (("2" (SIMPLIFY 1) (("2" (INST -11 "1+n") (("2" (REPLACES -11) (("2" (EXPAND "sin_term") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACES -8) (("2" (GRIND 1 :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "expt_x2" -10) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| |trig|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt_0| FORMULA-DECL NIL |sqrt_exists| |reals|) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|sin_term| CONST-DECL "real" |trig_approx| |trig|) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|sin_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)) SHOSTAK) (|sin_iter_alt_series-1| |nil| 3633867384 ("" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "sin_approx_iter_alt") (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "sin_approx") (("1" (REWRITE "sigma_last" 1) (("1" (LIFT-IF -7) (("1" (SPLIT -7) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REPLACES -8) (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "sin_term") (("1" (EXPAND "pm1") (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -1 :DIR RL) (("2" (LABEL "n0" 1) (("2" (HIDE 1) (("2" (SIMPLIFY 1) (("2" (INST -11 "1+n") (("2" (REPLACES -11) (("2" (EXPAND "sin_term") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REPLACES -8) (("2" (GRIND 1 :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "expt_x2" -10) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sin_iter_alt_series2_TCC1| 0 (|sin_iter_alt_series2_TCC1-1| |nil| 3633868397 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_iter_alt_series2| SUBTYPE "(number_fields.*(2, sin_props.mm))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|sin_iter_alt_series2_TCC2| 0 (|sin_iter_alt_series2_TCC2-1| |nil| 3633868397 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_iter_alt_series2| SUBTYPE "(number_fields.*(2, sin_props.m))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|sin_iter_alt_series2_TCC3| 0 (|sin_iter_alt_series2_TCC3-1| |nil| 3634041961 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|sin_iter_alt_series2| SUBTYPE "((number_fields.-)((number_fields.+)(sin_props.n, sin_props.m), 1))" "nat"))) (|sin_iter_alt_series2| 0 (|sin_iter_alt_series2-3| "" 3884581503 ("" (INDUCT "m") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (CASE "j=0") (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (REWRITE "sin_iter_alt_series") (("1" (INST -10 "0") (("1" (HIDE -12) (("1" (SIMPLIFY -10) (("1" (REWRITE "expt_x0") (("1" (GROUND) (("1" (EXPAND "factorial" -11) (("1" (EXPAND "factorial" -11) (("1" (GROUND) (("1" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -12 2)) (("1" (NAME "fac" "factorial(1 + 2 * n)") (("1" (REPLACES -1) (("1" (GRIND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sin_approx_iter_alt" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (INST -10 "0") (("1" (SIMPLIFY -10) (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -12) (("1" (INST -1 "x" " eps" " 1 + n" "                           b - pm1(1 + n) * (c / factorial(1 + 2 * n))" "                          c*x^2") (("1" (GROUND) (("1" (REWRITE "expt_x2") (("1" (GROUND) (("1" (CASE "c / factorial(1 + 2 * n) * x * x /
                                              (6 + 6 * n + (4 * (n * n) + 4 * n)) = c * (x * x) / factorial(3 + 2 * n)") (("1" (GROUND) (("1" (CASE "(6 + 4 * (n * n) + 10 * n) = (6 + 6 * n + (4 * (n * n) + 4 * n))") (("1" (GROUND) (("1" (REPLACES -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 4) (("2" (GROUND) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (REPLACES -9) (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x2") (("2" (REWRITE "expt_x3") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -10 "mm+1") (("2" (SIMPLIFY -10) (("2" (REWRITE "expt_plus" -10) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0" 1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" -11) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "n+1") (("3" (REPLACES -1) (("3" (COPY -8) (("3" (REPLACES -1) (("3" (HIDE-ALL-BUT (-6 1)) (("3" (EXPAND "sin_approx") (("3" (REWRITE "sigma_last" 1) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "sin_term") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "n0" 1) (("2" (HIDE 1) (("2" (REPLACES -1) (("2" (SIMPLIFY 1) (("2" (EXPAND "sin_term") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|sin_iter_alt_series2-2| "" 3790100036 ("" (INDUCT "m") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (CASE "j=0") (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (REWRITE "sin_iter_alt_series") (("1" (INST -10 "0") (("1" (HIDE -12) (("1" (SIMPLIFY -10) (("1" (REWRITE "expt_x0") (("1" (GROUND) (("1" (EXPAND "factorial" -11) (("1" (EXPAND "factorial" -11) (("1" (GROUND) (("1" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -12 2)) (("1" (NAME "fac" "factorial(1 + 2 * n)") (("1" (REPLACES -1) (("1" (GRIND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sin_approx_iter_alt" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (INST -10 "0") (("1" (SIMPLIFY -10) (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -12) (("1" (INST -1 "x" " eps" " 1 + n" "                           b - pm1(1 + n) * (c / factorial(1 + 2 * n))" "                          c*x^2") (("1" (GROUND) (("1" (REWRITE "expt_x2") (("1" (GROUND) (("1" (CASE "c / factorial(1 + 2 * n) * x * x /
                                              (6 + 6 * n + (4 * (n * n) + 4 * n)) = c * (x * x) / factorial(3 + 2 * n)") (("1" (GROUND) (("1" (CASE "(6 + 4 * (n * n) + 10 * n) = (6 + 6 * n + (4 * (n * n) + 4 * n))") (("1" (GROUND) (("1" (REPLACES -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 4) (("2" (GROUND) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (REPLACES -9) (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x2") (("2" (REWRITE "expt_x3") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -10 "mm+1") (("2" (SIMPLIFY -10) (("2" (REWRITE "expt_plus" -10) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0" 1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" -11) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "n+1") (("3" (REPLACES -1) (("3" (COPY -8) (("3" (REPLACES -1) (("3" (HIDE-ALL-BUT (-6 1)) (("3" (EXPAND "sin_approx") (("3" (REWRITE "sigma_last" 1) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "sin_term") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "n0" 1) (("2" (HIDE 1) (("2" (REPLACES -1) (("2" (SIMPLIFY 1) (("2" (EXPAND "sin_term") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|pm1| DEF-DECL "int" |fast_approx| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (|sin_term| CONST-DECL "real" |trig_approx| |trig|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|expt_0| FORMULA-DECL NIL |sqrt_exists| |reals|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|expt_x3| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|n| SKOLEM-CONST-DECL "nat" |sin_props| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x < 7}" |sin_props| NIL) (|b| SKOLEM-CONST-DECL "{b: real | b = IF n = 0 THEN 0 ELSE sin_approx(x, n - 1) ENDIF}" |sin_props| NIL) (|j| SKOLEM-CONST-DECL "nat" |sin_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (|c| SKOLEM-CONST-DECL "{c: nnreal |
   c = x ^ (1 + 2 * n) AND
    (FORALL (mm: below(1 + j)):
       c * x ^ (2 * mm) / factorial(1 + 2 * mm + 2 * n) > eps)
     AND (c * x ^ (2 + 2 * j)) / factorial(3 + 2 * j + 2 * n) <= eps}" |sin_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_iter_alt_series| FORMULA-DECL NIL |sin_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|sin_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (<= CONST-DECL "bool" |reals| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| |trig|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK) (|sin_iter_alt_series2-1| |nil| 3633868398 ("" (INDUCT "m") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (CASE "j=0") (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (REWRITE "sin_iter_alt_series") (("1" (INST -10 "0") (("1" (HIDE -12) (("1" (SIMPLIFY -10) (("1" (REWRITE "expt_x0") (("1" (GROUND) (("1" (EXPAND "factorial" -11) (("1" (EXPAND "factorial" -11) (("1" (GROUND) (("1" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -12 2)) (("1" (NAME "fac" "factorial(1 + 2 * n)") (("1" (REPLACES -1) (("1" (GRIND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sin_approx_iter_alt" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (INST -10 "0") (("1" (SIMPLIFY -10) (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -12) (("1" (INST -1 "x" " eps" " 1 + n" "                           b - pm1(1 + n) * (c / factorial(1 + 2 * n))" "                          c*x^2") (("1" (GROUND) (("1" (REWRITE "expt_x2") (("1" (GROUND) (("1" (CASE "c / factorial(1 + 2 * n) * x * x /
                                              (6 + 6 * n + (4 * (n * n) + 4 * n)) = c * (x * x) / factorial(3 + 2 * n)") (("1" (GROUND) (("1" (CASE "(6 + 4 * (n * n) + 10 * n) = (6 + 6 * n + (4 * (n * n) + 4 * n))") (("1" (GROUND) (("1" (REPLACES -1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 4) (("2" (GROUND) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (REPLACES -9) (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (REWRITE "expt_x2") (("2" (REWRITE "expt_x3") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -10 "mm+1") (("2" (SIMPLIFY -10) (("2" (REWRITE "expt_plus" -10) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (GROUND) (("2" (REWRITE "expt_0") (("2" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (REWRITE "expt_0") (("2" (REWRITE "expt_0") (("2" (REWRITE "expt_0") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0" 1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" -11) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST -1 "n+1") (("3" (REPLACES -1) (("3" (COPY -8) (("3" (REPLACES -1) (("3" (HIDE-ALL-BUT (-6 1)) (("3" (EXPAND "sin_approx") (("3" (REWRITE "sigma_last" 1) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "sigma") (("1" (EXPAND "factorial") (("1" (EXPAND "sin_term") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "n0" 1) (("2" (HIDE 1) (("2" (REPLACES -1) (("2" (SIMPLIFY 1) (("2" (EXPAND "sin_term") (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (REWRITE "expt_x1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sin_iter_alt_series3_TCC1| 0 (|sin_iter_alt_series3_TCC1-1| |nil| 3633871150 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_iter_alt_series3| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.m), 1))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|sin_iter_alt_series3_TCC2| 0 (|sin_iter_alt_series3_TCC2-1| |nil| 3633871150 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_iter_alt_series3| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.n), 1))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|sin_iter_alt_series3_TCC3| 0 (|sin_iter_alt_series3_TCC3-1| |nil| 3634044069 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|sin_iter_alt_series3| SUBTYPE "(number_fields.-)(sin_props.n, 1)" "nat"))) (|sin_iter_alt_series3| 0 (|sin_iter_alt_series3-1| |nil| 3633871152 ("" (SKEEP :PREDS? T) (("" (LEMMA "sin_iter_alt_series2") (("" (INST -1 "x" "eps" "0" "n" "0" "x") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" -1) (("1" (EXPAND "factorial" -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (EXPAND "sin_approx_iter_alt") (("1" (REWRITE "sin_approx_a0") NIL NIL)) NIL)) NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (INST -6 "mm") (("1" (REWRITE "expt_plus") NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_iter_alt_series2| FORMULA-DECL NIL |sin_props| NIL) (|sin_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (|sin_approx_a0| FORMULA-DECL NIL |trig_approx| |trig|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x < 7}" |sin_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|n| SKOLEM-CONST-DECL "{n: posnat |
   (FORALL (m: below(n)): (x ^ (1 + 2 * m)) / factorial(1 + 2 * m) > eps)
    AND (x ^ (1 + 2 * n)) / factorial(1 + 2 * n) <= eps}" |sin_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| |trig|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|bounding?_TCC1| 0 (|bounding?_TCC1-1| |nil| 3633873343 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bounding?| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.n), 1))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC1| 0 (|bound_iter_TCC5-2| |nil| 3767440515 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(1, number_fields.*(2, sin_props.m))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")) (|bound_iter_TCC5-1| |nil| 3633873343 ("" (SKEEP) (("" (GROUND) NIL NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(1, number_fields.*(2, sin_props.m))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC2| 0 (|bound_iter_TCC3-1| |nil| 3790099937 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(1, number_fields.*(2, sin_props.nn))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC3| 0 (|bound_iter_TCC1-1| |nil| 3633873343 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bound_iter| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.m), 1))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC4| 0 (|bound_iter_TCC2-1| |nil| 3633873343 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.n), 3))" "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC5| 0 (|bound_iter_TCC3-1| |nil| 3633873343 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.-)(8, sin_props.n)" "nat"))) (|bound_iter_TCC6| 0 (|bound_iter_TCC4-1| |nil| 3633873343 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "number_fields./((number_fields./(exponentiation.^(sin_props.x, ((number_fields.+)(number_fields.*(2, sin_props.n), 3))), factorial.factorial((number_fields.+)(number_fields.*(2, sin_props.n), 3)))), sin_props.eps)" "{x: reals.real | reals.>=(x, 1)}"))) (|bound_iter_TCC7| 0 (|bound_iter_TCC6-2| |nil| 3767440500 ("" (SKEEP) (("" (GROUND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))" "{i: integers.int | booleans.OR(sin_props.z`1 /= 0, reals.>=(i, 0))}")) (|bound_iter_TCC6-1| |nil| 3633873343 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))" "{i: integers.int | booleans.OR(sin_props.z`1 /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC8| 0 (|bound_iter_TCC7-2| |nil| 3767440409 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.-)(8, sin_props.z`3)" "nat")) (|bound_iter_TCC7-1| |nil| 3633873343 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.-)(8, sin_props.z`3)" "nat"))) (|bound_iter_TCC9| 0 (|bound_iter_TCC8-2| |nil| 3767440380 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "number_fields./((number_fields./(exponentiation.^(sin_props.z`1, ((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))), factorial.factorial((number_fields.+)(number_fields.*(2, sin_props.z`3), 3)))), sin_props.z`2)" "{x: reals.real | reals.>=(x, 1)}")) (|bound_iter_TCC8-1| |nil| 3633873343 ("" (SKEEP :PREDS? T) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "bounding?") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "number_fields./((number_fields./(exponentiation.^(sin_props.z`1, ((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))), factorial.factorial((number_fields.+)(number_fields.*(2, sin_props.z`3), 3)))), sin_props.z`2)" "{x: reals.real | reals.>=(x, 1)}"))) (|bound_iter_TCC10| 0 (|bound_iter_TCC9-3| |nil| 3767440640 ("" (SKEEP :PREDS? T) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "bounding?") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|bounding?| CONST-DECL "bool" |sin_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(sin_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps), reals.<=(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, nn))), factorial.factorial((number_fields.+)(1, number_fields.*(2, nn)))), sin_props.eps))}")) (|bound_iter_TCC9-2| |nil| 3767440596 ("" (SKEEP) (("" (CROSS-MULT) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(sin_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps), reals.<=(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, nn))), factorial.factorial((number_fields.+)(1, number_fields.*(2, nn)))), sin_props.eps))}")) (|bound_iter_TCC9-1| |nil| 3633873343 ("" (SKEEP :PREDS? T) (("" (SKEEP) (("" (CASE "m=1+n") (("1" (REPLACES -1) (("1" (EXPAND "bounding?") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -6 "m") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(sin_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps), reals.<=(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, nn))), factorial.factorial((number_fields.+)(1, number_fields.*(2, nn)))), sin_props.eps))}"))) (|bound_iter_TCC11| 0 (|bound_iter_TCC10-3| |nil| 3767440583 ("" (SKEEP :PREDS? T) (("" (SKEEP) (("" (CASE "m=1+n") (("1" (REPLACES -1) (("1" (EXPAND "bounding?") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -6 "m") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|m| SKOLEM-CONST-DECL "below(2 + n)" |sin_props| NIL) (|n| SKOLEM-CONST-DECL "{n: nat |
   FORALL (m: below(n + 1)): (x ^ (1 + 2 * m)) / factorial(1 + 2 * m) > eps}" |sin_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (|x| SKOLEM-CONST-DECL "{x: posreal | x < 7}" |sin_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|bounding?| CONST-DECL "bool" |sin_props| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(sin_props.n, 1)" "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below((number_fields.+)(n, 1))): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps)}")) (|bound_iter_TCC10-2| |nil| 3634044753 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND :EXCLUDE "factorial") NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (CASE-REPLACE "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (CASE "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLIP-INEQ 2) (("2" (CASE "x^2<=49") (("1" (CASE "1/(5+2*n)<=1/7") (("1" (CASE "1/(4+2*n)<=1/7") (("1" (MULT-INEQ -2 -1) (("1" (MULT-INEQ -4 -1) (("1" (GROUND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 3) (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "5+2*n = 2+(3+2*n)") (("1" (REWRITE "expt_plus" 2) (("1" (FIELD 2) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :EXCLUDE "factorial") NIL NIL) ("3" (NAME "C" "((x ^ (5 + 2 * n)) / factorial(5 + 2 * n))") (("3" (REPLACE -1) (("3" (NAME-REPLACE "c" "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("3" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 6)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (CASE "C <= c/4") (("1" (CROSS-MULT) (("1" (CASE "eps<=eps") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "C") (("2" (EXPAND "c") (("2" (CASE-REPLACE "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (CASE "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1/4") (("1" (CASE "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))<= ((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (CASE "1/(4+2*n)<=1/14") (("1" (CASE "1/(5+2*n)<=1/14") (("1" (CASE "x<=7") (("1" (MULT-INEQ -1 -1) (("1" (MULT-INEQ -1 -3) (("1" (MULT-INEQ -1 -5) (("1" (REWRITE "expt_x2" 1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "5+2*n = 2+(3+2*n)") (("1" (REWRITE "expt_plus") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" 2 1) (("1" (EXPAND "factorial" 2 1) (("1" (EXPAND "factorial" 2 3) (("1" (NAME "fac" "factorial(3+2*n)") (("1" (REPLACES -1) (("1" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(sin_props.n, 1)" "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below((number_fields.+)(n, 1))): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps)}")) (|bound_iter_TCC10-1| |nil| 3633873343 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(sin_props.n, 1)" "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below((number_fields.+)(n, 1))): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps)}"))) (|bound_iter_TCC12| 0 (|bound_iter_TCC12-1| "" 3884581683 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND :EXCLUDE "factorial") NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (CASE-REPLACE "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (CASE "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLIP-INEQ 2) (("2" (CASE "x^2<=49") (("1" (CASE "1/(5+2*n)<=1/7") (("1" (CASE "1/(4+2*n)<=1/7") (("1" (MULT-INEQ -2 -1) (("1" (MULT-INEQ -4 -1) (("1" (GROUND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 3) (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "5+2*n = 2+(3+2*n)") (("1" (REWRITE "expt_plus" 2) (("1" (FIELD 2) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :EXCLUDE "factorial") NIL NIL) ("3" (NAME "C" "((x ^ (5 + 2 * n)) / factorial(5 + 2 * n))") (("3" (REPLACE -1) (("3" (NAME-REPLACE "c" "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("3" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 6)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (CASE "C <= c/4") (("1" (CROSS-MULT) (("1" (CASE "eps<=eps") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "C") (("2" (EXPAND "c") (("2" (CASE-REPLACE "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (CASE "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1/4") (("1" (CASE "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))<= ((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (CASE "1/(4+2*n)<=1/14") (("1" (CASE "1/(5+2*n)<=1/14") (("1" (CASE "x<=7") (("1" (MULT-INEQ -1 -1) (("1" (MULT-INEQ -1 -3) (("1" (MULT-INEQ -1 -5) (("1" (REWRITE "expt_x2" 1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "5+2*n = 2+(3+2*n)") (("1" (REWRITE "expt_plus") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" 2 1) (("1" (EXPAND "factorial" 2 1) (("1" (EXPAND "factorial" 2 3) (("1" (NAME "fac" "factorial(3+2*n)") (("1" (REPLACES -1) (("1" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bound_iter| TERMINATION "sin_props.bound_iter(sin_props.x, sin_props.eps, (number_fields.+)(sin_props.n, 1))" "NIL")) (|bound_iter_TCC11-1| |nil| 3744304291 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND :EXCLUDE "factorial") NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (CASE-REPLACE "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (CASE "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLIP-INEQ 2) (("2" (CASE "x^2<=49") (("1" (CASE "1/(5+2*n)<=1/7") (("1" (CASE "1/(4+2*n)<=1/7") (("1" (MULT-INEQ -2 -1) (("1" (MULT-INEQ -4 -1) (("1" (GROUND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 3) (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "5+2*n = 2+(3+2*n)") (("1" (REWRITE "expt_plus" 2) (("1" (FIELD 2) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :EXCLUDE "factorial") NIL NIL) ("3" (NAME "C" "((x ^ (5 + 2 * n)) / factorial(5 + 2 * n))") (("3" (REPLACE -1) (("3" (NAME-REPLACE "c" "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("3" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 6)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (CASE "C <= c/4") (("1" (CROSS-MULT) (("1" (CASE "eps<=eps") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "C") (("2" (EXPAND "c") (("2" (CASE-REPLACE "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (CASE "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1/4") (("1" (CASE "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))<= ((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (CASE "1/(4+2*n)<=1/14") (("1" (CASE "1/(5+2*n)<=1/14") (("1" (CASE "x<=7") (("1" (MULT-INEQ -1 -1) (("1" (MULT-INEQ -1 -3) (("1" (MULT-INEQ -1 -5) (("1" (REWRITE "expt_x2" 1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "x=0") (("1" (REPLACES -1) (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (REWRITE "expt_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "5+2*n = 2+(3+2*n)") (("1" (REWRITE "expt_plus") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" 2 1) (("1" (EXPAND "factorial" 2 1) (("1" (EXPAND "factorial" 2 3) (("1" (NAME "fac" "factorial(3+2*n)") (("1" (REPLACES -1) (("1" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_0| FORMULA-DECL NIL |sqrt_exists| |reals|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| |reals|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| |reals|) (C SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (FDX_64 SKOLEM-CONST-DECL "{x: even_int | x > 0}" |sin_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (FDX_62 SKOLEM-CONST-DECL "{x: odd_int | x > 0}" |sin_props| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|c| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (< DEF-DECL "bool" |ordinals| NIL) (|bounding?| CONST-DECL "bool" |sin_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) NIL (|bound_iter| TERMINATION "sin_props.bound_iter(sin_props.x, sin_props.eps, (number_fields.+)(sin_props.n, 1))" "NIL"))) (|iter_bound| 0 (|iter_bound-1| |nil| 3633877780 ("" (SKEEP) (("" (FLIP-INEQ 1) (("" (INST 1 "bound_iter(x,eps,0)") (("1" (TYPEPRED "bound_iter(x, eps, 0)") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (CASE "m=0") (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (CASE "m=0") (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x < 7}" |sin_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bound_iter| DEF-DECL "{nn: posnat |
   (FORALL (m: below(nn)): x ^ (2 * m + 1) / factorial(2 * m + 1) > eps)
    AND x ^ (2 * nn + 1) / factorial(2 * nn + 1) <= eps}" |sin_props| NIL)) SHOSTAK)) (|sin_fast_approx_bound| 0 (|sin_fast_approx_bound-3| "" 3884582529 ("" (SKEEP) (("" (NAME "X" "IF x>=0 THEN x ELSE -x ENDIF") (("" (LEMMA "iter_bound") (("" (INST -1 "X" "eps") (("1" (LEMMA "sin_iter_alt_series3") (("1" (SPLIT -2) (("1" (CASE "FORALL (z:real): abs(sin(z))<=abs(z)") (("1" (EXPAND "sin_fast_approx") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE-REPLACE "x=X") (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -4 "X") (("1" (EXPAND "abs" -4 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "X=-x") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "X") (("1" (EXPAND "abs" -2 2) (("1" (GROUND) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "X") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (LEMMA "sin_neg") (("2" (INST -1 "-x") (("2" (SIMPLIFY -1) (("2" (CASE-REPLACE "--x = x") (("1" (REPLACES -2) (("1" (CASE-REPLACE "-x = X") (("1" (HIDE -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "X") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (zz:posreal): abs(sin(zz))<=zz") (("1" (SKEEP) (("1" (CASE "z=0") (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "z<0") (("1" (LEMMA "sin_neg") (("1" (INST -1 "z") (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 R 1) (("1" (SIMPLIFY 1) (("1" (CASE "0 - -sin(z) = sin(z)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (CASE "abs(z) = abs(-z)") (("1" (REPLACES -1) (("1" (INST -2 "-z") (("1" (GRIND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GRIND -1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "z") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED "sin(zz)") (("2" (CASE "zz>=1") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "floor(zz/(2*pi)) = 0") (("1" (TYPEPRED "zz") (("1" (LEMMA "sincos.sin_ub") (("1" (INST -1 "zz") (("1" (FLIP-INEQ 1) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (LEMMA "sin_pos_0topi") (("1" (INST -1 "zz") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "zz / (2 * pi)<1") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "X" "eps" "nn") (("1" (EXPAND "sin_fast_approx") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (REPLACES -5) (("1" (LEMMA "sin_approx_sin") (("1" (INST -1 "X" "nn-1") (("1" (SIMPLIFY -1) (("1" (EXPAND "sin_term") (("1" (GROUND) (("1" (CASE "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) = X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)") (("1" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                            X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)") (("1" (INST -1 "nn") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (CASE "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))") (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_plus" 1) (("1" (LEMMA "expt_plus") (("1" (CASE "X=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "2" "1+2*j" "X") (("2" (SIMPLIFY -1) (("2" (REPLACES -1) (("2" (CASE "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)") (("1" (REPLACES -1) (("1" (CASE "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                          (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                          ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                          factorial(1 + 2 * j))") (("1" (CASE-REPLACE "(-1)^1 = -1") (("1" (ASSERT -2) (("1" (REPLACE -2 2) (("1" (REWRITE "abs_mult" 2) (("1" (CASE-REPLACE "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = X^2/(6 +6*j+(4*j*j+4*j))") (("1" (CASE-REPLACE "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X^(1+2*j)/factorial(1+2*j)") (("1" (CROSS-MULT 2) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (EXPAND "^" -1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (CANCEL-BY 1 "X*X") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SIMPLIFY -1) (("2" (GROUND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (CROSS-MULT 1) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "sin_neg") (("2" (INST -1 "-x") (("2" (CASE-REPLACE "--x=x") (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (CASE "FORALL (z:real): abs(-z) = abs(z)") (("1" (SIMPLIFY 3) (("1" (CASE-REPLACE "-sin(X) - -sin_approx_iter_alt(X, eps, 0, 0, X) = -(sin(X) -sin_approx_iter_alt(X, eps, 0, 0, X))") (("1" (INST -2 "(sin(X) - sin_approx_iter_alt(X, eps, 0, 0, X))") (("1" (REPLACES -2) (("1" (REPLACES -5) (("1" (LEMMA "sin_approx_sin") (("1" (INST -1 "X" "nn-1") (("1" (EXPAND "sin_term") (("1" (CASE "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) =  X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CASE "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                                                         X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)") (("1" (INST -1 "nn") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) (("1" (CROSS-MULT) (("1" (EXPAND "X") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))") (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_plus" 1) (("1" (LEMMA "expt_plus") (("1" (CASE "X=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "2" "1+2*j" "X") (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (CASE "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)") (("1" (REPLACES -1) (("1" (CASE "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                                                              (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                                                              ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                                                              factorial(1 + 2 * j))") (("1" (CASE-REPLACE "(-1)^1=-1") (("1" (REPLACES -2 2) (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j))") (("1" (CASE-REPLACE "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X ^ (1 + 2 * j) / factorial(1 + 2 * j)") (("1" (CROSS-MULT 2) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (GROUND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (CROSS-MULT 1) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (TYPEPRED ("x")) (("3" (HIDE (-2 -3 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|sin_fast_approx_bound-2| "" 3790100082 ("" (SKEEP) (("" (NAME "X" "IF x>=0 THEN x ELSE -x ENDIF") (("" (LEMMA "iter_bound") (("" (INST -1 "X" "eps") (("1" (LEMMA "sin_iter_alt_series3") (("1" (SPLIT -2) (("1" (CASE "FORALL (z:real): abs(sin(z))<=abs(z)") (("1" (EXPAND "sin_fast_approx") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE-REPLACE "x=X") (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -4 "X") (("1" (EXPAND "abs" -4 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "X=-x") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "X") (("1" (EXPAND "abs" -2 2) (("1" (GROUND) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "X") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (LEMMA "sin_neg") (("2" (INST -1 "-x") (("2" (SIMPLIFY -1) (("2" (CASE-REPLACE "--x = x") (("1" (REPLACES -2) (("1" (CASE-REPLACE "-x = X") (("1" (HIDE -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "X") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (zz:posreal): abs(sin(zz))<=zz") (("1" (SKEEP) (("1" (CASE "z=0") (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "z<0") (("1" (LEMMA "sin_neg") (("1" (INST -1 "z") (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 R 1) (("1" (SIMPLIFY 1) (("1" (CASE "0 - -sin(z) = sin(z)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (CASE "abs(z) = abs(-z)") (("1" (REPLACES -1) (("1" (INST -2 "-z") (("1" (GRIND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GRIND -1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "z") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED "sin(zz)") (("2" (CASE "zz>=1") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "floor(zz/(2*pi)) = 0") (("1" (TYPEPRED "zz") (("1" (LEMMA "sincos.sin_ub") (("1" (INST -1 "zz") (("1" (FLIP-INEQ 1) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (LEMMA "sin_pos_0topi") (("1" (INST -1 "zz") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "zz / (2 * pi)<1") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "X" "eps" "nn") (("1" (EXPAND "sin_fast_approx") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (REPLACES -5) (("1" (LEMMA "sin_approx_sin") (("1" (INST -1 "X" "nn-1") (("1" (SIMPLIFY -1) (("1" (EXPAND "sin_term") (("1" (GROUND) (("1" (CASE "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) = X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)") (("1" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                            X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)") (("1" (INST -1 "nn") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (CASE "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))") (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_plus" 1) (("1" (LEMMA "expt_plus") (("1" (CASE "X=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "2" "1+2*j" "X") (("2" (SIMPLIFY -1) (("2" (REPLACES -1) (("2" (CASE "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)") (("1" (REPLACES -1) (("1" (CASE "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                          (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                          ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                          factorial(1 + 2 * j))") (("1" (CASE-REPLACE "(-1)^1 = -1") (("1" (ASSERT -2) (("1" (REPLACE -2 2) (("1" (REWRITE "abs_mult" 2) (("1" (CASE-REPLACE "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = X^2/(6 +6*j+(4*j*j+4*j))") (("1" (CASE-REPLACE "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X^(1+2*j)/factorial(1+2*j)") (("1" (CROSS-MULT 2) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (EXPAND "^" -1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (CANCEL-BY 1 "X*X") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SIMPLIFY -1) (("2" (GROUND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (CROSS-MULT 1) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "sin_neg") (("2" (INST -1 "-x") (("2" (CASE-REPLACE "--x=x") (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (CASE "FORALL (z:real): abs(-z) = abs(z)") (("1" (SIMPLIFY 3) (("1" (CASE-REPLACE "-sin(X) - -sin_approx_iter_alt(X, eps, 0, 0, X) = -(sin(X) -sin_approx_iter_alt(X, eps, 0, 0, X))") (("1" (INST -2 "(sin(X) - sin_approx_iter_alt(X, eps, 0, 0, X))") (("1" (REPLACES -2) (("1" (REPLACES -5) (("1" (LEMMA "sin_approx_sin") (("1" (INST -1 "X" "nn-1") (("1" (EXPAND "sin_term") (("1" (CASE "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) =  X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CASE "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                                                         X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)") (("1" (INST -1 "nn") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) (("1" (CROSS-MULT) (("1" (EXPAND "X") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))") (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_plus" 1) (("1" (LEMMA "expt_plus") (("1" (CASE "X=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "2" "1+2*j" "X") (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (CASE "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)") (("1" (REPLACES -1) (("1" (CASE "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                                                              (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                                                              ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                                                              factorial(1 + 2 * j))") (("1" (CASE-REPLACE "(-1)^1=-1") (("1" (REPLACES -2 2) (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j))") (("1" (CASE-REPLACE "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X ^ (1 + 2 * j) / factorial(1 + 2 * j)") (("1" (CROSS-MULT 2) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (GROUND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (CROSS-MULT 1) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (TYPEPRED (X)) (("3" (HIDE (-2 -3 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (X SKOLEM-CONST-DECL "real" |sin_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|zz| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (|sin_pos_0topi| FORMULA-DECL NIL |sincos| |trig|) (|sin_ub| FORMULA-DECL NIL |sincos| |trig|) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|z| SKOLEM-CONST-DECL "real" |sin_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sin_fast_approx| CONST-DECL "real" |fast_approx| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_0| FORMULA-DECL NIL |sincos_def| |trig|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sin_neg| FORMULA-DECL NIL |sincos_def| |trig|) (<= CONST-DECL "bool" |reals| NIL) (|sin| CONST-DECL "real" |sincos_def| |trig|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |sin_props| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nn| SKOLEM-CONST-DECL "posnat" |sin_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|sin_approx_sin| FORMULA-DECL NIL |trig_approx| |trig|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}" |real_defs| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (DIV_66 SKOLEM-CONST-DECL "real" |sin_props| NIL) (|neg_one_times| FORMULA-DECL NIL |extra_tegies| NIL) (|neg_div| FORMULA-DECL NIL |extra_tegies| NIL) (|nonzero_times3| FORMULA-DECL NIL |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| |trig|) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sin_iter_alt_series3| FORMULA-DECL NIL |sin_props| NIL) (|iter_bound| FORMULA-DECL NIL |sin_props| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|sin_fast_approx_bound-1| |nil| 3633878159 ("" (SKEEP) (("" (NAME "X" "IF x>=0 THEN x ELSE -x ENDIF") (("" (LEMMA "iter_bound") (("" (INST -1 "X" "eps") (("1" (LEMMA "sin_iter_alt_series3") (("1" (SPLIT -2) (("1" (CASE "FORALL (z:real): abs(sin(z))<=abs(z)") (("1" (EXPAND "sin_fast_approx") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE-REPLACE "x=X") (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -4 "X") (("1" (EXPAND "abs" -4 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "X=-x") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "sin_approx_iter_alt") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "X") (("1" (EXPAND "abs" -2 2) (("1" (GROUND) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "X") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (LEMMA "sin_neg") (("2" (INST -1 "-x") (("2" (SIMPLIFY -1) (("2" (CASE-REPLACE "--x = x") (("1" (REPLACES -2) (("1" (CASE-REPLACE "-x = X") (("1" (HIDE -6) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "X") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (zz:posreal): abs(sin(zz))<=zz") (("1" (SKEEP) (("1" (CASE "z=0") (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "z<0") (("1" (LEMMA "sin_neg") (("1" (INST -1 "z") (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 R 1) (("1" (SIMPLIFY 1) (("1" (CASE "0 - -sin(z) = sin(z)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (CASE "abs(z) = abs(-z)") (("1" (REPLACES -1) (("1" (INST -2 "-z") (("1" (GRIND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GRIND -1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "z") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED "sin(zz)") (("2" (CASE "zz>=1") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "floor(zz/(2*pi)) = 0") (("1" (TYPEPRED "zz") (("1" (LEMMA "sincos.sin_ub") (("1" (INST -1 "zz") (("1" (FLIP-INEQ 1) (("1" (EXPAND "abs") (("1" (LIFT-IF) (("1" (SPLIT) (("1" (LEMMA "sin_pos_0topi") (("1" (INST -1 "zz") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "zz / (2 * pi)<1") (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "X" "eps" "nn") (("1" (EXPAND "sin_fast_approx") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "sin_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (REPLACES -5) (("1" (LEMMA "sin_approx_sin") (("1" (INST -1 "X" "nn-1") (("1" (SIMPLIFY -1) (("1" (EXPAND "sin_term") (("1" (GROUND) (("1" (CASE "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) = X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)") (("1" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                            X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)") (("1" (INST -1 "nn") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (CASE "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))") (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_plus" 1) (("1" (LEMMA "expt_plus") (("1" (CASE "X=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "2" "1+2*j" "X") (("2" (SIMPLIFY -1) (("2" (REPLACES -1) (("2" (CASE "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)") (("1" (REPLACES -1) (("1" (CASE "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                          (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                          ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                          factorial(1 + 2 * j))") (("1" (REPLACES -1) (("1" (CASE-REPLACE "(-1)^1 = -1") (("1" (ASSERT -2) (("1" (REPLACE -2 2) (("1" (REWRITE "abs_mult" 2) (("1" (CASE-REPLACE "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = X^2/(6 +6*j+(4*j*j+4*j))") (("1" (CASE-REPLACE "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X^(1+2*j)/factorial(1+2*j)") (("1" (CROSS-MULT 2) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 1) (("2" (CROSS-MULT -1) (("2" (EXPAND "^" -1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (CANCEL-BY 1 "X*X") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SIMPLIFY -1) (("2" (GROUND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (CROSS-MULT 1) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "sin_neg") (("2" (INST -1 "-x") (("2" (CASE-REPLACE "--x=x") (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (CASE "FORALL (z:real): abs(-z) = abs(z)") (("1" (SIMPLIFY 3) (("1" (CASE-REPLACE "-sin(X) - -sin_approx_iter_alt(X, eps, 0, 0, X) = -(sin(X) -sin_approx_iter_alt(X, eps, 0, 0, X))") (("1" (INST -2 "(sin(X) - sin_approx_iter_alt(X, eps, 0, 0, X))") (("1" (REPLACES -2) (("1" (REPLACES -5) (("1" (LEMMA "sin_approx_sin") (("1" (INST -1 "X" "nn-1") (("1" (EXPAND "sin_term") (("1" (CASE "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) =  X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CASE "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                                                         X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)") (("1" (INST -1 "nn") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) (("1" (CROSS-MULT) (("1" (EXPAND "X") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))") (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_plus" 1) (("1" (LEMMA "expt_plus") (("1" (CASE "X=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -1 "2" "1+2*j" "X") (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (CASE "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)") (("1" (REPLACES -1) (("1" (CASE "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                                                              (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                                                              ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                                                              factorial(1 + 2 * j))") (("1" (CASE-REPLACE "(-1)^1=-1") (("1" (REPLACES -2 2) (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j))") (("1" (CASE-REPLACE "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X ^ (1 + 2 * j) / factorial(1 + 2 * j)") (("1" (CROSS-MULT 2) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (GROUND) (("2" (HIDE-ALL-BUT (1 2)) (("2" (CROSS-MULT 1) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (TYPEPRED (X)) (("3" (HIDE (-2 -3 2)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
