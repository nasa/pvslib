(|fast_approx| (|sqrt_newton_step_fast_approx_TCC1| 0 (|sqrt_newton_step_fast_approx_TCC1-1| |nil| 3632745805 ("" (SUBTYPE-TCC) NIL NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|sqrt_newton_step_fast_approx| SUBTYPE "fast_approx.sqrtnewt" "{r2 | reals.<((number_fields.-)(fast_approx.sqrtnewt, fast_approx.eps), best_rational.r2)}"))) (|sqrt_newton_step_fast_approx_TCC2| 0 (|sqrt_newton_step_fast_approx_TCC2-1| |nil| 3632745805 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|best_rational| CONST-DECL "{q: rat | r1 <= q AND q <= r2}" |best_rational| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|sqrt_newton_step_fast_approx| SUBTYPE "fast_approx.brnewt" "posreal"))) (|sqrt_newton_fast_approx_TCC1| 0 (|sqrt_newton_fast_approx_TCC1-1| |nil| 3632746976 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sqrt_newton_fast_approx| SUBTYPE "number_fields./(((number_fields.-)(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.X)), fast_approx.eps)" "{x: reals.real | reals.>=(x, 1)}"))) (|sqrt_newton_fast_approx_TCC2| 0 (|sqrt_newton_fast_approx_TCC2-1| |nil| 3632746976 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sqrt_newton_fast_approx| SUBTYPE "number_fields./(((number_fields.-)(number_fields.*(fast_approx.z1`2, fast_approx.z1`2), fast_approx.z1`1)), fast_approx.z1`3)" "{x: reals.real | reals.>=(x, 1)}"))) (|sqrt_newton_fast_approx_TCC3| 0 (|sqrt_newton_fast_approx_TCC3-2| "" 3790099947 ("" (SKEEP) (("" (GROUND) NIL NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|sqrt_newton_fast_approx| SUBTYPE "fast_approx.Y" "{z: real_types.posreal | booleans.AND(reals.>=(number_fields.*(z, z), fast_approx.X), reals.<=((number_fields.-)(number_fields.*(z, z), fast_approx.X), fast_approx.eps))}")) (|sqrt_newton_fast_approx_TCC3-1| |nil| 3632761643 ("" (SKEEP) (("" (EXPAND "sqrt_newton_step_fast_approx") (("" (GROUND) (("" (LIFT-IF 2) (("" (GROUND) (("" (HIDE 1) (("" (CASE-REPLACE "(X/Y+Y) = (X+Y*Y)/Y") (("1" (CASE-REPLACE " (X + Y * Y) / Y / 2 = (X+Y*Y)/(2*Y)") (("1" (CASE-REPLACE "(X + Y * Y) / (2 * Y) * ((X + Y * Y) / (2 * Y)) = ((X + Y * Y) *(X + Y * Y)) /  (4 * Y*Y)") (("1" (MOVE-TERMS 1 R 1) (("1" (CASE-REPLACE " ((X + Y * Y) * (X + Y * Y)) / (4 * Y * Y) - X = ((X + Y * Y) * (X + Y * Y)-4*X*Y*Y) / (4 * Y * Y)") (("1" (CASE-REPLACE "(X + Y * Y) * (X + Y * Y) - 4 * X * Y * Y = (Y*Y - X)*(Y*Y-X)") (("1" (CASE-REPLACE "(Y * Y - X) * (Y * Y - X) = abs((Y * Y - X) * (Y * Y - X))") (("1" (CROSS-MULT 1) NIL NIL) ("2" (REWRITE "abs_square" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|sqrt_newton_fast_approx| SUBTYPE "fast_approx.Y" "{z: real_types.posreal | booleans.AND(reals.>=(number_fields.*(z, z), fast_approx.X), reals.<=((number_fields.-)(number_fields.*(z, z), fast_approx.X), fast_approx.eps))}"))) (|sqrt_newton_fast_approx_TCC4| 0 (|sqrt_newton_fast_approx_TCC4-1| |nil| 3632761643 ("" (SKEEP :PREDS? T) (("" (EXPAND "sqrt_newton_step_fast_approx") (("" (LIFT-IF 2) (("" (GROUND) (("" (FIELD 2) (("" (MOVE-TERMS 2 R 1) (("" (SIMPLIFY 2) (("" (CASE-REPLACE "(Y * Y * Y * Y) - 2 * (X * Y * Y) + (X * X) = (Y*Y-X)*(Y*Y-X)") (("1" (LEMMA "abs_square") (("1" (INST -1 "(Y*Y-X)") (("1" (REPLACES -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs_square| FORMULA-DECL NIL |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)) NIL (|sqrt_newton_fast_approx| SUBTYPE "fast_approx.sqrt_newton_step_fast_approx(fast_approx.X, fast_approx.Y, number_fields./(fast_approx.eps, 2))" "{Y | reals.>=(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.X)}"))) (|sqrt_newton_fast_approx_TCC5| 0 (|sqrt_newton_fast_approx_TCC5-1| |nil| 3632833805 ("" (SKEEP :PREDS? T) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (NAME "newt" "(Y+X/Y)/2") (("2" (CASE "newt>=sqrt_newton_step_fast_approx(X, Y, eps / 2)") (("1" (LEMMA "log_int_le") (("1" (MULT-INEQ -2 -2) (("1" (CASE "(sqrt_newton_step_fast_approx(X, Y, eps / 2) *
                  sqrt_newton_step_fast_approx(X, Y, eps / 2)
                  - X)/eps
                  >1") (("1" (CASE "(newt*newt-X)/eps >1") (("1" (INST -4 "4" "(sqrt_newton_step_fast_approx(X, Y, eps / 2) *
                  sqrt_newton_step_fast_approx(X, Y, eps / 2)-X)/eps" "(newt*newt-X)/eps") (("1" (GROUND) (("1" (EXPAND "log_int" -1) (("1" (CASE "log_nat((newt * newt - X) / eps, 4)`1<log_nat((Y * Y - X) / eps, 4)`1") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (HIDE (-1 -3 -4 -5)) (("2" (CASE "newt*newt-X = (((Y*Y-X)*(Y*Y-X))/(Y*Y))/4") (("1" (REPLACES -1) (("1" (LEMMA "log_nat_incr") (("1" (INST?) (("1" (GROUND) (("1" (FIELD 1) (("1" (GRIND-REALS 1) (("1" (FIELD 1) (("1" (BOTH-SIDES "-" "Y*Y*Y*Y" 1) (("1" (SIMPLIFY 1) (("1" (BOTH-SIDES "+" "X*Y*Y" 1) (("1" (SIMPLIFY 1) (("1" (BOTH-SIDES "*" "X" -8) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "newt") (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sqrt_newton_step_fast_approx") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (TYPEPRED "best_rational((X / Y + Y) / 2 - eps / 2, (X / Y + Y) / 2)") (("1" (GROUND) (("1" (EXPAND "newt") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "newt") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|both_sides_minus_le1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| |reals|) (|log_int| CONST-DECL "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int| |reals|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|newt| SKOLEM-CONST-DECL "posreal" |fast_approx| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (X SKOLEM-CONST-DECL "posreal" |fast_approx| NIL) (Y SKOLEM-CONST-DECL "{Y | Y * Y >= X}" |fast_approx| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |fast_approx| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|log_int_le| FORMULA-DECL NIL |log_int| |reals|) (|best_rational| CONST-DECL "{q: rat | r1 <= q AND q <= r2}" |best_rational| |reals|) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) NIL (|sqrt_newton_fast_approx| TERMINATION "fast_approx.sqrt_newton_fast_approx(fast_approx.X, fast_approx.sqrt_newton_step_fast_approx(fast_approx.X, fast_approx.Y, number_fields./(fast_approx.eps, 2)), fast_approx.eps)" "NIL"))) (|sqrt_fast_approx_gen_TCC1| 0 (|sqrt_fast_approx_gen_TCC1-1| |nil| 3632834727 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|sqrt_fast_approx_gen| SUBTYPE "fast_approx.x" "posreal"))) (|sqrt_fast_approx_gen_TCC2| 0 (|sqrt_fast_approx_gen_TCC2-1| |nil| 3632834727 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sqrt_newton_step_fast_approx") (("" (LIFT-IF 2) (("" (GROUND) (("" (FIELD 2) (("" (MOVE-TERMS 2 R 1) (("" (SIMPLIFY 2) (("" (CASE-REPLACE "(X * X * X * X) - 2 * (X * X * x) + (x * x) = (X*X-x)*(X*X-x)") (("1" (LEMMA "abs_square") (("1" (INST -1 "(X*X-x)") (("1" (REPLACES -1 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|abs_square| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) NIL (|sqrt_fast_approx_gen| SUBTYPE "fast_approx.sqrt_newton_step_fast_approx(fast_approx.x, fast_approx.X, fast_approx.delta)" "{Y | reals.>=(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.x)}"))) (|sqrt_fast_approx_TCC1| 0 (|sqrt_fast_approx_TCC1-1| |nil| 3632746976 ("" (SUBTYPE-TCC) NIL NIL) ((|safe_sqrt| CONST-DECL "real" |fast_approx| NIL)) NIL (|sqrt_fast_approx| SUBTYPE "fast_approx.X" "posreal"))) (|sqrt_fast_approx_det_TCC1| 0 (|sqrt_fast_approx_det_TCC1-1| |nil| 3633183920 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sqrt_newton_step_fast_approx") (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (FIELD 2) (("2" (MOVE-TERMS 2 R 1) (("2" (SIMPLIFY 2) (("2" (CASE "(M * M * M * M) - 2 * (M * M * x) + (x * x) = (M*M-x)*(M*M-x)") (("1" (REPLACES -1) (("1" (LEMMA "abs_square") (("1" (INST -1 "(M*M-x)") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "abs") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs_square| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)) NIL (|sqrt_fast_approx_det| SUBTYPE "fast_approx.sqrt_newton_step_fast_approx(fast_approx.x, fast_approx.M, fast_approx.delta)" "{Y | reals.>=(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.x)}"))) (|facto_it_TCC1| 0 (|facto_it_TCC1-1| |nil| 3632747390 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|facto_it| SUBTYPE "(number_fields.-)(fast_approx.n, 1)" "nat"))) (|facto_it_TCC2| 0 (|facto_it_TCC2-1| |nil| 3632747390 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|facto_it| TERMINATION "fast_approx.facto_it((number_fields.-)(fast_approx.n, 1), number_fields.*(fast_approx.n, fast_approx.m))" "NIL"))) (|pm1_TCC1| 0 (|pm1_TCC1-1| |nil| 3632747390 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|pm1| SUBTYPE "(number_fields.-)(fast_approx.n, 2)" "nat"))) (|pm1_TCC2| 0 (|pm1_TCC2-1| |nil| 3632747390 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|pm1| TERMINATION "fast_approx.pm1((number_fields.-)(fast_approx.n, 2))" "NIL"))) (|sin_approx_iter_TCC1| 0 (|sin_approx_iter_TCC1-1| |nil| 3632747390 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) NIL (|sin_approx_iter| SUBTYPE "(number_fields.*(number_fields.*(((number_fields.+)(number_fields.*(2, fast_approx.n), 1)), 2), fast_approx.n))" "nznum"))) (|sin_approx_iter_alt_TCC1| 0 (|sin_approx_iter_alt_TCC1-1| |nil| 3633258031 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_approx_iter_alt| SUBTYPE "(number_fields.-)(8, fast_approx.n)" "nat"))) (|sin_approx_iter_alt_TCC2| 0 (|sin_approx_iter_alt_TCC2-1| |nil| 3633258031 ("" (SKEEP) (("" (FLIP-INEQ 2) (("" (CROSS-MULT) NIL NIL)) NIL)) NIL) ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|sin_approx_iter_alt| SUBTYPE "number_fields./(fast_approx.c, fast_approx.eps)" "{x: reals.real | reals.>=(x, 1)}"))) (|sin_approx_iter_alt_TCC3| 0 (|sin_approx_iter_alt_TCC3-1| |nil| 3633258031 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sin_approx_iter_alt| SUBTYPE "(number_fields.-)(8, fast_approx.z`3)" "nat"))) (|sin_approx_iter_alt_TCC4| 0 (|sin_approx_iter_alt_TCC4-1| |nil| 3633258031 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sin_approx_iter_alt| SUBTYPE "number_fields./(fast_approx.z`5, fast_approx.z`2)" "{x: reals.real | reals.>=(x, 1)}"))) (|sin_approx_iter_alt_TCC5| 0 (|sin_approx_iter_alt_TCC5-2| "" 3790099964 ("" (SKEEP) (("" (GROUND) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|sin_approx_iter_alt| SUBTYPE "(number_fields.-)(8, fast_approx.n)" "nat")) (|sin_approx_iter_alt_TCC5-1| |nil| 3633258031 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SIMPLIFY 2) (("2" (MOVE-TERMS 2 R 1) (("2" (GROUND) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|sin_approx_iter_alt| SUBTYPE "(number_fields.-)(8, fast_approx.n)" "nat"))) (|sin_approx_iter_alt_TCC6| 0 (|sin_approx_iter_alt_TCC6-1| |nil| 3633349106 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sin_approx_iter_alt| SUBTYPE "number_fields./(fast_approx.c, fast_approx.eps)" "{x: reals.real | reals.>=(x, 1)}"))) (|sin_approx_iter_alt_TCC7| 0 (|sin_approx_iter_alt_TCC7-1| |nil| 3633349106 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (GRIND) NIL NIL) ("2" (HIDE (2 3 -2)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (FLIP-INEQ 3) (("2" (CASE "x/(2*(1+n))<=1/2") (("1" (CASE "x/(2*n+3)<= x/(2*(1+n))") (("1" (CASE "x/(2*n+3)<= 1/2") (("1" (CASE "x*x/(6 + 6 * n + (4 * (n * n) + 4 * n)) <= 1/4") (("1" (CASE "c<=c") (("1" (MULT-INEQ -1 -2) (("1" (CASE "C <= c/4") (("1" (GROUND) (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (MULT-INEQ -1 -3) (("2" (GROUND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lex2| CONST-DECL "ordinal" |lex2| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| |reals|) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) NIL (|sin_approx_iter_alt| TERMINATION "fast_approx.sin_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.B, fast_approx.C)" "NIL"))) (|sin_fast_approx_TCC1| 0 (|sin_fast_approx_TCC1-1| |nil| 3633350903 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sin_fast_approx| SUBTYPE "fast_approx.a" "{x | reals.<(fast_approx.x, 7)}"))) (|sin_fast_approx_TCC2| 0 (|sin_fast_approx_TCC2-1| |nil| 3633350903 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|sin_fast_approx| SUBTYPE "fast_approx.a" "nnreal"))) (|sin_fast_approx_TCC3| 0 (|sin_fast_approx_TCC3-2| "" 3884583616 ("" (SKEEP) (("" (GRIND) (("" (TYPEPRED ("a")) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|sin_fast_approx| SUBTYPE "(number_fields.-)(fast_approx.a)" "{x | reals.<(fast_approx.x, 7)}")) (|sin_fast_approx_TCC3-1| |nil| 3633350903 ("" (SKEEP) (("" (GRIND) (("" (TYPEPRED (A)) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|sin_fast_approx| SUBTYPE "(number_fields.-)(fast_approx.a)" "{x | reals.<(fast_approx.x, 7)}"))) (|sin_fast_approx_TCC4| 0 (|sin_fast_approx_TCC4-1| |nil| 3633350903 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sin_fast_approx| SUBTYPE "(number_fields.-)(fast_approx.a)" "nnreal"))) (|cos_approx_iter_alt_TCC1| 0 (|cos_approx_iter_alt_TCC1-2| "" 3790099966 ("" (SKEEP) (("" (GROUND) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|cos_approx_iter_alt| SUBTYPE "(number_fields.-)(8, fast_approx.z`3)" "nat")) (|cos_approx_iter_alt_TCC1-1| |nil| 3633351360 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (GRIND) NIL NIL) ("2" (HIDE (4 3 -2)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (FLIP-INEQ 3) (("2" (CASE "x/(2*(1+n))<=1/2") (("1" (CASE "x/(2*n+1)<= 1/2") (("1" (CASE "x * x / (2 + 2 * n + (4 * (n * n) + 4 * n))<=1/4") (("1" (CASE "c<=c") (("1" (MULT-INEQ -1 -2) (("1" (CASE "C <= c/4") (("1" (GROUND) (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (MULT-INEQ -1 -2) (("2" (GROUND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|cos_approx_iter_alt| SUBTYPE "(number_fields.-)(8, fast_approx.z`3)" "nat"))) (|cos_approx_iter_alt_TCC2| 0 (|cos_approx_iter_alt_TCC2-1| |nil| 3634296180 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|cos_approx_iter_alt| SUBTYPE "number_fields./(fast_approx.z`5, fast_approx.z`2)" "{x: reals.real | reals.>=(x, 1)}"))) (|cos_approx_iter_alt_TCC3| 0 (|cos_approx_iter_alt_TCC3-3| "" 3884583647 ("" (SKEEP) (("" (TYPEPRED ("c")) (("" (CASE "forall (nn:nat): pm1(nn)/=0") (("1" (INST -1 "n") (("1" (GROUND) NIL NIL)) NIL) ("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" -2) (("2" (LIFT-IF -2) (("2" (GROUND) (("2" (INST -2 "j-2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|cos_approx_iter_alt| SUBTYPE "(number_fields.+)(fast_approx.b, number_fields.*(fast_approx.pm1(fast_approx.n), fast_approx.c))" "nzreal")) (|cos_approx_iter_alt_TCC3-2| "" 3790099966 ("" (SKEEP) (("" (REPLACES -1) (("" (TYPEPRED (C)) (("" (CASE "forall (nn:nat): pm1(nn)/=0") (("1" (INST -1 "n") (("1" (GROUND) NIL NIL)) NIL) ("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" -2) (("2" (LIFT-IF -2) (("2" (GROUND) (("2" (INST -2 "j-2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) SHOSTAK (|cos_approx_iter_alt| SUBTYPE "(number_fields.+)(fast_approx.b, number_fields.*(fast_approx.pm1(fast_approx.n), fast_approx.c))" "nzreal")) (|cos_approx_iter_alt_TCC3-1| |nil| 3634296180 ("" (SKEEP) (("" (REPLACES -3) (("" (REPLACES -1) (("" (TYPEPRED (C)) (("" (CASE "forall (nn:nat): pm1(nn)/=0") (("1" (INST -1 "n") (("1" (GROUND) NIL NIL)) NIL) ("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" -2) (("2" (LIFT-IF -2) (("2" (GROUND) (("2" (INST -2 "j-2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|cos_approx_iter_alt| SUBTYPE "(number_fields.+)(fast_approx.b, number_fields.*(fast_approx.pm1(fast_approx.n), fast_approx.c))" "nzreal"))) (|cos_approx_iter_alt_TCC4| 0 (|cos_approx_iter_alt_TCC5-1| |nil| 3634296180 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (GRIND) NIL NIL) ("2" (HIDE (4 3 -2)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (FLIP-INEQ 3) (("2" (CASE "X/(2*(1+n))<=1/2") (("1" (CASE "X/(2*n+1)<= 1/2") (("1" (CASE "X * X / (2 + 2 * n + (4 * (n * n) + 4 * n))<=1/4") (("1" (CASE "c<=c") (("1" (MULT-INEQ -1 -2) (("1" (CASE "C <= c/4") (("1" (GROUND) (("1" (CROSS-MULT) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (MULT-INEQ -1 -2) (("2" (GROUND) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lex2| CONST-DECL "ordinal" |lex2| NIL) (< DEF-DECL "bool" |ordinals| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| |reals|) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) NIL (|cos_approx_iter_alt| TERMINATION "fast_approx.cos_approx_iter_alt(fast_approx.X, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.B, fast_approx.C)" "NIL"))) (|cos_approx_iter_alt_TCC5| 0 (|cos_approx_iter_alt_TCC5-1| "" 3884583689 ("" (SKEEP) (("" (TYPEPRED ("c")) (("" (TYPEPRED ("X")) (("" (CASE "c>0") (("1" (CASE "1/((2 * n + 1) * 2 * (n + 1))>0") (("1" (MULT-INEQ -2 -4) (("1" (MULT-INEQ -1 -5) (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|cos_approx_iter_alt| SUBTYPE "number_fields./(number_fields.*(number_fields.*(fast_approx.c, fast_approx.X), fast_approx.X), (number_fields.*(number_fields.*(((number_fields.+)(number_fields.*(2, fast_approx.n), 1)), 2), ((number_fields.+)(fast_approx.n, 1)))))" "{x: nnreal | x /= 0}")) (|cos_approx_iter_alt_TCC4-1| |nil| 3634296180 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (C)) (("" (SKEEP) (("" (TYPEPRED (X)) (("" (CASE "c>0") (("1" (CASE "1/((2 * n + 1) * 2 * (n + 1))>0") (("1" (MULT-INEQ -2 -4) (("1" (MULT-INEQ -1 -5) (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL)) NIL (|cos_approx_iter_alt| SUBTYPE "number_fields./(number_fields.*(number_fields.*(fast_approx.c, fast_approx.X), fast_approx.X), (number_fields.*(number_fields.*(((number_fields.+)(number_fields.*(2, fast_approx.n), 1)), 2), ((number_fields.+)(fast_approx.n, 1)))))" "{x: nnreal | x /= 0}"))) (|cos_fast_approx_TCC1| 0 (|cos_fast_approx_TCC1-1| |nil| 3633353466 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|cos_fast_approx| SUBTYPE "real_defs.abs(fast_approx.a)" "{X | reals.<(fast_approx.X, 7)}"))) (|cos_approx_iter_TCC1| 0 (|cos_approx_iter_TCC1-1| |nil| 3633356355 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) NIL (|cos_approx_iter| SUBTYPE "(number_fields.*(number_fields.*(2, fast_approx.n), ((number_fields.-)(number_fields.*(2, fast_approx.n), 1))))" "nznum"))) (|tan_pos_fast_approx_TCC1| 0 (|tan_pos_fast_approx_TCC1-1| |nil| 3634387747 ("" (SKEEP :PREDS? T) (("" (MULT-INEQ -7 -8) (("" (MULT-INEQ -6 -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|tan_pos_fast_approx| SUBTYPE "number_fields./(number_fields.*(number_fields.*(fast_approx.eps, fast_approx.CosLow), ((number_fields.-)(fast_approx.CosLow, fast_approx.eps))), 2)" "posreal"))) (|tan_pos_fast_approx_TCC2| 0 (|tan_pos_fast_approx_TCC2-1| |nil| 3634387747 ("" (SUBTYPE-TCC) NIL NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|tan_pos_fast_approx| SUBTYPE "fast_approx.X" "{a | reals.<(real_defs.abs(fast_approx.a), 7)}"))) (|tan_pos_fast_approx_TCC3| 0 (|tan_pos_fast_approx_TCC3-1| |nil| 3634387747 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|cos_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|tan_pos_fast_approx| SUBTYPE "fast_approx.cos_fast_approx(fast_approx.X, fast_approx.d2)" "nznum"))) (|tan_pos_inst1_TCC1| 0 (|tan_pos_inst1_TCC1-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|tan_pos_inst1| SUBTYPE "fast_approx.CL" "{CosLow: real_types.posreal | reals.>((number_fields.-)(CosLow, fast_approx.eps), 0)}"))) (|tan_pos_inst1_TCC2| 0 (|tan_pos_inst1_TCC2-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|tan_pos_inst1| SUBTYPE "(number_fields.+)(fast_approx.CL, number_fields./(number_fields.*(number_fields.*(number_fields.*(fast_approx.X, fast_approx.X), fast_approx.X), fast_approx.X), 24))" "posreal"))) (|tan_pos_inst2_TCC1| 0 (|tan_pos_inst2_TCC1-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|tan_pos_inst2| SUBTYPE "fast_approx.CL" "{CosLow: real_types.posreal | reals.>((number_fields.-)(CosLow, fast_approx.eps), 0)}"))) (|tan_pos_inst2_TCC2| 0 (|tan_pos_inst2_TCC2-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|tan_pos_inst2| SUBTYPE "8" "{i: integers.int | booleans.OR(fast_approx.X /= 0, reals.>=(i, 0))}"))) (|tan_pos_inst2_TCC3| 0 (|tan_pos_inst2_TCC3-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|tan_pos_inst2| SUBTYPE "(number_fields.+)(fast_approx.CL, number_fields./(exponentiation.^(fast_approx.X, 8), 40320))" "posreal"))) (|tan_pos_TCC1| 0 (|tan_pos_TCC1-1| |nil| 3634393340 ("" (SKEEP) (("" (MULT-INEQ -1 -1) (("" (SIMPLIFY -1) (("" (MOVE-TERMS 1 L 3) (("" (SIMPLIFY) (("" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_mult_pos_gt2| FORMULA-DECL NIL |extra_real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|tan_pos| SUBTYPE "fast_approx.eps" "{eps | reals.>((number_fields.-)((number_fields.-)(1, fast_approx.eps), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2)), 0)}"))) (|tan_pos_TCC2| 0 (|tan_pos_TCC2-1| |nil| 3634393340 ("" (SKEEP) (("" (METIT *) NIL NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|tan_pos| SUBTYPE "fast_approx.eps" "{eps | reals.>((number_fields.+)((number_fields.-)((number_fields.-)((number_fields.-)(1, fast_approx.eps), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2)), number_fields.*(number_fields.*(number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 12)), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 30))), number_fields.*(number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 12))), 0)}"))) (|tan_pos_TCC3| 0 (|tan_pos_TCC3-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)) NIL (|tan_pos| SUBTYPE "fast_approx.X" "{a | reals.<(real_defs.abs(fast_approx.a), 7)}"))) (|tan_pos_TCC4| 0 (|tan_pos_TCC4-1| |nil| 3634393340 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|cos_fast_approx| CONST-DECL "real" |fast_approx| NIL)) NIL (|tan_pos| SUBTYPE "fast_approx.cos_fast_approx(fast_approx.X, fast_approx.eps)" "nznum"))) (|tan_fast_approx_TCC1| 0 (|tan_fast_approx_TCC1-1| |nil| 3634481731 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|tan_fast_approx| SUBTYPE "(number_fields.-)(fast_approx.a)" "{X | reals.<(fast_approx.X, 7)}"))) (|atan_approx_iter_alt_TCC1| 0 (|atan_approx_iter_alt_TCC1-1| |nil| 3633357907 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|atan_approx_iter_alt| SUBTYPE "fast_approx.c" "nznum"))) (|atan_approx_iter_alt_TCC2| 0 (|atan_approx_iter_alt_TCC2-1| |nil| 3633357907 ("" (SKEEP) (("" (GROUND) (("" (FLIP-INEQ 1) (("" (CASE "(1+2*n)/c < 1/eps") (("1" (MOVE-TERMS -1 L 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|atan_approx_iter_alt| SUBTYPE "floor_ceil.ceiling((number_fields.-)(number_fields./(1, fast_approx.eps), number_fields./(((number_fields.+)(number_fields.*(2, fast_approx.n), 1)), fast_approx.c)))" "naturalnumber"))) (|atan_approx_iter_alt_TCC3| 0 (|atan_approx_iter_alt_TCC3-1| |nil| 3633360958 ("" (SUBTYPE-TCC) NIL NIL) ((|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|atan_approx_iter_alt| SUBTYPE "fast_approx.z`5" "nznum"))) (|atan_approx_iter_alt_TCC4| 0 (|atan_approx_iter_alt_TCC4-1| |nil| 3633360958 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|atan_approx_iter_alt| SUBTYPE "fast_approx.c" "nznum"))) (|atan_approx_iter_alt_TCC5| 0 (|atan_approx_iter_alt_TCC5-3| "" 3884583724 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED ("c")) (("" (TYPEPRED ("x")) (("" (MULT-INEQ -2 -2) (("" (MULT-INEQ -5 -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_approx_iter_alt| SUBTYPE "(number_fields.+)(fast_approx.B, number_fields./(fast_approx.eps, exponentiation.^(2, ((number_fields.+)(fast_approx.n, 1)))))" "{r2 | reals.<(fast_approx.B, best_rational.r2)}")) (|atan_approx_iter_alt_TCC5-2| "" 3790099972 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (C)) (("" (TYPEPRED (X)) (("" (MULT-INEQ -2 -2) (("" (MULT-INEQ -5 -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL)) SHOSTAK (|atan_approx_iter_alt| SUBTYPE "(number_fields.+)(fast_approx.B, number_fields./(fast_approx.eps, exponentiation.^(2, ((number_fields.+)(fast_approx.n, 1)))))" "{r2 | reals.<(fast_approx.B, best_rational.r2)}")) (|atan_approx_iter_alt_TCC5-1| |nil| 3633360958 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (C)) (("" (TYPEPRED (X)) (("" (MULT-INEQ -2 -2) (("" (MULT-INEQ -5 -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|atan_approx_iter_alt| SUBTYPE "(number_fields.+)(fast_approx.B, number_fields./(fast_approx.eps, exponentiation.^(2, ((number_fields.+)(fast_approx.n, 1)))))" "{r2 | reals.<(fast_approx.B, best_rational.r2)}"))) (|atan_approx_iter_alt_TCC6| 0 (|atan_approx_iter_alt_TCC6-2| "" 3884583797 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED ("C")) (("" (TYPEPRED ("c")) (("" (TYPEPRED ("x")) (("" (MULT-INEQ -2 -2) (("" (MULT-INEQ -5 -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_approx_iter_alt| SUBTYPE "fast_approx.C" "{c | reals.<=(fast_approx.c, 1)}")) (|atan_approx_iter_alt_TCC6-1| |nil| 3633360958 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (C)) (("" (TYPEPRED (C)) (("" (TYPEPRED (X)) (("" (MULT-INEQ -2 -2) (("" (MULT-INEQ -5 -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((<= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|atan_approx_iter_alt| SUBTYPE "fast_approx.C" "{c | reals.<=(fast_approx.c, 1)}"))) (|atan_approx_iter_alt_TCC7| 0 (|atan_approx_iter_alt_TCC7-3| "" 3884583910 ("" (SKEEP) (("" (SKEEP) (("" (HIDE -3) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (REPLACES -3) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -2) (("2" (FLIP-INEQ 3) (("2" (CASE "(1+2*n)/c < 1/eps") (("1" (MOVE-TERMS -1 L 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -2) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(2*(n+1)+1)/(c*x*x)>= (2*n+1)/c +2") (("1" (SWAP-REL -1) (("1" (MOVE-TERMS -1 R 1) (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 L 1) (("1" (BOTH-SIDES "+" "1/eps" -1) (("1" (GROUND) (("1" (REPLACES -4 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "(2*n+1)/(c*x*x)>=(2*n+1)/c") (("1" (CASE "2/(c*x*x)>=2") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED ("x")) (("2" (TYPEPRED ("c")) (("2" (MULT-INEQ -4 -4) (("2" (MULT-INEQ -1 -3) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (MULT-INEQ -2 -2) (("2" (CROSS-MULT) (("2" (CASE-REPLACE "2 * (c * n * x * x) = (2 *(c * n)) *( x * x)") (("1" (CASE "2 * (c * n)>=(2 * (c * n)) * (x * x) AND c >= c * x * x") (("1" (GROUND) NIL NIL) ("2" (CASE "2 * (c * n)>=(2 * (c * n))  AND c >= c ") (("1" (FLATTEN) (("1" (COPY -4) (("1" (SWAP-REL -2) (("1" (MULT-INEQ -1 -2) (("1" (SWAP-REL -4) (("1" (MULT-INEQ -4 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_approx_iter_alt| TERMINATION "fast_approx.atan_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.BB, fast_approx.C)" "NIL")) (|atan_approx_iter_alt_TCC7-2| |nil| 3634910906 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (HIDE -3) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (REPLACES -3) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -2) (("2" (FLIP-INEQ 3) (("2" (CASE "(1+2*n)/c < 1/eps") (("1" (MOVE-TERMS -1 L 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -2) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(2*(n+1)+1)/(c*x*x)>= (2*n+1)/c +2") (("1" (SWAP-REL -1) (("1" (MOVE-TERMS -1 R 1) (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 L 1) (("1" (BOTH-SIDES "+" "1/eps" -1) (("1" (GROUND) (("1" (REPLACES -4 :DIR RL) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "(2*n+1)/(c*x*x)>=(2*n+1)/c") (("1" (CASE "2/(c*x*x)>=2") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (X)) (("2" (TYPEPRED (C)) (("2" (MULT-INEQ -4 -4) (("2" (MULT-INEQ -1 -3) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (MULT-INEQ -2 -2) (("2" (CROSS-MULT) (("2" (CASE-REPLACE "2 * (c * n * x * x) = (2 *(c * n)) *( x * x)") (("1" (CASE "2 * (c * n)>=(2 * (c * n)) * (x * x) AND c >= c * x * x") (("1" (GROUND) NIL NIL) ("2" (CASE "2 * (c * n)>=(2 * (c * n))  AND c >= c ") (("1" (FLATTEN) (("1" (COPY -4) (("1" (SWAP-REL -2) (("1" (MULT-INEQ -1 -2) (("1" (SWAP-REL -4) (("1" (MULT-INEQ -4 -2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|x| SKOLEM-CONST-DECL "{x | x <= 1}" |fast_approx| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|c| SKOLEM-CONST-DECL "{c | c <= 1}" |fast_approx| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|atan_approx_iter_alt| TERMINATION "fast_approx.atan_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.BB, fast_approx.C)" "NIL")) (|atan_approx_iter_alt_TCC7-1| |nil| 3634910138 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|atan_approx_iter_alt| TERMINATION "fast_approx.atan_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.BB, fast_approx.C)" "NIL"))) (|atan_alt_TCC1| 0 (|atan_alt_TCC1-1| |nil| 3634910330 ("" (SKEEP) (("" (GROUND) (("" (EXPAND "min") (("" (LIFT-IF 2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|atan_alt| SUBTYPE "real_defs.min((number_fields.+)(fast_approx.x, number_fields./(fast_approx.eps, 3)), 1)" "{r2 | reals.<(fast_approx.x, best_rational.r2)}"))) (|atan_alt_TCC2| 0 (|atan_alt_TCC2-1| |nil| 3634910330 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|atan_alt| SUBTYPE "fast_approx.X" "{x | reals.<=(fast_approx.x, 1)}"))) (|pi_fast_approx_br_TCC1| 0 (|pi_fast_approx_br_TCC1-1| |nil| 3633879872 ("" (SUBTYPE-TCC) NIL NIL) ((|atan_alt| CONST-DECL "real" |fast_approx| NIL) (|pi_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|pi_fast_approx_br| SUBTYPE "(number_fields.+)(fast_approx.piclose, fast_approx.e)" "{r2 | reals.<((number_fields.-)(fast_approx.piclose, fast_approx.e), best_rational.r2)}"))) (|atan_approx_pos_le1_alt_TCC1| 0 (|atan_approx_pos_le1_alt_TCC1-1| |nil| 3633699608 ("" (SKEEP :PREDS? T) (("" (EXPAND "reduce_approx") (("" (GROUND) (("" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|reduce_approx| CONST-DECL "real" |fast_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|atan_approx_pos_le1_alt| SUBTYPE "fast_approx.reduce_approx(fast_approx.X, number_fields./(fast_approx.eps, fast_approx.X))" "{x | reals.<=(fast_approx.x, 1)}"))) (|atan_approx_pos_TCC1| 0 (|atan_approx_pos_TCC1-1| |nil| 3633970790 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|atan_approx_pos| SUBTYPE "number_fields./(1, fast_approx.X)" "{X | reals.<=(fast_approx.X, 1)}"))) (|atan_fast_approx_TCC1| 0 (|atan_fast_approx_TCC1-1| |nil| 3633879872 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|atan_fast_approx| SUBTYPE "fast_approx.x" "posreal"))) (|atan_fast_approx_TCC2| 0 (|atan_fast_approx_TCC2-1| |nil| 3633879872 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|atan_fast_approx| SUBTYPE "(number_fields.-)(fast_approx.x)" "posreal"))))
