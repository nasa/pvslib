atan_props : THEORY
BEGIN

  IMPORTING fast_approx, sqrt_prop, trig@atan_approx

  reduce_less: LEMMA FORALL ( x:nnreal, eps:posreal):
    reduce_approx(x,eps)<= reduce_fun(x) 

  reduce_close: LEMMA FORALL ( x:nnreal , eps:posreal):
   reduce_fun(x) -reduce_approx(x,eps) <= x*eps/4

  atan_of_sum: LEMMA FORALL ( x,y:nnreal):
    atan(x)<=atan(x+y) AND 
    atan(x+y)<=atan(x) +y

  atan_reduce_close: LEMMA FORALL (x:nnreal, eps:posreal):
    2*atan(reduce_approx(x,eps))<= atan(x) AND
    atan(x) <= 2*(atan(reduce_approx(x,eps))) +x*eps/2

  eps_sig(eps:posreal, n:posnat): {z:posreal | z<= eps} = sigma(1,n, LAMBDA (k:nat): eps/2^k) 

  eps_sig_next: LEMMA FORALL (eps:posreal, n:posnat): eps_sig(eps, n)+eps/2^(n+1) = eps_sig(eps, n+1)

  atan_iter_alt_series: LEMMA FORALL ((x:nnreal |x<=1), eps:posreal,
      n:nat, (b:real | LET B= IF n=0 THEN 0 ELSE atan_series_n(x,n-1) ENDIF 
           IN B<=b AND b<= B+ IF n=0 THEN 0 ELSE eps_sig(eps,n) ENDIF), 
      (c:nnreal | c<=1 AND c=x^(2*n+1) AND c/(2*n+1)>eps AND c*x^2/(2*n+3)<=eps)): 
   EXISTS (epsum:nnreal| epsum<=eps_sig(eps, n+1)): 
   atan_approx_iter_alt(x,eps,n,b,c) = atan_series_n(x,n)+epsum 

  atan_iter_alt_series2: LEMMA FORALL ((x:nnreal |x<=1), eps:posreal,
      n:nat, m:posnat, (b:real | LET B= IF n=0 THEN 0 ELSE atan_series_n(x,n-1) ENDIF 
           IN B<=b AND b<= B+ IF n=0 THEN 0 ELSE eps_sig(eps,n) ENDIF), 
      (c:nnreal | c<=1 AND c=x^(2*n+1) AND (FORALL (mm:below(m)): c*x^(2*mm)/(2*(n+mm)+1)>eps) AND c*x^(2*m)/(2*(n+m)+1)<=eps)):
   EXISTS (epsum:nnreal| epsum<=eps_sig(eps, n+m)): 
   atan_approx_iter_alt(x,eps,n,b,c) = atan_series_n(x,(n+m-1)) +epsum

  atan_alt_series: LEMMA FORALL ((x:nnreal |x<=1), eps:posreal, 
     (n:posnat | (FORALL (m:below(n)): x^(2*m+1)/(2*m+1)>eps) AND x^(2*n+1)/(2*n+1)<=eps)):
    EXISTS (delt: nnreal | delt<=eps): 
    atan_approx_iter_alt(x,eps,0,0,x) = atan_series_n(x,n-1)+delt

  bounding?((x:posreal |x<=1), eps:posreal, n:nat): bool = x^(2*n+1)/(2*n+1)<=eps
 
  bound_iter((x:posreal | x<=1), eps:posreal, (n:nat| x^(2*n+1)/(2*n+1)>eps)) : 
    RECURSIVE {nn:posnat| (FORALL (m:below(nn)): x^(2*m+1)/(2*m+1)>eps) AND x^(2*nn+1)/(2*nn+1)<=eps } = 
     IF bounding?(x,eps, n+1) THEN n+1 
     ELSE bound_iter(x, eps, n+1)
     ENDIF
     MEASURE LET N = 2*n+3 IN  IF x^N/(N)<=eps THEN 0 ELSE ceiling(1/eps-(N)/x^N) ENDIF
       

  iter_bound: LEMMA FORALL ((x:nnreal | x<=1), eps:posreal):
    x<=eps OR (EXISTS (n:posnat): (FORALL (m:below(n)): x^(2*m+1)/(2*m+1)>eps) AND x^(2*n+1)/(2*n+1)<=eps )

  atan_alt_bound1: LEMMA FORALL ((x:nnreal | x<=1), eps:posreal):
      abs(atan(x)-atan_alt(x,eps)) <= eps

  atan_alt_bound2: LEMMA FORALL  ((x:posreal | x<=1), eps:posreal):
      abs(atan(x)-atan_approx_pos_le1_alt(x,eps)) <= eps

  atan_alt_bound3: LEMMA FORALL (x,eps:posreal, 
               (pihalf:posreal | abs(pi/2-pihalf)<=eps/2)):
  abs(atan(x)-atan_approx_pos(x, eps, pihalf))<=eps 

  atan_fast_approx_bound: LEMMA FORALL (x:real, eps:posreal, 
               (pihalf:posreal | abs(pi/2-pihalf)<=eps/2)):
  abs(atan(x)-atan_fast_approx_pihalf(x, eps, pihalf))<=eps  

  pi_bound: LEMMA FORALL (eps:posreal):
          abs(pi - pi_fast_approx(eps))<= eps 
 
  pi_br_bound: LEMMA FORALL (eps:posreal):
          abs(pi - pi_fast_approx_br(eps))<=eps

  
  pihalf_bound: LEMMA FORALL (eps:posreal):
          abs(pi/2 - pihalf_fast_approx(eps))<= eps/2 
 
  pihalf_br_bound: LEMMA FORALL (eps:posreal):
          abs(pi/2 - pihalf_fast_approx_br(eps))<=eps/2
  
END atan_props
