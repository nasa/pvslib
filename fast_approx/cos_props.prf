(|cos_props| (|cos_iter_alt_series_TCC1| 0 (|cos_iter_alt_series_TCC1-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|cos_iter_alt_series| SUBTYPE "(number_fields.-)(cos_props.n, 1)" "nat"))) (|cos_iter_alt_series_TCC2| 0 (|cos_iter_alt_series_TCC2-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cos_iter_alt_series| SUBTYPE "(number_fields.*(2, cos_props.n))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|cos_iter_alt_series_TCC3| 0 (|cos_iter_alt_series_TCC3-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cos_iter_alt_series| SUBTYPE "2" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|cos_iter_alt_series_TCC4| 0 (|cos_iter_alt_series_TCC4-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cos_iter_alt_series| SUBTYPE "cos_props.c" "{c | fast_approx.c /= 0}"))) (|cos_iter_alt_series| 0 (|cos_iter_alt_series-3| "" 3884582758 ("" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "cos_approx_iter_alt") (("1" (REWRITE "expt_x2") (("1" (EXPAND "cos_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF -8) (("1" (SPLIT -8) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "pm1") (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (REPLACES -9) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cos_approx") (("1" (REWRITE "sigma_last" 2) (("1" (REPLACES -1 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "cos_term") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACES -9) (("2" (INST -11 "n") (("2" (REPLACES -11) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cos_approx") (("2" (REWRITE "sigma_last" 1) (("2" (REWRITE "sigma_last" 1) (("2" (REPLACES -3 :DIR RL) (("2" (SIMPLIFY 1) (("2" (INST-CP -14 "1+n") (("2" (INST -14 "n") (("2" (REPLACES -14) (("2" (REPLACES -14) (("2" (REPLACE -11 1) (("2" (EXPAND "cos_term") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SIMPLIFY 2) (("2" (REWRITE "expt_plus" 2) (("2" (REWRITE "expt_plus" 2) (("2" (REWRITE "expt_x2") (("2" (EXPAND "factorial" 2 3) (("2" (EXPAND "factorial" 2 4) (("2" (EXPAND "factorial" 2 5) (("2" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cos_iter_alt_series-2| "" 3790099992 ("" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "cos_approx_iter_alt") (("1" (REWRITE "expt_x2") (("1" (EXPAND "cos_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF -8) (("1" (SPLIT -8) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "pm1") (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (REPLACES -9) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cos_approx") (("1" (REWRITE "sigma_last" 2) (("1" (REPLACES -1 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "cos_term") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACES -9) (("2" (INST -11 "n") (("2" (REPLACES -11) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cos_approx") (("2" (REWRITE "sigma_last" 1) (("2" (REWRITE "sigma_last" 1) (("2" (REPLACES -3 :DIR RL) (("2" (SIMPLIFY 1) (("2" (INST-CP -14 "1+n") (("2" (INST -14 "n") (("2" (REPLACES -14) (("2" (REPLACES -14) (("2" (REPLACE -11 1) (("2" (EXPAND "cos_term") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SIMPLIFY 2) (("2" (REWRITE "expt_plus" 2) (("2" (REWRITE "expt_plus" 2) (("2" (REWRITE "expt_x2") (("2" (EXPAND "factorial" 2 3) (("2" (EXPAND "factorial" 2 4) (("2" (EXPAND "factorial" 2 5) (("2" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|cos_term| CONST-DECL "real" |trig_approx| |trig|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|cos_approx_iter_alt| DEF-DECL "nzreal" |fast_approx| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)) SHOSTAK) (|cos_iter_alt_series-1| |nil| 3634305350 ("" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (SKEEP :PREDS? T) (("1" (EXPAND "cos_approx_iter_alt") (("1" (REWRITE "expt_x2") (("1" (EXPAND "cos_approx_iter_alt") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LIFT-IF -8) (("1" (SPLIT -8) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "pm1") (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (REPLACES -9) (("1" (GROUND) (("1" (REWRITE "expt_x0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cos_approx") (("1" (REWRITE "sigma_last" 2) (("1" (REPLACES -1 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "cos_term") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACES -9) (("2" (INST -11 "n") (("2" (REPLACES -11) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cos_approx") (("2" (REWRITE "sigma_last" 1) (("2" (REWRITE "sigma_last" 1) (("2" (REPLACES -3 :DIR RL) (("2" (SIMPLIFY 1) (("2" (INST-CP -14 "1+n") (("2" (INST -14 "n") (("2" (REPLACES -14) (("2" (REPLACES -14) (("2" (REPLACE -11 1) (("2" (EXPAND "cos_term") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SIMPLIFY 2) (("2" (REWRITE "expt_plus" 2) (("2" (REWRITE "expt_plus" 2) (("2" (REWRITE "expt_x2") (("2" (EXPAND "factorial" 2 3) (("2" (EXPAND "factorial" 2 4) (("2" (EXPAND "factorial" 2 5) (("2" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|cos_iter_alt_series2_TCC1| 0 (|cos_iter_alt_series2_TCC1-1| |nil| 3634308423 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL)) NIL (|cos_iter_alt_series2| SUBTYPE "(number_fields.*(2, cos_props.mm))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|cos_iter_alt_series2_TCC2| 0 (|cos_iter_alt_series2_TCC2-1| |nil| 3634308423 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cos_iter_alt_series2| SUBTYPE "(number_fields.*(2, cos_props.m))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|cos_iter_alt_series2_TCC3| 0 (|cos_iter_alt_series2_TCC3-1| |nil| 3634308423 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL)) NIL (|cos_iter_alt_series2| SUBTYPE "number_fields./(cos_props.c, factorial.factorial(number_fields.*(2, cos_props.n)))" "{c | fast_approx.c /= 0}"))) (|cos_iter_alt_series2_TCC4| 0 (|cos_iter_alt_series2_TCC4-1| |nil| 3634308423 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|cos_iter_alt_series2| SUBTYPE "cos_props.N" "nat"))) (|cos_iter_alt_series2| 0 (|cos_iter_alt_series2-3| "" 3884582990 ("" (INDUCT "m") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (SKEEP) (("4" (SKEEP :PREDS? T) (("4" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (CASE "j=0") (("1" (REPLACES -1) (("1" (HIDE -13) (("1" (SIMPLIFY 1) (("1" (LEMMA "cos_iter_alt_series") (("1" (INST -1 "x" "eps" "n" "b" "c / factorial(2 * n)") (("1" (GROUND) (("1" (REWRITE "sigma_eq_arg") (("1" (REPLACES -11) (("1" (INST -2 "n") (("1" (REPLACES -2) (("1" (EXPAND "cos_term") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "expt_x0") (("1" (REWRITE "expt_x0") (("1" (EXPAND "factorial" -1 2) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (CASE-REPLACE "(IF NOT (-1) ^ n * (x ^ (2 * n) / factorial(2 * n)) + b =
                          0
                    THEN n
                  ELSE 1 + n
                  ENDIF) = (IF NOT (-1) ^ n * x ^ (2 * n) / factorial(2 * n) + b = 0
                    THEN n
                  ELSE 1 + n
                  ENDIF)") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -11 "0") (("2" (SIMPLIFY) (("2" (REWRITE "expt_x0") (("2" (SIMPLIFY) (("2" (GROUND) (("2" (EXPAND "factorial" -12) (("2" (EXPAND "factorial" -12) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "cos_approx_iter_alt" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (SIMPLIFY) (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "x" "eps" "1+n" "pm1(n) * (c / factorial(2 * n)) + b" "c*x^2") (("1" (CASE "c / factorial(2 * n) * x * x /
                           (2 + 2 * n + (4 * (n * n) + 4 * n)) = c * x ^ 2 / factorial(2 * (1 + n))") (("1" (REPLACES -1) (("1" (CASE "pm1(n) * (c / factorial(2 * n)) + b +
                          sigma(1 + n, 1 + n - 1 + j, cos_term(x)) = sigma(n, j + n, cos_term(x)) + b") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (LEMMA "sigma_first") (("2" (INST -1 "cos_term(x)" "j+n" "n") (("2" (GROUND) (("2" (REPLACES -1) (("2" (SIMPLIFY 1) (("2" (INST -2 "n") (("2" (REPLACES -2) (("2" (REPLACES -10) (("2" (EXPAND "cos_term") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x2" 1) (("2" (SIMPLIFY 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 1) (("2" (REWRITE "expt_plus" 1) (("2" (GROUND) (("1" (REPLACE -10 -11) (("1" (SKEEP) (("1" (INST -11 "mm+1") (("1" (SIMPLIFY) (("1" (REWRITE "expt_plus" -11) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 -12) (("2" (REWRITE "expt_plus" -12) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -10) (("3" (INST -1 "n") (("3" (REPLACES -1) (("3" (LIFT-IF -7) (("3" (SPLIT -7) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (HIDE 3) (("1" (EXPAND "cos_term") (("1" (GRIND 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cos_approx") (("2" (REWRITE "sigma_last" 2) (("2" (REPLACES -1 :DIR RL) (("2" (SIMPLIFY 2) (("2" (EXPAND "cos_term") (("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) (("5" (GROUND) (("5" (LIFT-IF -2) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (CROSS-MULT) (("6" (GROUND) (("6" (TYPEPRED ("c")) (("6" (SIMPLIFY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cos_iter_alt_series2-2| "" 3790100000 ("" (INDUCT "m") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (SKEEP) (("4" (SKEEP :PREDS? T) (("4" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (CASE "j=0") (("1" (REPLACES -1) (("1" (HIDE -13) (("1" (SIMPLIFY 1) (("1" (LEMMA "cos_iter_alt_series") (("1" (INST -1 "x" "eps" "n" "b" "c / factorial(2 * n)") (("1" (GROUND) (("1" (REWRITE "sigma_eq_arg") (("1" (REPLACES -11) (("1" (INST -2 "n") (("1" (REPLACES -2) (("1" (EXPAND "cos_term") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "expt_x0") (("1" (REWRITE "expt_x0") (("1" (EXPAND "factorial" -1 2) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (CASE-REPLACE "(IF NOT (-1) ^ n * (x ^ (2 * n) / factorial(2 * n)) + b =
                          0
                    THEN n
                  ELSE 1 + n
                  ENDIF) = (IF NOT (-1) ^ n * x ^ (2 * n) / factorial(2 * n) + b = 0
                    THEN n
                  ELSE 1 + n
                  ENDIF)") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -11 "0") (("2" (SIMPLIFY) (("2" (REWRITE "expt_x0") (("2" (SIMPLIFY) (("2" (GROUND) (("2" (EXPAND "factorial" -12) (("2" (EXPAND "factorial" -12) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "cos_approx_iter_alt" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (SIMPLIFY) (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "x" "eps" "1+n" "pm1(n) * (c / factorial(2 * n)) + b" "c*x^2") (("1" (CASE "c / factorial(2 * n) * x * x /
                           (2 + 2 * n + (4 * (n * n) + 4 * n)) = c * x ^ 2 / factorial(2 * (1 + n))") (("1" (REPLACES -1) (("1" (CASE "pm1(n) * (c / factorial(2 * n)) + b +
                          sigma(1 + n, 1 + n - 1 + j, cos_term(x)) = sigma(n, j + n, cos_term(x)) + b") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (LEMMA "sigma_first") (("2" (INST -1 "cos_term(x)" "j+n" "n") (("2" (GROUND) (("2" (REPLACES -1) (("2" (SIMPLIFY 1) (("2" (INST -2 "n") (("2" (REPLACES -2) (("2" (REPLACES -10) (("2" (EXPAND "cos_term") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x2" 1) (("2" (SIMPLIFY 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 1) (("2" (REWRITE "expt_plus" 1) (("2" (GROUND) (("1" (REPLACE -10 -11) (("1" (SKEEP) (("1" (INST -11 "mm+1") (("1" (SIMPLIFY) (("1" (REWRITE "expt_plus" -11) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 -12) (("2" (REWRITE "expt_plus" -12) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -10) (("3" (INST -1 "n") (("3" (REPLACES -1) (("3" (LIFT-IF -7) (("3" (SPLIT -7) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (HIDE 3) (("1" (EXPAND "cos_term") (("1" (GRIND 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cos_approx") (("2" (REWRITE "sigma_last" 2) (("2" (REPLACES -1 :DIR RL) (("2" (SIMPLIFY 2) (("2" (EXPAND "cos_term") (("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) (("5" (GROUND) (("5" (LIFT-IF -2) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (CROSS-MULT) (("6" (GROUND) (("6" (TYPEPRED (C)) (("6" (SIMPLIFY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| |reals|) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|b| SKOLEM-CONST-DECL "{b: real | b = IF n = 0 THEN 0 ELSE cos_approx(x, n - 1) ENDIF}" |cos_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|c| SKOLEM-CONST-DECL "{c: nnreal |
   c = x ^ (2 * n) AND
    (FORALL (mm: below(1 + j)):
       c * x ^ (2 * mm) / factorial(2 * mm + 2 * n) > eps)
     AND (c * x ^ (2 + 2 * j)) / factorial(2 + 2 * j + 2 * n) <= eps}" |cos_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |cos_props| NIL) (|j| SKOLEM-CONST-DECL "nat" |cos_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |cos_props| NIL) (|x| SKOLEM-CONST-DECL "{x: posreal | x < 7}" |cos_props| NIL) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| |reals|) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|cos_iter_alt_series| FORMULA-DECL NIL |cos_props| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|cos_approx_iter_alt| DEF-DECL "nzreal" |fast_approx| NIL) (|cos_term| CONST-DECL "real" |trig_approx| |trig|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK) (|cos_iter_alt_series2-1| |nil| 3634308424 ("" (INDUCT "m") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (SKEEP) (("4" (SKEEP :PREDS? T) (("4" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (CASE "j=0") (("1" (REPLACES -1) (("1" (HIDE -13) (("1" (SIMPLIFY 1) (("1" (LEMMA "cos_iter_alt_series") (("1" (INST -1 "x" "eps" "n" "b" "c / factorial(2 * n)") (("1" (GROUND) (("1" (REWRITE "sigma_eq_arg") (("1" (REPLACES -11) (("1" (INST -2 "n") (("1" (REPLACES -2) (("1" (EXPAND "cos_term") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "expt_x0") (("1" (REWRITE "expt_x0") (("1" (EXPAND "factorial" -1 2) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("2" (CASE-REPLACE "(IF NOT (-1) ^ n * (x ^ (2 * n) / factorial(2 * n)) + b =
                          0
                    THEN n
                  ELSE 1 + n
                  ENDIF) = (IF NOT (-1) ^ n * x ^ (2 * n) / factorial(2 * n) + b = 0
                    THEN n
                  ELSE 1 + n
                  ENDIF)") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -11 "0") (("2" (SIMPLIFY) (("2" (REWRITE "expt_x0") (("2" (SIMPLIFY) (("2" (GROUND) (("2" (EXPAND "factorial" -12) (("2" (EXPAND "factorial" -12) (("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (EXPAND "cos_approx_iter_alt" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (SIMPLIFY) (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "x" "eps" "1+n" "pm1(n) * (c / factorial(2 * n)) + b" "c*x^2") (("1" (CASE "c / factorial(2 * n) * x * x /
                           (2 + 2 * n + (4 * (n * n) + 4 * n)) = c * x ^ 2 / factorial(2 * (1 + n))") (("1" (REPLACES -1) (("1" (CASE "pm1(n) * (c / factorial(2 * n)) + b +
                          sigma(1 + n, 1 + n - 1 + j, cos_term(x)) = sigma(n, j + n, cos_term(x)) + b") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (SIMPLIFY 1) (("2" (LEMMA "sigma_first") (("2" (INST -1 "cos_term(x)" "j+n" "n") (("2" (GROUND) (("2" (REPLACES -1) (("2" (SIMPLIFY 1) (("2" (INST -2 "n") (("2" (REPLACES -2) (("2" (REPLACES -10) (("2" (EXPAND "cos_term") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x2" 1) (("2" (SIMPLIFY 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 1) (("2" (REWRITE "expt_plus" 1) (("2" (GROUND) (("1" (REPLACE -10 -11) (("1" (SKEEP) (("1" (INST -11 "mm+1") (("1" (SIMPLIFY) (("1" (REWRITE "expt_plus" -11) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -10 -12) (("2" (REWRITE "expt_plus" -12) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -10) (("3" (INST -1 "n") (("3" (REPLACES -1) (("3" (LIFT-IF -7) (("3" (SPLIT -7) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (HIDE 3) (("1" (EXPAND "cos_term") (("1" (GRIND 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cos_approx") (("2" (REWRITE "sigma_last" 2) (("2" (REPLACES -1 :DIR RL) (("2" (SIMPLIFY 2) (("2" (EXPAND "cos_term") (("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) (("5" (GROUND) (("5" (LIFT-IF -2) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (CROSS-MULT) (("6" (GROUND) (("6" (TYPEPRED (C)) (("6" (SIMPLIFY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (GROUND) NIL NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|cos_iter_alt_series3_TCC1| 0 (|cos_iter_alt_series3_TCC1-1| |nil| 3634380006 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cos_iter_alt_series3| SUBTYPE "(number_fields.*(2, cos_props.m))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|cos_iter_alt_series3_TCC2| 0 (|cos_iter_alt_series3_TCC2-1| |nil| 3634380006 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|cos_iter_alt_series3| SUBTYPE "(number_fields.*(2, cos_props.n))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|cos_iter_alt_series3_TCC3| 0 (|cos_iter_alt_series3_TCC3-1| |nil| 3634380006 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|cos_iter_alt_series3| SUBTYPE "(number_fields.-)(cos_props.n, 1)" "nat"))) (|cos_iter_alt_series3_TCC4| 0 (|cos_iter_alt_series3_TCC4-1| |nil| 3634380006 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (<= CONST-DECL "bool" |reals| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|cos_iter_alt_series3| SUBTYPE "cos_props.N" "nat"))) (|cos_iter_alt_series3| 0 (|cos_iter_alt_series3-2| "" 3790100003 ("" (SKEEP :PREDS? T) (("" (LEMMA "cos_iter_alt_series2") (("" (GROUND) (("" (INST -1 "x" "eps" "0" "n" "0" "1") (("1" (EXPAND "factorial" -1) (("1" (EXPAND "cos_approx" 1 2) (("1" (GROUND) (("1" (CASE "(NOT sigma(0, n - 1, cos_term(x)) = 0) = (sigma(0, n - 1, cos_term(x)) /= 0)") (("1" (REPLACES -1) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_iter_alt_series2| FORMULA-DECL NIL |cos_props| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "{n: posnat |
   (FORALL (m: below(n)): x ^ (2 * m) / factorial(2 * m) > eps) AND
    x ^ (2 * n) / factorial(2 * n) <= eps}" |cos_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |cos_props| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|x| SKOLEM-CONST-DECL "{x: posreal | x < 7}" |cos_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|cos_term| CONST-DECL "real" |trig_approx| |trig|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) SHOSTAK) (|cos_iter_alt_series3-1| |nil| 3634380404 ("" (SKEEP :PREDS? T) (("" (LEMMA "cos_iter_alt_series2") (("" (GROUND) (("" (INST -1 "x" "eps" "0" "n" "0" "1") (("1" (EXPAND "factorial" -1) (("1" (EXPAND "cos_approx" 1 2) (("1" (GROUND) (("1" (CASE "(NOT sigma(0, n - 1, cos_term(x)) = 0) = (sigma(0, n - 1, cos_term(x)) /= 0)") (("1" (REPLACES -1) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x0") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|bounding?_TCC1| 0 (|bounding?_TCC1-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|bounding?| SUBTYPE "(number_fields.*(2, cos_props.n))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC1| 0 (|bound_iter_TCC1-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.*(2, cos_props.m))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC2| 0 (|bound_iter_TCC2-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bound_iter| SUBTYPE "((number_fields.+)(number_fields.*(2, cos_props.n), 2))" "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC3| 0 (|bound_iter_TCC3-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.-)(8, cos_props.n)" "nat"))) (|bound_iter_TCC4| 0 (|bound_iter_TCC4-1| |nil| 3634305349 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "number_fields./((number_fields./(exponentiation.^(cos_props.x, ((number_fields.+)(number_fields.*(2, cos_props.n), 2))), factorial.factorial((number_fields.+)(number_fields.*(2, cos_props.n), 2)))), cos_props.eps)" "{x: reals.real | reals.>=(x, 1)}"))) (|bound_iter_TCC5| 0 (|bound_iter_TCC5-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bound_iter| SUBTYPE "((number_fields.+)(number_fields.*(2, cos_props.z`3), 2))" "{i: integers.int | booleans.OR(cos_props.z`1 /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC6| 0 (|bound_iter_TCC6-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.-)(8, cos_props.z`3)" "nat"))) (|bound_iter_TCC7| 0 (|bound_iter_TCC7-1| |nil| 3634305349 ("" (SKEEP) (("" (CROSS-MULT) NIL NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "number_fields./((number_fields./(exponentiation.^(cos_props.z`1, ((number_fields.+)(number_fields.*(2, cos_props.z`3), 2))), factorial.factorial((number_fields.+)(number_fields.*(2, cos_props.z`3), 2)))), cos_props.z`2)" "{x: reals.real | reals.>=(x, 1)}"))) (|bound_iter_TCC8| 0 (|bound_iter_TCC8-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|bounding?| CONST-DECL "bool" |cos_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(cos_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(cos_props.x, (number_fields.*(2, m))), factorial.factorial(number_fields.*(2, m))), cos_props.eps), reals.<=(number_fields./(exponentiation.^(cos_props.x, (number_fields.*(2, nn))), factorial.factorial(number_fields.*(2, nn))), cos_props.eps))}"))) (|bound_iter_TCC9| 0 (|bound_iter_TCC9-1| |nil| 3634305349 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|bounding?| CONST-DECL "bool" |cos_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(cos_props.n, 1)" "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below((number_fields.+)(n, 1))): reals.>(number_fields./(exponentiation.^(cos_props.x, (number_fields.*(2, m))), factorial.factorial(number_fields.*(2, m))), cos_props.eps)}"))) (|bound_iter_TCC10| 0 (|bound_iter_TCC10-3| "" 3884583086 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL) ("2" (LIFT-IF 2) (("2" (GROUND) (("1" (CASE-REPLACE "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (CASE "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLIP-INEQ 2) (("2" (CASE "x^2<=49") (("1" (CASE "1/(4+2*n)<=1/7") (("1" (CASE "1/(3+2*n)<=1/7") (("1" (MULT-INEQ -2 -1) (("1" (MULT-INEQ -4 -1) (("1" (GROUND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 3) (("2" (CASE-REPLACE "4+2*n = 2+(2+2*n)") (("1" (REWRITE "expt_plus" 1) (("1" (FIELD) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL) ("3" (NAME "C" "((x ^ (4 + 2 * n)) / factorial(4 + 2 * n))") (("3" (REPLACE -1) (("3" (NAME-REPLACE "c" "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("3" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 6)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (CASE "C <= c/4") (("1" (CROSS-MULT) (("1" (CASE "eps<=eps") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "C") (("2" (EXPAND "c") (("2" (CASE-REPLACE "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (CASE "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1/4") (("1" (CASE "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))<= ((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (CASE "1/(3+2*n)<=1/14") (("1" (CASE "1/(4+2*n)<=1/14") (("1" (CASE "x<=7") (("1" (MULT-INEQ -1 -1) (("1" (MULT-INEQ -1 -3) (("1" (MULT-INEQ -1 -5) (("1" (REWRITE "expt_x2" 1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "4+2*n = 2+(2+2*n)") (("1" (REWRITE "expt_plus") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" 1 1) (("1" (EXPAND "factorial" 1 1) (("1" (EXPAND "factorial" 1 3) (("1" (NAME "fac" "factorial(2+2*n)") (("1" (REPLACES -1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bound_iter| TERMINATION "cos_props.bound_iter(cos_props.x, cos_props.eps, (number_fields.+)(cos_props.n, 1))" "NIL")) (|bound_iter_TCC10-2| "" 3790100019 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL) ("2" (LIFT-IF 2) (("2" (GROUND) (("1" (CASE-REPLACE "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (CASE "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLIP-INEQ 2) (("2" (CASE "x^2<=49") (("1" (CASE "1/(4+2*n)<=1/7") (("1" (CASE "1/(3+2*n)<=1/7") (("1" (MULT-INEQ -2 -1) (("1" (MULT-INEQ -4 -1) (("1" (GROUND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 3) (("2" (CASE-REPLACE "4+2*n = 2+(2+2*n)") (("1" (REWRITE "expt_plus" 1) (("1" (FIELD) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL) ("3" (NAME "C" "((x ^ (4 + 2 * n)) / factorial(4 + 2 * n))") (("3" (REPLACE -1) (("3" (NAME-REPLACE "c" "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("3" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 6)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (CASE "C <= c/4") (("1" (CROSS-MULT) (("1" (CASE "eps<=eps") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "C") (("2" (EXPAND "c") (("2" (CASE-REPLACE "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (CASE "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1/4") (("1" (CASE "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))<= ((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (CASE "1/(3+2*n)<=1/14") (("1" (CASE "1/(4+2*n)<=1/14") (("1" (CASE "x<=7") (("1" (MULT-INEQ -1 -1) (("1" (MULT-INEQ -1 -3) (("1" (MULT-INEQ -1 -5) (("1" (REWRITE "expt_x2" 1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "4+2*n = 2+(2+2*n)") (("1" (REWRITE "expt_plus") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" 1 1) (("1" (EXPAND "factorial" 1 1) (("1" (EXPAND "factorial" 1 3) (("1" (NAME "fac" "factorial(2+2*n)") (("1" (REPLACES -1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|c| SKOLEM-CONST-DECL "posreal" |cos_props| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (FDX_81 SKOLEM-CONST-DECL "{x: even_int | x > 0}" |cos_props| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (FDX_83 SKOLEM-CONST-DECL "{x: odd_int | x > 0}" |cos_props| NIL) (C SKOLEM-CONST-DECL "posreal" |cos_props| NIL) (|log_nat_incr| FORMULA-DECL NIL |log_nat| |reals|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| |reals|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|le_div_le_pos| FORMULA-DECL NIL |real_props| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (< DEF-DECL "bool" |ordinals| NIL) (|bounding?| CONST-DECL "bool" |cos_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|lex2| CONST-DECL "ordinal" |lex2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) SHOSTAK (|bound_iter| TERMINATION "cos_props.bound_iter(cos_props.x, cos_props.eps, (number_fields.+)(cos_props.n, 1))" "NIL")) (|bound_iter_TCC10-1| |nil| 3634305349 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "lex2") (("1" (GROUND) (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND :EXCLUDE "factorial") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL) ("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (CASE-REPLACE "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (CASE "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1") (("1" (MULT-INEQ -1 -3) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (FLIP-INEQ 2) (("2" (CASE "x^2<=49") (("1" (CASE "1/(4+2*n)<=1/7") (("1" (CASE "1/(3+2*n)<=1/7") (("1" (MULT-INEQ -2 -1) (("1" (MULT-INEQ -4 -1) (("1" (GROUND) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 3) (("2" (CASE-REPLACE "4+2*n = 2+(2+2*n)") (("1" (REWRITE "expt_plus" 1) (("1" (FIELD) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND :EXCLUDE ("factorial" "^")) NIL NIL) ("3" (NAME "C" "((x ^ (4 + 2 * n)) / factorial(4 + 2 * n))") (("3" (REPLACE -1) (("3" (NAME-REPLACE "c" "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("3" (CASE "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1") (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 6)) (("2" (LEMMA "log_nat_incr") (("2" (INST -1 "4" "C/eps" "c/eps") (("2" (GROUND) (("2" (CASE "C <= c/4") (("1" (CROSS-MULT) (("1" (CASE "eps<=eps") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "C") (("2" (EXPAND "c") (("2" (CASE-REPLACE "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (CASE "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1/4") (("1" (CASE "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))<= ((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))") (("1" (MULT-INEQ -2 -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (CASE "1/(3+2*n)<=1/14") (("1" (CASE "1/(4+2*n)<=1/14") (("1" (CASE "x<=7") (("1" (MULT-INEQ -1 -1) (("1" (MULT-INEQ -1 -3) (("1" (MULT-INEQ -1 -5) (("1" (REWRITE "expt_x2" 1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL) ("2" (FIELD) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE-REPLACE "4+2*n = 2+(2+2*n)") (("1" (REWRITE "expt_plus") (("1" (SIMPLIFY) (("1" (EXPAND "factorial" 1 1) (("1" (EXPAND "factorial" 1 1) (("1" (EXPAND "factorial" 1 3) (("1" (NAME "fac" "factorial(2+2*n)") (("1" (REPLACES -1) (("1" (FIELD) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_iter| TERMINATION "cos_props.bound_iter(cos_props.x, cos_props.eps, (number_fields.+)(cos_props.n, 1))" "NIL"))) (|iter_bound| 0 (|iter_bound-1| |nil| 3634382004 ("" (SKEEP) (("" (INST 2 "bound_iter(x, eps, 0)") (("1" (TYPEPRED "bound_iter(x, eps, 0)") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (CASE "m=0") (("1" (REPLACES -1) (("1" (HIDE 3) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "m=0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|x| SKOLEM-CONST-DECL "{x: posreal | x < 7}" |cos_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|eps| SKOLEM-CONST-DECL "posreal" |cos_props| NIL) (|bound_iter| DEF-DECL "{nn: posnat |
   (FORALL (m: below(nn)): x ^ (2 * m) / factorial(2 * m) > eps) AND
    x ^ (2 * nn) / factorial(2 * nn) <= eps}" |cos_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK)) (|cos_fast_approx_bound| 0 (|cos_fast_approx_bound-3| "" 3884583170 ("" (CASE "FORALL ((y:posreal | y<7), (eps:posreal| eps<1)): abs(cos(y)-cos_fast_approx(y,eps))<=eps") (("1" (SKEEP) (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (EXPAND "cos_fast_approx") (("1" (REWRITE "cos_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x<0") (("1" (LEMMA "cos_neg") (("1" (INST -1 "x") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "cos_fast_approx") (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (EXPAND "abs" 2 2) (("1" (INST -2 "-x" "eps") (("1" (EXPAND "abs" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "x" "eps") (("2" (GROUND) (("2" (TYPEPRED ("x")) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "iter_bound") (("2" (SKEEP) (("2" (INST -1 "y" "eps") (("2" (GROUND) (("2" (SKEEP) (("2" (LEMMA "cos_iter_alt_series3") (("2" (INST -1 "y" "eps" "nn") (("1" (GROUND) (("1" (EXPAND "cos_fast_approx") (("1" (EXPAND "abs" 1 2) (("1" (REPLACES -1) (("1" (LEMMA "cos_approx_cos") (("1" (NAME-REPLACE "N" "IF cos_approx(y, nn - 1) /= 0 THEN nn - 1
                            ELSE nn
                            ENDIF") (("1" (INST -1 "y" "N") (("1" (CASE "abs(cos_term(y)(N+1))<=y ^ (2 * nn) / factorial(2 * nn)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (mm:nat): abs(cos_term(y)(mm)) = y^(2*mm)/factorial(2*mm)") (("1" (INST -1 "N+1") (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "N") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (REWRITE "expt_plus") (("2" (FIELD 1) (("2" (TYPEPRED ("nn")) (("2" (CASE "y^2<=(2+6*nn+4*nn*nn)") (("1" (CASE "factorial(2*nn)<=factorial(2*nn)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("y")) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2" -1 :DIR RL) (("2" (SIMPLIFY) (("2" (CASE "3<=nn") (("1" (MULT-INEQ -1 -1) (("1" (HIDE (-8 2)) (("1" (HIDE -8) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "nn=1 OR nn=2") (("1" (HIDE (-3 -5 -6 -7 1 3)) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cos_approx") (("2" (REPLACES -1) (("2" (SIMPLIFY) (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "cos_term") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (REWRITE "expt_x1") (("2" (MOVE-TERMS -3 L 2) (("2" (SIMPLIFY -3) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED ("nn")) (("2" (EXPAND "N") (("2" (GRIND :EXCLUDE "cos_approx") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "cos_term") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "abs((-1)^1*y^2/((2+2*j)*(1+2*j))) =y^2/((2+2*j)*(1+2*j)) ") (("1" (CASE-REPLACE "(-1) ^ 1 * (-1) ^ j * (y ^ 2 * y ^ (2 * j)) /
                             factorial(2 + 2 * j) = ((-1) ^ 1 * y ^ 2 / ((2 + 2 * j) * (1 + 2 * j)))*((-1) ^ j * y ^ (2 * j) / factorial(2 * j))") (("1" (CASE "NOT (-1)^1 = -1") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (REPLACE -1) (("2" (REWRITE "abs_mult") (("2" (REPLACES -2 2) (("2" (REPLACES -2 2) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 3) (("2" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x1" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("1" (GROUND) (("1" (EXPAND "N") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (EXPAND "N") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "N") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "N") (("4" (TYPEPRED ("nn")) (("4" (GROUND) (("4" (LIFT-IF 1) (("4" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED ("nn")) (("2" (EXPAND "N") (("2" (GRIND :EXCLUDE "cos_approx") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "abs") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cos_fast_approx_bound-2| "" 3790100027 ("" (CASE "FORALL ((y:posreal | y<7), (eps:posreal| eps<1)): abs(cos(y)-cos_fast_approx(y,eps))<=eps") (("1" (SKEEP) (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (EXPAND "cos_fast_approx") (("1" (REWRITE "cos_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x<0") (("1" (LEMMA "cos_neg") (("1" (INST -1 "x") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "cos_fast_approx") (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (EXPAND "abs" 2 2) (("1" (INST -2 "-x" "eps") (("1" (EXPAND "abs" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "x" "eps") (("2" (GROUND) (("2" (TYPEPRED (X)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "iter_bound") (("2" (SKEEP) (("2" (INST -1 "y" "eps") (("2" (GROUND) (("2" (SKEEP) (("2" (LEMMA "cos_iter_alt_series3") (("2" (INST -1 "y" "eps" "nn") (("1" (GROUND) (("1" (EXPAND "cos_fast_approx") (("1" (EXPAND "abs" 1 2) (("1" (REPLACES -1) (("1" (LEMMA "cos_approx_cos") (("1" (NAME-REPLACE "N" "IF cos_approx(y, nn - 1) /= 0 THEN nn - 1
                            ELSE nn
                            ENDIF") (("1" (INST -1 "y" "N") (("1" (CASE "abs(cos_term(y)(N+1))<=y ^ (2 * nn) / factorial(2 * nn)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (mm:nat): abs(cos_term(y)(mm)) = y^(2*mm)/factorial(2*mm)") (("1" (INST -1 "N+1") (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "N") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (REWRITE "expt_plus") (("2" (FIELD 1) (("2" (TYPEPRED (NN)) (("2" (CASE "y^2<=(2+6*nn+4*nn*nn)") (("1" (CASE "factorial(2*nn)<=factorial(2*nn)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (Y)) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2" -1 :DIR RL) (("2" (SIMPLIFY) (("2" (CASE "3<=nn") (("1" (MULT-INEQ -1 -1) (("1" (HIDE (-8 2)) (("1" (HIDE -8) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "nn=1 OR nn=2") (("1" (HIDE (-3 -5 -6 -7 1 3)) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cos_approx") (("2" (REPLACES -1) (("2" (SIMPLIFY) (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "cos_term") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (REWRITE "expt_x1") (("2" (MOVE-TERMS -3 L 2) (("2" (SIMPLIFY -3) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED (NN)) (("2" (EXPAND "N") (("2" (GRIND :EXCLUDE "cos_approx") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "cos_term") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "abs((-1)^1*y^2/((2+2*j)*(1+2*j))) =y^2/((2+2*j)*(1+2*j)) ") (("1" (CASE-REPLACE "(-1) ^ 1 * (-1) ^ j * (y ^ 2 * y ^ (2 * j)) /
                             factorial(2 + 2 * j) = ((-1) ^ 1 * y ^ 2 / ((2 + 2 * j) * (1 + 2 * j)))*((-1) ^ j * y ^ (2 * j) / factorial(2 * j))") (("1" (CASE "NOT (-1)^1 = -1") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (REPLACE -1) (("2" (REWRITE "abs_mult") (("2" (REPLACES -2 2) (("2" (REPLACES -2 2) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 3) (("2" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x1" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("1" (GROUND) (("1" (EXPAND "N") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (EXPAND "N") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "N") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "N") (("4" (TYPEPRED (NN)) (("4" (GROUND) (("4" (LIFT-IF 1) (("4" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED (NN)) (("2" (EXPAND "N") (("2" (GRIND :EXCLUDE "cos_approx") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "abs") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|cos_iter_alt_series3| FORMULA-DECL NIL |cos_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cos_approx_cos| FORMULA-DECL NIL |trig_approx| |trig|) (N SKOLEM-CONST-DECL "numfield" |cos_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (FDX_85 SKOLEM-CONST-DECL "{x: even_int | x > 0}" |cos_props| NIL) (FDX_86 SKOLEM-CONST-DECL "posnat" |cos_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_term| CONST-DECL "real" |trig_approx| |trig|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| |trig|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nn| SKOLEM-CONST-DECL "posnat" |cos_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|y| SKOLEM-CONST-DECL "{y: posreal | y < 7}" |cos_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|eps| SKOLEM-CONST-DECL "{eps: posreal | eps < 1}" |cos_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|iter_bound| FORMULA-DECL NIL |cos_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_neg| FORMULA-DECL NIL |sincos_def| |trig|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|x| SKOLEM-CONST-DECL "{x: real | abs(x) < 7}" |cos_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cos_0| FORMULA-DECL NIL |sincos_def| |trig|) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| |trig|)) SHOSTAK) (|cos_fast_approx_bound-1| |nil| 3634382249 ("" (CASE "FORALL ((y:posreal | y<7), (eps:posreal| eps<1)): abs(cos(y)-cos_fast_approx(y,eps))<=eps") (("1" (SKEEP) (("1" (CASE "x=0") (("1" (REPLACES -1) (("1" (EXPAND "cos_fast_approx") (("1" (REWRITE "cos_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x<0") (("1" (LEMMA "cos_neg") (("1" (INST -1 "x") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "cos_fast_approx") (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (EXPAND "abs" 2 2) (("1" (INST -2 "-x" "eps") (("1" (EXPAND "abs" -2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "x" "eps") (("2" (GROUND) (("2" (TYPEPRED (X)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "iter_bound") (("2" (SKEEP) (("2" (INST -1 "y" "eps") (("2" (GROUND) (("2" (SKEEP) (("2" (LEMMA "cos_iter_alt_series3") (("2" (INST -1 "y" "eps" "nn") (("1" (GROUND) (("1" (EXPAND "cos_fast_approx") (("1" (EXPAND "abs" 1 2) (("1" (REPLACES -1) (("1" (LEMMA "cos_approx_cos") (("1" (NAME-REPLACE "N" "IF cos_approx(y, nn - 1) /= 0 THEN nn - 1
                            ELSE nn
                            ENDIF") (("1" (INST -1 "y" "N") (("1" (CASE "abs(cos_term(y)(N+1))<=y ^ (2 * nn) / factorial(2 * nn)") (("1" (GROUND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (mm:nat): abs(cos_term(y)(mm)) = y^(2*mm)/factorial(2*mm)") (("1" (INST -1 "N+1") (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "N") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (REWRITE "expt_plus") (("2" (FIELD 1) (("2" (TYPEPRED (NN)) (("2" (CASE "y^2<=(2+6*nn+4*nn*nn)") (("1" (CASE "factorial(2*nn)<=factorial(2*nn)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (Y)) (("2" (MULT-INEQ -3 -3) (("2" (REWRITE "expt_x2" -1 :DIR RL) (("2" (SIMPLIFY) (("2" (CASE "3<=nn") (("1" (MULT-INEQ -1 -1) (("1" (HIDE (-8 2)) (("1" (HIDE -8) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "nn=1 OR nn=2") (("1" (HIDE (-3 -5 -6 -7 1 3)) (("1" (SPLIT -1) (("1" (REPLACES -4) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cos_approx") (("2" (REPLACES -1) (("2" (SIMPLIFY) (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "cos_term") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (REWRITE "expt_x1") (("2" (MOVE-TERMS -3 L 2) (("2" (SIMPLIFY -3) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED (NN)) (("2" (EXPAND "N") (("2" (GRIND :EXCLUDE "cos_approx") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "cos_term") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_plus") (("2" (CASE "abs((-1)^1*y^2/((2+2*j)*(1+2*j))) =y^2/((2+2*j)*(1+2*j)) ") (("1" (CASE-REPLACE "(-1) ^ 1 * (-1) ^ j * (y ^ 2 * y ^ (2 * j)) /
                             factorial(2 + 2 * j) = ((-1) ^ 1 * y ^ 2 / ((2 + 2 * j) * (1 + 2 * j)))*((-1) ^ j * y ^ (2 * j) / factorial(2 * j))") (("1" (CASE "NOT (-1)^1 = -1") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (REPLACE -1) (("2" (REWRITE "abs_mult") (("2" (REPLACES -2 2) (("2" (REPLACES -2 2) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 3) (("2" (FIELD 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (FIELD 1) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x1" 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) (("1" (GROUND) (("1" (EXPAND "N") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) (("2" (EXPAND "N") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (EXPAND "N") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "N") (("4" (TYPEPRED (NN)) (("4" (GROUND) (("4" (LIFT-IF 1) (("4" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED (NN)) (("2" (EXPAND "N") (("2" (GRIND :EXCLUDE "cos_approx") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "abs") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
