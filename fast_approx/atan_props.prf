(|atan_props| (|reduce_less| 0 (|reduce_less-1| |nil| 3633688215 ("" (SKEEP) (("" (EXPAND "reduce_approx") (("" (EXPAND "reduce_fun") (("" (LEMMA "sqrt_fast_approx_upper") (("" (INST?) (("" (CROSS-MULT) (("" (GROUND) (("" (CASE "x>=x") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|reduce_approx| CONST-DECL "real" |fast_approx| NIL) (|sqrt_fast_approx_upper| FORMULA-DECL NIL |sqrt_prop| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|reduce_fun| CONST-DECL "real" |atan_approx| |trig|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|reduce_close| 0 (|reduce_close-1| |nil| 3633689812 ("" (SKEEP) (("" (EXPAND "reduce_fun") (("" (CASE "x*x = x^2") (("1" (REPLACES -1) (("1" (EXPAND "reduce_approx") (("1" (CASE "1+sqrt(1+x^2)>=2") (("1" (CASE "1+sqrt_fast_approx(1+x*x, eps)>=2") (("1" (MULT-INEQ -1 -2) (("1" (CASE "x / (1 + sqrt(1 + x ^ 2)) - x / (1 + sqrt_fast_approx(1 + x * x, eps)) = x*(sqrt_fast_approx(1 + x * x, eps) - sqrt(1 + x ^ 2))/((1 + sqrt_fast_approx(1 + x * x, eps))*(1 + sqrt(1 + x ^ 2)))") (("1" (REPLACES -1) (("1" (LEMMA "sqrt_fast_approx_est") (("1" (LEMMA "sqrt_fast_approx_upper") (("1" (INST?) (("1" (INST?) (("1" (EXPAND "abs") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (REWRITE "expt_x2") (("2" (CASE "x<=x") (("1" (MULT-INEQ -1 -2) (("1" (CASE "x * (sqrt_fast_approx(1 + x * x, eps) - sqrt(1 + x * x)) /
                        ((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x)))
                        <= x * eps /
                        ((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x)))") (("1" (CASE " x * eps / ((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x))) <= x * eps / 4") (("1" (GROUND) NIL NIL) ("2" (CASE "eps*x>=eps*x") (("1" (MULT-INEQ -1 -7) (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (NAME "den" "((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x)))") (("2" (REPLACES -1) (("2" (CASE "den<=den") (("1" (MULT-INEQ -1 -2) (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "abs") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FIELD 1) NIL NIL)) NIL)) NIL) ("2" (LEMMA "sqrt_fast_approx_upper") (("2" (INST?) (("2" (BOTH-SIDES "+" "1" -1) (("2" (REWRITE "expt_x2") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sqrt_ge") (("2" (INST -1 "1+x^2" "1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "expt_x2") NIL NIL)) NIL)) NIL)) NIL) ((|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|reduce_fun| CONST-DECL "real" |atan_approx| |trig|) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|both_sides_plus_ge1| FORMULA-DECL NIL |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|sqrt_fast_approx_upper| FORMULA-DECL NIL |sqrt_prop| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sqrt_fast_approx_est| FORMULA-DECL NIL |sqrt_prop| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL) (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|) (|sqrt_ge| FORMULA-DECL NIL |sqrt| |reals|) (|reduce_approx| CONST-DECL "real" |fast_approx| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL)) SHOSTAK)) (|atan_of_sum| 0 (|atan_of_sum-1| |nil| 3633694176 ("" (SKEEP) (("" (GROUND) (("1" (LEMMA "atan_strict_increasing") (("1" (EXPAND "strict_increasing?") (("1" (INST -1 "x" "x+y") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME "mu" "y/(1+x*(x+y))") (("2" (CASE "x+y = (x+mu)/(1-x*mu)") (("1" (REPLACE -1 1) (("1" (LEMMA "atan_plus") (("1" (INST -1 "x" "mu") (("1" (FLATTEN) (("1" (HIDE (-2 -3)) (("1" (GROUND) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "mu<=y") (("1" (LEMMA "atan_strict_increasing") (("1" (EXPAND "strict_increasing?") (("1" (CASE "atan(mu)<=atan(y)") (("1" (CASE "atan(y)<=y") (("1" (GROUND) NIL NIL) ("2" (CASE "y=0") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "atan_bnds") (("2" (INST -1 "y") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "mu" "y") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "1<=(1+x*x+x*y)") (("1" (CASE "y>=y/(1+x*x+x*y)") (("1" (REPLACES -4 1 :DIR RL) (("1" (CROSS-MULT 1) (("1" (FACTOR 1 R) (("1" (CANCEL-BY 1 "y") NIL NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (CASE "y<=y") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 :DIR RL) (("2" (GROUND) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) (("2" (REPLACES -1 :DIR RL) (("2" (CROSS-MULT 1) (("2" (GRIND-REALS 1) (("2" (MOVE-TERMS 1 L 2) (("2" (MOVE-TERMS 1 L 2) (("2" (SIMPLIFY 1) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -1 :DIR RL) (("3" (GROUND) (("3" (MOVE-TERMS -1 L 2) (("3" (ASSERT) (("3" (CROSS-MULT -1) (("3" (MOVE-TERMS -1 L 1) (("3" (ASSERT) (("3" (LEMMA "sq_gt_0") (("3" (INST -1 "x") (("3" (EXPAND "sq") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|atan_plus| FORMULA-DECL NIL |atan| |trig|) (<= CONST-DECL "bool" |reals| NIL) (|atan_bnds| FORMULA-DECL NIL |atan| |trig|) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|) (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan| |trig|) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|div_distributes_minus| FORMULA-DECL NIL |real_props| NIL) (|div_distributes| FORMULA-DECL NIL |real_props| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sq_gt_0| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_reduce_close| 0 (|atan_reduce_close-1| |nil| 3633696375 ("" (SKEEP) (("" (LEMMA "reduce_close") (("" (INST?) (("" (NAME "delt" "reduce_fun(x) - reduce_approx(x, eps)") (("" (LEMMA "atan_of_sum") (("" (NAME "red" "reduce_fun(x)") (("" (NAME "rap" "reduce_approx(x,eps)") (("" (REPLACE -1) (("" (REPLACE -2) (("" (INST -3 "rap" "delt") (("1" (FLATTEN) (("1" (MOVE-TERMS -5 L 2) (("1" (REPLACE -5 -3 :DIR RL) (("1" (LEMMA "reduce_is_equal") (("1" (INST -1 "x") (("1" (REPLACE -3 -1) (("1" (REPLACES -1 :DIR RL) (("1" (REPLACE -5 -4 :DIR RL) (("1" (CASE "2*delt<= x*eps/2") (("1" (MOVE-TERMS -6 R 2) (("1" (REPLACE -6 -7) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x=0") (("1" (CASE "rap=0") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (REWRITE "atan_0") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rap") (("2" (EXPAND "reduce_approx") (("2" (REPLACES -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "reduce_less") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (EXPAND "rap") (("3" (EXPAND "reduce_approx") (("3" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|reduce_close| FORMULA-DECL NIL |atan_props| NIL) (|reduce_approx| CONST-DECL "real" |fast_approx| NIL) (|reduce_fun| CONST-DECL "real" |atan_approx| |trig|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rap| SKOLEM-CONST-DECL "real" |atan_props| NIL) (|delt| SKOLEM-CONST-DECL "real" |atan_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|reduce_is_equal| FORMULA-DECL NIL |atan_approx| |trig|) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|atan_0| FORMULA-DECL NIL |atan| |trig|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|x| SKOLEM-CONST-DECL "nnreal" |atan_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|reduce_less| FORMULA-DECL NIL |atan_props| NIL) (|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|atan_of_sum| FORMULA-DECL NIL |atan_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|eps_sig_TCC1| 0 (|eps_sig_TCC1-3| "" 3884583200 ("" (SKEEP) (("" (LEMMA "sigma_nat.sigma_geometric") (("" (INST -1 "n" "1" "1/2") (("" (SPLIT -1) (("1" (LEMMA "sigma_scal") (("1" (INST -1 "LAMBDA (k:nat): (1/2)^k" "eps" "n" "1") (("1" (CASE-REPLACE "(LAMBDA (i: nat): eps * (1 / 2) ^ i) = LAMBDA (k: nat): eps  / 2^k") (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (GROUND) (("1" (LEMMA "both_sides_expt_lt1_gt") (("1" (INST -1 "1" "1+n" "1/2") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (MOVE-TERMS -1 R 1) (("1" (CROSS-MULT 1) (("1" (TYPEPRED ("eps")) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (REWRITE "inv_expt" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|eps_sig| SUBTYPE "sigma[nat].sigma(1, atan_props.n, LAMBDA (k: naturalnumbers.nat): number_fields./(atan_props.eps, exponentiation.^(2, k)))" "{z: real_types.posreal | reals.<=(z, atan_props.eps)}")) (|eps_sig_TCC1-2| |nil| 3767448791 ("" (SKEEP) (("" (LEMMA "sigma_nat.sigma_geometric") (("" (INST -1 "n" "1" "1/2") (("" (SPLIT -1) (("1" (LEMMA "sigma_scal") (("1" (INST -1 "LAMBDA (k:nat): (1/2)^k" "eps" "n" "1") (("1" (CASE-REPLACE "(LAMBDA (i: nat): eps * (1 / 2) ^ i) = LAMBDA (k: nat): eps  / 2^k") (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (GROUND) (("1" (LEMMA "both_sides_expt_lt1_gt") (("1" (INST -1 "1" "1+n" "1/2") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (MOVE-TERMS -1 R 1) (("1" (CROSS-MULT 1) (("1" (TYPEPRED (EPS)) (("1" (MULT-INEQ -2 -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (REWRITE "inv_expt" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sigma_geometric| FORMULA-DECL NIL |sigma_nat| |reals|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|inv_expt| FORMULA-DECL NIL |exponentiation| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_expt_lt1_gt| FORMULA-DECL NIL |exponentiation| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|) (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|eps_sig| SUBTYPE "sigma[nat].sigma(1, atan_props.n, LAMBDA (k: naturalnumbers.nat): number_fields./(atan_props.eps, exponentiation.^(2, k)))" "{z: real_types.posreal | reals.<=(z, atan_props.eps)}")) (|eps_sig_TCC1-1| |nil| 3634917736 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|eps_sig| SUBTYPE "sigma[nat].sigma(1, atan_props.n, LAMBDA (k: naturalnumbers.nat): number_fields./(atan_props.eps, exponentiation.^(2, k)))" "{z: real_types.posreal | reals.<=(z, atan_props.eps)}"))) (|eps_sig_next| 0 (|eps_sig_next-1| |nil| 3634987449 ("" (SKEEP) (("" (EXPAND "eps_sig") (("" (NAME-REPLACE "sn1" "sigma(1, n, LAMBDA (k: nat): eps / 2 ^ k)") (("" (REWRITE "sigma_last") (("" (EXPAND "sn1") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|eps_sig| CONST-DECL "{z: posreal | z <= eps}" |atan_props| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sn1| SKOLEM-CONST-DECL "nnreal" |atan_props| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sigma_nnreal| APPLICATION-JUDGEMENT "nnreal" |sigma_nat| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) SHOSTAK)) (|atan_iter_alt_series_TCC1| 0 (|atan_iter_alt_series_TCC1-1| |nil| 3633699734 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|atan_iter_alt_series| SUBTYPE "(number_fields.-)(atan_props.n, 1)" "nat"))) (|atan_iter_alt_series_TCC2| 0 (|atan_iter_alt_series_TCC2-1| |nil| 3633699734 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|atan_series_n| CONST-DECL "real" |atan| |trig|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_iter_alt_series| SUBTYPE "atan_props.n" "posnat"))) (|atan_iter_alt_series_TCC3| 0 (|atan_iter_alt_series_TCC3-1| |nil| 3633699734 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_iter_alt_series| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_props.n), 1))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|atan_iter_alt_series_TCC4| 0 (|atan_iter_alt_series_TCC4-1| |nil| 3634921315 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_iter_alt_series| SUBTYPE "2" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|atan_iter_alt_series| 0 (|atan_iter_alt_series-4| "" 3884583261 ("" (SKEEP :PREDS? T) (("" (EXPAND "atan_approx_iter_alt") (("" (EXPAND "atan_approx_iter_alt") (("" (REWRITE "expt_x2") (("" (GROUND) (("" (CASE "n=0") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "pm1") (("1" (REPLACE -11) (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_x1") (("1" (EXPAND "atan_series_n") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (TYPEPRED "eps_sig(eps, 1)") (("1" (TYPEPRED "best_rational(b + x, eps / 2 + b + x)") (("1" (INST 1 "best_rational(b + x, eps / 2 + b + x) -x") (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACE -6) (("2" (GROUND) (("2" (MOVE-TERMS -2 R 3) (("2" (EXPAND "eps_sig") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -11 2) (("1" (CASE "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + atan_series_n(x, n - 1) = atan_series_n(x, n)") (("1" (BOTH-SIDES "+" "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))" -8) (("1" (BOTH-SIDES "+" "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))" -9) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 R 2) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 L 3) (("1" (BOTH-SIDES "+" "eps/2^(n+1)" -9) (("1" (MOVE-TERMS -9 R 1) (("1" (REWRITE "eps_sig_next") (("1" (MOVE-TERMS -9 L 4) (("1" (INST 2 "best_rational(pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + b,
                      eps / 2 ^ (1 + n) +
                       pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))
                       + b) - atan_series_n(x, n)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_series_n") (("2" (NAME-REPLACE "sn1" "sigma(0, n - 1, atan_series_term(x))") (("2" (REWRITE "sigma_last" 1) (("2" (HIDE 3) (("2" (EXPAND "sn1") (("2" (EXPAND "atan_series_term") (("2" (EXPAND "atan_series_coef") (("2" (REPLACE -1 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -1 "j-2") (("3" (GROUND) (("3" (REPLACES -1) (("3" (EXPAND "^") (("3" (EXPAND "expt" 2 2) (("3" (EXPAND "expt" 2 2) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_iter_alt_series-3| "" 3790100128 ("" (SKEEP :PREDS? T) (("" (EXPAND "atan_approx_iter_alt") (("" (EXPAND "atan_approx_iter_alt") (("" (REWRITE "expt_x2") (("" (GROUND) (("" (CASE "n=0") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "pm1") (("1" (REPLACE -11) (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_x1") (("1" (EXPAND "atan_series_n") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (TYPEPRED "eps_sig(eps, 1)") (("1" (TYPEPRED "best_rational(b + x, eps / 2 + b + x)") (("1" (INST 1 "best_rational(b + x, eps / 2 + b + x) -x") (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACE -6) (("2" (GROUND) (("2" (MOVE-TERMS -2 R 3) (("2" (EXPAND "eps_sig") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -11 2) (("1" (CASE "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + atan_series_n(x, n - 1) = atan_series_n(x, n)") (("1" (BOTH-SIDES "+" "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))" -8) (("1" (BOTH-SIDES "+" "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))" -9) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 R 2) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 L 3) (("1" (BOTH-SIDES "+" "eps/2^(n+1)" -9) (("1" (MOVE-TERMS -9 R 1) (("1" (REWRITE "eps_sig_next") (("1" (MOVE-TERMS -9 L 4) (("1" (INST 2 "best_rational(pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + b,
                      eps / 2 ^ (1 + n) +
                       pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))
                       + b) - atan_series_n(x, n)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_series_n") (("2" (NAME-REPLACE "sn1" "sigma(0, n - 1, atan_series_term(x))") (("2" (REWRITE "sigma_last" 1) (("2" (HIDE 3) (("2" (EXPAND "sn1") (("2" (EXPAND "atan_series_term") (("2" (EXPAND "atan_series_coef") (("2" (REPLACE -1 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -1 "j-2") (("3" (GROUND) (("3" (REPLACES -1) (("3" (EXPAND "^") (("3" (EXPAND "expt" 2 2) (("3" (EXPAND "expt" 2 2) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|best_rational| CONST-DECL "{q: rat | r1 <= q AND q <= r2}" |best_rational| |reals|) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|n| SKOLEM-CONST-DECL "nat" |atan_props| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x <= 1}" |atan_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |atan_props| NIL) (|b| SKOLEM-CONST-DECL "{b: real |
   IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF <= b AND
    b <=
     IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF +
      IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF}" |atan_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|eps_sig| CONST-DECL "{z: posreal | z <= eps}" |atan_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|atan_series_coef| CONST-DECL "rat" |atan| |trig|) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|atan_series_term| CONST-DECL "[nat -> real]" |atan| |trig|) (|atan_series_n| CONST-DECL "real" |atan| |trig|) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (|sn1| SKOLEM-CONST-DECL "real" |atan_props| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_plus_le2| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|eps_sig_next| FORMULA-DECL NIL |atan_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL)) SHOSTAK) (|atan_iter_alt_series-2| "alt" 3634919570 ("" (SKEEP :PREDS? T) (("" (EXPAND "atan_approx_iter_alt") (("" (EXPAND "atan_approx_iter_alt") (("" (REWRITE "expt_x2") (("" (GROUND) (("" (CASE "n=0") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "pm1") (("1" (REPLACE -11) (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_x1") (("1" (EXPAND "atan_series_n") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (TYPEPRED "eps_sig(eps, 1)") (("1" (TYPEPRED "best_rational(b + x, eps / 2 + b + x)") (("1" (INST 1 "best_rational(b + x, eps / 2 + b + x) -x") (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACE -6) (("2" (GROUND) (("2" (MOVE-TERMS -2 R 3) (("2" (EXPAND "eps_sig") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (GROUND) (("2" (REWRITE "expt_x1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -11 2) (("1" (CASE "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + atan_series_n(x, n - 1) = atan_series_n(x, n)") (("1" (BOTH-SIDES "+" "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))" -8) (("1" (BOTH-SIDES "+" "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))" -9) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 R 2) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 L 3) (("1" (BOTH-SIDES "+" "eps/2^(n+1)" -9) (("1" (MOVE-TERMS -9 R 1) (("1" (REWRITE "eps_sig_next") (("1" (MOVE-TERMS -9 L 4) (("1" (INST 2 "best_rational(pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + b,
                      eps / 2 ^ (1 + n) +
                       pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))
                       + b) - atan_series_n(x, n)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_series_n") (("2" (NAME-REPLACE "sn1" "sigma(0, n - 1, atan_series_term(x))") (("2" (REWRITE "sigma_last" 1) (("2" (HIDE 3) (("2" (EXPAND "sn1") (("2" (EXPAND "atan_series_term") (("2" (EXPAND "atan_series_coef") (("2" (REPLACE -1 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -1 "j-2") (("3" (GROUND) (("3" (REPLACES -1) (("3" (EXPAND "^") (("3" (EXPAND "expt" 2 2) (("3" (EXPAND "expt" 2 2) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_iter_alt_series-1| |nil| 3633699735 ("" (SKEEP :PREDS? T) (("" (EXPAND "atan_approx_iter_alt") (("" (EXPAND "atan_approx_iter_alt") (("" (REWRITE "expt_x2") (("" (GROUND) (("" (LIFT-IF -6) (("" (SPLIT -6) (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (EXPAND "pm1") (("1" (REPLACE -10) (("1" (SIMPLIFY 1) (("1" (REWRITE "expt_x1") (("1" (EXPAND "atan_series_n") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_series_n") (("2" (REWRITE "sigma_last" 1) (("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -10 2) (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (REPLACE -1 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (INST -1 "j-2") (("3" (GROUND) (("3" (REPLACES -1) (("3" (EXPAND "^") (("3" (EXPAND "expt" 2 2) (("3" (EXPAND "expt" 2 2) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|atan_iter_alt_series2_TCC1| 0 (|atan_iter_alt_series2_TCC1-1| |nil| 3633703931 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_iter_alt_series2| SUBTYPE "(number_fields.*(2, atan_props.mm))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|atan_iter_alt_series2_TCC2| 0 (|atan_iter_alt_series2_TCC2-1| |nil| 3633703931 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_iter_alt_series2| SUBTYPE "(number_fields.*(2, atan_props.m))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|atan_iter_alt_series2_TCC3| 0 (|atan_iter_alt_series2_TCC3-1| |nil| 3633703931 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|atan_iter_alt_series2| SUBTYPE "((number_fields.-)((number_fields.+)(atan_props.n, atan_props.m), 1))" "nat"))) (|atan_iter_alt_series2| 0 (|atan_iter_alt_series2-3| "" 3884583311 ("" (INDUCT "m") (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (SKEEP) (("4" (SKEEP :PREDS? T) (("4" (CASE "j=0") (("1" (REPLACE -1) (("1" (HIDE -14) (("1" (SIMPLIFY) (("1" (LEMMA "atan_iter_alt_series") (("1" (NAME-REPLACE "B" "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF") (("1" (INST -1 "x" "eps" "n" "b" "c") (("1" (SKEEP) (("1" (INST 1 "epsum") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -12 "0") (("2" (REPLACES -11) (("2" (SIMPLIFY) (("2" (REWRITE "expt_x0") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -13) (("1" (EXPAND "atan_approx_iter_alt" 2) (("1" (INST-CP -12 "0") (("1" (SIMPLIFY -13) (("1" (REWRITE "expt_x0") (("1" (CASE-REPLACE "(c/(1+2*n)<= eps) = FALSE") (("1" (HIDE -1) (("1" (NAME-REPLACE "B" "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF") (("1" (BOTH-SIDES "+" "eps/2^(n+1)" -8) (("1" (CASE "(IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF + eps / 2 ^ (n + 1)) = eps_sig(eps, 1+n)") (("1" (MOVE-TERMS -9 R 1) (("1" (REPLACES -1) (("1" (MOVE-TERMS -8 L 3) (("1" (BOTH-SIDES "+" "pm1(n) * (c / (1 + 2 * n))" -7) (("1" (BOTH-SIDES "+" "pm1(n) * (c / (1 + 2 * n))" -8) (("1" (CASE "B + pm1(n) * (c / (1 + 2 * n)) = atan_series_n(x,n)") (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 R 1) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 L 4) (("1" (INST -2 "x" " eps" " 1 + n" "
                             best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                                           eps / 2 ^ (1 + n)
                                           +
                                           pm1(n) * (c / (1 + 2 * n))
                                           +
                                           b)" "
                             c * x^2") (("1" (REWRITE "expt_x2") (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (GROUND) (("1" (REWRITE "expt_x2") (("1" (MULT-INEQ -3 -3) (("1" (MULT-INEQ -11 -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -11) (("2" (REWRITE "expt_plus" 1 :DIR RL) (("2" (GROUND) (("2" (REPLACES -1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST -12 "mm+1") (("3" (HIDE (-1 -4)) (("3" (REWRITE "expt_plus" 1 :DIR RL) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REWRITE "expt_plus" 1 :DIR RL) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED " best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                     eps / 2 ^ (1 + n) + pm1(n) * (c / (1 + 2 * n)) + b)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (EXPAND "B") (("2" (EXPAND "atan_series_n") (("2" (CASE "n=0") (("1" (REPLACES -1) (("1" (GROUND) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "pm1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (NAME-REPLACE "sn1" "sigma(0, n - 1, atan_series_term(x))") (("2" (REWRITE "sigma_last" 2) (("2" (EXPAND "sn1") (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -1) (("1" (REPLACE -11) (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 "NAT_induction") (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j!1-2") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 2) (("1" (EXPAND "expt" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (HIDE-ALL-BUT 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "eps_sig") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "eps_sig_next") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) NIL NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (GROUND) NIL NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (GROUND) NIL NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_iter_alt_series2-2| "" 3790100136 ("" (INDUCT "m") (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (SKEEP) (("4" (SKEEP :PREDS? T) (("4" (CASE "j=0") (("1" (REPLACE -1) (("1" (HIDE -14) (("1" (SIMPLIFY) (("1" (LEMMA "atan_iter_alt_series") (("1" (NAME-REPLACE "B" "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF") (("1" (INST -1 "x" "eps" "n" "b" "c") (("1" (SKEEP) (("1" (INST 1 "epsum") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -12 "0") (("2" (REPLACES -11) (("2" (SIMPLIFY) (("2" (REWRITE "expt_x0") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -13) (("1" (EXPAND "atan_approx_iter_alt" 2) (("1" (INST-CP -12 "0") (("1" (SIMPLIFY -13) (("1" (REWRITE "expt_x0") (("1" (CASE-REPLACE "(c/(1+2*n)<= eps) = FALSE") (("1" (HIDE -1) (("1" (NAME-REPLACE "B" "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF") (("1" (BOTH-SIDES "+" "eps/2^(n+1)" -8) (("1" (CASE "(IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF + eps / 2 ^ (n + 1)) = eps_sig(eps, 1+n)") (("1" (MOVE-TERMS -9 R 1) (("1" (REPLACES -1) (("1" (MOVE-TERMS -8 L 3) (("1" (BOTH-SIDES "+" "pm1(n) * (c / (1 + 2 * n))" -7) (("1" (BOTH-SIDES "+" "pm1(n) * (c / (1 + 2 * n))" -8) (("1" (CASE "B + pm1(n) * (c / (1 + 2 * n)) = atan_series_n(x,n)") (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 R 1) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 L 4) (("1" (INST -2 "x" " eps" " 1 + n" "
                             best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                                           eps / 2 ^ (1 + n)
                                           +
                                           pm1(n) * (c / (1 + 2 * n))
                                           +
                                           b)" "
                             c * x^2") (("1" (REWRITE "expt_x2") (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (GROUND) (("1" (REWRITE "expt_x2") (("1" (MULT-INEQ -3 -3) (("1" (MULT-INEQ -11 -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -11) (("2" (REWRITE "expt_plus" 1 :DIR RL) (("2" (GROUND) (("2" (REPLACES -1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST -12 "mm+1") (("3" (HIDE (-1 -4)) (("3" (REWRITE "expt_plus" 1 :DIR RL) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REWRITE "expt_plus" 1 :DIR RL) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED " best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                     eps / 2 ^ (1 + n) + pm1(n) * (c / (1 + 2 * n)) + b)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (EXPAND "B") (("2" (EXPAND "atan_series_n") (("2" (CASE "n=0") (("1" (REPLACES -1) (("1" (GROUND) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "pm1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (NAME-REPLACE "sn1" "sigma(0, n - 1, atan_series_term(x))") (("2" (REWRITE "sigma_last" 2) (("2" (EXPAND "sn1") (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -1) (("1" (REPLACE -11) (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j!1-2") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 2) (("1" (EXPAND "expt" 2 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "eps_sig") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "eps_sig_next") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) NIL NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (GROUND) NIL NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (GROUND) NIL NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|atan_iter_alt_series| FORMULA-DECL NIL |atan_props| NIL) (|c| SKOLEM-CONST-DECL "{c: nnreal |
   c <= 1 AND
    c = x ^ (1 + 2 * n) AND
     (FORALL (mm: below(1 + j)):
        c * x ^ (2 * mm) / (1 + 2 * mm + 2 * n) > eps)
      AND (c * x ^ (2 + 2 * j)) / (3 + 2 * j + 2 * n) <= eps}" |atan_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |atan_props| NIL) (|j| SKOLEM-CONST-DECL "nat" |atan_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |atan_props| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x <= 1}" |atan_props| NIL) (|epsum| SKOLEM-CONST-DECL "{epsum: nnreal | epsum <= eps_sig(eps, 1 + n)}" |atan_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|pm1| DEF-DECL "int" |fast_approx| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_plus_le2| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|pos_times_gt| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|expt_0| FORMULA-DECL NIL |sqrt_exists| |reals|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|best_rational| CONST-DECL "{q: rat | r1 <= q AND q <= r2}" |best_rational| |reals|) (|b| SKOLEM-CONST-DECL "{b: real |
   IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF <= b AND
    b <=
     IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF +
      IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF}" |atan_props| NIL) (B SKOLEM-CONST-DECL "real" |atan_props| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|atan_series_coef| CONST-DECL "rat" |atan| |trig|) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|atan_series_term| CONST-DECL "[nat -> real]" |atan| |trig|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sn1| SKOLEM-CONST-DECL "real" |atan_props| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |atan_props| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sigma_last| FORMULA-DECL NIL |sigma| |reals|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eps_sig_next| FORMULA-DECL NIL |atan_props| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|atan_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eps_sig| CONST-DECL "{z: posreal | z <= eps}" |atan_props| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_series_n| CONST-DECL "real" |atan| |trig|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK) (|atan_iter_alt_series2-1| |nil| 3633703938 ("" (INDUCT "m") (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (SKEEP) (("4" (SKEEP :PREDS? T) (("4" (CASE "j=0") (("1" (REPLACE -1) (("1" (HIDE -14) (("1" (SIMPLIFY) (("1" (LEMMA "atan_iter_alt_series") (("1" (NAME-REPLACE "B" "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF") (("1" (INST -1 "x" "eps" "n" "b" "c") (("1" (SKEEP) (("1" (INST 1 "epsum") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST -12 "0") (("2" (REPLACES -11) (("2" (SIMPLIFY) (("2" (REWRITE "expt_x0") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -13) (("1" (EXPAND "atan_approx_iter_alt" 2) (("1" (INST-CP -12 "0") (("1" (SIMPLIFY -13) (("1" (REWRITE "expt_x0") (("1" (CASE-REPLACE "(c/(1+2*n)<= eps) = FALSE") (("1" (HIDE -1) (("1" (NAME-REPLACE "B" "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF") (("1" (BOTH-SIDES "+" "eps/2^(n+1)" -8) (("1" (CASE "(IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF + eps / 2 ^ (n + 1)) = eps_sig(eps, 1+n)") (("1" (REPLACES -1) (("1" (MOVE-TERMS -9 R 1) (("1" (REPLACES -1) (("1" (MOVE-TERMS -8 L 3) (("1" (BOTH-SIDES "+" "pm1(n) * (c / (1 + 2 * n))" -7) (("1" (BOTH-SIDES "+" "pm1(n) * (c / (1 + 2 * n))" -8) (("1" (CASE "B + pm1(n) * (c / (1 + 2 * n)) = atan_series_n(x,n)") (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 R 1) (("1" (REPLACE -1) (("1" (MOVE-TERMS -9 L 4) (("1" (INST -2 "x" " eps" " 1 + n" "
                             best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                                           eps / 2 ^ (1 + n)
                                           +
                                           pm1(n) * (c / (1 + 2 * n))
                                           +
                                           b)" "
                             c * x^2") (("1" (REWRITE "expt_x2") (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (GROUND) (("1" (REWRITE "expt_x2") (("1" (MULT-INEQ -3 -3) (("1" (MULT-INEQ -11 -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -11) (("2" (REWRITE "expt_plus" 1 :DIR RL) (("2" (GROUND) (("2" (REPLACES -1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST -12 "mm+1") (("3" (HIDE (-1 -4)) (("3" (REWRITE "expt_plus" 1 :DIR RL) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (GROUND) (("2" (REWRITE "expt_0" -10) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REWRITE "expt_plus" 1 :DIR RL) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (REPLACES -1) (("2" (REWRITE "expt_0" 1) (("2" (REWRITE "expt_0" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED " best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                     eps / 2 ^ (1 + n) + pm1(n) * (c / (1 + 2 * n)) + b)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (EXPAND "B") (("2" (EXPAND "atan_series_n") (("2" (CASE "n=0") (("1" (REPLACES -1) (("1" (GROUND) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "pm1") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (NAME-REPLACE "sn1" "sigma(0, n - 1, atan_series_term(x))") (("2" (REWRITE "sigma_last" 2) (("2" (EXPAND "sn1") (("2" (CASE "FORALL (nn:nat): pm1(nn) = (-1)^nn") (("1" (INST -1 "n") (("1" (REPLACE -1) (("1" (REPLACE -11) (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn" 1 NAT_INDUCTION) (("2" (SKEEP) (("2" (EXPAND "pm1" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j!1-2") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 2) (("1" (EXPAND "expt" 2 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (REPLACES -1) (("1" (SIMPLIFY) (("1" (EXPAND "eps_sig") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "eps_sig_next") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (GROUND) NIL NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (GROUND) NIL NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (GROUND) NIL NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|atan_alt_series_TCC1| 0 (|atan_alt_series_TCC1-1| |nil| 3633712099 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_alt_series| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_props.m), 1))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|atan_alt_series_TCC2| 0 (|atan_alt_series_TCC2-1| |nil| 3633712099 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_alt_series| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_props.n), 1))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|atan_alt_series_TCC3| 0 (|atan_alt_series_TCC3-1| |nil| 3633712412 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|atan_alt_series| SUBTYPE "(number_fields.-)(atan_props.n, 1)" "nat"))) (|atan_alt_series| 0 (|atan_alt_series-2| "" 3884583398 ("" (SKEEP) (("" (LEMMA "atan_iter_alt_series2") (("" (INST -1 "x" "eps" "0" "n" "0" "x") (("1" (SKEEP) (("1" (INST 1 "epsum") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED ("epsum")) (("2" (TYPEPRED "eps_sig(eps, n)") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (TYPEPRED ("n")) (("1" (TYPEPRED "x") (("1" (SKEEP) (("1" (INST -4 "mm") (("1" (REWRITE "expt_plus") (("1" (TYPEPRED "eps") (("1" (CROSS-MULT -6) (("1" (TYPEPRED "mm") (("1" (EXPAND "/=") (("1" (REPLACE -4 -8) (("1" (CASE-REPLACE "NOT 0 ^ (1 + 2 * mm) = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("n")) (("2" (REWRITE "expt_plus") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_alt_series-1| |nil| 3633712128 ("" (SKEEP) (("" (LEMMA "atan_iter_alt_series2") (("" (INST -1 "x" "eps" "0" "n" "0" "x") (("1" (SKEEP) (("1" (INST 1 "epsum") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (EPSUM)) (("2" (TYPEPRED "eps_sig(eps, n)") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (TYPEPRED (N)) (("1" (TYPEPRED "x") (("1" (SKEEP) (("1" (INST -4 "mm") (("1" (REWRITE "expt_plus") (("1" (TYPEPRED "eps") (("1" (CROSS-MULT -6) (("1" (TYPEPRED "mm") (("1" (EXPAND "/=") (("1" (REPLACE -4 -8) (("1" (CASE-REPLACE "NOT 0 ^ (1 + 2 * mm) = 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (N)) (("2" (REWRITE "expt_plus") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_iter_alt_series2| FORMULA-DECL NIL |atan_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|epsum| SKOLEM-CONST-DECL "{epsum: nnreal | epsum <= eps_sig(eps, n)}" |atan_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x <= 1}" |atan_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |atan_props| NIL) (|n| SKOLEM-CONST-DECL "{n: posnat |
   (FORALL (m: below(n)): (x ^ (1 + 2 * m)) / (1 + 2 * m) > eps) AND
    (x ^ (1 + 2 * n)) / (1 + 2 * n) <= eps}" |atan_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atan_series_n| CONST-DECL "real" |atan| |trig|) (|eps_sig| CONST-DECL "{z: posreal | z <= eps}" |atan_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|bounding?_TCC1| 0 (|bounding?_TCC1-1| |nil| 3633715562 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bounding?| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_props.n), 1))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC1| 0 (|bound_iter_TCC1-1| |nil| 3790099940 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(1, number_fields.*(2, atan_props.m))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC2| 0 (|bound_iter_TCC2-1| |nil| 3790099940 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(1, number_fields.*(2, atan_props.nn))" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC3| 0 (|bound_iter_TCC1-1| |nil| 3633715562 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "atan_props.N" "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC4| 0 (|bound_iter_TCC2-1| |nil| 3633715562 ("" (SKEEP) (("" (GROUND) (("" (CASE "1/eps-N/x^N>=0") (("1" (GROUND) NIL NIL) ("2" (MOVE-TERMS 1 L 2) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|bound_iter| SUBTYPE "floor_ceil.ceiling((number_fields.-)(number_fields./(1, atan_props.eps), number_fields./((atan_props.N), exponentiation.^(atan_props.x, atan_props.N))))" "naturalnumber"))) (|bound_iter_TCC5| 0 (|bound_iter_TCC3-1| |nil| 3633715562 ("" (SUBTYPE-TCC) NIL NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(number_fields.*(2, atan_props.n), 3)" "{x1: odd_int | reals.>(x1, 0)}"))) (|bound_iter_TCC6| 0 (|bound_iter_TCC6-1| NIL 3884579945 ("" (SUBTYPE-TCC) NIL NIL) ((|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(number_fields.*(2, atan_props.z`3), 3)" "{x1: odd_int | reals.>(x1, 0)}"))) (|bound_iter_TCC7| 0 (|bound_iter_TCC4-2| |nil| 3767449114 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "atan_props.N" "{i: integers.int | booleans.OR(atan_props.z`1 /= 0, reals.>=(i, 0))}")) (|bound_iter_TCC4-1| |nil| 3633715562 ("" (SKEEP :PREDS? T) (("" (EXPAND "bounding?") (("" (GROUND) (("" (SKEEP :PREDS? T) (("" (CASE "x^(1+2*m)>= x ^ (1 + 2 * n)") (("1" (CASE "1/ (1 + 2 * m) >= 1/ (1 + 2 * n)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (LEMMA "both_sides_expt_lt1_le") (("2" (CASE "x=1") (("1" (REPLACES -1) (("1" (REWRITE "expt_1i") (("1" (REWRITE "expt_1i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "1+2*n" "1+2*m" "x") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "atan_props.N" "{i: integers.int | booleans.OR(atan_props.z`1 /= 0, reals.>=(i, 0))}"))) (|bound_iter_TCC8| 0 (|bound_iter_TCC5-3| |nil| 3767449092 ("" (SKEEP :PREDS? T) (("" (EXPAND "bounding?") (("" (GROUND) (("" (SKEEP :PREDS? T) (("" (CASE "x^(1+2*m)>= x ^ (1 + 2 * n)") (("1" (CASE "1/ (1 + 2 * m) >= 1/ (1 + 2 * n)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL) ("2" (LEMMA "both_sides_expt_lt1_le") (("2" (CASE "x=1") (("1" (REPLACES -1) (("1" (REWRITE "expt_1i") (("1" (REWRITE "expt_1i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "1+2*n" "1+2*m" "x") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bounding?| CONST-DECL "bool" |atan_props| NIL) (|both_sides_expt_lt1_le| FORMULA-DECL NIL |exponentiation| NIL) (|x| SKOLEM-CONST-DECL "{x: posreal | x <= 1}" |atan_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|ge_times_ge_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(atan_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, m))), (number_fields.+)(1, number_fields.*(2, m))), atan_props.eps), reals.<=(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, nn))), (number_fields.+)(1, number_fields.*(2, nn))), atan_props.eps))}")) (|bound_iter_TCC5-2| |nil| 3633734109 ("" (SKEEP) (("" (EXPAND "bounding?") (("" (GROUND) NIL NIL)) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(atan_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, m))), (number_fields.+)(1, number_fields.*(2, m))), atan_props.eps), reals.<=(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, nn))), (number_fields.+)(1, number_fields.*(2, nn))), atan_props.eps))}")) (|bound_iter_TCC5-1| |nil| 3633715562 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(atan_props.n, 1)" "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, m))), (number_fields.+)(1, number_fields.*(2, m))), atan_props.eps), reals.<=(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, nn))), (number_fields.+)(1, number_fields.*(2, nn))), atan_props.eps))}"))) (|bound_iter_TCC9| 0 (|bound_iter_TCC6-2| |nil| 3767449078 ("" (SKEEP) (("" (EXPAND "bounding?") (("" (GROUND) NIL NIL)) NIL)) NIL) ((|bounding?| CONST-DECL "bool" |atan_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bound_iter| SUBTYPE "(number_fields.+)(atan_props.n, 1)" "{n: naturalnumbers.nat | reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, n))), (number_fields.+)(1, number_fields.*(2, n))), atan_props.eps)}")) (|bound_iter_TCC6-1| |nil| 3633715562 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (EXPAND "bounding?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "bounding?") (("2" (FLIP-INEQ 3) (("2" (CASE "(3+2*n)/x^(3+2*n)<1/eps") (("1" (MOVE-TERMS -1 L 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "bounding?") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(2 * (n + 1) + 3) / x ^ (2 * (n + 1) + 3)>= 2+(2 * n + 3) / x ^ (2 * n + 3)") (("1" (SWAP-REL -1) (("1" (MOVE-TERMS -1 R 1) (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 L 1) (("1" (BOTH-SIDES "+" "1/eps" -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "2*(n+1)+3 = 2+(2*n+3)") (("1" (REWRITE "expt_plus" 1) (("1" (CASE "(2*n+3)/(x ^ 2 * x ^ (3 + 2 * n))>=(2*n+3)/x ^ (3 + 2 * n)") (("1" (CASE "2/(x ^ 2 * x ^ (3 + 2 * n))>=2") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (X)) (("2" (CASE "FORALL (nn:nat): x^nn<=1") (("1" (INST-CP -1 "2") (("1" (INST -1 "3+2*n") (("1" (MULT-INEQ -1 -2) (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INDUCT "nn") (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (MULT-INEQ -1 -4) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x^2<=1") (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (CASE "3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)<=3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (REWRITE "expt_x2") (("2" (MULT-INEQ -3 -3) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bound_iter| SUBTYPE "(number_fields.+)(atan_props.n, 1)" "{n: naturalnumbers.nat | reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, n))), (number_fields.+)(1, number_fields.*(2, n))), atan_props.eps)}"))) (|bound_iter_TCC10| 0 (|bound_iter_TCC10-1| "" 3884583446 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (EXPAND "bounding?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "bounding?") (("2" (FLIP-INEQ 3) (("2" (CASE "(3+2*n)/x^(3+2*n)<1/eps") (("1" (MOVE-TERMS -1 L 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "bounding?") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(2 * (n + 1) + 3) / x ^ (2 * (n + 1) + 3)>= 2+(2 * n + 3) / x ^ (2 * n + 3)") (("1" (SWAP-REL -1) (("1" (MOVE-TERMS -1 R 1) (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 L 1) (("1" (BOTH-SIDES "+" "1/eps" -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "2*(n+1)+3 = 2+(2*n+3)") (("1" (REWRITE "expt_plus" 1) (("1" (CASE "(2*n+3)/(x ^ 2 * x ^ (3 + 2 * n))>=(2*n+3)/x ^ (3 + 2 * n)") (("1" (CASE "2/(x ^ 2 * x ^ (3 + 2 * n))>=2") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED ("x")) (("2" (CASE "FORALL (nn:nat): x^nn<=1") (("1" (INST-CP -1 "2") (("1" (INST -1 "3+2*n") (("1" (MULT-INEQ -1 -2) (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INDUCT "nn") (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "expt_plus") (("2" (MULT-INEQ -1 -4) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x^2<=1") (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (CASE "3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)<=3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (REWRITE "expt_x2") (("2" (MULT-INEQ -3 -3) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bound_iter| TERMINATION "atan_props.bound_iter(atan_props.x, atan_props.eps, (number_fields.+)(atan_props.n, 1))" "NIL")) (|bound_iter_TCC7-2| |nil| 3767448975 ("" (SKEEP) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (EXPAND "bounding?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "bounding?") (("2" (FLIP-INEQ 3) (("2" (CASE "(3+2*n)/x^(3+2*n)<1/eps") (("1" (MOVE-TERMS -1 L 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "bounding?") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "(2 * (n + 1) + 3) / x ^ (2 * (n + 1) + 3)>= 2+(2 * n + 3) / x ^ (2 * n + 3)") (("1" (SWAP-REL -1) (("1" (MOVE-TERMS -1 R 1) (("1" (MOVE-TERMS -1 L 1) (("1" (MOVE-TERMS -1 L 1) (("1" (BOTH-SIDES "+" "1/eps" -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE-REPLACE "2*(n+1)+3 = 2+(2*n+3)") (("1" (REWRITE "expt_plus" 1) (("1" (CASE "(2*n+3)/(x ^ 2 * x ^ (3 + 2 * n))>=(2*n+3)/x ^ (3 + 2 * n)") (("1" (CASE "2/(x ^ 2 * x ^ (3 + 2 * n))>=2") (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (X)) (("2" (CASE "FORALL (nn:nat): x^nn<=1") (("1" (INST-CP -1 "2") (("1" (INST -1 "3+2*n") (("1" (MULT-INEQ -1 -2) (("1" (CROSS-MULT 1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INDUCT "nn") (("1" (REWRITE "expt_x0") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "expt_plus") (("2" (MULT-INEQ -1 -4) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x^2<=1") (("1" (CROSS-MULT 1) (("1" (GROUND) (("1" (CASE "3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)<=3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (REWRITE "expt_x2") (("2" (MULT-INEQ -3 -3) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_ge2| FORMULA-DECL NIL |real_props| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|bounding?| CONST-DECL "bool" |atan_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (>= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL (|bound_iter| TERMINATION "atan_props.bound_iter(atan_props.x, atan_props.eps, (number_fields.+)(atan_props.n, 1))" "NIL")) (|bound_iter_TCC7-1| |nil| 3767448175 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|bound_iter| TERMINATION "atan_props.bound_iter(atan_props.x, atan_props.eps, (number_fields.+)(atan_props.n, 1))" "NIL"))) (|iter_bound| 0 (|iter_bound-2| "" 3790100143 ("" (SKEEP) (("" (INST 2 "bound_iter(x,eps,0)") (("1" (TYPEPRED "bound_iter(x,eps,0)") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|x| SKOLEM-CONST-DECL "{x: nnreal | x <= 1}" |atan_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |atan_props| NIL) (|bound_iter| DEF-DECL "{nn: posnat |
   (FORALL (m: below(nn)): x ^ (2 * m + 1) / (2 * m + 1) > eps) AND
    x ^ (2 * nn + 1) / (2 * nn + 1) <= eps}" |atan_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK) (|iter_bound-1| |nil| 3633713098 ("" (SKEEP) (("" (INST 2 "bound_iter(x,eps,0)") (("1" (TYPEPRED "bound_iter(x,eps,0)") (("1" (GROUND) NIL NIL) ("2" (REWRITE "expt_x1") (("2" (GROUND) NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (REWRITE "expt_x1") (("2" (GROUND) NIL NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|atan_alt_bound1| 0 (|atan_alt_bound1-3| "" 3884583491 ("" (SKEEP) (("" (EXPAND "atan_alt") (("" (NAME-REPLACE "X" "IF x = 1 THEN 1
                                    ELSE best_rational(x, min(eps / 3 + x, 1))
                                    ENDIF") (("1" (CASE-REPLACE "atan(x) - atan_approx_iter_alt(X, eps / 3, 0, 0, X) = (atan(x) - atan(X)) + (atan(X)-atan_approx_iter_alt(X, eps / 3, 0, 0, X))") (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST -1 "(atan(x) - atan(X))" "(atan(X) - atan_approx_iter_alt(X, eps / 3, 0, 0, X))") (("1" (CASE "abs(atan(x) - atan(X))<=eps/3") (("1" (CASE "abs((atan(X) - atan_approx_iter_alt(X, eps / 3, 0, 0, X)))<=2*eps/3") (("1" (GROUND) NIL NIL) ("2" (HIDE -) (("2" (HIDE 2) (("2" (CASE "X>=0 AND X<=1") (("1" (FLATTEN) (("1" (LEMMA "iter_bound") (("1" (INST -1 "X" "eps/3") (("1" (SPLASH -1) (("1" (SKEEP) (("1" (LEMMA "atan_alt_series") (("1" (INST -1 "X" "eps/3" "n") (("1" (SKEEP :PREDS? T) (("1" (REPLACES -3) (("1" (LEMMA "triangle") (("1" (INST -1 "(atan(X) - atan_series_n(X, n - 1))" "-delt") (("1" (CASE "abs(-delt)<=eps/3") (("1" (CASE "abs((atan(X) - atan_series_n(X, n - 1)))<=eps/3") (("1" (GROUND) NIL NIL) ("2" (LEMMA "atan_series") (("2" (INST -1 "n-1 " "X") (("2" (SIMPLIFY -1) (("2" (CASE "X=0") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CASE-REPLACE "abs(X ^ (1 + 2 * n)) / (1 + 2 * n) = X ^ (2 * n + 1) / (2 * n + 1)") (("1" (ASSERT) NIL NIL) ("2" (CASE "X ^ (1 + 2 * n) >= 0") (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 1)) (("2" (CASE "X=0") (("1" (REPLACES -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT X > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 1) (("2" (LEMMA "nnreal_expt") (("2" (INST -1 "1+2*n" "X") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 -3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_approx_iter_alt") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (LEMMA "atan_strict_increasing") (("2" (EXPAND "strict_increasing?") (("2" (INST -1 "0" "X") (("2" (GROUND) (("1" (REWRITE "atan_0") (("1" (EXPAND "abs") (("1" (GROUND) (("1" (LEMMA "atan_bnds") (("1" (INST -1 "X") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "X=0") (("1" (REPLACES -1) (("1" (REWRITE "atan_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "X") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (CASE "EXISTS ((ep:nnreal | ep<=eps/3)): X= x+ep") (("1" (SKEEP) (("1" (REPLACES -1) (("1" (TYPEPRED ("ep")) (("1" (LEMMA "atan_of_sum") (("1" (INST -1 "x" "ep") (("1" (FLATTEN) (("1" (GRIND :EXCLUDE "atan") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (HIDE 2) (("2" (CASE "x=1") (("1" (INST 1 "0") (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED "best_rational(x, min(eps / 3 + x, 1))") (("1" (GROUND) (("1" (INST 2 "best_rational(x, min(eps / 3 + x, 1))-x") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "X") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "X") (("3" (LIFT-IF 1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_alt_bound1-2| "" 3634985553 ("" (SKEEP) (("" (EXPAND "atan_alt") (("" (NAME-REPLACE "X" "IF x = 1 THEN 1
                                    ELSE best_rational(x, min(eps / 3 + x, 1))
                                    ENDIF") (("1" (CASE-REPLACE "atan(x) - atan_approx_iter_alt(X, eps / 3, 0, 0, X) = (atan(x) - atan(X)) + (atan(X)-atan_approx_iter_alt(X, eps / 3, 0, 0, X))") (("1" (HIDE -1) (("1" (LEMMA "triangle") (("1" (INST -1 "(atan(x) - atan(X))" "(atan(X) - atan_approx_iter_alt(X, eps / 3, 0, 0, X))") (("1" (CASE "abs(atan(x) - atan(X))<=eps/3") (("1" (CASE "abs((atan(X) - atan_approx_iter_alt(X, eps / 3, 0, 0, X)))<=2*eps/3") (("1" (GROUND) NIL NIL) ("2" (HIDE -) (("2" (HIDE 2) (("2" (CASE "X>=0 AND X<=1") (("1" (FLATTEN) (("1" (LEMMA "iter_bound") (("1" (INST -1 "X" "eps/3") (("1" (SPLASH -1) (("1" (SKEEP) (("1" (LEMMA "atan_alt_series") (("1" (INST -1 "X" "eps/3" "n") (("1" (SKEEP :PREDS? T) (("1" (REPLACES -3) (("1" (LEMMA "triangle") (("1" (INST -1 "(atan(X) - atan_series_n(X, n - 1))" "-delt") (("1" (CASE "abs(-delt)<=eps/3") (("1" (CASE "abs((atan(X) - atan_series_n(X, n - 1)))<=eps/3") (("1" (GROUND) NIL NIL) ("2" (LEMMA "atan_series") (("2" (INST -1 "n-1 " "X") (("2" (SIMPLIFY -1) (("2" (CASE "X=0") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CASE-REPLACE "abs(X ^ (1 + 2 * n)) / (1 + 2 * n) = X ^ (2 * n + 1) / (2 * n + 1)") (("1" (ASSERT) NIL NIL) ("2" (CASE "X ^ (1 + 2 * n) >= 0") (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 1)) (("2" (CASE "X=0") (("1" (REPLACES -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT X > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE -2 1) (("2" (LEMMA "nnreal_expt") (("2" (INST -1 "1+2*n" "X") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 -3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_approx_iter_alt") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (LEMMA "atan_strict_increasing") (("2" (EXPAND "strict_increasing?") (("2" (INST -1 "0" "X") (("2" (GROUND) (("1" (REWRITE "atan_0") (("1" (EXPAND "abs") (("1" (GROUND) (("1" (LEMMA "atan_bnds") (("1" (INST -1 "X") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "X=0") (("1" (REPLACES -1) (("1" (REWRITE "atan_0") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "X") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (CASE "EXISTS ((ep:nnreal | ep<=eps/3)): X= x+ep") (("1" (SKEEP) (("1" (REPLACES -1) (("1" (TYPEPRED (EP)) (("1" (LEMMA "atan_of_sum") (("1" (INST -1 "x" "ep") (("1" (FLATTEN) (("1" (GRIND :EXCLUDE "atan") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "X") (("2" (HIDE 2) (("2" (CASE "x=1") (("1" (INST 1 "0") (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED "best_rational(x, min(eps / 3 + x, 1))") (("1" (GROUND) (("1" (INST 2 "best_rational(x, min(eps / 3 + x, 1))-x") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "X") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "X") (("3" (LIFT-IF 1) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|atan_alt| CONST-DECL "real" |fast_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|) (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan| |trig|) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|atan_approx_iter_alt| DEF-DECL "real" |fast_approx| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|iter_bound| FORMULA-DECL NIL |atan_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|atan_alt_series| FORMULA-DECL NIL |atan_props| NIL) (|atan_series| FORMULA-DECL NIL |atan| |trig|) (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_expt| JUDGEMENT-TCC NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|zero_hat| FORMULA-DECL NIL |exponent_props| |reals|) (|atan_series_n| CONST-DECL "real" |atan| |trig|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|n| SKOLEM-CONST-DECL "posnat" |atan_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |atan_props| NIL) (|atan_strict_increasing| FORMULA-DECL NIL |atan| |trig|) (|atan_0| FORMULA-DECL NIL |atan| |trig|) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|atan_bnds| FORMULA-DECL NIL |atan| |trig|) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atan_of_sum| FORMULA-DECL NIL |atan_props| NIL) (X SKOLEM-CONST-DECL "rational" |atan_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|best_rational| CONST-DECL "{q: rat | r1 <= q AND q <= r2}" |best_rational| |reals|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_min| APPLICATION-JUDGEMENT "{z: posreal | z <= x AND z <= y}" |real_defs| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|atan_alt_bound1-1| |nil| 3633734539 ("" (SKEEP) (("" (LEMMA "iter_bound") (("" (INST -1 "x" "eps") (("" (SPLASH -1) (("1" (SKEEP) (("1" (LEMMA "atan_alt_series") (("1" (INST -1 "x" "eps" "n") (("1" (REPLACES -1) (("1" (LEMMA "atan_series") (("1" (INST -1 "n-1" "x") (("1" (SIMPLIFY -1) (("1" (EXPAND "abs" -1 2) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_alt") (("2" (EXPAND "atan_approx_iter_alt") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (CASE "x=0") (("1" (GROUND) (("1" (REPLACE -1) (("1" (GROUND) (("1" (REWRITE "atan_0") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_strict_increasing") (("2" (EXPAND "strict_increasing?") (("2" (INST -1 "0" "x") (("2" (GROUND) (("2" (REWRITE "atan_0") (("2" (EXPAND "abs") (("2" (GROUND) (("2" (LEMMA "atan_bnds") (("2" (INST -1 "x") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|atan_alt_bound2| 0 (|atan_alt_bound2-1| |nil| 3633735575 ("" (SKEEP) (("" (EXPAND "atan_approx_pos_le1_alt") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "atan_alt_bound1") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_reduce_close") (("2" (INST -1 "x" "eps/x") (("2" (LEMMA "triangle") (("2" (INST -1 "atan(x) -2 * atan(reduce_approx(x, eps / x))" "2 * atan(reduce_approx(x, eps / x)) -  2 * atan_alt(reduce_approx(x, eps / x), eps / 4)") (("1" (SIMPLIFY 1) (("1" (CASE "atan(x) - 2 * atan(reduce_approx(x, eps / x)) +
                      (2 * atan(reduce_approx(x, eps / x)) -
                        2 * atan_alt(reduce_approx(x, eps / x), eps / 4)) = atan(x) - 2 * atan_alt(reduce_approx(x, eps / x), eps / 4)") (("1" (REPLACES -1) (("1" (CASE "(2 * atan(reduce_approx(x, eps / x)) -
                          2 * atan_alt(reduce_approx(x, eps / x), eps / 4)) = 2*(atan(reduce_approx(x, eps / x)) -
                           atan_alt(reduce_approx(x, eps / x), eps / 4))") (("1" (REPLACES -1) (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" -1 3) (("1" (LEMMA "atan_alt_bound1") (("1" (INST?) (("1" (FLATTEN) (("1" (MOVE-TERMS -3 L 1) (("1" (EXPAND "abs" -2 3) (("1" (LIFT-IF -2) (("1" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (MOVE-TERMS -4 R 1) (("2" (CASE "x * (eps / x) / 2 = eps/2") (("1" (REPLACES -1) (("1" (GROUND) NIL NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reduce_approx") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (EXPAND "reduce_approx") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reduce_approx") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_approx_pos_le1_alt| CONST-DECL "real" |fast_approx| NIL) (|atan_alt_bound1| FORMULA-DECL NIL |atan_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_reduce_close| FORMULA-DECL NIL |atan_props| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_alt| CONST-DECL "real" |fast_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan| |trig|) (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|cos| CONST-DECL "real" |sincos_def| |trig|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|reduce_approx| CONST-DECL "real" |fast_approx| NIL) (|x| SKOLEM-CONST-DECL "{x: posreal | x <= 1}" |atan_props| NIL) (|eps| SKOLEM-CONST-DECL "posreal" |atan_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|atan_alt_bound3| 0 (|atan_alt_bound3-3| "" 3884583524 ("" (SKEEP) (("" (EXPAND "atan_approx_pos") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "atan_alt_bound2") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_inv") (("2" (INST -1 "x") (("2" (MOVE-TERMS -1 R 2) (("2" (MOVE-TERMS -1 L 1) (("2" (REPLACES -1) (("2" (CASE "pi / 2 - atan(1 / x) -
                    (pihalf - atan_approx_pos_le1_alt(1 / x,  eps / 2)) = (pi / 2 - pihalf) + (atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))") (("1" (REPLACES -1) (("1" (LEMMA "triangle") (("1" (INST -1 "(pi / 2 - pihalf)" "(atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))") (("1" (TYPEPRED ("pihalf")) (("1" (CASE "abs((atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))) = abs((atan(1 / x)-atan_approx_pos_le1_alt(1 / x,  eps / 2) ))") (("1" (REPLACES -1) (("1" (LEMMA "atan_alt_bound2") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_alt_bound3-2| "" 3790100148 ("" (SKEEP) (("" (EXPAND "atan_approx_pos") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "atan_alt_bound2") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_inv") (("2" (INST -1 "x") (("2" (MOVE-TERMS -1 R 2) (("2" (MOVE-TERMS -1 L 1) (("2" (REPLACES -1) (("2" (CASE "pi / 2 - atan(1 / x) -
                    (pihalf - atan_approx_pos_le1_alt(1 / x,  eps / 2)) = (pi / 2 - pihalf) + (atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))") (("1" (REPLACES -1) (("1" (LEMMA "triangle") (("1" (INST -1 "(pi / 2 - pihalf)" "(atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))") (("1" (TYPEPRED (PIHALF)) (("1" (CASE "abs((atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))) = abs((atan(1 / x)-atan_approx_pos_le1_alt(1 / x,  eps / 2) ))") (("1" (REPLACES -1) (("1" (LEMMA "atan_alt_bound2") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_approx_pos| CONST-DECL "real" |fast_approx| NIL) (|atan_alt_bound2| FORMULA-DECL NIL |atan_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|atan_inv| FORMULA-DECL NIL |atan| |trig|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|) (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan| |trig|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|atan_approx_pos_le1_alt| CONST-DECL "real" |fast_approx| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK) (|atan_alt_bound3-1| |nil| 3633738203 ("" (SKEEP) (("" (EXPAND "atan_approx_pos") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "atan_alt_bound2") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_inv") (("2" (INST -1 "x") (("2" (MOVE-TERMS -1 R 2) (("2" (MOVE-TERMS -1 L 1) (("2" (REPLACES -1) (("2" (CASE "pi / 2 - atan(1 / x) -
                    (pihalf - atan_approx_pos_le1_alt(1 / x,  eps / 2)) = (pi / 2 - pihalf) + (atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))") (("1" (REPLACES -1) (("1" (LEMMA "triangle") (("1" (INST -1 "(pi / 2 - pihalf)" "(atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))") (("1" (TYPEPRED (PIHALF)) (("1" (CASE "abs((atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))) = abs((atan(1 / x)-atan_approx_pos_le1_alt(1 / x,  eps / 2) ))") (("1" (REPLACES -1) (("1" (LEMMA "atan_alt_bound2") (("1" (INST?) (("1" (GROUND) NIL NIL) ("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|atan_fast_approx_bound| 0 (|atan_fast_approx_bound-1| |nil| 3633739159 ("" (SKEEP) (("" (EXPAND "atan_fast_approx") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "atan_alt_bound3") NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REWRITE "atan_0") (("1" (GROUND) (("1" (EXPAND "abs") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_neg") (("2" (INST -1 "x") (("2" (MOVE-TERMS -1 L 1) (("2" (MOVE-TERMS -1 R 1) (("2" (SIMPLIFY 1) (("2" (CASE "0 - -atan(x) = atan(x)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (CASE "abs(-(atan(-x)) - -atan_approx_pos(-x, eps, pihalf)) = abs(atan(-x)  -atan_approx_pos(-x, eps, pihalf))") (("1" (REPLACES -1) (("1" (REWRITE "atan_alt_bound3") NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|atan_alt_bound3| FORMULA-DECL NIL |atan_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|atan_0| FORMULA-DECL NIL |atan| |trig|) (|atan_neg| FORMULA-DECL NIL |atan| |trig|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|) (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan| |trig|) (|atan_approx_pos| CONST-DECL "real" |fast_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK)) (|pi_bound| 0 (|pi_bound-1| |nil| 3633777417 ("" (SKEEP) (("" (REWRITE "pi_value") (("" (REWRITE "atan_1") (("" (EXPAND "pi_fast_approx") (("" (LEMMA "triangle") (("" (INST -1 "16 * atan(1/5)  -
           16 * atan_alt(1/5, eps / 20)" "4 * atan_alt(1/239, eps / 20)- 4 * atan(1/239)") (("" (CASE-REPLACE "16 * atan(1 / 5) - 16 * atan_alt(1 / 5, eps / 20) = 16 *( atan(1 / 5) - atan_alt(1 / 5, eps / 20))") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs(4 * atan_alt(1 / 239, eps / 20) - 4 * atan(1 / 239)) = abs(4 * (atan(1 / 239) - atan_alt(1 / 239, eps / 20) ))") (("1" (HIDE -1) (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" -1 2) (("1" (EXPAND "abs" -1 3) (("1" (LEMMA "atan_alt_bound1") (("1" (INST-CP -1 "1/5" "eps/20") (("1" (INST -1 "1/239" "eps/20") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_value| FORMULA-DECL NIL |atan| |trig|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| |trig|) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| |trig|) (|tan_restrict| CONST-DECL "real" |trig_basic| |trig|) (|atan| CONST-DECL "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" |atan| |trig|) (>= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_alt| CONST-DECL "real" |fast_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|atan_alt_bound1| FORMULA-DECL NIL |atan_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|atan_1| FORMULA-DECL NIL |atan| |trig|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|pi_br_bound| 0 (|pi_br_bound-1| |nil| 3633778087 ("" (SKEEP) (("" (EXPAND "pi_fast_approx_br") (("" (TYPEPRED "best_rational(pi_fast_approx(eps / 2) - eps / 2,
                           pi_fast_approx(eps / 2) + eps / 2)") (("" (CASE "abs(pi_fast_approx(eps/2) - best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                pi_fast_approx(eps / 2) + eps / 2) )<=eps/2") (("1" (HIDE (-2 -3)) (("1" (CASE "abs(pi -
                    best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                  pi_fast_approx(eps / 2) + eps / 2)) = abs((pi - pi_fast_approx(eps/2)) + (pi_fast_approx(eps/2)-
                    best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                  pi_fast_approx(eps / 2) + eps / 2)))") (("1" (REPLACE -1) (("1" (LEMMA "triangle") (("1" (INST -1 "(pi - pi_fast_approx(eps / 2))" "            (pi_fast_approx(eps / 2) -
                    best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                  pi_fast_approx(eps / 2) + eps / 2))") (("1" (LEMMA "pi_bound") (("1" (INST -1 "eps/2") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "abs") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_fast_approx_br| CONST-DECL "real" |fast_approx| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|cos| CONST-DECL "real" |sincos_def| |trig|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|pi_bound| FORMULA-DECL NIL |atan_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|best_rational| CONST-DECL "{q: rat | r1 <= q AND q <= r2}" |best_rational| |reals|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pi_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|pihalf_bound| 0 (|pihalf_bound-1| |nil| 3633779379 ("" (SKEEP) (("" (EXPAND "pihalf_fast_approx") (("" (CASE " abs(pi / 2 - pi_fast_approx(eps) / 2) =  abs(1/2*(pi  - pi_fast_approx(eps)))") (("1" (REPLACES -1) (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" 1 1) (("1" (CROSS-MULT) (("1" (LEMMA "pi_bound") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pihalf_fast_approx| CONST-DECL "real" |fast_approx| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|pi_bound| FORMULA-DECL NIL |atan_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_fast_approx| CONST-DECL "real" |fast_approx| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|cos| CONST-DECL "real" |sincos_def| |trig|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|pihalf_br_bound| 0 (|pihalf_br_bound-1| |nil| 3633779631 ("" (SKEEP) (("" (EXPAND "pihalf_fast_approx_br") (("" (CASE " abs(pi / 2 - pi_fast_approx_br(eps) / 2) =  abs(1/2*(pi  - pi_fast_approx_br(eps)))") (("1" (REPLACES -1) (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" 1 1) (("1" (CROSS-MULT) (("1" (LEMMA "pi_br_bound") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pihalf_fast_approx_br| CONST-DECL "real" |fast_approx| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|pi_br_bound| FORMULA-DECL NIL |atan_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_fast_approx_br| CONST-DECL "real" |fast_approx| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| |trig|) (|cos| CONST-DECL "real" |sincos_def| |trig|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| |trig|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| |trig|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL)))
