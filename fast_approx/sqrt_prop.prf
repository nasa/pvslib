(|sqrt_prop|
 (|estimate_bound_TCC1| 0
  (|estimate_bound_TCC1-1| |nil| 3632666138 ("" (SUBTYPE-TCC) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL))
   NIL
   (|estimate_bound| SUBTYPE "2"
    "{i: integers.int | booleans.OR(sqrt_prop.a /= 0, reals.>=(i, 0))}")))
 (|estimate_bound| 0
  (|estimate_bound-2| "" 3884583562
   ("" (SKEEP)
    (("" (NAME "y" "(log_int(x, 4))`2")
      (("" (NAME "m" "(log_int(x, 4))`1")
        ((""
          (CASE
              "(LAMBDA (m: int, y: {y: real | y < 4 AND y >= 1 AND x = 4 ^ m * y}):
   a ^ 2 >= x AND abs(a ^ 2 - x) <= eps * 2 ^ (m + 1) IMPLIES
    abs(a - sqrt(x)) <= eps)
    (m, y)")
          (("1" (BETA) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (BETA)
              (("2" (TYPEPRED ("y"))
                (("2" (REPLACE -4 -3)
                  (("2" (FLATTEN)
                    (("2" (CASE "abs(a ^ 2 - x) = (a+sqrt(x))*abs(a-sqrt(x))")
                      (("1" (REPLACES -1)
                        (("1" (CASE " 2^(m+1)<=(a+sqrt(x))")
                          (("1" (BOTH-SIDES "*" "eps" -1)
                            (("1"
                              (CASE
                                  "(a + sqrt(x)) * abs(a - sqrt(x)) <= (a + sqrt(x)) * eps")
                              (("1" (FLIP-INEQ 1)
                                (("1" (CASE "a+sqrt(x)>=a+sqrt(x)")
                                  (("1" (MULT-INEQ -1 -2)
                                    (("1" (GROUND) NIL NIL)
                                     ("2" (EXPAND "abs" 1 1)
                                      (("2" (EXPAND "abs" 1 2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GROUND) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (GROUND) NIL NIL))
                              NIL)
                             ("2" (GROUND) NIL NIL))
                            NIL)
                           ("2" (CASE "2^m<=sqrt(x)")
                            (("1" (CASE "sqrt(x)<=a")
                              (("1" (CASE "2^m<=a")
                                (("1" (REWRITE "expt_plus")
                                  (("1" (REWRITE "expt_x1")
                                    (("1" (GROUND) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (GROUND) NIL NIL))
                                NIL)
                               ("2" (FLIP-INEQ 1)
                                (("2" (MULT-INEQ -1 -1)
                                  (("2" (GROUND)
                                    (("2" (CASE-REPLACE "sqrt(x)*sqrt(x) = x")
                                      (("1" (REWRITE "expt_x2")
                                        (("1" (GROUND) NIL NIL)) NIL)
                                       ("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLIP-INEQ 1)
                              (("2" (MULT-INEQ -1 -1)
                                (("2" (REWRITE "expt_plus" :DIR RL)
                                  (("2" (REWRITE "expt_times")
                                    (("2" (REWRITE "expt_x2")
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE-REPLACE "sqrt(x)*sqrt(x) = x")
                                          (("1" (REPLACE -6 -2)
                                            (("1" (BOTH-SIDES "*" "4^m" -5)
                                              (("1" (GROUND) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (GROUND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "a+sqrt(x) = abs(a+sqrt(x))")
                        (("1" (REPLACES -1)
                          (("1" (REWRITE "abs_mult" :DIR RL)
                            (("1" (LEMMA "sq_sqrt")
                              (("1" (INST -1 "x")
                                (("1" (CASE-REPLACE "sqrt(x)*sqrt(x) = x")
                                  (("1" (REWRITE "expt_x2")
                                    (("1" (GROUND) NIL NIL)) NIL)
                                   ("2" (GROUND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "abs")
                          (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|estimate_bound-1| |nil| 3632666154
   ("" (SKEEP)
    (("" (NAME "y" "(log_int(x, 4))`2")
      (("" (NAME "m" "(log_int(x, 4))`1")
        ((""
          (CASE
              "(LAMBDA (m: int, y: {y: real | y < 4 AND y >= 1 AND x = 4 ^ m * y}):
   a ^ 2 >= x AND abs(a ^ 2 - x) <= eps * 2 ^ (m + 1) IMPLIES
    abs(a - sqrt(x)) <= eps)
    (m, y)")
          (("1" (BETA) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (BETA)
              (("2" (TYPEPRED (Y))
                (("2" (REPLACE -4 -3)
                  (("2" (FLATTEN)
                    (("2" (CASE "abs(a ^ 2 - x) = (a+sqrt(x))*abs(a-sqrt(x))")
                      (("1" (REPLACES -1)
                        (("1" (CASE " 2^(m+1)<=(a+sqrt(x))")
                          (("1" (BOTH-SIDES "*" "eps" -1)
                            (("1"
                              (CASE
                                  "(a + sqrt(x)) * abs(a - sqrt(x)) <= (a + sqrt(x)) * eps")
                              (("1" (FLIP-INEQ 1)
                                (("1" (CASE "a+sqrt(x)>=a+sqrt(x)")
                                  (("1" (MULT-INEQ -1 -2)
                                    (("1" (GROUND) NIL NIL)
                                     ("2" (EXPAND "abs" 1 1)
                                      (("2" (EXPAND "abs" 1 2)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GROUND) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (GROUND) NIL NIL))
                              NIL)
                             ("2" (GROUND) NIL NIL))
                            NIL)
                           ("2" (CASE "2^m<=sqrt(x)")
                            (("1" (CASE "sqrt(x)<=a")
                              (("1" (CASE "2^m<=a")
                                (("1" (REWRITE "expt_plus")
                                  (("1" (REWRITE "expt_x1")
                                    (("1" (GROUND) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (GROUND) NIL NIL))
                                NIL)
                               ("2" (FLIP-INEQ 1)
                                (("2" (MULT-INEQ -1 -1)
                                  (("2" (GROUND)
                                    (("2" (CASE-REPLACE "sqrt(x)*sqrt(x) = x")
                                      (("1" (REWRITE "expt_x2")
                                        (("1" (GROUND) NIL NIL)) NIL)
                                       ("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLIP-INEQ 1)
                              (("2" (MULT-INEQ -1 -1)
                                (("2" (REWRITE "expt_plus" :DIR RL)
                                  (("2" (REWRITE "expt_times")
                                    (("2" (REWRITE "expt_x2")
                                      (("2" (GROUND)
                                        (("2"
                                          (CASE-REPLACE "sqrt(x)*sqrt(x) = x")
                                          (("1" (REPLACE -6 -2)
                                            (("1" (BOTH-SIDES "*" "4^m" -5)
                                              (("1" (GROUND) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (GROUND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (CASE "a+sqrt(x) = abs(a+sqrt(x))")
                        (("1" (REPLACES -1)
                          (("1" (REWRITE "abs_mult" :DIR RL)
                            (("1" (LEMMA "sq_sqrt")
                              (("1" (INST -1 "x")
                                (("1" (CASE-REPLACE "sqrt(x)*sqrt(x) = x")
                                  (("1" (REWRITE "expt_x2")
                                    (("1" (GROUND) NIL NIL)) NIL)
                                   ("2" (GROUND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "abs")
                          (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|log_int| CONST-DECL
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int|
     |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|gt_times_gt_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|both_sides_times_pos_ge1| FORMULA-DECL NIL |real_props| NIL)
    (|expt_times| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|))
   SHOSTAK))
 (|sqrt_fast_approx_gen_est| 0
  (|sqrt_fast_approx_gen_est-1| |nil| 3632835737
   ("" (SKEEP)
    (("" (EXPAND "sqrt_fast_approx_gen")
      (("" (LIFT-IF 1)
        (("" (GROUND)
          (("1" (REPLACES -1)
            (("1" (EXPAND "abs") (("1" (GROUND) NIL NIL)) NIL)) NIL)
           ("2" (LEMMA "estimate_bound")
            (("2"
              (NAME-REPLACE "A" "sqrt_newton_fast_approx(X,
                          sqrt_newton_step_fast_approx(X,
                                               a,
                                               eps
                                               *
                                               2 ^ (1 + log_int(X, 4)`1)),
                          eps * 2 ^ (1 + log_int(X, 4)`1))")
              (("2" (INST -1 "A" "eps" "X")
                (("2" (TYPEPRED (A))
                  (("2" (GROUND)
                    (("2" (GROUND)
                      (("1" (REWRITE "expt_x2") NIL NIL)
                       ("2" (REWRITE "expt_x2")
                        (("2" (MOVE-TERMS -3 R 1)
                          (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|sqrt_fast_approx_gen| CONST-DECL "nnreal" |fast_approx| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt_newton_fast_approx| DEF-DECL
     "{z: posreal | z * z >= X AND z * z - X <= eps}" |fast_approx| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|log_int| CONST-DECL
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int|
     |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|estimate_bound| FORMULA-DECL NIL |sqrt_prop| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|sqrt_fast_approx_est| 0
  (|sqrt_fast_approx_est-1| |nil| 3632768170
   ("" (SKEEP)
    (("" (EXPAND "sqrt_fast_approx")
      (("" (REWRITE "sqrt_fast_approx_gen_est") NIL NIL)) NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sqrt_fast_approx_gen_est| FORMULA-DECL NIL |sqrt_prop| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|sqrt_fast_approx_upper| 0
  (|sqrt_fast_approx_upper-3| "" 3884583599
   ("" (SKEEP)
    (("" (EXPAND "sqrt_fast_approx")
      (("" (EXPAND "sqrt_fast_approx_gen")
        (("" (LIFT-IF 1)
          (("" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2"
              (NAME "Sqrt" " sqrt_newton_fast_approx(X,
                                        sqrt_newton_step_fast_approx(X,
                                                             max(sqrt_ub(X,0), eps),
                                                             eps
                                                             *
                                                             2 ^ (1 + log_int(X, 4)`1)),
                                        eps * 2 ^ (1 + log_int(X, 4)`1))")
              (("2" (REPLACES -1)
                (("2" (TYPEPRED ("Sqrt"))
                  (("2" (FLIP-INEQ 2)
                    (("2" (MULT-INEQ -1 -1) (("2" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sqrt_newton_fast_approx| DEF-DECL
     "{z: posreal | z * z >= X AND z * z - X <= eps}" |fast_approx| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt_ub| CONST-DECL "{zz | x <= sq(zz)}" |sqrt_approx| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|log_int| CONST-DECL
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int|
     |reals|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nonneg_real_max| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sqrt_fast_approx_gen| CONST-DECL "nnreal" |fast_approx| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL))
   SHOSTAK)
  (|sqrt_fast_approx_upper-2| |nil| 3792165673
   ("" (SKEEP)
    (("" (EXPAND "sqrt_fast_approx")
      (("" (EXPAND "safe_sqrt")
        (("" (EXPAND "sqrt_fast_approx_gen")
          (("" (LIFT-IF 1)
            (("" (GROUND)
              (("1" (GRIND) NIL NIL)
               ("2"
                (NAME "Sqrt" " sqrt_newton_fast_approx(X,
                                        sqrt_newton_step_fast_approx(X,
                                                             max(sqrt(X), eps),
                                                             eps
                                                             *
                                                             2 ^ (1 + log_int(X, 4)`1)),
                                        eps * 2 ^ (1 + log_int(X, 4)`1))")
                (("2" (REPLACES -1)
                  (("2" (TYPEPRED (SQRT))
                    (("2" (FLIP-INEQ 2)
                      (("2" (MULT-INEQ -1 -1) (("2" (GROUND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt_fast_approx| CONST-DECL "nnreal" |fast_approx| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sqrt_fast_approx_gen| CONST-DECL "nnreal" |fast_approx| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_real_max| APPLICATION-JUDGEMENT
     "{z: nonneg_real | z >= x AND z >= y}" |real_defs| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|log_int| CONST-DECL
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" |log_int|
     |reals|)
    (< CONST-DECL "bool" |reals| NIL)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|sqrt_newton_step_fast_approx| CONST-DECL "posreal" |fast_approx| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt_newton_fast_approx| DEF-DECL
     "{z: posreal | z * z >= X AND z * z - X <= eps}" |fast_approx| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL)
  (|sqrt_fast_approx_upper-1| |nil| 3633687447
   ("" (SKEEP)
    (("" (EXPAND "sqrt_fast_approx")
      (("" (EXPAND "sqrt_fast_approx_gen")
        (("" (LIFT-IF 1)
          (("" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2"
              (NAME "Sqrt" " sqrt_newton_fast_approx(X,
                      sqrt_newton_step_fast_approx(X,
                                           max(SQRT(X), eps),
                                           eps
                                           *
                                           2 ^ (1 + log_int(X, 4)`1)),
                      eps * 2 ^ (1 + log_int(X, 4)`1))")
              (("2" (REPLACES -1)
                (("2" (TYPEPRED (SQRT))
                  (("2" (FLIP-INEQ 2)
                    (("2" (MULT-INEQ -1 -1) (("2" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

