(|alt_inverse_mat|
 (|inv?_TCC1| 0
  (|inv?_TCC1-0| "" 3929004516 ("" (GRIND) NIL NIL) NIL SHOSTAK
   (|inv?| SUBTYPE "matrices.rows(alt_inverse_mat.A)" "posnat"))
  (|inv?_TCC1-1| |nil| 3837245448 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|))
   NIL (|inv?| SUBTYPE "matrices.rows(alt_inverse_mat.A)" "posnat")))
 (|inv_TCC1| 0
  (|inv_TCC1-3| "" 3929004640
   (""
    (INST 1
     "LAMBDA(A: (inv?)): choose( {Iv: Square | rows(Iv) = rows(A) AND Iv * A = Id(rows(A)) AND A * Iv = Id(rows(A))})")
    (("" (SKEEP)
      (("" (EXPAND "nonempty?")
        (("" (EXPAND "empty?")
          (("" (TYPEPRED "A")
            (("" (HIDE -1)
              (("" (EXPAND "inv?" -5)
                (("" (SKEEP -5)
                  (("" (INST -8 "Iv")
                    (("" (EXPAND "member" 1) (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|inv| EXISTENCE ""
    "[A: (inv?) -> {Iv: matrices.Square | booleans.AND(matrices.rows(Iv) = matrices.rows(A), booleans.AND(matrices.*(Iv, A) = matrices.Id(matrices.rows(A)), matrices.*(A, Iv) = matrices.Id(matrices.rows(A))))}]"))
  (|inv_TCC1-2| "" 3929004630
   ("" (ASSERT)
    (("" (GRIND) (("" (GRIND-REALS) (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)
   NIL SHOSTAK
   (|inv| EXISTENCE ""
    "[A: (inv?) -> {Iv: matrices.Square | booleans.AND(matrices.rows(Iv) = matrices.rows(A), booleans.AND(matrices.*(Iv, A) = matrices.Id(matrices.rows(A)), matrices.*(A, Iv) = matrices.Id(matrices.rows(A))))}]"))
  (|inv_TCC1-0| "" 3929004531 ("" (POSTPONE) NIL NIL) NIL SHOSTAK
   (|inv| EXISTENCE ""
    "[A: (inv?) -> {Iv: matrices.Square | booleans.AND(matrices.rows(Iv) = matrices.rows(A), booleans.AND(matrices.*(Iv, A) = matrices.Id(matrices.rows(A)), matrices.*(A, Iv) = matrices.Id(matrices.rows(A))))}]"))
  (|inv_TCC1-1| |nil| 3837245448
   (""
    (INST 1 "LAMBDA(A: (inv?)): choose( {Iv: Square |
                      rows(Iv) = rows(A) AND
                       Iv * A = Id(rows(A)) AND A * Iv = Id(rows(A))})")
    (("" (SKEEP)
      (("" (EXPAND "nonempty?")
        (("" (EXPAND "empty?")
          (("" (TYPEPRED "A")
            (("" (HIDE -1)
              (("" (EXPAND "inv?" -5)
                (("" (SKEEP -5)
                  (("" (INST -8 "Iv")
                    (("" (EXPAND "member" 1) (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv?| CONST-DECL "bool" |alt_inverse_mat| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     |matrices| |matrices|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|))
   NIL
   (|inv| EXISTENCE ""
    "[A: (inv?) -> {Iv: matrices.Square | booleans.AND(matrices.rows(Iv) = matrices.rows(A), booleans.AND(matrices.*(Iv, A) = matrices.Id(matrices.rows(A)), matrices.*(A, Iv) = matrices.Id(matrices.rows(A))))}]")))
 (|inv_unique_TCC1| 0
  (|inv_unique_TCC1-0| "" 3929004533 ("" (GRIND) NIL NIL) NIL SHOSTAK
   (|inv_unique| SUBTYPE "matrices.rows(alt_inverse_mat.A)" "posnat"))
  (|inv_unique_TCC1-1| |nil| 3837245448 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)) NIL
   (|inv_unique| SUBTYPE "matrices.rows(alt_inverse_mat.A)" "posnat")))
 (|inv_unique_TCC2| 0
  (|inv_unique_TCC2-0| "" 3929004540 ("" (GRIND) NIL NIL) NIL SHOSTAK
   (|inv_unique| SUBTYPE "alt_inverse_mat.A" "(alt_inverse_mat.inv?)"))
  (|inv_unique_TCC2-1| |nil| 3837245448 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|inv?| CONST-DECL "bool" |alt_inverse_mat| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     |matrices| |matrices|)
    (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
     |matrices| |matrices|)
    (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     |matrices| |matrices|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|array2list_it| DEF-DECL
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     |array2list| |structures|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL (|inv_unique| SUBTYPE "alt_inverse_mat.A" "(alt_inverse_mat.inv?)")))
 (|inv_unique| 0
  (|inv_unique-4| "" 3930401051
   ("" (SKEEP)
    (("" (TYPEPRED "A")
      (("" (HIDE -1 -2)
        (("" (TYPEPRED "invA")
          (("" (HIDE -1)
            (("" (TYPEPRED "inv(A)")
              (("" (HIDE -1)
                (("" (HIDE -1 -2 -3 -4 -5 -8 -9 -10 -11 -12 -13 -14 -15)
                  (("" (LEMMA "mult_Id_left")
                    (("" (INST -1 "invA" "rows(A)")
                      (("" (ASSERT)
                        (("" (CASE "Id(rows(A)) = inv(A) * A")
                          (("1" (REPLACE -1 -2)
                            (("1" (EXPAND "*" -2)
                              (("1" (LEMMA "matrix_mult_assoc")
                                (("1" (HIDE -2)
                                  (("1" (EXPAND "*" -1)
                                    (("1" (INST -1 "invA" "inv(A)" "A")
                                      (("1" (ASSERT)
                                        (("1" (CASE "null?(A)")
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (ASSERT)
                                            (("2" (REPLACE -1 -2)
                                              (("2" (EXPAND "*" -6)
                                                (("2" (REPLACE -6 -2)
                                                  (("2" (LEMMA "mult_Id_right")
                                                    (("2" (INST?)
                                                      (("2" (INST -1 "inv(A)")
                                                        (("2" (ASSERT)
                                                          (("2" (EXPAND "*" -1)
                                                            (("2"
                                                              (REPLACE -1 -3)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|inv_unique-3| "" 3930400949
   ("" (SKEEP)
    (("" (TYPEPRED "A")
      (("" (HIDE -1 -2)
        (("" (TYPEPRED "invA")
          (("" (HIDE -1)
            (("" (TYPEPRED "inv(A)")
              (("" (HIDE -1)
                (("" (HIDE -1 -2 -3 -4 -5 -8 -9 -10 -11 -12 -13 -14 -15)
                  (("" (LEMMA "mult_Id_left")
                    (("" (INST -1 "invA" "rows(A)")
                      (("" (ASSERT)
                        (("" (CASE "Id(rows(A)) = inv(A) * A")
                          (("1" (REPLACE -1 -2)
                            (("1" (EXPAND "*" -2)
                              (("1" (LEMMA "matrix_mult_assoc")
                                (("1" (HIDE -2)
                                  (("1" (EXPAND "*" -1)
                                    (("1" (INST -1 "invA" "inv(A)" "A")
                                      (("1" (ASSERT)
                                        (("1" (CASE "null?(A)")
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (ASSERT)
                                            (("2" (REPLACE -1 -2)
                                              (("2" (EXPAND "*" -6)
                                                (("2" (REPLACE -6 -2)
                                                  (("2" (LEMMA "mult_Id_right")
                                                    (("2" (INST?)
                                                      (("2" (INST -1 "inv(A)")
                                                        (("2" (ASSERT)
                                                          (("2" (EXPAND "*" -1)
                                                            (("2"
                                                              (REPLACE -1 -3)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv| CONST-DECL "{Iv: Square |
   rows(Iv) = rows(A) AND Iv * A = Id(rows(A)) AND A * Iv = Id(rows(A))}"
     |alt_inverse_mat| NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     |matrices| |matrices|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv?| CONST-DECL "bool" |alt_inverse_mat| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|array2list_it| DEF-DECL
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     |array2list| |structures|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     |matrices| |matrices|)
    (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
     |matrices| |matrices|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|form_matrix_square| APPLICATION-JUDGEMENT "FullMatrix" |matrices|
     |matrices|)
    (|mult_Id_right| FORMULA-DECL NIL |matrices| |matrices|)
    (|matrix_mult_assoc| FORMULA-DECL NIL |matrices| |matrices|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|mult_Id_left| FORMULA-DECL NIL |matrices| |matrices|))
   SHOSTAK)
  (|inv_unique-2| "" 3930140512
   ("" (SKEEP)
    (("" (TYPEPRED "A")
      (("" (HIDE -1 -2)
        (("" (TYPEPRED "invA")
          (("" (HIDE -1)
            (("" (TYPEPRED "inv(A)")
              (("" (HIDE -1)
                (("" (HIDE -1 -2 -3 -4 -5 -8 -9 -10 -11 -12 -13 -14 -15)
                  (("" (LEMMA "mult_Id_left")
                    (("" (INST -1 "invA" "rows(A)")
                      (("" (ASSERT)
                        (("" (CASE "Id(rows(A)) = inv(A) * A")
                          (("1" (REPLACE -1 -2)
                            (("1" (EXPAND "*" -2)
                              (("1" (LEMMA "matrix_mult_assoc")
                                (("1" (HIDE -2)
                                  (("1" (EXPAND "*" -1)
                                    (("1" (INST -1 "invA" "inv(A)" "A")
                                      (("1" (ASSERT)
                                        (("1" (CASE "null?(A)")
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (ASSERT)
                                            (("2" (REPLACE -1 -2)
                                              (("2" (EXPAND "*" -6)
                                                (("2" (REPLACE -6 -2)
                                                  (("2" (LEMMA "mult_Id_right")
                                                    (("2" (INST?)
                                                      (("2" (INST -1 "inv(A)")
                                                        (("2" (ASSERT)
                                                          (("2" (EXPAND "*" -1)
                                                            (("2"
                                                              (REPLACE -1 -3)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv| CONST-DECL "{Iv: Square |
   rows(Iv) = rows(A) AND Iv * A = Id(rows(A)) AND A * Iv = Id(rows(A))}"
     |alt_inverse_mat| NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     |matrices| |matrices|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv?| CONST-DECL "bool" |alt_inverse_mat| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|array2list_it| DEF-DECL
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     |array2list| |structures|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     |matrices| |matrices|)
    (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
     |matrices| |matrices|)
    NIL
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|form_matrix_square| APPLICATION-JUDGEMENT "FullMatrix" |matrices|
     |matrices|)
    (|mult_Id_right| FORMULA-DECL NIL |matrices| |matrices|)
    (|matrix_mult_assoc| FORMULA-DECL NIL |matrices| |matrices|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|mult_Id_left| FORMULA-DECL NIL |matrices| |matrices|))
   SHOSTAK)
  (|inv_unique-0| "" 3929001970
   ("" (SKEEP)
    (("" (TYPEPRED "A")
      (("" (HIDE -1 -2)
        (("" (TYPEPRED "invA")
          (("" (HIDE -1)
            (("" (TYPEPRED "inv(A)")
              (("" (HIDE -1)
                (("" (HIDE -1 -2 -3 -4 -5 -8 -9 -10 -11 -12 -13 -14 -15)
                  (("" (LEMMA "mult_Id_left")
                    (("" (INST -1 "invA" "rows(A)")
                      (("" (ASSERT)
                        (("" (CASE "Id(rows(A)) = inv(A) * A")
                          (("1" (REPLACE -1 -2)
                            (("1" (EXPAND "*" -2)
                              (("1" (LEMMA "matrix_mult_assoc")
                                (("1" (HIDE -2)
                                  (("1" (EXPAND "*" -1)
                                    (("1" (INST -1 "invA" "inv(A)" "A")
                                      (("1" (ASSERT)
                                        (("1" (CASE "null?(A)")
                                          (("1" (ASSERT)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (ASSERT)
                                            (("2" (REPLACE -1 -2)
                                              (("2" (EXPAND "*" -6)
                                                (("2" (REPLACE -6 -2)
                                                  (("2" (LEMMA "mult_Id_right")
                                                    (("2" (INST?)
                                                      (("2" (INST -1 "inv(A)")
                                                        (("2" (ASSERT)
                                                          (("2" (EXPAND "*" -1)
                                                            (("2"
                                                              (REPLACE -1 -3)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv| CONST-DECL "{Iv: Square |
   rows(Iv) = rows(A) AND Iv * A = Id(rows(A)) AND A * Iv = Id(rows(A))}"
     |alt_inverse_mat| NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     |matrices| |matrices|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv?| CONST-DECL "bool" |alt_inverse_mat| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|array2list_it| DEF-DECL
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     |array2list| |structures|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     |matrices| |matrices|)
    (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
     |matrices| |matrices|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|form_matrix_square| APPLICATION-JUDGEMENT "FullMatrix" |matrices|
     |matrices|)
    (|mult_Id_right| FORMULA-DECL NIL |matrices| |matrices|)
    (|matrix_mult_assoc| FORMULA-DECL NIL |matrices| |matrices|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|mult_Id_left| FORMULA-DECL NIL |matrices| |matrices|))
   SHOSTAK)
  (|inv_unique-1| |nil| 3837249781
   ("" (SKEEP)
    (("" (TYPEPRED "inv(A)")
      (("" (HIDE -1)
        (("" (HIDE -1)
          (("" (CASE "A*inv(A) = A*invA")
            (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv| CONST-DECL "{Iv: Square |
   rows(Iv) = rows(A) AND Iv * A = Id(rows(A)) AND A * Iv = Id(rows(A))}"
     |alt_inverse_mat| NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i: nat, j: nat):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     |matrices| |matrices|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (* CONST-DECL "real" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|inv?| CONST-DECL "bool" |alt_inverse_mat| NIL)
    (|dot| DEF-DECL "real" |matrices| |matrices|)
    (|array2list_it| DEF-DECL
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     |array2list| |structures|)
    (|array2list| CONST-DECL
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list|
     |structures|)
    (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     |matrices| |matrices|)
    (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
     |matrices| |matrices|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|form_matrix_square| APPLICATION-JUDGEMENT "FullMatrix" |matrices|
     |matrices|)
    (|mult_Id_right| FORMULA-DECL NIL |matrices| |matrices|)
    (|matrix_mult_assoc| FORMULA-DECL NIL |matrices| |matrices|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| |matrices|)
    (|mult_Id_left| FORMULA-DECL NIL |matrices| |matrices|))
   SHOSTAK)))

