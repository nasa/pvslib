matrix_vector_multiplication : THEORY
		
%	              June 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|      This is Matrix Vector    |%
%|      Multiplication           |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing vector_arithmetic
%  so we have VectorN and nice properties
%--------------------------------------------	

IMPORTING vector_arithmetic
IMPORTING norms

%--------------------------------------------
%% Matrix vector multiplication 
%--------------------------------------------
mult( A: Matrix , v: Vector ):
     recursive Vector =
     IF null?( v ) OR null?( A )
     THEN null
     ELSE cons( dot( car( A ) , v ) ,
     mult( cdr( A ), v ) )
     ENDIF Measure length( A ) ;

mult_length: LEMMA
     FORALL( A: Matrix, v: Vector, m: nat ):
     ( length( A ) = m AND length( v ) > 0 )
     IMPLIES length( mult( A, v ) ) = m ;

mult(m, n: posnat,
     A : MatrixMN( m, n ), v: VectorN( n ) ):
     VectorN( m ) = mult( A, v ) ;

*(A: Matrix, v: Vector):
     Vector = mult( A, v ) ;

%--------------------------------------------
%% Matrix fact
%--------------------------------------------

mmult_nth: LEMMA FORALL(m,n:posnat, A: MatrixMN(m,n), v:VectorN(n)):
     FORALL (i:below(m)):
     nth(mult(m,n,A,v),i) = row(A)(i)*v

max_row_2: LEMMA FORALL(m,n:posnat, A: MatrixMN(m,n)):
     EXISTS (i:below(m)):
     FORALL (j:below(m)):
     norm_2(n)(row(A)(j)) <= norm_2(n)(row(A)(i))
     
max_row_2(m,n:posnat, A: MatrixMN(m,n)):
     { c:nonneg_real | (FORALL(j:below(m)): norm_2(n)(row(A)(j)) <= c)
     AND EXISTS(i:below(m)): c=norm_2(n)(row(A)(i))}
     = choose({ c:nonneg_real | (FORALL(j:below(m)): norm_2(n)(row(A)(j)) <= c)
     AND EXISTS(i:below(m)): c=norm_2(n)(row(A)(i))})

mmult_inf_bound: LEMMA FORALL(m,n:posnat, A: MatrixMN(m,n), v:VectorN(n)):
     norm_inf(m)(mult(m,n,A,v)) <=
     (max_row_2(m,n,A))*norm_2(n)(v)

mmult_dist: LEMMA FORALL(m,n:posnat, A: MatrixMN(m,n), v1,v2:VectorN(n)):
     mult(m,n,A,v1+v2) =  mult(m,n,A,v1) + mult(m,n,A,v2)

mmult_scal: LEMMA FORALL(m,n:posnat, A: MatrixMN(m,n), v1:VectorN(n), c:real):
     c*mult(m,n,A,v1) =  mult(m,n,A,c*v1)

mmult_sub_dist: LEMMA FORALL(m,n:posnat, A: MatrixMN(m,n), v1,v2:VectorN(n)):
     mult(m,n,A,v1-v2) =  mult(m,n,A,v1) - mult(m,n,A,v2)

 
%--------------------------------------------
%% This is a function that makes the identity
%  matrix. This is already Id(n) in the matrix
%  libary. This def uses the basis vectors
%  which might be a nice property to prove for
%  Id(n) one day soon
%--------------------------------------------
%%Just use Id(3)
eye( m: nat, n: nat ):
     RECURSIVE Matrix =
     IF m = 0 OR n = 0
     THEN null
     ELSIF m > n
      THEN append( eye( m-1, n ),
     (: zero_vec( n ) :) )
     ELSE append( eye( m-1,n ),
     (: e( n,m-1 ) :) )
     ENDIF Measure m

%--------------------------------------------
%% Test exicutability  
%--------------------------------------------
mult_1: LEMMA mult(
     (: (: 1, 2, 3:), (: 4, 5, 6 :), (: 7, 8, 9 :) :),
     (: 1, 1, 1:) )
     = (: 6, 15, 24 :) 

eye_1: LEMMA eye(2,2)
     =  (: (: 1, 0 :), (: 0 , 1 :) :)

%dont need eye
eye_2: LEMMA FORALL
     ( v: VectorN( 3 ) ): eye( 3,3 ) * v =v
eye_3: LEMMA FORALL
     ( v: VectorN( 3 ) ): Id( 3 ) * v = v

%% Isn't it curious
% how mat-vec mult is defined
% when the sizes don't match up
mult_3: LEMMA mult(
     (: (: 1, 2, 3:), (: 4, 5, 6 :), (: 7, 8, 9 :) :),
     (: 1, 1 :) )
     = (: 3, 9, 15 :)

    
  %---       ~The End~        ---%
  END matrix_vector_multiplication




