(|norms|
 (|norm?_TCC1| 0
  (|norm?_TCC1-1| |nil| 3736760666 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL (|norm?| SUBTYPE "norms.v1" "(list_adt[real].cons?)")))
 (|norm?_TCC2| 0
  (|norm?_TCC2-1| |nil| 3736760666
   ("" (SKEEP) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL))
   NIL
   (|norm?| SUBTYPE "matrices.*(norms.c, norms.v1)" "(list_adt[real].cons?)")))
 (|norm?_TCC3| 0
  (|norm?_TCC3-1| |nil| 3737122913
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
       ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|norm?| SUBTYPE "(matrices.+)(norms.v1, norms.v2)"
    "(list_adt[real].cons?)")))
 (|norm?_TCC4| 0
  (|norm?_TCC4-1| |nil| 3737122913
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (SKEEP)
        (("" (SKEEP)
          (("" (SPLIT)
            (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)) NIL
   (|norm?| SUBTYPE "norms.v2" "(list_adt[real].cons?)")))
 (|max_TCC1| 0
  (|max_TCC2-1| |nil| 3736760666 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|max| SUBTYPE "list_adt[real].cdr(norms.ll)" "(list_adt[real].cons?)")))
 (|max_TCC2| 0
  (|max_TCC3-1| |nil| 3736760666 ("" (GRIND) NIL NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)) NIL
   (|max| TERMINATION "norms.max(list_adt[real].cdr(norms.ll))" "NIL")))
 (|max_nth| 0
  (|max_nth-1| |nil| 3742821553
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (ASSERT)
        (("3" (CASE "cons2_var=null")
          (("1" (REPLACE -1 1)
            (("1" (INST 1 "0")
              (("1" (EXPAND "max" 1)
                (("1" (EXPAND "length" 1)
                  (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "max" 2 1)
              (("2" (ASSERT)
                (("2" (CASE "cons1_var >= max(cons2_var)")
                  (("1" (INST 2 "0")
                    (("1" (ASSERT)
                      (("1" (EXPAND "length" 2 1)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" 2 1)
                            (("1" (ASSERT)
                              (("1" (ASSERT)
                                (("1" (EXPAND "max" 2 1)
                                  (("1" (EXPAND "nth" 2 1)
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (SKEEP)
                      (("2" (INST 3 "i+1")
                        (("1" (ASSERT)
                          (("1" (ASSERT)
                            (("1" (EXPAND "length" 3 1)
                              (("1" (EXPAND "max" 3 1)
                                (("1" (EXPAND "nth" 3) (("1" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|cons2_var| SKOLEM-CONST-DECL "list[real]" |norms| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "real" |norms| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cons2_var))" |norms| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|entry_mult_TCC1| 0
  (|entry_mult_TCC1-1| |nil| 3736844617 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|entry_mult| SUBTYPE "list_adt[real].cdr(norms.l2)"
                 "(list_adt[real].cons?)")))
 (|entry_mult_TCC2| 0
  (|entry_mult_TCC2-1| |nil| 3796042251 ("" (TERMINATION-TCC) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|entry_mult| TERMINATION
                 "norms.entry_mult(list_adt[real].cdr(norms.l1), list_adt[real].cdr(norms.l2))"
                 "NIL")))
 (|abs_TCC1| 0
  (|abs_TCC1-1| |nil| 3737117860 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|abs| SUBTYPE
          "list_adt[real].cons(real_defs.abs(list_adt[real].car(norms.ll)), list_adt[real].null)"
          "{l: list_adt[real].list | list_props[real].length(l) = list_props[real].length(norms.ll)}")))
 (|abs_TCC2| 0
  (|abs_TCC2-1| |nil| 3737117945
   ("" (SKEEP)
    (("" (EXPAND "length")
      (("" (TYPEPRED "v(cdr[real](ll))") (("" (PROPAX) NIL NIL)) NIL)) NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|abs| SUBTYPE
          "list_adt[real].cons(real_defs.abs(list_adt[real].car(norms.ll)), norms.abs(list_adt[real].cdr(norms.ll)))"
          "{l: list_adt[real].list | list_props[real].length(l) = list_props[real].length(norms.ll)}")))
 (|abs_nth_TCC1| 0
  (|abs_nth_TCC1-1| |nil| 3742821510 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL (|abs_nth| SUBTYPE "norms.i" "below[length[real](abs(ll))]")))
 (|abs_nth| 0
  (|abs_nth-1| |nil| 3742821796
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (ASSERT)
            (("1" (REPLACE -1 1)
              (("1" (SKEEP)
                (("1" (CASE "NOT i=0")
                  (("1" (ASSERT)
                    (("1" (TYPEPRED "i")
                      (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACE -1 1)
                    (("2" (EXPAND "nth" 1)
                      (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (CASE "i=0")
                (("1" (REPLACE -1 2)
                  (("1" (HIDE -) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                 ("2" (INST -1 "i-1")
                  (("1" (EXPAND "nth" 3 1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "nth" 3 2)
                        (("1" (ASSERT)
                          (("1" (EXPAND "abs" 3 2) (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (TYPEPRED "i")
                      (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP) (("4" (TYPEPRED "abs(ll)") (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cons(cons1_var, cons2_var)))" |norms|
     NIL)
    (|cons2_var| SKOLEM-CONST-DECL "list[real]" |norms| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "real" |norms| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL))
   SHOSTAK))
 (|test_max_1| 0
  (|test_max_1-1| |nil| 3737117644 ("" (EVAL-FORMULA) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|test_abs_1| 0
  (|test_abs_1-1| |nil| 3736856029 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|test_sum| 0
  (|test_sum-1| |nil| 3736862704 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|test_entry_mult| 0
  (|test_entry_mult-1| |nil| 3736854457 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|test_entry_mult_2| 0
  (|test_entry_mult_2-1| |nil| 3737116879 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|abs_max_lists_TCC1| 0
  (|abs_max_lists_TCC1-1| |nil| 3737193828
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (SPLIT)
          (("1" (ASSERT)
            (("1" (INST -1 "c")
              (("1" (ASSERT)
                (("1" (EXPAND "*" 1)
                  (("1" (EXPAND "scal") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "*")
            (("2" (EXPAND "scal") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL
   (|abs_max_lists| SUBTYPE "matrices.*(norms.c, norms.ll)"
    "(list_adt[real].cons?)")))
 (|abs_max_lists_TCC2| 0
  (|abs_max_lists_TCC2-1| |nil| 3737193828
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SPLIT)
        (("1" (SKEEP)
          (("1" (INST -1 "c")
            (("1" (EXPAND "*" 1)
              (("1" (EXPAND "scal")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "abs(cons(c*cons1_var, scal(c, cons2_var)))")
                    (("1" (TYPEPRED "cons(c * cons1_var, scal(c, cons2_var))")
                      (("1" (ASSERT)
                        (("1" (HIDE -1 -3)
                          (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (TYPEPRED "cons2_var")
          (("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (TYPEPRED "cons1_var")
                (("2" (TYPEPRED "abs(c * cons(cons1_var, cons2_var))")
                  (("2" (TYPEPRED "c * cons(cons1_var, cons2_var)")
                    (("2" (HIDE -1 -3 -6)
                      (("2" (ASSERT)
                        (("2" (TYPEPRED "cons(cons1_var, cons2_var)")
                          (("2" (ASSERT)
                            (("2" (HIDE -1)
                              (("2" (REPLACE -2 -3)
                                (("2" (HIDE -2)
                                  (("2" (EXPAND "length" -2)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (ASSERT)
          (("4" (TYPEPRED "c*ll")
            (("4" (TYPEPRED "ll")
              (("4" (EXPAND "length" -3) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL))
   NIL
   (|abs_max_lists| SUBTYPE "norms.abs(matrices.*(norms.c, norms.ll))"
    "(list_adt[real].cons?)")))
 (|abs_max_lists_TCC3| 0
  (|abs_max_lists_TCC3-1| |nil| 3737208631
   ("" (SKEEP)
    (("" (TYPEPRED "abs(ll)")
      (("" (TYPEPRED "ll")
        (("" (EXPAND "length" -4) (("" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|abs_max_lists| SUBTYPE "norms.abs(norms.ll)" "(list_adt[real].cons?)")))
 (|abs_max_lists| 0
  (|abs_max_lists-1| |nil| 3737193829
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (SKEEP)
          (("3" (SPLIT)
            (("1" (EXPAND "*")
              (("1" (EXPAND "scal" 1)
                (("1" (EXPAND "abs" 1)
                  (("1" (LIFT-IF)
                    (("1" (SPLIT)
                      (("1" (FLATTEN)
                        (("1" (LIFT-IF)
                          (("1" (SPLIT)
                            (("1" (FLATTEN)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1" (INST -4 "c")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "max" 1 1)
                                          (("1" (LIFT-IF)
                                            (("1" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (EXPAND "abs" 1 2)
                                                  (("1" (LIFT-IF)
                                                    (("1" (SPLIT)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "max" 1)
                                                            (("1" (LIFT-IF)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND "abs"
                                                                          1)
                                                                  (("1"
                                                                    (LIFT-IF)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (SPLIT)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (MULT-INEQ
                                                                             -2
                                                                             -5
                                                                             (-
                                                                              -))
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (EXPAND "max" 2)
                                                          (("2" (LIFT-IF)
                                                            (("2" (SPLIT)
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (EXPAND "abs"
                                                                          1)
                                                                  (("1"
                                                                    (LIFT-IF)
                                                                    (("1"
                                                                      (SPLIT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "cons2_var")
                                                                            (("2"
                                                                              (FLIP-INEQ
                                                                               3)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                (("2"
                                                                                  (CASE
                                                                                      "cons1_var=0")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (CASE
                                                                                        "NOT 0 < cons1_var")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -6
                                                                                         -8
                                                                                         -9)
                                                                                        (("2"
                                                                                          (CASE
                                                                                              "NOT c * cons1_var < 0")
                                                                                          (("1"
                                                                                            (FLIP-INEQ
                                                                                             1)
                                                                                            (("1"
                                                                                              (GRIND)
                                                                                              (("1"
                                                                                                (MULT-BY
                                                                                                 -3
                                                                                                 "cons1_var")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (INST -3 "c")
                                      (("2" (TYPEPRED "cons1_var")
                                        (("2" (EXPAND "length" -3)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "scal" -3)
                                              (("2" (LIFT-IF)
                                                (("2" (SPLIT)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" 1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "length" -1)
                                                        (("2"
                                                          (EXPAND "scal" -1)
                                                          (("2" (LIFT-IF)
                                                            (("2" (SPLIT)
                                                              (("1" (FLATTEN)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (LIFT-IF)
                                (("2" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1" (INST -3 "c")
                                      (("1" (TYPEPRED "cons1_var")
                                        (("1" (TYPEPRED "cons2_var")
                                          (("1" (EXPAND "length" -3)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "abs" 1)
                                                (("1" (LIFT-IF)
                                                  (("1" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1" (LIFT-IF)
                                                          (("1" (SPLIT)
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND "max"
                                                                          1)
                                                                  (("1"
                                                                    (LIFT-IF)
                                                                    (("1"
                                                                      (SPLIT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (LIFT-IF)
                                                                          (("1"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (FLATTEN)
                                                                        (("2"
                                                                          (LIFT-IF)
                                                                          (("2"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (HIDE -2 -5
                                                                   -6 2)
                                                                  (("2"
                                                                    (CASE
                                                                        "cons1_var >=0 ")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (CASE
                                                                            "cons1_var=0")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (FLIP-INEQ
                                                                           2)
                                                                          (("2"
                                                                            (DIV-BY
                                                                             -3
                                                                             "cons1_var")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (LIFT-IF)
                                                        (("2" (SPLIT)
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (FLIP-INEQ 3)
                                                                (("1"
                                                                  (MULT-BY -2
                                                                   "c")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (FLIP-INEQ
                                                                     1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (CASE
                                                                            "NOT c=0")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL)
                                                                         ("2"
                                                                          (REPLACE
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (LIFT-IF)
                                                                                (("2"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (LIFT-IF)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND "max"
                                                                          2 1)
                                                                  (("2"
                                                                    (LIFT-IF)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "max"
                                                                         2)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2"
                                        (TYPEPRED
                                         " cons(c * cons1_var, scal(c, cons2_var))")
                                        (("2" (HIDE -1)
                                          (("2" (EXPAND "scal" -2)
                                            (("2" (LIFT-IF)
                                              (("2" (SPLIT)
                                                (("1" (INST -3 "c")
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (EXPAND "length" -2)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "length" 1)
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT)
                                                    (("2" (INST -3 "c")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (TYPEPRED
                                                           "cons2_var")
                                                          (("2" (HIDE -1)
                                                            (("2"
                                                              (EXPAND "scal"
                                                                      -1)
                                                              (("2" (LIFT-IF)
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             -2)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "scal"
                                                                         -1)
                                                                        (("2"
                                                                          (LIFT-IF)
                                                                          (("2"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "scal"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (LIFT-IF)
                                                                                    (("2"
                                                                                      (SPLIT)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (FLATTEN)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "scal"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (LIFT-IF)
                                                                                            (("2"
                                                                                              (SPLIT)
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (FLATTEN)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "scal"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "scal "
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         6)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             6)
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "length"
                                                                                                               6)
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                (("2"
                                                                                                                  (GRIND)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (LIFT-IF)
                          (("2" (INST -1 "c")
                            (("2" (ASSERT)
                              (("2" (SPLIT)
                                (("1" (FLATTEN)
                                  (("1" (LIFT-IF)
                                    (("1" (ASSERT)
                                      (("1" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1"
                                              (TYPEPRED
                                               "cons(c * cons1_var, scal(c, cons2_var))")
                                              (("1" (ASSERT)
                                                (("1" (HIDE -1)
                                                  (("1" (EXPAND "length" 2)
                                                    (("1" (EXPAND "scal" 2)
                                                      (("1" (LIFT-IF)
                                                        (("1" (ASSERT)
                                                          (("1" (SPLIT)
                                                            (("1" (PROPAX) NIL
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" -2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       -2)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (TYPEPRED "cons2_var")
                                              (("2" (HIDE -1)
                                                (("2" (EXPAND "max" 2 1)
                                                  (("2" (ASSERT)
                                                    (("2" (LIFT-IF)
                                                      (("2" (SPLIT)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND "max" 1)
                                                            (("1" (ASSERT)
                                                              (("1" (LIFT-IF)
                                                                (("1" (SPLIT)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (TYPEPRED
                                                                             "abs(cons2_var)")
                                                                            (("1"
                                                                              (REPLACE
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   2)
                                                                                  (("1"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         1)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           -1)
                                                                          (("2"
                                                                            (TYPEPRED
                                                                             "abs(scal(c, cons2_var))")
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "scal(c, cons2_var)")
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (REPLACE -2 2)
                                                              (("2"
                                                                (CASE
                                                                    "NOT abs(c) = -c")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "abs" 1)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (REPLACE -1
                                                                           2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "abs_mult")
                                                                    (("2"
                                                                      (INST -1
                                                                       "c"
                                                                       "cons1_var")
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1 2)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "max"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (LIFT-IF)
                                                                                (("2"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (DIV-BY
                                                                                       -1
                                                                                       "-c")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "max"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (LIFT-IF)
                                                                                              (("1"
                                                                                                (SPLIT)
                                                                                                (("1"
                                                                                                  (FLATTEN)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "max"
                                                                                                     2
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (PROPAX)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (DIV-BY
                                                                                         2
                                                                                         "-c")
                                                                                        (("2"
                                                                                          (DIV-BY
                                                                                           1
                                                                                           "-c")
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (FLIP-INEQ
                                                                                               1)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "max"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (LIFT-IF)
                                                                                                    (("2"
                                                                                                      (SPLIT)
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "max"
                                                                                                             2
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (PROPAX)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (LIFT-IF)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1"
                                              (TYPEPRED "scal(c, cons2_var)")
                                              (("1"
                                                (TYPEPRED
                                                 "cons(cons1_var, cons2_var)")
                                                (("1" (ASSERT)
                                                  (("1" (HIDE -1 -3)
                                                    (("1" (EXPAND "length" -3)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REPLACE -3 -2 LR)
                                                          (("1"
                                                            (EXPAND "length" 3)
                                                            (("1" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "max" 2 1)
                                              (("2" (LIFT-IF)
                                                (("2" (ASSERT)
                                                  (("2" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "length" -1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (TYPEPRED
                                                               "abs(scal(c, cons2_var))")
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "scal(c, cons2_var)")
                                                                  (("1"
                                                                    (REPLACE -2
                                                                             -3)
                                                                    (("1"
                                                                      (HIDE -1)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             4)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (REPLACE -1 2)
                                                        (("2" (FLIP-INEQ 4)
                                                          (("2"
                                                            (CASE
                                                                "NOT abs(c)=c")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "abs"
                                                                        1)
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REPLACE -1 2)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (LEMMA
                                                                   "abs_mult")
                                                                  (("2"
                                                                    (INST -1
                                                                     "c"
                                                                     "cons1_var")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1 2)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "max"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (LIFT-IF)
                                                                              (("2"
                                                                                (SPLIT)
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (DIV-BY
                                                                                     -1
                                                                                     "c")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (DIV-BY
                                                                                         1
                                                                                         "c")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "max"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (LIFT-IF)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (SPLIT)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (TYPEPRED
                                                                                                     "cons(abs(cons1_var), abs(cons2_var))")
                                                                                                    (("1"
                                                                                                      (HIDE
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (TYPEPRED
                                                                                                             "abs(cons2_var)")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (EXPAND
                                                                                                                 "length"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "max"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (DIV-BY
                                                                                       1
                                                                                       "c")
                                                                                      (("2"
                                                                                        (DIV-BY
                                                                                         2
                                                                                         "c")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (FLIP-INEQ
                                                                                             1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "max"
                                                                                               1)
                                                                                              (("2"
                                                                                                (LIFT-IF)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (SPLIT)
                                                                                                    (("1"
                                                                                                      (PROPAX)
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (FLATTEN)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "max"
                                                                                                           2
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (PROPAX)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "cons2_var")
              (("2" (HIDE -1)
                (("2" (CASE "NOT null?(cons2_var)")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (TYPEPRED "abs(c * cons(cons1_var, cons2_var))")
                    (("2" (HIDE -1)
                      (("2" (TYPEPRED "c * cons(cons1_var, cons2_var)")
                        (("2" (HIDE -1)
                          (("2" (TYPEPRED " cons(cons1_var, cons2_var)")
                            (("2" (HIDE -1)
                              (("2" (REPLACE -2 -3)
                                (("2" (EXPAND "length" -3 2)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "length" -3 2)
                                      (("2" (EXPAND "max" 2 1)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "max" 2 1)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "abs" 2 1)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "*" 2)
                                                    (("2" (EXPAND "scal" 2)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (LEMMA "abs_mult")
                                                          (("2"
                                                            (INST -1 "c"
                                                             "cons1_var")
                                                            (("2"
                                                              (REPLACE -1 2)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (CASE
                                                                      "abs(c)=0")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (DIV-BY 3
                                                                     "abs(c)")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "abs"
                                                                         3 2)
                                                                        (("2"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (TYPEPRED "abs(ll)")
          (("4" (ASSERT)
            (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP)
        (("5" (TYPEPRED "abs(c * ll)")
          (("5" (TYPEPRED "c * ll")
            (("5" (HIDE -1 -3)
              (("5" (REPLACE -1 -2)
                (("5" (ASSERT)
                  (("5" (EXPAND "length" -2 2) (("5" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (TYPEPRED "c * ll")
          (("6" (EXPAND "length" -2 2)
            (("6" (ASSERT) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|c| SKOLEM-CONST-DECL "real" |norms| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| DEF-DECL "real" |norms| NIL))
   SHOSTAK))
 (|abs_pos| 0
  (|abs_pos-1| |nil| 3737303049
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SPLIT)
        (("1" (EXPAND "abs" 1)
          (("1" (LIFT-IF)
            (("1" (SPLIT)
              (("1" (FLATTEN)
                (("1" (ASSERT)
                  (("1" (EXPAND "max" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (ASSERT)
                  (("2" (EXPAND "max" 2 1)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (SPLIT)
                          (("1" (PROPAX) NIL NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (CASE "NOT null?(cons2_var)")
            (("1" (ASSERT) NIL NIL)
             ("2" (EXPAND "abs" 2)
              (("2" (ASSERT)
                (("2" (LIFT-IF)
                  (("2" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "max" 1)
                          (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (EXPAND "max")
                          (("2" (ASSERT)
                            (("2" (LIFT-IF)
                              (("2" (ASSERT)
                                (("2" (SPLIT)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (TYPEPRED "abs(ll)")
          (("4" (ASSERT)
            (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|max| DEF-DECL "real" |norms| NIL))
   SHOSTAK))
 (|abs_zero| 0
  (|abs_zero-1| |nil| 3737303506
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
     ("4" (SKEEP)
      (("4" (SPLIT)
        (("1" (FLATTEN)
          (("1" (SPLIT)
            (("1" (SPLIT)
              (("1" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (SKEEP)
                    (("1" (INST 1 "m+1")
                      (("1" (DECOMPOSE-EQUALITY 1)
                        (("1" (EXPAND "zero_vec" 1)
                          (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                         ("2" (EXPAND "zero_vec" 1) (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (FLATTEN)
                    (("2" (SKEEP)
                      (("2" (SKEEP)
                        (("2" (EXPAND "abs" 1)
                          (("2" (ASSERT)
                            (("2" (LIFT-IF)
                              (("2" (SPLIT)
                                (("1" (FLATTEN)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "max" 1)
                                      (("1" (LIFT-IF)
                                        (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "max" 2)
                                    (("2" (LIFT-IF)
                                      (("2" (ASSERT)
                                        (("2" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (EXPAND "max" 2 1)
                                              (("2" (EXPAND "zero_vec" -1)
                                                (("2" (DECOMPOSE-EQUALITY -1)
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "abs" 2)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "abs" -1)
                    (("1" (ASSERT)
                      (("1" (LIFT-IF)
                        (("1" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (INST 1 "1")
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -1)
                                  (("1" (EXPAND "zero_vec" 1)
                                    (("1" (DECOMPOSE-EQUALITY 1)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND "max" -1)
                              (("2" (LIFT-IF)
                                (("2" (ASSERT)
                                  (("2" (SPLIT)
                                    (("1" (FLATTEN) (("1" (GRIND) NIL NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (ASSERT)
                                        (("2" (TYPEPRED "max(abs(cons2_var))")
                                          (("2" (LEMMA "abs_pos")
                                            (("2" (INST-CP -1 "cons2_var")
                                              (("2" (HIDE -1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (TYPEPRED "m")
                      (("2" (INST 3 "m-1")
                        (("1" (ASSERT)
                          (("1" (EXPAND "zero_vec" -2)
                            (("1" (DECOMPOSE-EQUALITY -2) NIL NIL)) NIL))
                          NIL)
                         ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SPLIT)
          (("1" (FLATTEN)
            (("1" (TYPEPRED "cons2_var")
              (("1" (CASE "NOT null?(cons2_var)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (INST 1 "1")
                  (("2" (EXPAND "zero_vec" 1)
                    (("2" (DECOMPOSE-EQUALITY 1)
                      (("1" (EXPAND "abs" -3)
                        (("1" (LIFT-IF)
                          (("1" (SPLIT)
                            (("1" (FLATTEN)
                              (("1" (EXPAND "max" -2)
                                (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (ASSERT)
                                (("2" (EXPAND "max" -1)
                                  (("2" (LIFT-IF)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT)
                                        (("1" (PROPAX) NIL NIL)
                                         ("2" (FLATTEN)
                                          (("2" (EXPAND "max" -1)
                                            (("2" (LIFT-IF)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "zero_vec" 1) (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (FLATTEN)
            (("2" (SKEEP)
              (("2" (EXPAND "zero_vec" -1)
                (("2" (DECOMPOSE-EQUALITY -1)
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "m")
                      (("2" (CASE "NOT null?(cons2_var)")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (EXPAND "abs" 1)
                          (("2" (LIFT-IF)
                            (("2" (ASSERT)
                              (("2" (SPLIT)
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "max" 1)
                                    (("1" (LIFT-IF)
                                      (("1" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "abs" 1)
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "length" 1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (ASSERT)
        (("5" (TYPEPRED "abs(ll)")
          (("5" (EXPAND "length" -2 2) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (TYPEPRED "abs(ll)")
        (("6" (EXPAND "length" -2 2)
          (("6" (ASSERT) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "real" |norms| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs_pos| FORMULA-DECL NIL |norms| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|abs_max_triag_TCC1| 0
  (|abs_max_triag_TCC1-1| |nil| 3737360598
   ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|abs_max_triag| SUBTYPE "(matrices.+)(norms.l1, norms.l2)"
    "(list_adt[real].cons?)")))
 (|abs_max_triag_TCC2| 0
  (|abs_max_triag_TCC2-1| |nil| 3737360598
   ("" (SKEEP)
    (("" (TYPEPRED "l1")
      (("" (HIDE -1)
        (("" (TYPEPRED "abs(l1+l2)")
          (("" (TYPEPRED "l1+l2")
            (("" (HIDE -1 -3)
              (("" (EXPAND "max" -1)
                (("" (ASSERT)
                  (("" (REPLACE -1 -2)
                    (("" (EXPAND "length" -2) (("" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|abs_max_triag| SUBTYPE "norms.abs((matrices.+)(norms.l1, norms.l2))"
    "(list_adt[real].cons?)")))
 (|abs_max_triag_TCC3| 0
  (|abs_max_triag_TCC3-1| |nil| 3737360598
   ("" (SKEEP)
    (("" (TYPEPRED "l1")
      (("" (TYPEPRED "abs(l2)")
        (("" (ASSERT) (("" (EXPAND "length" -2 2) (("" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|abs_max_triag| SUBTYPE "norms.abs(norms.l2)" "(list_adt[real].cons?)")))
 (|abs_max_triag| 0
  (|abs_max_triag-1| |nil| 3737360600
   ("" (INDUCT "l1")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (SKEEP)
          (("3" (SPLIT)
            (("1" (INST -1 "cdr(l2)")
              (("1" (SPLIT)
                (("1" (ASSERT)
                  (("1" (EXPAND "+" 1 1)
                    (("1" (EXPAND "add" 1)
                      (("1" (EXPAND "abs" 1 1)
                        (("1" (LIFT-IF)
                          (("1" (SPLIT)
                            (("1" (FLATTEN)
                              (("1" (ASSERT)
                                (("1" (EXPAND "max" 1 1)
                                  (("1" (LIFT-IF)
                                    (("1" (SPLIT)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "length" -4)
                                          (("1" (EXPAND "length" -2)
                                            (("1" (EXPAND "length" -1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "add" -2)
                                                  (("1" (LIFT-IF)
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT)
                                                        (("1" (ASSERT)
                                                          (("1" (GRIND) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (FLATTEN)
                              (("2" (EXPAND "max" 2 3)
                                (("2" (LIFT-IF)
                                  (("2" (SPLIT)
                                    (("1" (ASSERT)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (ASSERT)
                                            (("1" (LIFT-IF)
                                              (("1" (SPLIT)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (EXPAND "length" 3)
                                                    (("2" (EXPAND "add" 3 1)
                                                      (("2" (LIFT-IF)
                                                        (("2" (SPLIT)
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT)
                                                              (("1" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (SPLIT)
                                                              (("1" (FLATTEN)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2"
                                                                  (MOVE-TERMS
                                                                   -1 L 2)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       2)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "add(cdr(cons2_var), cdr(cdr(l2)))")
                                                                          (("2"
                                                                            (HIDE
                                                                             -1)
                                                                            (("2"
                                                                              (TYPEPRED
                                                                               "cdr(abs(l2))")
                                                                              (("2"
                                                                                (HIDE
                                                                                 -1)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "max"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (LIFT-IF)
                                                                                        (("2"
                                                                                          (SPLIT)
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (GRIND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (TYPEPRED
                                                                                                 "abs(l2)")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (REPLACE
                                                                                                       -2
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (REPLACE
                                                                                                         -4
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "length"
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN)
                                      (("2" (EXPAND "max" 2 1)
                                        (("2" (LIFT-IF)
                                          (("2" (SPLIT)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (EXPAND "max" 2 1)
                                                (("2" (LIFT-IF)
                                                  (("2" (ASSERT)
                                                    (("2" (SPLIT)
                                                      (("1" (FLATTEN)
                                                        (("1" (EXPAND "+" -2 1)
                                                          (("1"
                                                            (EXPAND "abs" 1 2)
                                                            (("1"
                                                              (EXPAND "max" 1
                                                                      2)
                                                              (("1" (LIFT-IF)
                                                                (("1" (ASSERT)
                                                                  (("1" (SPLIT)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (TYPEPRED
                                                                         "abs(cons2_var)")
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             -2)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -5
                                                                                 1)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -2
                                                                                     -5)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "max"
                                                                         2 2)
                                                                        (("2"
                                                                          (LIFT-IF)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "NOT  max(abs(cdr(l2))) <= max(car(abs(l2)), max(cdr(abs(l2))))")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (GRIND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (FLIP-INEQ
                                                                                     1)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (CASE
                                                                                            "NOT  max(abs(cdr(l2))) <= max(car(abs(l2)), max(cdr(abs(l2))))")
                                                                                        (("1"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "abs" 2 2)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (LEMMA
                                                                 "triangle")
                                                                (("2"
                                                                  (INST -1
                                                                   "car(l2)"
                                                                   "cons1_var")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "max" 2
                                                                       1)
                                                                      (("2"
                                                                        (LIFT-IF)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (SPLIT)
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (TYPEPRED
                                                                                   "abs(cons2_var)")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (GRIND)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (FLATTEN)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "max"
                                                                                 2
                                                                                 1)
                                                                                (("2"
                                                                                  (LIFT-IF)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (SPLIT)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (FLIP-INEQ
                                                                                           1)
                                                                                          (("2"
                                                                                            (GRIND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "length" -1) (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "l2")
                (("2" (HIDE -1)
                  (("2" (ASSERT)
                    (("2" (TYPEPRED "cdr[real](l2)")
                      (("2" (HIDE -1)
                        (("2" (TYPEPRED "cons2_var")
                          (("2" (HIDE -1)
                            (("2" (EXPAND "length" -2)
                              (("2" (CASE "NOT null?(cdr(l2))")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (EXPAND "abs" 2 3)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF)
                                      (("2" (EXPAND "length" 2 1)
                                        (("2" (EXPAND "abs" 2 2)
                                          (("2" (LIFT-IF)
                                            (("2" (ASSERT)
                                              (("2" (SPLIT)
                                                (("1" (FLATTEN)
                                                  (("1" (EXPAND "max" 1 3)
                                                    (("1" (LIFT-IF)
                                                      (("1" (SPLIT)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "max" 1 2)
                                                            (("1" (LIFT-IF)
                                                              (("1" (SPLIT)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (EXPAND "+"
                                                                            1
                                                                            1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "add" 1
                                                                       1)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "add"
                                                                           1 1)
                                                                          (("1"
                                                                            (LIFT-IF)
                                                                            (("1"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "abs"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (LIFT-IF)
                                                                                        (("1"
                                                                                          (SPLIT)
                                                                                          (("1"
                                                                                            (FLATTEN)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "max"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (LIFT-IF)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "triangle")
                                                                                                      (("1"
                                                                                                        (INST?)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                (("2"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (GRIND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "length" -1)
              (("2" (CASE "NOT null?(cons2_var)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (EXPAND "length" -2)
                  (("2" (ASSERT)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (SPLIT)
                          (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "abs(l2)")
            (("4" (ASSERT)
              (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (TYPEPRED "abs(l1)")
            (("5" (EXPAND "length" -2 2)
              (("5" (ASSERT) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (SKEEP)
          (("6" (TYPEPRED "abs(l1+l2)")
            (("6" (TYPEPRED "l1+l2")
              (("6" (ASSERT)
                (("6" (EXPAND "length" -2 2) (("6" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP)
      (("7" (SKEEP) (("7" (ASSERT) (("7" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((|l2| SKOLEM-CONST-DECL "(cons?)" |norms| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|max| DEF-DECL "real" |norms| NIL) (<= CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|sum_abs_pos| 0
  (|sum_abs_pos-1| |nil| 3737737370
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SPLIT)
        (("1" (ASSERT)
          (("1" (EXPAND "abs" 1)
            (("1" (LIFT-IF)
              (("1" (ASSERT)
                (("1" (SPLIT)
                  (("1" (FLATTEN) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (EXPAND "entry_sum" 2 1)
                      (("2" (LIFT-IF)
                        (("2" (ASSERT)
                          (("2" (SPLIT)
                            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (TYPEPRED "abs(ll)")
        (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|entry_sum| DEF-DECL "real" |norms| NIL))
   SHOSTAK))
 (|sum_abs_lists| 0
  (|sum_abs_lists-1| |nil| 3737715387
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (SKEEP)
            (("3" (SPLIT)
              (("1" (INST -1 "c")
                (("1" (ASSERT)
                  (("1" (EXPAND "abs" 1 3)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (TYPEPRED "cons2_var")
                                (("1" (HIDE -1)
                                  (("1" (EXPAND "length" -1)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "abs" 1 1)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "entry_sum" 1 2)
                                            (("1" (LIFT-IF)
                                              (("1" (SPLIT)
                                                (("1" (FLATTEN)
                                                  (("1" (EXPAND "entry_sum" 1)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "*" 1 1)
                                                        (("1" (EXPAND "scal" 1)
                                                          (("1"
                                                            (LEMMA "abs_mult")
                                                            (("1"
                                                              (INST -1 "c"
                                                               "cons1_var")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (EXPAND "*" 2 1)
                              (("2" (EXPAND "scal" 2)
                                (("2" (EXPAND "abs" 2 1)
                                  (("2" (LIFT-IF)
                                    (("2" (SPLIT)
                                      (("1" (FLATTEN)
                                        (("1" (ASSERT)
                                          (("1"
                                            (TYPEPRED
                                             "cons(c * cons1_var, scal(c, cons2_var))")
                                            (("1" (HIDE -1)
                                              (("1"
                                                (TYPEPRED "scal(c, cons2_var)")
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" -3)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REPLACE -3 -1 LR)
                                                          (("1"
                                                            (EXPAND "length" 2)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "entry_sum" 2 1)
                                            (("2" (LIFT-IF)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT)
                                                  (("1" (FLATTEN)
                                                    (("1" (EXPAND "length" -1)
                                                      (("1" (EXPAND "length" 3)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (EXPAND "*" -1 1)
                                                        (("2"
                                                          (EXPAND "entry_sum" 2
                                                                  2)
                                                          (("2" (LIFT-IF)
                                                            (("2" (SPLIT)
                                                              (("1" (ASSERT)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       4)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "abs_mult")
                                                                    (("2"
                                                                      (INST -1
                                                                       "c"
                                                                       "cons1_var")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (TYPEPRED "cons2_var")
                  (("2" (CASE "NOT null?(cons2_var)")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (HIDE -2)
                      (("2" (EXPAND "entry_sum" 2)
                        (("2" (LIFT-IF)
                          (("2" (LIFT-IF)
                            (("2" (ASSERT)
                              (("2" (SPLIT)
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "abs" 1 3)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "*" 1 1)
                                          (("1" (EXPAND "scal" 1 1)
                                            (("1" (EXPAND "scal" 1 1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "abs" 1 1)
                                                  (("1" (LIFT-IF)
                                                    (("1" (ASSERT)
                                                      (("1" (LEMMA "abs_mult")
                                                        (("1"
                                                          (INST -1 "c"
                                                           "cons1_var")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "*" 1)
                                    (("2" (EXPAND "scal" 1)
                                      (("2" (EXPAND "abs" 1)
                                        (("2" (LIFT-IF)
                                          (("2" (ASSERT)
                                            (("2" (SPLIT)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (FLATTEN)
                                                (("2" (EXPAND "length" 1)
                                                  (("2" (EXPAND "scal" 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (ASSERT)
          (("4" (TYPEPRED "abs(ll)")
            (("4" (ASSERT)
              (("4" (EXPAND "length" -2 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (ASSERT)
            (("5" (TYPEPRED "abs(c*ll)")
              (("5" (ASSERT)
                (("5" (EXPAND "*" -2 2)
                  (("5" (TYPEPRED "scal(c,ll)")
                    (("5" (ASSERT)
                      (("5" (EXPAND "length" -2 2) (("5" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (TYPEPRED "c*ll")
          (("6" (ASSERT) (("6" (EXPAND "length") (("6" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry_sum| DEF-DECL "real" |norms| NIL))
   SHOSTAK))
 (|sum_abs_zero| 0
  (|sum_abs_zero-1| |nil| 3737717288
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)
     ("4" (ASSERT)
      (("4" (SKEEP)
        (("4" (SPLIT)
          (("1" (FLATTEN)
            (("1" (SPLIT)
              (("1" (SPLIT)
                (("1" (SPLIT)
                  (("1" (ASSERT)
                    (("1" (FLATTEN)
                      (("1" (SKEEP)
                        (("1" (ASSERT)
                          (("1" (INST 1 "m+1")
                            (("1" (EXPAND "zero_vec" 1)
                              (("1" (ASSERT)
                                (("1" (DECOMPOSE-EQUALITY 1)
                                  (("1" (EXPAND "abs" -1)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "length" -1)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "entry_sum" -1 1)
                                                (("2" (LIFT-IF)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (EXPAND "abs" 1)
                        (("2" (LIFT-IF)
                          (("2" (ASSERT)
                            (("2" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "entry_sum" 1)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1" (SKEEP)
                                          (("1" (SKEEP)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "zero_vec" -2)
                                                (("1" (DECOMPOSE-EQUALITY -2)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP)
                                (("2" (SKEEP)
                                  (("2" (EXPAND "entry_sum" 2)
                                    (("2" (LIFT-IF)
                                      (("2" (ASSERT)
                                        (("2" (SPLIT)
                                          (("1" (FLATTEN)
                                            (("1" (DECOMPOSE-EQUALITY -2)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "zero_vec" -1)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "abs" 1)
                                                      (("1" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "zero_vec" -1)
                                                (("2" (DECOMPOSE-EQUALITY -1)
                                                  (("2" (EXPAND "abs" 2 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (SPLIT)
                  (("1" (FLATTEN)
                    (("1" (EXPAND "abs" -1)
                      (("1" (LIFT-IF)
                        (("1" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (EXPAND "entry_sum" -2)
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT)
                                    (("1" (ASSERT)
                                      (("1" (INST 1 "1")
                                        (("1" (EXPAND "zero_vec" 1)
                                          (("1" (DECOMPOSE-EQUALITY 1)
                                            (("1" (EXPAND "zero_vec" 1)
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "length" -2)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" -2)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (FLATTEN)
                              (("2" (ASSERT)
                                (("2" (EXPAND "entry_sum" -1)
                                  (("2" (LIFT-IF)
                                    (("2" (SPLIT)
                                      (("1" (FLATTEN)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (EXPAND "length" 1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2" (FLATTEN)
                                          (("2" (LEMMA "sum_abs_pos")
                                            (("2" (INST -1 "cons2_var")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (SKEEP)
                      (("2" (INST 3 "m-1")
                        (("1" (EXPAND "zero_vec" -1)
                          (("1" (ASSERT)
                            (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (TYPEPRED "m")
                            (("2" (TYPEPRED "cons2_var")
                              (("2" (HIDE -1)
                                (("2" (REVEAL 1)
                                  (("2" (EXPAND "zero_vec" -2)
                                    (("2" (DECOMPOSE-EQUALITY -2)
                                      (("2" (ASSERT)
                                        (("2" (CASE "NOT m=1")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (REPLACE -1 -3)
                                            (("2" (SIMPLIFY)
                                              (("2" (EXPAND "zero_vec" -3)
                                                (("2" (EXPAND "abs" 3)
                                                  (("2" (EXPAND "abs" 3)
                                                    (("2"
                                                      (EXPAND "entry_sum" 3)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "cons2_var")
            (("2" (ASSERT)
              (("2" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (HIDE -2)
                    (("1" (CASE "NOT null?(cons2_var)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (INST 1 "1")
                        (("2" (ASSERT)
                          (("2" (EXPAND "zero_vec" 1)
                            (("2" (EXPAND "zero_vec" 1)
                              (("2" (DECOMPOSE-EQUALITY 1)
                                (("2" (EXPAND "abs" -2)
                                  (("2" (LIFT-IF)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "abs" -2)
                                              (("1" (LIFT-IF)
                                                (("1" (SPLIT)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "length" -2)
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (EXPAND "length" -3)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND
                                                               "entry_sum")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (FLATTEN)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "length" -2)
                                                          (("2"
                                                            (EXPAND "entry_sum"
                                                                    -1)
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "length" 1)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (SKEEP)
                    (("2" (CASE "NOT null?(cons2_var)")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (EXPAND "abs" 1)
                        (("2" (LIFT-IF)
                          (("2" (ASSERT)
                            (("2" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (EXPAND "entry_sum" 1)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "zero_vec" -3)
                                      (("1" (DECOMPOSE-EQUALITY -3)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "abs" 1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "length" 1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (TYPEPRED "abs(ll)")
        (("5" (ASSERT)
          (("5" (EXPAND "length" -2) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (ASSERT)
        (("6" (TYPEPRED "abs(ll)")
          (("6" (EXPAND "length" -2) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sum_abs_pos| FORMULA-DECL NIL |norms| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|entry_sum| DEF-DECL "real" |norms| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|sum_abs_triag| 0
  (|sum_abs_triag-1| |nil| 3737718822
   ("" (INDUCT "l1")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (SPLIT)
          (("1" (SKEEP)
            (("1" (INST -1 "cdr(l2)")
              (("1" (SPLIT)
                (("1" (ASSERT)
                  (("1" (EXPAND "+" 1 1)
                    (("1" (EXPAND "add" 1)
                      (("1" (EXPAND "abs" 1 1)
                        (("1" (LIFT-IF)
                          (("1" (ASSERT)
                            (("1" (SPLIT)
                              (("1" (FLATTEN)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "entry_sum" 1)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1" (LIFT-IF)
                                          (("1" (ASSERT)
                                            (("1" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (EXPAND "abs" 1 2)
                                                  (("1" (LIFT-IF)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "abs" 1 3)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA "triangle")
                                                            (("1"
                                                              (INST -1
                                                               "car(l2)"
                                                               "cons1_var")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2" (EXPAND "length" -1)
                                                    (("2" (EXPAND "length" 1)
                                                      (("2" (ASSERT)
                                                        (("2" (LIFT-IF)
                                                          (("2" (ASSERT)
                                                            (("2" (SPLIT)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND "abs"
                                                                          -1)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (EXPAND
                                                                 "length" -1)
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (LIFT-IF)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SPLIT)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "add"
                                                                             -1)
                                                                            (("1"
                                                                              (LIFT-IF)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "abs"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (FLATTEN)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "abs(cons2_var)")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "abs"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (LIFT-IF)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (SPLIT)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (GRIND)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (FLATTEN)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "abs" 2 3)
                                  (("2" (LIFT-IF)
                                    (("2" (ASSERT)
                                      (("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "length" 2)
                                              (("1" (EXPAND "length" -1)
                                                (("1" (EXPAND "length" -3 1)
                                                  (("1" (REPLACE -1 -3)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "length" 2)
                                                        (("1" (EXPAND "add" 2)
                                                          (("1" (LIFT-IF)
                                                            (("1" (SPLIT)
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (EXPAND
                                                                   "length" -4)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (LIFT-IF)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "length"
                                                                           -4)
                                                                          (("1"
                                                                            (LIFT-IF)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (SPLIT)
                                                                                (("1"
                                                                                  (SPLIT)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "entry_sum"
                                                                                       1
                                                                                       3)
                                                                                      (("1"
                                                                                        (LIFT-IF)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "add"
                                                                                             1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "entry_sum"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (LIFT-IF)
                                                                                                  (("1"
                                                                                                    (SPLIT)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (FLATTEN)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "triangle")
                                                                                                            (("1"
                                                                                                              (INST
                                                                                                               -1
                                                                                                               "car(l2)"
                                                                                                               "cons1_var")
                                                                                                              (("1"
                                                                                                                (ASSERT)
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "abs"
                                                                                                                   1
                                                                                                                   3)
                                                                                                                  (("1"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (FLATTEN)
                                                                                                        (("2"
                                                                                                          (ASSERT)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "length"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (PROPAX)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (SPLIT)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (TYPEPRED
                                                                                         "l2")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             -1
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             2
                                                                                             3)
                                                                                            (("1"
                                                                                              (GRIND)
                                                                                              (("1"
                                                                                                (TYPEPRED
                                                                                                 "cdr(cdr(l2))")
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  (("1"
                                                                                                    (HIDE
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (GRIND)
                                                                                                      (("1"
                                                                                                        (GRIND)
                                                                                                        (("1"
                                                                                                          (GRIND)
                                                                                                          (("1"
                                                                                                            (CASE
                                                                                                                "cons?(cdr(cdr(l2)))")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              (("1"
                                                                                                                (CASE
                                                                                                                    "NOT length(cdr(l2))=0")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  NIL
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (HIDE
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (CASE
                                                                                                                        "NOT cdr(l2) = cons( car(cdr(l2)), cdr(cdr(l2)))")
                                                                                                                    (("1"
                                                                                                                      (ASSERT)
                                                                                                                      (("1"
                                                                                                                        (DECOMPOSE-EQUALITY
                                                                                                                         1)
                                                                                                                        NIL
                                                                                                                        NIL))
                                                                                                                      NIL)
                                                                                                                     ("2"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (PROPAX)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (FLATTEN)
                                                                (("2" (SPLIT)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           -1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "entry_sum" 2 1)
                                              (("2" (LIFT-IF)
                                                (("2" (ASSERT)
                                                  (("2" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (EXPAND "entry_sum" 1
                                                                  2)
                                                          (("1" (LIFT-IF)
                                                            (("1" (ASSERT)
                                                              (("1" (SPLIT)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         2)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               3)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "abs(add(cons2_var, cdr(l2)))")
                                                                                (("2"
                                                                                  (HIDE
                                                                                   -1)
                                                                                  (("2"
                                                                                    (TYPEPRED
                                                                                     "length(add(cons2_var, cdr(l2)))")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (HIDE
                                                                                         -4)
                                                                                        (("2"
                                                                                          (TYPEPRED
                                                                                           "length(abs(cons2_var))")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             -2)
                                                                                            (("2"
                                                                                              (LIFT-IF)
                                                                                              (("2"
                                                                                                (SPLIT)
                                                                                                (("1"
                                                                                                  (FLATTEN)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "add"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (LIFT-IF)
                                                                                                        (("1"
                                                                                                          (SPLIT)
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (FLATTEN)
                                                                                                            (("2"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (FLATTEN)
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "length"
                                                                                                         -5)
                                                                                                        (("2"
                                                                                                          (GRIND)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (ASSERT)
                                                        (("2" (EXPAND "+" -1 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND
                                                               "entry_sum" 2 2)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (EXPAND
                                                                   "entry_sum"
                                                                   2 3)
                                                                  (("2"
                                                                    (LIFT-IF)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SPLIT)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 3)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "abs"
                                                                               2
                                                                               4)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "triangle")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "car(l2)"
                                                                                   "cons1_var")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (HIDE
                                                                                       1
                                                                                       3
                                                                                       4
                                                                                       5)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "abs"
                                                                                         1
                                                                                         6)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "length" -1) (("2" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "length" -1)
                (("2" (ASSERT)
                  (("2" (EXPAND "length" -1 1)
                    (("2" (LIFT-IF)
                      (("2" (ASSERT)
                        (("2" (SPLIT)
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "cons2_var")
                              (("1" (TYPEPRED "l2")
                                (("1" (ASSERT)
                                  (("1" (HIDE -1 -3)
                                    (("1" (CASE "NOT null?(cdr(l2))")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (EXPAND "entry_sum" 2 3)
                                        (("2" (LIFT-IF)
                                          (("2" (ASSERT)
                                            (("2" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL)
                                               ("2" (GRIND) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (TYPEPRED "cons2_var")
              (("2" (CASE "NOT null?(cons2_var)")
                (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "abs(l2)")
            (("4" (ASSERT)
              (("4" (REPLACE -4 -2 RL)
                (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP)
        (("5" (SKEEP)
          (("5" (TYPEPRED "abs(l1)")
            (("5" (EXPAND "length" -2 2)
              (("5" (ASSERT) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (SKEEP)
          (("6" (TYPEPRED "abs(l1+l2)")
            (("6" (ASSERT)
              (("6" (TYPEPRED "l1+l2")
                (("6" (EXPAND "max" -2)
                  (("6" (ASSERT)
                    (("6" (EXPAND "length" -2 2) (("6" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP)
      (("7" (SKEEP)
        (("7" (TYPEPRED "l1+l2")
          (("7" (EXPAND "max" -2)
            (("7" (ASSERT)
              (("7" (EXPAND "length" -2 2) (("7" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|l2| SKOLEM-CONST-DECL "(cons?)" |norms| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry_sum| DEF-DECL "real" |norms| NIL)
    (<= CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|norm_inf_TCC1| 0
  (|norm_inf_TCC1-1| |nil| 3736860769
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (SPLIT)
          (("1" (ASSERT)
            (("1" (EXPAND "abs" 1)
              (("1" (ASSERT)
                (("1" (LIFT-IF)
                  (("1" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "max" 1)
                          (("1" (LIFT-IF)
                            (("1" (SPLIT)
                              (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (EXPAND "max" 2 1)
                        (("2" (LIFT-IF)
                          (("2" (SPLIT)
                            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "cons2_var")
            (("2" (HIDE -1)
              (("2" (CASE "NOT null?(cons2_var)")
                (("1" (ASSERT) NIL NIL)
                 ("2" (EXPAND "abs" 2)
                  (("2" (LIFT-IF)
                    (("2" (ASSERT)
                      (("2" (SPLIT)
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (EXPAND "max" 1)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (EXPAND "max" 2)
                              (("2" (LIFT-IF)
                                (("2" (SPLIT)
                                  (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (ASSERT)
                                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (ASSERT)
        (("4" (TYPEPRED "abs(ll)")
          (("4" (EXPAND "length" -2 2) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|max| DEF-DECL "real" |norms| NIL))
   NIL (|norm_inf| SUBTYPE "norms.max(norms.abs(norms.ll))" "nonneg_real")))
 (|norm_inf_TCC2| 0
  (|norm_inf_TCC2-1| |nil| 3737296986
   ("" (SKEEP)
    (("" (EXPAND "norm?")
      (("" (SPLIT)
        (("1" (SKEEP)
          (("1" (EXPAND "norm_inf")
            (("1" (LEMMA "abs_pos") (("1" (INST -1 "v1") NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (EXPAND "norm_inf")
            (("2" (LEMMA "abs_max_lists") (("2" (INST?) NIL NIL)) NIL)) NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (LEMMA "abs_zero")
            (("3" (INST -1 "v1")
              (("3" (ASSERT)
                (("3" (EXPAND "norm_inf" 1 1)
                  (("3" (FLATTEN)
                    (("3" (SPLIT)
                      (("1" (SKEEP)
                        (("1" (ASSERT)
                          (("1" (ASSERT) (("1" (INST 1 "m!1") NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (LEMMA "abs_max_triag")
          (("4" (SKEEP)
            (("4" (INST -1 "v1" "v2")
              (("4" (ASSERT)
                (("4" (ASSERT)
                  (("4" (EXPAND "norm_inf") (("4" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm?| CONST-DECL "bool" |norms| NIL)
    (|abs_max_triag| FORMULA-DECL NIL |norms| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|abs_zero| FORMULA-DECL NIL |norms| NIL)
    (|abs_max_lists| FORMULA-DECL NIL |norms| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|abs_pos| FORMULA-DECL NIL |norms| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL))
   NIL (|norm_inf| SUBTYPE "norms.norm_inf" "(norms.norm?(norms.m))")))
 (|norm_1_TCC1| 0
  (|norm_1_TCC1-1| |nil| 3736863443
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (EXPAND "abs" 1)
        (("3" (SPLIT)
          (("1" (LIFT-IF)
            (("1" (SPLIT)
              (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (LIFT-IF)
            (("2" (SPLIT)
              (("1" (FLATTEN)
                (("1" (TYPEPRED "cons2_var")
                  (("1" (TYPEPRED "cons1_var")
                    (("1" (EXPAND "length" -3)
                      (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (TYPEPRED "cons2_var")
                  (("2" (EXPAND "length" 1) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (TYPEPRED "abs(ll)") (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|entry_sum| DEF-DECL "real" |norms| NIL))
   NIL
   (|norm_1| SUBTYPE "norms.entry_sum(norms.abs(norms.ll))" "nonneg_real")))
 (|norm_1_TCC2| 0
  (|norm_1_TCC2-1| |nil| 3737297136
   ("" (SKEEP)
    (("" (EXPAND "norm?")
      (("" (SPLIT)
        (("1" (LEMMA "sum_abs_pos")
          (("1" (EXPAND "norm_1")
            (("1" (SKEEP) (("1" (INST -1 "v1") NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (LEMMA "sum_abs_lists")
            (("2" (INST -1 "v1" "c")
              (("2" (ASSERT)
                (("2" (EXPAND "norm_1" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("3" (SKEEP)
          (("3" (LEMMA "sum_abs_zero")
            (("3" (INST -1 "v1")
              (("3" (ASSERT)
                (("3" (EXPAND "norm_1" 1)
                  (("3" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (SKEEP)
                          (("1" (SPLIT)
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (SPLIT)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (ASSERT) (("2" (INST 3 "m") NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (LEMMA "sum_abs_triag")
          (("4" (ASSERT)
            (("4" (SKEEP)
              (("4" (INST -1 "v1" "v2")
                (("4" (ASSERT)
                  (("4" (EXPAND "norm_1" 1) (("4" (PROPAX) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm?| CONST-DECL "bool" |norms| NIL)
    (|sum_abs_triag| FORMULA-DECL NIL |norms| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sum_abs_zero| FORMULA-DECL NIL |norms| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sum_abs_lists| FORMULA-DECL NIL |norms| NIL)
    (|sum_abs_pos| FORMULA-DECL NIL |norms| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|norm_1| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL))
   NIL (|norm_1| SUBTYPE "norms.norm_1" "(norms.norm?(norms.m))")))
 (|norm_2sq_TCC1| 0
  (|norm_2sq_TCC1-1| |nil| 3736867588
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SPLIT)
        (("1" (ASSERT)
          (("1" (TYPEPRED "cons(cons1_var, cons2_var)")
            (("1" (EXPAND "entry_mult" 1)
              (("1" (LIFT-IF)
                (("1" (SPLIT)
                  (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   NIL (|norm_2sq| SUBTYPE "matrices.*(norms.ll, norms.ll)" "nonneg_real")))
 (|norm_2_TCC1| 0
  (|norm_2_TCC1-1| |nil| 3740486373
   ("" (SKEEP)
    (("" (EXPAND "norm_2sq")
      (("" (EXPAND "norm?")
        (("" (SPLIT)
          (("1" (LEMMA "dot_non_neg[m]")
            (("1" (SKEEP) (("1" (INST -1 "v1") (("1" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (LEMMA "asso_v")
            (("2" (LEMMA "dot_scalar1")
              (("2" (SKEEP)
                (("2" (INST -1 "c*v1" "v1" "c")
                  (("1" (REPLACE -1 1)
                    (("1" (LEMMA "asso_dot")
                      (("1" (INST -1 "c" "c*v1" "v1")
                        (("1" (REPLACE -1 1 RL)
                          (("1" (LEMMA "asso_v")
                            (("1" (INST -1 "c" "c" "v1")
                              (("1" (REPLACE -1 1)
                                (("1" (LEMMA "sqrt_times")
                                  (("1" (INST -1 "(c * c)" "v1 * v1")
                                    (("1" (LEMMA "asso_dot")
                                      (("1" (INST -1 "c*c" "v1" "v1")
                                        (("1" (REPLACE -1 1)
                                          (("1" (REPLACE -2 1)
                                            (("1" (LEMMA "sqrt_sq_abs")
                                              (("1" (INST -1 "c")
                                                (("1" (EXPAND "sq" -1)
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (LEMMA "dot_non_neg[m]")
                                        (("2" (INST -1 "v1") NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (TYPEPRED "c*v1" "v1") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "c*v1") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (SKEEP)
            (("3" (LEMMA "dot_pos[m]")
              (("3" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (INST -2 "v1")
                    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (FLATTEN)
                    (("2" (LEMMA "dot_zero")
                      (("2" (REPLACE -2 1)
                        (("2" (INST -1 "zero_vec(m)" "m")
                          (("2" (ASSERT)
                            (("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (LEMMA "dot_dist")
            (("4" (SKEEP)
              (("4" (INST -1 "v1+v2" "v1" "v2")
                (("1" (REPLACE -1 1)
                  (("1" (HIDE -1)
                    (("1" (LEMMA "dot_commutes")
                      (("1" (INST-CP -1 "(v1 + v2)" "v1")
                        (("1" (INST -1 "v1+v2" "v2")
                          (("1" (REPLACE -1 1)
                            (("1" (REPLACE -2 1)
                              (("1" (HIDE -1 -2)
                                (("1" (LEMMA "dot_dist")
                                  (("1" (INST-CP -1 "v1" "v1" "v2")
                                    (("1" (INST -1 "v2" "v1" "v2")
                                      (("1" (REPLACE -1 1)
                                        (("1" (REPLACE -2 1)
                                          (("1" (ASSERT)
                                            (("1" (ASSERT)
                                              (("1" (HIDE -1 -2)
                                                (("1" (LEMMA "dot_commutes")
                                                  (("1" (INST -1 "v1" "v2")
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (HIDE -1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (CASE
                                                                "NOT v1 * v1 + 2 * (v2 * v1) + v2 * v2 <= v1 * v1 + 2 * abs(v2 * v1) + v2 * v2")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (LEMMA
                                                               "cauchy_schwarz[m]")
                                                              (("2"
                                                                (INST -1 "v2"
                                                                 "v1")
                                                                (("2" (ASSERT)
                                                                  (("2"
                                                                    (CASE
                                                                        "NOT v1 * v1 + 2 * (v2 * v1) + v2 * v2 <= 2*sqrt(v2 * v2) * sqrt(v1 * v1) + v1 * v1 + v2 * v2")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (HIDE -3)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (CASE
                                                                              "NOT v1 * v1 + v2 * v2 + 2 * (sqrt(v1 * v1) * sqrt(v2 * v2)) = (sqrt(v1*v1)+sqrt(v2*v2))*(sqrt(v1*v1)+sqrt(v2*v2))")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (REPLACE
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "sqrt_le")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "v1 * v1 + 2 * (v2 * v1) + v2 * v2"
                                                                                 "(sqrt(v1 * v1) + sqrt(v2 * v2)) * (sqrt(v1 * v1) + sqrt(v2 * v2))")
                                                                                (("1"
                                                                                  (FLATTEN
                                                                                   -1)
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "NOT sqrt((sqrt(v1 * v1) + sqrt(v2 * v2)) *
              (sqrt(v1 * v1) + sqrt(v2 * v2))) = (sqrt(v1 * v1) + sqrt(v2 * v2))")
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "sqrt_sq_abs")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "sqrt(v1 * v1) + sqrt(v2 * v2)")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "sq"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (ASSERT
                                                                                             1)
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "abs"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (PROPAX)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (LEMMA
                                                                                           "dot_non_neg[m]")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "v2")
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("3"
                                                                                          (ASSERT)
                                                                                          (("3"
                                                                                            (LEMMA
                                                                                             "dot_non_neg[m]")
                                                                                            (("3"
                                                                                              (INST
                                                                                               -1
                                                                                               "v1")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       -2)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (LEMMA
                                                                                   "dot_non_neg[m]")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "v2")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (LEMMA
                                                                                   "dot_non_neg[m]")
                                                                                  (("3"
                                                                                    (INST
                                                                                     -1
                                                                                     "v1")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("4"
                                                                                  (LEMMA
                                                                                   "dot_non_neg[m]")
                                                                                  (("4"
                                                                                    (INST
                                                                                     -1
                                                                                     "v1+v2")
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "(v1 + v2) * (v1 + v2) = v1 * v1 + 2 * (v2 * v1) + v2 * v2")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE-ALL-BUT
                                                                                         1)
                                                                                        (("2"
                                                                                          (LEMMA
                                                                                           "dot_dist")
                                                                                          (("2"
                                                                                            (INST
                                                                                             -1
                                                                                             "v1+v2"
                                                                                             "v1"
                                                                                             "v2")
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (HIDE
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (LEMMA
                                                                                                   "dot_dist")
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "dot_commutes")
                                                                                                    (("1"
                                                                                                      (INST-CP
                                                                                                       -1
                                                                                                       "v1+v2"
                                                                                                       "v1")
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         -1
                                                                                                         "v1+v2"
                                                                                                         "v2")
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (REPLACE
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (HIDE
                                                                                                               -1
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (LEMMA
                                                                                                                 "dot_dist")
                                                                                                                (("1"
                                                                                                                  (INST-CP
                                                                                                                   -1
                                                                                                                   "v1"
                                                                                                                   "v1"
                                                                                                                   "v2")
                                                                                                                  (("1"
                                                                                                                    (INST
                                                                                                                     -1
                                                                                                                     "v2"
                                                                                                                     "v1"
                                                                                                                     "v2")
                                                                                                                    (("1"
                                                                                                                      (REPLACE
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (REPLACE
                                                                                                                         -2
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (ASSERT)
                                                                                                                          (("1"
                                                                                                                            (ASSERT)
                                                                                                                            (("1"
                                                                                                                              (LEMMA
                                                                                                                               "dot_commutes")
                                                                                                                              (("1"
                                                                                                                                (INST
                                                                                                                                 -1
                                                                                                                                 "v1"
                                                                                                                                 "v2")
                                                                                                                                (("1"
                                                                                                                                  (ASSERT)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (TYPEPRED
                                                                                               "v1+v2")
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (TYPEPRED
                                                                                       "v1+v2"
                                                                                       "v1"
                                                                                       "v2")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (LEMMA
                                                                       "dot_non_neg[m]")
                                                                      (("3"
                                                                        (INST
                                                                         -1
                                                                         "v1")
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("4"
                                                                      (LEMMA
                                                                       "dot_non_neg[m]")
                                                                      (("4"
                                                                        (INST
                                                                         -1
                                                                         "v2")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "v1+v2") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_2sq| CONST-DECL "nonneg_real" |norms| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|dot_non_neg| FORMULA-DECL NIL |cauchy_schwarz| NIL)
    (|dot_scalar1| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|v1| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|c| SKOLEM-CONST-DECL "real" |norms| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|asso_dot| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sqrt_times| FORMULA-DECL NIL |sqrt| |reals|)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sqrt_sq_abs| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|asso_v| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|dot_pos| FORMULA-DECL NIL |cauchy_schwarz| NIL)
    (|dot_zero| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|v1| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|dot_commutes| FORMULA-DECL NIL |matrices| NIL)
    (|cauchy_schwarz| FORMULA-DECL NIL |cauchy_schwarz| NIL)
    (|sqrt_le| FORMULA-DECL NIL |sqrt| |reals|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|v1| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|v2| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|dot_dist| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL))
   NIL
   (|norm_2| SUBTYPE
    "LAMBDA (v: (list_adt[real].cons?)): sqrt.sqrt(norms.norm_2sq(v))"
    "(norms.norm?(norms.m))")))
 (|norm_inf_recurse_TCC1| 0
  (|norm_inf_recurse_TCC1-1| |nil| 3742117533
   ("" (SKEEP)
    (("" (TYPEPRED "u") (("" (EXPAND "length" -2) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|norm_inf_recurse| SUBTYPE "list_adt[real].cdr(norms.u)"
    "(list_adt[real].cons?)")))
 (|norm_inf_recurse_TCC2| 0
  (|norm_inf_recurse_TCC2-1| |nil| 3742117533 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL (|norm_inf_recurse| SUBTYPE "(number_fields.-)(norms.m, 1)" "posnat")))
 (|norm_inf_recurse| 0
  (|norm_inf_recurse-1| |nil| 3742117534
   ("" (INDUCT "m")
    (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (CASE "j=0")
        (("1" (HIDE -2)
          (("1" (REPLACE -1 1)
            (("1" (ASSERT)
              (("1" (SKEEP)
                (("1" (GRIND)
                  (("1" (EXPAND "abs" 1)
                    (("1" (EXPAND "abs" 1)
                      (("1" (EXPAND "max" 1)
                        (("1" (EXPAND "length" 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "abs" 2)
                    (("2" (EXPAND "abs" 2)
                      (("2" (EXPAND "max" 2)
                        (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (SKEEP)
            (("2" (EXPAND "norm_inf" 2)
              (("2" (EXPAND "norm_inf" 2)
                (("2" (EXPAND "abs" 2 1)
                  (("2" (EXPAND "max" 2 1)
                    (("2" (ASSERT)
                      (("2" (EXPAND "length" 2)
                        (("2" (ASSERT)
                          (("2" (CASE "cdr(u) = null")
                            (("1" (TYPEPRED "u")
                              (("1" (EXPAND "length" -2)
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (LIFT-IF)
                                (("2" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1" (HIDE -2 1)
                                      (("1" (GRIND)
                                        (("1" (EXPAND "abs" -1)
                                          (("1" (EXPAND "length" -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP) (("4" (TYPEPRED "u") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL)
     ("5" (SKEEP) (("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)
     ("6" (SKEEP)
      (("6" (SKEEP)
        (("6" (TYPEPRED "u")
          (("6" (ASSERT)
            (("6" (EXPAND "length" -2) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("7" (SKEEP)
      (("7" (SKEEP) (("7" (TYPEPRED "u") (("7" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|norm_one_recurse| 0
  (|norm_one_recurse-2| |nil| 3742218037
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (ASSERT)
        (("" (SPLIT)
          (("1" (FLATTEN)
            (("1" (EXPAND "norm_1")
              (("1" (EXPAND "norm_1" 1 1)
                (("1" (EXPAND "entry_sum" 1 1)
                  (("1" (ASSERT)
                    (("1" (TYPEPRED "u")
                      (("1" (CASE "length(u)=1")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (TYPEPRED "abs(u)")
                          (("2" (ASSERT)
                            (("2" (EXPAND "norm_1" 2)
                              (("2" (EXPAND "abs" 2 1)
                                (("2" (EXPAND "abs" 2 1)
                                  (("2" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "NOT m=1")
            (("1" (ASSERT) NIL NIL)
             ("2" (ASSERT)
              (("2" (REPLACE -1 1)
                (("2" (EXPAND "norm_1" 1)
                  (("2" (EXPAND "norm_1" 1)
                    (("2" (EXPAND "entry_sum" 1)
                      (("2" (TYPEPRED "u")
                        (("2" (TYPEPRED "abs(u)")
                          (("2" (ASSERT)
                            (("2" (EXPAND "abs" 1 1) (("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|norm_1| CONST-DECL "(norm?(m))" |norms| NIL)
    (|entry_sum| DEF-DECL "real" |norms| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|norm_1| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL))
   NIL)
  (|norm_one_recurse-1| |nil| 3742218025
   ("" (SKEEP) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK))
 (|test_abs| 0
  (|test_abs-1| |nil| 3736860770 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|test_1| 0
  (|test_1-1| |nil| 3736863444 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|test_2sq| 0
  (|test_2sq-1| |nil| 3736867589 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|big_kahuna_TCC1| 0
  (|big_kahuna_TCC1-1| NIL 3932472686 ("" (GRIND) NIL NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL))
   NIL
   (|big_kahuna| SUBTYPE "(matrices.+)((: -1, -10, 4 :), (: 5, 7, 2 :))"
    "(list_adt[real].cons?)")))
 (|big_kahuna| 0
  (|big_kahuna-1| |nil| 3737372294 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|norm_inf_constant_TCC1| 0
  (|norm_inf_constant_TCC1-1| |nil| 3737966664 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|norm_inf_constant| SUBTYPE
    "vector_arithmetic.constant_vec(norms.c, norms.m)"
    "(list_adt[real].cons?)")))
 (|norm_inf_constant| 0
  (|norm_inf_constant-1| |nil| 3737966665
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (SPLIT)
          (("1" (ASSERT)
            (("1" (EXPAND "norm_inf")
              (("1" (EXPAND "norm_inf" 1)
                (("1" (EXPAND "constant_vec" 1)
                  (("1" (EXPAND "abs" 1)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (SPLIT)
                          (("1" (FLATTEN)
                            (("1" (LIFT-IF)
                              (("1" (ASSERT)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "abs" 1)
                                      (("1" (EXPAND "max" 1)
                                        (("1" (LIFT-IF)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (ASSERT)
                                      (("2" (EXPAND "abs" 2)
                                        (("2" (EXPAND "max" 2)
                                          (("2" (LIFT-IF)
                                            (("2" (SPLIT)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (LIFT-IF)
                              (("2" (SPLIT)
                                (("1" (FLATTEN)
                                  (("1" (EXPAND "max" 1)
                                    (("1" (LIFT-IF)
                                      (("1" (SPLIT)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "length" -1)
                                                (("1"
                                                  (TYPEPRED
                                                   "abs(constant_vec(c, j))")
                                                  (("1" (HIDE -1)
                                                    (("1" (EXPAND "length" 2)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "norm_inf" -2)
                                                (("2" (INST -2 "c")
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "abs" -2 2)
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND "abs" 2 1)
                                                          (("2"
                                                            (EXPAND "max" 2 1)
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT)
                                  (("2" (FLATTEN)
                                    (("2" (INST -1 "c")
                                      (("2" (EXPAND "norm_inf" -1)
                                        (("2" (FLIP-INEQ 1)
                                          (("2" (EXPAND "abs" -2 2)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "max" 1 1)
                                                (("2" (ASSERT)
                                                  (("2" (LIFT-IF)
                                                    (("2" (SPLIT)
                                                      (("1" (FLATTEN)
                                                        (("1" (EXPAND "abs" 1)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2"
                                                          (EXPAND "max" 2 1)
                                                          (("2"
                                                            (EXPAND "abs" 2 1)
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (ASSERT)
              (("2" (FLIP-INEQ 1)
                (("2" (CASE "NOT j=0")
                  (("1" (ASSERT) NIL NIL)
                   ("2" (REPLACE -1 1)
                    (("2" (EXPAND "norm_inf" 1)
                      (("2" (EXPAND "norm_inf" 1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "constant_vec(c, m)") (("4" (ASSERT) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|max| DEF-DECL "real" |norms| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|constant_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|norm_reflex_TCC1| 0
  (|norm_reflex_TCC1-1| |nil| 3741363549
   ("" (SKEEP) (("" (TYPEPRED "v1-v2" "v1" "v2") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|norm_reflex| SUBTYPE "(matrices.-)(norms.v1, norms.v2)"
    "(list_adt[real].cons?)")))
 (|norm_reflex_TCC2| 0
  (|norm_reflex_TCC2-1| |nil| 3741363549
   ("" (SKEEP) (("" (TYPEPRED "v2-v1" "v2" "v1") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|norm_reflex| SUBTYPE "(matrices.-)(norms.v2, norms.v1)"
    "(list_adt[real].cons?)")))
 (|norm_reflex| 0
  (|norm_reflex-1| |nil| 3741363549
   ("" (SKEEP)
    (("" (TYPEPRED "nn")
      (("" (EXPAND "norm?")
        (("" (FLATTEN)
          (("" (INST -2 "v1-v2" "-1")
            (("1" (HIDE -1 -3 -4)
              (("1" (EXPAND "abs" -1)
                (("1" (ASSERT)
                  (("1" (CASE "NOT 1 = --1")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -1 -2 RL)
                      (("2" (HIDE -1)
                        (("2" (LEMMA "dist_1")
                          (("2" (INST -1 "-1" "v1" "v2")
                            (("2" (REPLACE -1 -2)
                              (("2" (LEMMA "sub_idx")
                                (("2" (INST -1 "-1 * v1" "-1 * v2")
                                  (("1" (REPLACE -1 -2)
                                    (("1" (REPLACE -1 -3)
                                      (("1" (ASSERT)
                                        (("1" (HIDE -1)
                                          (("1" (HIDE -1)
                                            (("1" (LEMMA "asso_v")
                                              (("1" (INST -1 "-1" "-1" "v2")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -1 -2)
                                                    (("1" (CASE "NOT -1*-1 =1")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (REPLACE -1 -3)
                                                        (("2" (LEMMA "one_idx")
                                                          (("2" (INST -1 "v2")
                                                            (("2"
                                                              (REPLACE -1 -4)
                                                              (("2"
                                                                (LEMMA
                                                                 "add_commute")
                                                                (("2"
                                                                  (INST -1
                                                                   "-1 * v1"
                                                                   "v2")
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             -5)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "sub_idx")
                                                                      (("2"
                                                                        (INST
                                                                         -1
                                                                         "v2"
                                                                         "v1")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           -6
                                                                           RL)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "-1*v2" "v2")
                                    (("2" (TYPEPRED "-1*v2")
                                      (("2" (TYPEPRED "v2")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("3" (TYPEPRED "-1*v1")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "v1-v2")
              (("2" (TYPEPRED "v1" "v2")
                (("2" (EXPAND "max" -6) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|dist_1| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|asso_v| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|add_commute| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|one_idx| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|sub_idx| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|v1| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|v2| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   SHOSTAK))
 (|reverse_triag_TCC1| 0
  (|reverse_triag_TCC1-1| |nil| 3742210848 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL (|reverse_triag| SUBTYPE "norms.v" "(list_adt[real].cons?)")))
 (|reverse_triag| 0
  (|reverse_triag-2| |nil| 3742211769
   ("" (SKEEP)
    (("" (LEMMA "sub_equal_id1")
      (("" (INST-CP -1 "u" "v")
        (("" (INST -1 "v" "u")
          (("" (TYPEPRED "u" "v")
            (("" (ASSERT)
              (("" (HIDE -1 -2 -3 -4)
                (("" (TYPEPRED "nn")
                  (("" (EXPAND "norm?" -1)
                    (("" (FLATTEN)
                      (("" (INST-CP -4 "v-u" "u")
                        (("1" (INST -4 "u-v" "v")
                          (("1" (REPLACE -6 -5)
                            (("1" (REPLACE -7 -4)
                              (("1" (ASSERT)
                                (("1" (EXPAND "abs" 1)
                                  (("1" (LIFT-IF)
                                    (("1" (SPLIT)
                                      (("1" (ASSERT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (LEMMA "norm_reflex")
                                              (("1" (INST -1 "m" "nn" "u" "v")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (LEMMA "norm_reflex")
                                          (("2" (INST -1 "m" "nn" "u" "v")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "u-v" "u" "v")
                              (("2" (ASSERT)
                                (("2" (EXPAND "max" -) (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "v-u" "v" "u")
                          (("2" (EXPAND "max" -) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sub_equal_id1| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|norm_reflex| FORMULA-DECL NIL |norms| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |norms| NIL)
    (|v| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (|u| SKOLEM-CONST-DECL "VectorN(m)" |norms| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL)
  (|reverse_triag-1| |nil| 3742210849
   ("" (SKEEP)
    (("" (LEMMA "sub_equal_id")
      (("" (INST-CP -1 "u" "v")
        (("" (INST -1 "v" "u")
          (("" (TYPEPRED "u" "v")
            (("" (ASSERT)
              (("" (HIDE -1 -2 -3 -4)
                (("" (TYPEPRED "nn")
                  (("" (EXPAND "norm?" -1)
                    (("" (FLATTEN)
                      (("" (LEMMA "sub_idx")
                        (("" (INST-CP -1 "v+u" "u")
                          (("1" (INST -1 "u+v" "v")
                            (("1" (REPLACE -1 -8)
                              (("1" (REPLACE -2 -7)
                                (("1" (INST-CP -6 "v+u" " (-1 * u)")
                                  (("1" (INST-CP -6 "u + v" "(-1*v)")
                                    (("1" (REPLACE -9 -8)
                                      (("1" (REPLACE -10 -7)
                                        (("1" (POSTPONE) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (POSTPONE) NIL NIL)
                                     ("3" (POSTPONE) NIL NIL))
                                    NIL)
                                   ("2" (POSTPONE) NIL NIL)
                                   ("3" (POSTPONE) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (POSTPONE) NIL NIL))
                            NIL)
                           ("2" (POSTPONE) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|norm_inf_nth| 0
  (|norm_inf_nth-1| |nil| 3742822293
   ("" (SKEEP)
    (("" (EXPAND "norm_inf" 1 1)
      (("" (LEMMA "max_nth")
        (("" (INST -1 "abs(ll)")
          (("1" (SKEEP)
            (("1" (LEMMA "abs_nth")
              (("1" (INST -1 "ll" "i")
                (("1" (INST 1 "i") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (TYPEPRED "abs(ll)")
              (("2" (ASSERT)
                (("2" (TYPEPRED "ll")
                  (("2" (ASSERT)
                    (("2" (EXPAND "length" -4) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|ll| SKOLEM-CONST-DECL "(cons?)" |norms| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|abs_nth| FORMULA-DECL NIL |norms| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(abs(ll)))" |norms| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max_nth| FORMULA-DECL NIL |norms| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   SHOSTAK))
 (|norm_inf_nth_m_TCC1| 0
  (|norm_inf_nth_m_TCC1-1| |nil| 3742822513 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|norm_inf_nth_m| SUBTYPE "norms.i" "below[length[real](u)]")))
 (|norm_inf_nth_m| 0
  (|norm_inf_nth_m-1| |nil| 3742822514
   ("" (SKEEP)
    (("" (LEMMA "norm_inf_nth")
      (("" (INST -1 "u")
        (("" (TYPEPRED "u")
          (("" (ASSERT)
            (("" (EXPAND "norm_inf" 1 1)
              (("" (ASSERT) (("" (SKEEP) (("" (INST 1 "i") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_inf_nth| FORMULA-DECL NIL |norms| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   SHOSTAK))
 (|norm_inf_nth_ineq| 0
  (|norm_inf_nth_ineq-1| |nil| 3742918637
   ("" (INDUCT "ll")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (ASSERT)
        (("3" (CASE "cons2_var= null")
          (("1" (ASSERT)
            (("1" (REPLACE -1 1)
              (("1" (SKEEP)
                (("1" (TYPEPRED "i")
                  (("1" (EXPAND "length" -1)
                    (("1" (EXPAND "length" -1)
                      (("1" (ASSERT)
                        (("1" (CASE "NOT i=0")
                          (("1" (ASSERT) NIL NIL)
                           ("2" (REPLACE -1 1)
                            (("2" (EXPAND "norm_inf")
                              (("2" (EXPAND "abs" 1 1)
                                (("2" (EXPAND "max" 1)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "nth" 1)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (CASE "i=0")
                (("1" (REPLACE -1 2)
                  (("1" (EXPAND "norm_inf" 2 1)
                    (("1" (EXPAND "abs" 2 1)
                      (("1" (EXPAND "length" 2)
                        (("1" (ASSERT)
                          (("1" (EXPAND "length" 2)
                            (("1" (ASSERT)
                              (("1" (ASSERT)
                                (("1" (EXPAND "nth" 2 1)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "max" 2)
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "length" 2)
                                          (("1" (TYPEPRED "abs(cons2_var)")
                                            (("1" (ASSERT)
                                              (("1" (EXPAND "length" 2)
                                                (("1" (EXPAND "length" -2)
                                                  (("1" (LIFT-IF -2)
                                                    (("1" (SPLIT -2)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT)
                                                        (("2" (LIFT-IF 2)
                                                          (("2" (ASSERT)
                                                            (("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST -1 "i-1")
                  (("1" (EXPAND "nth" 3)
                    (("1" (ASSERT)
                      (("1" (EXPAND "norm_inf" 3 1)
                        (("1" (EXPAND "abs" 3 1)
                          (("1" (EXPAND "max" 3 1)
                            (("1" (ASSERT)
                              (("1" (EXPAND "length" 3)
                                (("1" (TYPEPRED "abs(cons2_var)")
                                  (("1" (EXPAND "length" -2)
                                    (("1" (LIFT-IF -2)
                                      (("1" (SPLIT -2)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "length" 4)
                                                (("2" (EXPAND "norm_inf" -3 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (TYPEPRED "i")
                      (("2" (ASSERT)
                        (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cons(cons1_var, cons2_var)))" |norms|
     NIL)
    (|cons2_var| SKOLEM-CONST-DECL "list[real]" |norms| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "real" |norms| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|norm_inf_nth_ineq_m| 0
  (|norm_inf_nth_ineq_m-1| |nil| 3742919127
   ("" (SKEEP)
    (("" (LEMMA "norm_inf_nth_ineq")
      (("" (INST -1 "u" "_")
        (("" (SKEEP)
          (("" (INST -1 "i")
            (("" (EXPAND "norm_inf" 1 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norm_inf_nth_ineq| FORMULA-DECL NIL |norms| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   SHOSTAK))
 (|norm_inf_canc_TCC1| 0
  (|norm_inf_canc_TCC1-1| |nil| 3787598316
   ("" (SKEEP)
    (("" (TYPEPRED "v1" "v2" "v3" "v1-v2" "v2-v3" "(v1 - v2) - (v2 - v3)")
      (("" (ASSERT)
        (("" (REPLACE -2)
          (("" (REPLACE -4)
            (("" (EXPAND "max" -8)
              (("" (TYPEPRED "m") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|norm_inf_canc| SUBTYPE
    "(matrices.+)(((matrices.-)(norms.v1, norms.v2)), ((matrices.-)(norms.v2, norms.v3)))"
    "(list_adt[real].cons?)")))
 (|norm_inf_canc_TCC2| 0
  (|norm_inf_canc_TCC2-1| |nil| 3787598316
   ("" (SKEEP) (("" (TYPEPRED "v1-v3" "v1" "v3") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|norm_inf_canc| SUBTYPE "(matrices.-)(norms.v1, norms.v3)"
    "(list_adt[real].cons?)")))
 (|norm_inf_canc| 0
  (|norm_inf_canc-1| |nil| 3787598480
   ("" (SKEEP)
    (("" (LEMMA "quad_cancel_plus")
      (("" (INST -1 "v1" "v2" "v3") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|quad_cancel_plus| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   SHOSTAK))
 (|norm_inf_e_TCC1| 0
  (|norm_inf_e_TCC1-1| |nil| 3798290130 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|norm_inf_e| SUBTYPE "vector_arithmetic.e(norms.n, norms.i)"
    "(list_adt[real].cons?)")))
 (|norm_inf_e_TCC2| 0
  (|norm_inf_e_TCC2-1| |nil| 3798290130 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|norm_inf_e| SUBTYPE "norms.n" "posnat")))
 (|norm_inf_e| 0
  (|norm_inf_e-1| |nil| 3798290281
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "norm_inf")
          (("2" (CASE "i=0")
            (("1" (EXPAND "e" 1 1)
              (("1" (ASSERT)
                (("1" (EXPAND "norm_inf" 1 1)
                  (("1" (EXPAND "abs" 1 1)
                    (("1" (CASE "j=0")
                      (("1" (GRIND) NIL NIL)
                       ("2" (EXPAND "length" 2 1)
                        (("2" (ASSERT)
                          (("2" (EXPAND "max" 2 1)
                            (("2" (EXPAND "length" 2 1)
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "norm_inf(j)")
                                  (("2" (EXPAND "norm?" -1)
                                    (("2" (FLATTEN)
                                      (("2" (INST -3 "zero_vec(j)")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "norm_inf" -3)
                                            (("2" (EXPAND "norm_inf" -3)
                                              (("2" (REPLACE -3)
                                                (("2" (EXPAND "max")
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "e" 2 1)
              (("2" (ASSERT)
                (("2" (EXPAND "norm_inf" 2 1)
                  (("2" (EXPAND "abs" 2)
                    (("2" (ASSERT)
                      (("2" (EXPAND "length")
                        (("2" (ASSERT)
                          (("2" (EXPAND "max" 2)
                            (("2" (EXPAND "length" 2 1)
                              (("2" (EXPAND "abs" 2 1)
                                (("2" (INST -1 "i-1")
                                  (("2" (EXPAND "norm_inf" -1)
                                    (("2" (REPLACE -1) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (TYPEPRED "n!1")
      (("3" (HIDE 2)
        (("3" (SKEEP)
          (("3" (CASE "n=0")
            (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "e" 2 1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|zero_vec| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}"
     |real_defs| NIL)
    (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}"
     |real_defs| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|norm_inf_e_scal_TCC1| 0
  (|norm_inf_e_scal_TCC1-1| |nil| 3798290130 ("" (SUBTYPE-TCC) NIL NIL)
   ((* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|norm_inf_e_scal| SUBTYPE
    "matrices.*(norms.c, vector_arithmetic.e(norms.n, norms.i))"
    "(list_adt[real].cons?)")))
 (|norm_inf_e_scal| 0
  (|norm_inf_e_scal-1| |nil| 3798291364
   ("" (SKEEP)
    (("" (CASE "n=0")
      (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)
       ("2" (TYPEPRED "norm_inf(n)")
        (("2" (EXPAND "norm?" -1)
          (("2" (FLATTEN)
            (("2" (INST -2 "e(n,i)" "c")
              (("2" (REPLACE -2 2)
                (("2" (LEMMA "norm_inf_e")
                  (("2" (INST -1 "n" "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|norm_inf_e| FORMULA-DECL NIL |norms| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|dot_max_ineq| 0
  (|dot_max_ineq-1| |nil| 3796042662
   ("" (INDUCT "u")
    (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var=null")
          (("1" (ASSERT)
            (("1" (HIDE -2)
              (("1" (EXPAND "length" -2)
                (("1" (EXPAND "length" -2)
                  (("1" (LIFT-IF -2)
                    (("1" (SPLIT -2)
                      (("1" (EXPAND "length" 1)
                        (("1" (EXPAND "length" 1)
                          (("1" (ASSERT)
                            (("1" (LEMMA "abs_mult")
                              (("1" (EXPAND "*" 1)
                                (("1" (EXPAND " dot" 1)
                                  (("1" (EXPAND "dot" 1)
                                    (("1" (INST -1 "car(v)" "cons1_var")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (EXPAND "length" -2)
              (("2" (CASE "cdr(v)=null")
                (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)
                 ("2" (INST -1 "cdr(v)")
                  (("1" (ASSERT)
                    (("1" (EXPAND "*" 3)
                      (("1" (EXPAND "dot" 3 1)
                        (("1" (LEMMA "triangle")
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    " abs(dot(cdr(v), cons2_var)) + abs(car(v) * cons1_var) <=length(v) * norm_inf(cons(cons1_var, cons2_var)) * norm_inf(v)")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE 4)
                                  (("2" (EXPAND "*" -2 1)
                                    (("2" (EXPAND "length" 1 1)
                                      (("2"
                                        (CASE
                                            "abs(dot(cdr(v), cons2_var))  <= length[real](cdr(v)) * norm_inf(cons(cons1_var, cons2_var)) *
         norm_inf(v)")
                                        (("1"
                                          (CASE
                                              " abs(car(v) * cons1_var)<=  norm_inf(cons(cons1_var, cons2_var)) * norm_inf(v)")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (HIDE 2)
                                            (("2" (EXPAND "norm_inf" 1 1)
                                              (("2" (LEMMA "norm_inf_nth_ineq")
                                                (("2" (INST-CP -1 "v" "0")
                                                  (("1"
                                                    (INST -1
                                                     "cons(cons1_var, cons2_var)"
                                                     "0")
                                                    (("1"
                                                      (EXPAND "norm_inf" -2)
                                                      (("1"
                                                        (EXPAND "norm_inf" -1)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "nth" -1)
                                                            (("1"
                                                              (EXPAND "nth" -2)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (LEMMA
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (INST -1
                                                                     "car(v)"
                                                                     "cons1_var")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 1)
                                                                        (("1"
                                                                          (MULT-BY
                                                                           -2
                                                                           " abs(car(v))")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (MULT-BY
                                                                               -3
                                                                               " max(abs(cons(cons1_var, cons2_var)))")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "norm_inf"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "length" 1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "length" 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (HIDE 2)
                                            (("2"
                                              (CASE
                                                  " norm_inf(cons(cons1_var, cons2_var)) >= norm_inf(cons2_var)")
                                              (("1"
                                                (CASE
                                                    "norm_inf(cons2_var) <= norm_inf(cons(cons1_var, cons2_var))")
                                                (("1"
                                                  (CASE
                                                      "norm_inf(cdr(v)) <=   norm_inf(v)")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (CASE
                                                          " length(cdr(v)) * norm_inf(cdr(v)) * norm_inf(cons2_var) <=  length[real](cdr(v)) * norm_inf(cons(cons1_var, cons2_var)) *
        norm_inf(v)")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2"
                                                        (DIV-BY 1
                                                         "length(cdr(v))")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (CASE
                                                                "NOT  length(cdr(v)) * norm_inf(cdr(v)) * norm_inf(cons2_var) /
       length(cdr(v)) = norm_inf(cdr(v)) * norm_inf(cons2_var)")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (REPLACE -1 1)
                                                              (("2"
                                                                (CASE
                                                                    "NOT  length[real](cdr(v)) * norm_inf(cons(cons1_var, cons2_var)) *
        norm_inf(v)
        / length(cdr(v)) = norm_inf(cons(cons1_var, cons2_var)) *
        norm_inf(v)")
                                                                (("1" (ASSERT)
                                                                  NIL NIL)
                                                                 ("2"
                                                                  (REPLACE -1)
                                                                  (("2"
                                                                    (HIDE -1
                                                                     -2)
                                                                    (("2"
                                                                      (MULT-BY
                                                                       -1
                                                                       "norm_inf(cons2_var)")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (MULT-BY
                                                                           -2
                                                                           "norm_inf(v)")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "norm_inf" 1)
                                                    (("2" (EXPAND "abs" 1 2)
                                                      (("2" (LIFT-IF 1)
                                                        (("2" (SPLIT 1)
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -1)
                                                              (("1"
                                                                (EXPAND
                                                                 "length" -1)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND "max" 2
                                                                        2)
                                                                (("2"
                                                                  (LIFT-IF 2)
                                                                  (("2"
                                                                    (SPLIT 2)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "norm_inf" 1)
                                                  (("2" (EXPAND "abs" 1 2)
                                                    (("2" (LIFT-IF 1)
                                                      (("2" (SPLIT 1)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND "length"
                                                                    -1)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (EXPAND "max" 2
                                                                      2)
                                                              (("2" (LIFT-IF 2)
                                                                (("2" (SPLIT 2)
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "norm_inf" 1 1)
                                                (("2" (EXPAND "norm_inf" 1)
                                                  (("2" (EXPAND "abs" 1 1)
                                                    (("2" (LIFT-IF 1)
                                                      (("2" (SPLIT 1)
                                                        (("1" (FLATTEN)
                                                          (("1" (GRIND) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2"
                                                            (EXPAND "max" 2 1)
                                                            (("2" (LIFT-IF 2)
                                                              (("2" (SPLIT 2)
                                                                (("1" (GRIND)
                                                                  NIL NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|abs_mult| FORMULA-DECL NIL |real_props| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|v| SKOLEM-CONST-DECL "(cons?)" |norms| NIL)
    (|triangle| FORMULA-DECL NIL |real_props| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_div_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "real" |norms| NIL)
    (|cons2_var| SKOLEM-CONST-DECL "list[real]" |norms| NIL)
    (|norm_inf_nth_ineq| FORMULA-DECL NIL |norms| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|dot_equality_delta_TCC1| 0
  (|dot_equality_delta_TCC1-1| |nil| 3798192046
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "u") (("" (TYPEPRED "ww") (("" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL (|dot_equality_delta| SUBTYPE "norms.ww" "(list_adt[real].cons?)")))
 (|dot_equality_delta_TCC2| 0
  (|dot_equality_delta_TCC2-1| |nil| 3798192046
   ("" (SKEEP)
    (("" (SKEEP) (("" (TYPEPRED "u") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|dot_equality_delta| SUBTYPE "list_props[real].length(norms.u)" "posnat")))
 (|dot_equality_delta| 0
  (|dot_equality_delta-1| |nil| 3798192193
   ("" (INDUCT "u" 1)
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (SKEEP)
        (("3" (CASE "cons2_var = null")
          (("1" (REPLACE -1 -4)
            (("1" (REPLACE -1 1)
              (("1" (DECOMPOSE-EQUALITY 1)
                (("1" (EXPAND "length" -3)
                  (("1" (HIDE -2)
                    (("1" (INST -3 "delta/2*(: 1 :)")
                      (("1" (EXPAND "*" -3)
                        (("1" (EXPAND "dot" -3)
                          (("1" (EXPAND "dot" -3)
                            (("1" (EXPAND "scal")
                              (("1" (EXPAND "scal")
                                (("1" (MULT-BY -3 "2")
                                  (("1" (DIV-BY -1 "delta")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SPLIT 1)
                        (("1" (EXPAND "*" 1)
                          (("1" (EXPAND "scal" 1)
                            (("1" (EXPAND "scal" 1)
                              (("1" (EXPAND "length" 1)
                                (("1" (EXPAND "length" 1)
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "norm_inf" 1)
                          (("2" (EXPAND "*" 1)
                            (("2" (EXPAND "scal" 1)
                              (("2" (EXPAND "norm_inf" 1 1)
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE -2 -4) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (INST -1 "cdr(v)" "delta")
              (("1" (ASSERT)
                (("1" (SPLIT -1)
                  (("1" (DECOMPOSE-EQUALITY 2)
                    (("1" (INST -3 "scal(delta/2,e(length(v),0))")
                      (("1" (LEMMA "dot_scalar1")
                        (("1" (INST -1 "v" "e(length(v),0)" "delta/2")
                          (("1" (EXPAND "*" -1 2)
                            (("1" (REPLACE -1 -4)
                              (("1" (LEMMA "dot_scalar1")
                                (("1"
                                  (INST -1 "cons(cons1_var,cons2_var)"
                                   "e(length(v),0)" "delta/2")
                                  (("1" (EXPAND "*" -1 2)
                                    (("1" (REPLACE -1)
                                      (("1"
                                        (CASE
                                            "(cons(cons1_var, cons2_var) * e(length(v), 0)) = (v * e(length(v), 0))")
                                        (("1" (LEMMA "dot_prod_e")
                                          (("1"
                                            (INST-CP -1 "length(v)" "0"
                                             "(cons(cons1_var, cons2_var))")
                                            (("1" (REPLACE -2)
                                              (("1"
                                                (INST -1 "length(v)" "0" "v")
                                                (("1" (REPLACE -1)
                                                  (("1" (EXPAND "nth" -3)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "length" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (MULT-BY -5 "2")
                                          (("2" (DIV-BY -1 "delta")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (EXPAND "e" 1 1)
                                    (("2" (EXPAND "length" 1 1)
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "e" 1 1)
                              (("2" (EXPAND "length" 1)
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (SPLIT 1)
                          (("1"
                            (TYPEPRED "scal(delta / 2, e(length[real](v), 0))")
                            (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("2" (EXPAND "norm_inf" 1 1)
                            (("2" (LEMMA "norm_inf_e_scal")
                              (("2" (INST -1 "length(v)" "0" "delta/2")
                                (("2" (EXPAND "*" -1 1)
                                  (("2" (EXPAND "norm_inf" -1)
                                    (("2" (REPLACE -1 1)
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL)
                   ("3" (SKEEP)
                    (("3" (INST -2 "cons(0,w)")
                      (("1" (EXPAND "*" -2)
                        (("1" (EXPAND "dot" -2)
                          (("1" (ASSERT)
                            (("1" (EXPAND "*" 1) (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SPLIT 1)
                        (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (EXPAND "norm_inf" 1)
                          (("2" (EXPAND "norm_inf" 1 1)
                            (("2" (EXPAND "abs" 1 1)
                              (("2" (EXPAND "length" 1 1)
                                (("2" (ASSERT)
                                  (("2" (TYPEPRED "w")
                                    (("2" (LIFT-IF 1)
                                      (("2" (SPLIT 1)
                                        (("1" (FLATTEN) (("1" (GRIND) NIL NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (EXPAND "max" 2 1)
                                            (("2" (EXPAND "length" 2 1)
                                              (("2" (ASSERT)
                                                (("2" (TYPEPRED "abs(w)")
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (EXPAND "norm_inf" -5)
                                                      (("2"
                                                        (EXPAND "norm_inf" -5)
                                                        (("2" (ASSERT)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "v") (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (SKEEP*) (("4" (GRIND) NIL NIL)) NIL)) NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP*) (("5" (TYPEPRED "ww") (("5" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|cons2_var| SKOLEM-CONST-DECL "list[real]" |norms| NIL)
    (|cons1_var| SKOLEM-CONST-DECL "real" |norms| NIL)
    (|delta| SKOLEM-CONST-DECL "posreal" |norms| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|both_sides_times1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|both_sides_div1| FORMULA-DECL NIL |real_props| NIL)
    (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL)
    (|abs| DEF-DECL "{l: list | length(l) = length(ll)}" |norms| NIL)
    (|max| DEF-DECL "real" |norms| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|norm_inf| CONST-DECL "[(cons?) -> nonneg_real]" |norms| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|v| SKOLEM-CONST-DECL "(cons?)" |norms| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|e| DEF-DECL "VectorN(m)" |vector_arithmetic| NIL)
    (|dot_prod_e| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|dot_scalar1| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|norm_inf_e_scal| FORMULA-DECL NIL |norms| NIL)
    (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}"
     |real_defs| NIL)
    (|w| SKOLEM-CONST-DECL
     "{ww: VectorN(length(cons2_var)) | norm_inf(length(cons2_var))(ww) < delta}"
     |norms| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}"
     |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (> CONST-DECL "bool" |reals| NIL) (* CONST-DECL "real" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|norm_inf| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL))
   SHOSTAK)))

