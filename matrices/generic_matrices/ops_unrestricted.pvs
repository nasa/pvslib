ops_unrestricted[T:TYPE,default:T]: THEORY
BEGIN

  IMPORTING generic_matrix_defs[T,default]

  map(f:[T->T],v:gvec): gvec =
    (# nth:= (LAMBDA (i:nat): IF i<length(v) THEN f(nth(v,i))
                              ELSE default
			      ENDIF),
       length:= length(v)
    #)

  map(f:[T->T],M:gmat): gmat =
    (# ijth:= (LAMBDA (i,j:nat): IF i<height(M) and j<width(M) THEN f(ijth(M,i,j))
                                 ELSE default
				 ENDIF),
       dimension:= (height(M),width(M))
    #)

  expand(*:[[T,T]->T])(u,v:gvec): gmat =
    IF length(u)=0 OR length(v)=0 THEN M_default
    ELSE
      (# ijth:= (LAMBDA (i,j:nat): IF i<length(u) AND j<length(v) THEN nth(u,i) * nth(v,j)
                                   ELSE default
				   ENDIF),
	 dimension:= (length(u),length(v))
      #)
    ENDIF

  collapse(+:[[T,T]->T])(v:gvec): RECURSIvE T =
    IF length(v) = 0 THEN default
    ELSE car(v) + collapse(+)(cdr(v))
    ENDIF
  MEASURE length(v)

  transpose(M:gmat): gmat =
    (# ijth:= (LAMBDA (i,j:nat): ijth(M,j,i)),
       dimension:= (width(M),height(M))
    #)

END ops_unrestricted
