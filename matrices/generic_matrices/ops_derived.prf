(ops_derived
 (collapse_default 0
  (collapse_default-1 nil 3907426743
   ("" (skeep)
    (("" (generalize "v" "v")
      ((""
        (case "FORALL (n:nat): FORALL (v: gvec[T, default]): length(v)=n IMPLIES
        (same?(v, v_default) IMPLIES collapse(+)(v) = default)")
        (("1" (skeep)
          (("1" (instantiate -1 "length(v!1)")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "n")
            (("1" (grind) nil nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (expand "collapse" 1)
                  (("2" (assert)
                    (("2" (instantiate -1 "cdr(v!1)")
                      (("2" (expand "cdr" -1 1)
                        (("2" (split)
                          (("1" (assert)
                            (("1" (replaces -1)
                              (("1"
                                (expand "same?")
                                (("1"
                                  (expand "v_default")
                                  (("1"
                                    (expand "car")
                                    (("1"
                                      (expand "minimal_default_vector")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "+")
                                                (("1"
                                                  (expand
                                                   "is_idempotent?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "same?")
                            (("2" (expand "v_default")
                              (("2"
                                (hide 2)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (expand "minimal_default_vector")
                                    (("2"
                                      (expand "cdr")
                                      (("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (decompose-equality)
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_idempotent? const-decl "bool" algebra_defs nil)
    (collapse def-decl "T" ops_unrestricted nil)
    (v_default const-decl "gvec" generic_matrix_defs nil)
    (same? const-decl "bool" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (default formal-const-decl "T" ops_derived nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil ops_derived nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (car const-decl "T" generic_matrix_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "gvec" generic_matrix_defs nil)
    (> const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minimal_default_vector const-decl "gvec" generic_matrix_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (pointwise_default_absorbing 0
  (pointwise_default_absorbing-1 nil 3907427082
   ("" (skeep)
    (("" (split)
      (("1" (expand "pointwise")
        (("1" (expand "same?")
          (("1" (expand "nth")
            (("1" (replaces -2)
              (("1" (assert)
                (("1" (expand "v_default")
                  (("1" (expand "minimal_default_vector")
                    (("1" (expand "is_absorbing_element?")
                      (("1" (decompose-equality)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "v_default")
        (("2" (expand "minimal_default_vector")
          (("2" (expand "same?")
            (("2" (expand "pointwise")
              (("2" (expand "nth")
                (("2" (decompose-equality)
                  (("2" (replaces -2)
                    (("2" (assert)
                      (("2" (expand "is_absorbing_element?")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same? const-decl "bool" generic_matrix_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (v_default const-decl "gvec" generic_matrix_defs nil)
    (is_absorbing_element? const-decl "bool" algebra_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil ops_derived nil)
    (is_idempotent? const-decl "bool" algebra_defs nil)
    (default formal-const-decl "T" ops_derived nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (minimal_default_vector const-decl "gvec" generic_matrix_defs nil)
    (nth const-decl "T" generic_matrix_defs nil)
    (pointwise const-decl "gvec" ops_pointwise nil))
   shostak))
 (gvec_product_default_absorbing 0
  (gvec_product_default_absorbing-1 nil 3907427202
   ("" (skeep)
    (("" (expand "gvec_product")
      (("" (lemma "pointwise_default_absorbing")
        (("" (inst?)
          (("" (assert)
            (("" (flatten)
              (("" (split)
                (("1" (lemma "collapse_default")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (lemma "collapse_default")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gvec_product const-decl "T" ops_derived nil)
    (T formal-type-decl nil ops_derived nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_idempotent? const-decl "bool" algebra_defs nil)
    (default formal-const-decl "T" ops_derived nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (collapse_default formula-decl nil ops_derived nil)
    (pointwise const-decl "gvec" ops_pointwise nil)
    (pointwise_default_absorbing formula-decl nil ops_derived nil))
   shostak))
 (gmat_product_TCC1 0
  (gmat_product_TCC1-1 nil 3907427447 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (default formal-const-decl "T" ops_derived nil)
    (is_absorbing_element? const-decl "bool" algebra_defs nil)
    (T formal-type-decl nil ops_derived nil)
    (is_idempotent? const-decl "bool" algebra_defs nil))
   nil
   (gmat_product subtype "ops_derived.**"
    "{binop: [[ops_derived.T, ops_derived.T] -> ops_derived.T] | algebra_defs[ops_derived.T, ops_derived.T].is_idempotent?(binop)(ops_derived.default)}")))
 (gmat_product_TCC2 0
  (gmat_product_TCC2-1 nil 3907424457
   ("" (skeep)
    (("" (split)
      (("1" (lift-if)
        (("1" (split)
          (("1" (assert) nil nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (lift-if)
        (("2" (split)
          (("1" (assert) nil nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (typepred "**")
            (("3" (lemma "gvec_product_default_absorbing")
              (("3" (lift-if)
                (("3" (split)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (expand "height")
                        (("1" (typepred "dimension(M)")
                          (("1"
                            (instantiate -6
                             ("**" "+" "column(N,j1)" "row(M,k)"))
                            (("1" (assert)
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (expand "v_default")
                                  (("1"
                                    (expand "minimal_default_vector")
                                    (("1"
                                      (expand "row")
                                      (("1"
                                        (expand "same?")
                                        (("1"
                                          (decompose-equality)
                                          (("1"
                                            (expand "ijth")
                                            (("1"
                                              (typepred "dimension(M)")
                                              (("1"
                                                (instantiate -3 "k")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (instantiate
                                                     -3
                                                     "x!1")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (instantiate -2
                         ("**" "+" "row(M,k)" "column(N,j1)"))
                        (("2" (assert)
                          (("2" (hide (2 -2))
                            (("2" (expand "width")
                              (("2"
                                (expand "v_default")
                                (("2"
                                  (expand "minimal_default_vector")
                                  (("2"
                                    (expand "column")
                                    (("2"
                                      (expand "same?")
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (expand "ijth")
                                          (("2"
                                            (typepred "dimension(N)")
                                            (("2"
                                              (instantiate -4 "j1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (instantiate
                                                   -4
                                                   "x!1")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "height")
                        (("2"
                          (instantiate -2
                           ("**" "+" "column(N,j1)" "row(M,k)"))
                          (("2" (assert)
                            (("2" (hide-all-but (-1 3))
                              (("2"
                                (expand "v_default")
                                (("2"
                                  (expand "minimal_default_vector")
                                  (("2"
                                    (expand "row")
                                    (("2"
                                      (expand "same?")
                                      (("2"
                                        (decompose-equality)
                                        (("2"
                                          (expand "ijth")
                                          (("2"
                                            (typepred "dimension(M)")
                                            (("2"
                                              (instantiate -3 "k")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (instantiate
                                                   -2
                                                   "x!1")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (lemma "gvec_product_default_absorbing")
            (("4" (lift-if)
              (("4" (split)
                (("1" (assert)
                  (("1" (split)
                    (("1" (expand "height")
                      (("1"
                        (instantiate -2
                         ("**" "+" "column(N,k)" "row(M,i1)"))
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "v_default")
                              (("1"
                                (expand "minimal_default_vector")
                                (("1"
                                  (expand "row")
                                  (("1"
                                    (expand "same?")
                                    (("1"
                                      (decompose-equality)
                                      (("1"
                                        (expand "ijth")
                                        (("1"
                                          (typepred "dimension(M)")
                                          (("1"
                                            (instantiate -3 "i1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (instantiate -3 "x!1")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "width")
                      (("2"
                        (instantiate -2
                         ("**" "+" "row(M,i1)" "column(N,k)"))
                        (("2" (assert)
                          (("2" (hide 2)
                            (("2" (expand "v_default")
                              (("2"
                                (expand "minimal_default_vector")
                                (("2"
                                  (expand "column")
                                  (("2"
                                    (expand "same?")
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (expand "ijth")
                                        (("2"
                                          (typepred "dimension(N)")
                                          (("2"
                                            (instantiate -4 "k")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (instantiate -4 "x!1")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (flatten)
                    (("2" (expand "width")
                      (("2"
                        (instantiate -2
                         ("**" "+" "row(M,i1)" "column(N,k)"))
                        (("2" (assert)
                          (("2" (hide-all-but (-1 3))
                            (("2" (expand "v_default")
                              (("2"
                                (expand "minimal_default_vector")
                                (("2"
                                  (expand "column")
                                  (("2"
                                    (expand "same?")
                                    (("2"
                                      (decompose-equality)
                                      (("2"
                                        (expand "ijth")
                                        (("2"
                                          (typepred "dimension(N)")
                                          (("2"
                                            (instantiate -4 "k")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (instantiate -3 "x!1")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((default formal-const-decl "T" ops_derived nil)
    (is_absorbing_element? const-decl "bool" algebra_defs nil)
    (T formal-type-decl nil ops_derived nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (minimal_default_vector const-decl "gvec" generic_matrix_defs nil)
    (same? const-decl "bool" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ijth const-decl "T" generic_matrix_defs nil)
    (v_default const-decl "gvec" generic_matrix_defs nil)
    (row const-decl "gvec" generic_matrix_defs nil)
    (column const-decl "gvec" generic_matrix_defs nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (is_idempotent? const-decl "bool" algebra_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (gvec_product_default_absorbing formula-decl nil ops_derived nil))
   nil
   (gmat_product subtype
    "IF booleans.OR(generic_matrix_defs[ops_derived.T, ops_derived.default].height(ops_derived.M) = 0, generic_matrix_defs[ops_derived.T, ops_derived.default].width(ops_derived.N) = 0) THEN (0, 0) ELSE (generic_matrix_defs[ops_derived.T, ops_derived.default].height(ops_derived.M), generic_matrix_defs[ops_derived.T, ops_derived.default].width(ops_derived.N)) ENDIF"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): ops_derived.gvec_product(ops_derived.+, ops_derived.**)(generic_matrix_defs[ops_derived.T, ops_derived.default].row(ops_derived.M, generic_matrix_defs.k), generic_matrix_defs[ops_derived.T, ops_derived.default].column(ops_derived.N, j1)) = ops_derived.default), FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): ops_derived.gvec_product(ops_derived.+, ops_derived.**)(generic_matrix_defs[ops_derived.T, ops_derived.default].row(ops_derived.M, i1), generic_matrix_defs[ops_derived.T, ops_derived.default].column(ops_derived.N, generic_matrix_defs.k)) = ops_derived.default)))}"))))

