ops_derived[T:TYPE,default:T]: THEORY
BEGIN

  IMPORTING generic_matrix_defs[T,default],
            ops_unrestricted[T,default],
	    ops_pointwise[T,default],
	    algebra_defs[T,T] % The second T is a dummy filling in for the scalar type. This
	                      % originally used interpretations, but it was causing a LISP
			      % error (at least in PVS 7).

  +,*:VAR {binop:[[T,T]->T] | is_idempotent?(binop)(default)}
  **:VAR {binop:[[T,T]->T] | is_absorbing_element?(binop)(default)}
  u,v:VAR gvec
  M,N:VAR gmat

  gvec_product(+,*)(u,v): T =
    collapse(+)(pointwise(*)(u,v))

  collapse_default: LEMMA
    same?(v,v_default) IMPLIES collapse(+)(v) = default

  pointwise_default_absorbing: LEMMA
    (is_absorbing_element?(*)(default) AND same?(v,v_default))
    IMPLIES same?(pointwise(*)(u,v),v_default) AND same?(pointwise(*)(v,u),v_default)

  gvec_product_default_absorbing: LEMMA
    (is_absorbing_element?(*)(default) AND same?(v,v_default))
    IMPLIES gvec_product(+,*)(u,v) = default AND gvec_product(+,*)(v,u) = default

  gmat_product(+,**)(M,N): gmat =
    (# ijth:= (LAMBDA (i,j:nat): gvec_product(+,**)(row(M,i),column(N,j))),
       dimension:= IF height(M)=0 OR width(N)=0 THEN (0,0)
                   ELSE (height(M),width(N))
		   ENDIF
    #)

END ops_derived
