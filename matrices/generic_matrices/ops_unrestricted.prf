(ops_unrestricted
 (map_TCC1 0
  (map_TCC1-1 nil 3907417778 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (default formal-const-decl "T" ops_unrestricted nil)
    (T formal-type-decl nil ops_unrestricted nil)
    (nth const-decl "T" generic_matrix_defs nil))
   nil
   (map subtype "length(ops_unrestricted.v)"
        "{i_1 | FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), IF reals.<(generic_matrix_defs.k, length(ops_unrestricted.v)) THEN ops_unrestricted.f(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].nth(ops_unrestricted.v, generic_matrix_defs.k)) ELSE ops_unrestricted.default ENDIF = ops_unrestricted.default)}")))
 (map_TCC2 0
  (map_TCC2-1 nil 3907417778
   ("" (skeep)
    (("" (split)
      (("1" (expand "height")
        (("1" (expand "width")
          (("1" (typepred "dimension(M)") (("1" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "width")
        (("2" (expand "height")
          (("2" (typepred "dimension(M)") (("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("3" (skeep) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil)
       ("4" (skeep) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((width const-decl "nat" generic_matrix_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil ops_unrestricted nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" ops_unrestricted nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (map subtype
        "(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].height(ops_unrestricted.M), generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].width(ops_unrestricted.M))"
        "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): IF booleans.AND(reals.<(generic_matrix_defs.k, generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].height(ops_unrestricted.M)), reals.<(j1, generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].width(ops_unrestricted.M))) THEN ops_unrestricted.f(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].ijth(ops_unrestricted.M, generic_matrix_defs.k, j1)) ELSE ops_unrestricted.default ENDIF = ops_unrestricted.default), FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): IF booleans.AND(reals.<(i1, generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].height(ops_unrestricted.M)), reals.<(generic_matrix_defs.k, generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].width(ops_unrestricted.M))) THEN ops_unrestricted.f(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].ijth(ops_unrestricted.M, i1, generic_matrix_defs.k)) ELSE ops_unrestricted.default ENDIF = ops_unrestricted.default)))}")))
 (expand_TCC1 0
  (expand_TCC1-1 nil 3907417778 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (default formal-const-decl "T" ops_unrestricted nil)
    (T formal-type-decl nil ops_unrestricted nil)
    (nth const-decl "T" generic_matrix_defs nil))
   nil
   (expand subtype
           "(length(ops_unrestricted.u), length(ops_unrestricted.v))"
           "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): IF booleans.AND(reals.<(generic_matrix_defs.k, length(ops_unrestricted.u)), reals.<(j1, length(ops_unrestricted.v))) THEN ops_unrestricted.*(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].nth(ops_unrestricted.u, generic_matrix_defs.k), generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].nth(ops_unrestricted.v, j1)) ELSE ops_unrestricted.default ENDIF = ops_unrestricted.default), FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): IF booleans.AND(reals.<(i1, length(ops_unrestricted.u)), reals.<(generic_matrix_defs.k, length(ops_unrestricted.v))) THEN ops_unrestricted.*(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].nth(ops_unrestricted.u, i1), generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].nth(ops_unrestricted.v, generic_matrix_defs.k)) ELSE ops_unrestricted.default ENDIF = ops_unrestricted.default)))}")))
 (collapse_TCC1 0
  (collapse_TCC1-1 nil 3907417778 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (collapse subtype "ops_unrestricted.v"
    "{u | reals.>(length(u), 0)}")))
 (collapse_TCC2 0
  (collapse_TCC2-1 nil 3907417778
   ("" (skeep) (("" (expand "cdr") (("" (assert) nil nil)) nil)) nil)
   ((cdr const-decl "gvec" generic_matrix_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (collapse termination
    "ops_unrestricted.collapse(ops_unrestricted.+)(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].cdr(ops_unrestricted.v))"
    "nil")))
 (transpose_TCC1 0
  (transpose_TCC1-1 nil 3907417778
   ("" (skeep)
    (("" (split)
      (("1" (expand "width")
        (("1" (expand "height")
          (("1" (typepred "dimension(M)") (("1" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "height")
        (("2" (expand "width")
          (("2" (typepred "dimension(M)") (("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "ijth")
            (("3" (expand "width")
              (("3" (typepred "dimension(M)")
                (("3" (instantiate -4 "k")
                  (("3" (assert)
                    (("3" (instantiate -4 "j1")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (expand "height")
          (("4" (skeep)
            (("4" (expand "ijth")
              (("4" (typepred "dimension(M)")
                (("4" (instantiate -3 "k")
                  (("4" (assert)
                    (("4" (instantiate -3 "i1")
                      (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((height const-decl "nat" generic_matrix_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil ops_unrestricted nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" ops_unrestricted nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (width const-decl "nat" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ijth const-decl "T" generic_matrix_defs nil))
   nil
   (transpose subtype
    "(generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].width(ops_unrestricted.M), generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].height(ops_unrestricted.M))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].ijth(ops_unrestricted.M, j1, generic_matrix_defs.k) = ops_unrestricted.default), FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): generic_matrix_defs[ops_unrestricted.T, ops_unrestricted.default].ijth(ops_unrestricted.M, generic_matrix_defs.k, i1) = ops_unrestricted.default)))}"))))

