(ops_pointwise
 (pointwise_TCC1 0
  (pointwise_TCC1-1 nil 3907418112
   ("" (skeep)
    (("" (skeep)
      (("" (expand "nth")
        (("" (typepred "*")
          (("" (expand "is_idempotent?")
            (("" (typepred "length(u)")
              (("" (typepred "length(v)")
                (("" (instantiate -1 "k")
                  (("" (instantiate -2 "k") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((default formal-const-decl "T" ops_pointwise nil)
    (is_idempotent? const-decl "bool" algebra_defs nil)
    (T formal-type-decl nil ops_pointwise nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth const-decl "T" generic_matrix_defs nil))
   nil
   (pointwise subtype
    "real_defs.max(length(ops_pointwise.u), length(ops_pointwise.v))"
    "{i_1 | FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), ops_pointwise.*(generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].nth(ops_pointwise.u, generic_matrix_defs.k), generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].nth(ops_pointwise.v, generic_matrix_defs.k)) = ops_pointwise.default)}")))
 (pointwise_TCC2 0
  (pointwise_TCC2-1 nil 3907418112
   ("" (skeep)
    (("" (split)
      (("1" (expand "height")
        (("1" (expand "width")
          (("1" (typepred "dimension(M)")
            (("1" (typepred "dimension(N)")
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "width")
          (("2" (expand "height")
            (("2" (typepred "dimension(M)")
              (("2" (typepred "dimension(N)") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "ijth")
            (("3" (typepred "*")
              (("3" (expand "is_idempotent?")
                (("3" (expand "height")
                  (("3" (typepred "dimension(M)")
                    (("3" (typepred "dimension(N)")
                      (("3" (instantiate -3 "k")
                        (("3" (instantiate -7 "k")
                          (("3" (assert)
                            (("3" (instantiate -3 "j1")
                              (("3"
                                (instantiate -7 "j1")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "ijth")
            (("4" (expand "width")
              (("4" (typepred "*")
                (("4" (expand "is_idempotent?")
                  (("4" (typepred "dimension(M)")
                    (("4" (typepred "dimension(N)")
                      (("4" (instantiate -4 "k")
                        (("4" (instantiate -8 "k")
                          (("4" (assert)
                            (("4" (instantiate -4 "i1")
                              (("4"
                                (instantiate -8 "i1")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((width const-decl "nat" generic_matrix_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil ops_pointwise nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" ops_pointwise nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (is_idempotent? const-decl "bool" algebra_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ijth const-decl "T" generic_matrix_defs nil))
   nil
   (pointwise subtype
    "(real_defs.max(generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].height(ops_pointwise.M), generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].height(ops_pointwise.N)), real_defs.max(generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].width(ops_pointwise.M), generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].width(ops_pointwise.N)))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): ops_pointwise.*(generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].ijth(ops_pointwise.M, generic_matrix_defs.k, j1), generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].ijth(ops_pointwise.N, generic_matrix_defs.k, j1)) = ops_pointwise.default), FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): ops_pointwise.*(generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].ijth(ops_pointwise.M, i1, generic_matrix_defs.k), generic_matrix_defs[ops_pointwise.T, ops_pointwise.default].ijth(ops_pointwise.N, i1, generic_matrix_defs.k)) = ops_pointwise.default)))}"))))

