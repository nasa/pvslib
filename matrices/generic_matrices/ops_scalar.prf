(ops_scalar
 (scalar_TCC1 0
  (scalar_TCC1-1 nil 3907418781
   ("" (skeep)
    (("" (skeep)
      (("" (expand "nth")
        (("" (typepred "o")
          (("" (expand "is_action_absorbing?")
            (("" (inst?)
              (("" (typepred "length(v)")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((default formal-const-decl "T" ops_scalar nil)
    (is_action_absorbing? const-decl "bool" algebra_defs nil)
    (T formal-type-decl nil ops_scalar nil)
    (S formal-type-decl nil ops_scalar nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (gvec type-eq-decl nil generic_matrix_defs nil)
    (nth const-decl "T" generic_matrix_defs nil))
   nil
   (scalar subtype "length(ops_scalar.v)"
    "{i_1 | FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), ops_scalar.o(ops_scalar.s, generic_matrix_defs[ops_scalar.T, ops_scalar.default].nth(ops_scalar.v, generic_matrix_defs.k)) = ops_scalar.default)}")))
 (scalar_TCC2 0
  (scalar_TCC2-1 nil 3907418781
   ("" (skeep)
    (("" (split)
      (("1" (expand "height")
        (("1" (expand "width")
          (("1" (typepred "dimension(M)") (("1" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (expand "width")
        (("2" (expand "height")
          (("2" (typepred "dimension(M)") (("2" (propax) nil nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (skeep)
          (("3" (expand "ijth")
            (("3" (expand "height")
              (("3" (typepred "o")
                (("3" (expand "is_action_absorbing?")
                  (("3" (inst?)
                    (("3" (typepred "dimension(M)")
                      (("3" (instantiate -3 "k")
                        (("3" (assert)
                          (("3" (instantiate -3 "j1")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (skeep)
          (("4" (expand "ijth")
            (("4" (expand "width")
              (("4" (typepred "o")
                (("4" (expand "is_action_absorbing?")
                  (("4" (inst?)
                    (("4" (typepred "dimension(M)")
                      (("4" (instantiate -4 "k")
                        (("4" (assert)
                          (("4" (instantiate -4 "i1")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((width const-decl "nat" generic_matrix_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil ops_scalar nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (default formal-const-decl "T" ops_scalar nil)
    (gmat type-eq-decl nil generic_matrix_defs nil)
    (height const-decl "nat" generic_matrix_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (S formal-type-decl nil ops_scalar nil)
    (is_action_absorbing? const-decl "bool" algebra_defs nil)
    (ijth const-decl "T" generic_matrix_defs nil))
   nil
   (scalar subtype
    "(generic_matrix_defs[ops_scalar.T, ops_scalar.default].height(ops_scalar.M), generic_matrix_defs[ops_scalar.T, ops_scalar.default].width(ops_scalar.M))"
    "{(i_1, j_1) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, i_1), FORALL (j1: naturalnumbers.nat): ops_scalar.o(ops_scalar.s, generic_matrix_defs[ops_scalar.T, ops_scalar.default].ijth(ops_scalar.M, generic_matrix_defs.k, j1)) = ops_scalar.default), FORALL (k: nat): booleans.IMPLIES(reals.>=(generic_matrix_defs.k, j_1), FORALL (i1: naturalnumbers.nat): ops_scalar.o(ops_scalar.s, generic_matrix_defs[ops_scalar.T, ops_scalar.default].ijth(ops_scalar.M, i1, generic_matrix_defs.k)) = ops_scalar.default)))}"))))

