(|matrix_vector_multiplication|
 (|mult_TCC1| 0
  (|mult_TCC1-1| |nil| 3737707200
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "A")
        (("" (TYPEPRED "v")
          (("" (HIDE -1 -3 -5) (("" (POSTPONE) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)) NIL
   (|mult| SUBTYPE "matrix_vector_multiplication.A"
           "(list_adt[list[real]].cons?)")))
 (|mult_TCC2| 0
  (|mult_TCC2-1| |nil| 3737707200
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "A")
        (("" (HIDE -1)
          (("" (TYPEPRED "length[list[real]](A)")
            (("" (TYPEPRED " length[list[real]](cdr[list[real]](A))")
              (("" (EXPAND "length" 3 2) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|mult| TERMINATION
           "matrix_vector_multiplication.mult(list_adt[list[real]].cdr(matrix_vector_multiplication.A), matrix_vector_multiplication.v)"
           "NIL")))
 (|mult_length| 0
  (|mult_length-1| |nil| 3737893594
   ("" (INDUCT "m")
    (("1" (ASSERT)
      (("1" (SKEEP) (("1" (EXPAND "mult" 1) (("1" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP)
      (("2" (SKEEP)
        (("2" (EXPAND "mult" 1)
          (("2" (LIFT-IF)
            (("2" (SPLIT)
              (("1" (ASSERT)
                (("1" (TYPEPRED "j")
                  (("1" (EXPAND "length" -4) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (ASSERT)
                  (("2" (INST -1 "cdr(A)" "v")
                    (("2" (ASSERT)
                      (("2" (EXPAND "length" 3)
                        (("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|mult| DEF-DECL "Vector" |matrix_vector_multiplication| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|mult_TCC3| 0
  (|mult_TCC3-1| |nil| 3737795293
   ("" (LEMMA "mult_length")
    (("" (SKEEP) (("" (INST -1 "A" "v" "m") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|mult_length| FORMULA-DECL NIL |matrix_vector_multiplication| NIL))
   NIL
   (|mult| SUBTYPE
           "matrix_vector_multiplication.mult(matrix_vector_multiplication.A, matrix_vector_multiplication.v)"
           "VectorN(matrix_vector_multiplication.m)")))
 (|mmult_nth_TCC1| 0
  (|mmult_nth_TCC1-1| |nil| 3742823621
   ("" (SKEEP) (("" (TYPEPRED "mult(m, n, A, v)") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|mmult_nth| SUBTYPE "matrix_vector_multiplication.i"
    "below[length[real](mult(m, n, A, v))]")))
 (|mmult_nth| 0
  (|mmult_nth-2| |nil| 3742823632
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKEEP)
      (("3" (ASSERT)
        (("3" (CASE "j=0")
          (("1" (REPLACE -1 1)
            (("1" (SKEEP)
              (("1" (SKEEP)
                (("1" (CASE "NOT i=0")
                  (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (REPLACE -1 1)
                    (("2" (HIDE -)
                      (("2" (EXPAND "row" 1)
                        (("2" (EXPAND "nth" 1)
                          (("2" (EXPAND "mult" 1)
                            (("2" (EXPAND "mult" 1)
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "A")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "length" -2)
                                      (("2" (LIFT-IF)
                                        (("2" (ASSERT)
                                          (("2" (SPLIT -2)
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "*" 2)
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("2" (SKEEP)
              (("2" (INST -1 "n" "cdr(A)" "v")
                (("1" (SKEEP)
                  (("1" (CASE "i=0")
                    (("1" (REPLACE -1 2)
                      (("1" (EXPAND "row" 2)
                        (("1" (EXPAND "mult" 2)
                          (("1" (EXPAND "mult" 2 1)
                            (("1" (ASSERT)
                              (("1" (TYPEPRED "A")
                                (("1" (EXPAND "length" -2 1)
                                  (("1" (LIFT-IF)
                                    (("1" (SPLIT -2)
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "nth" 3)
                                            (("2" (EXPAND "*" 3 1)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (INST -1 "i-1")
                        (("2" (EXPAND "row" 3)
                          (("2" (EXPAND "nth" 3 2)
                            (("2" (EXPAND "row" -1)
                              (("2" (ASSERT)
                                (("2" (TYPEPRED "A")
                                  (("2" (EXPAND "length" -2)
                                    (("2" (ASSERT)
                                      (("2" (LIFT-IF)
                                        (("2" (SPLIT -2)
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "mult" 4 1)
                                                (("2" (EXPAND "mult" -4)
                                                  (("2" (EXPAND "mult" 4)
                                                    (("2" (EXPAND "nth" 4 1)
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "v")
                  (("2" (ASSERT)
                    (("2" (SPLIT)
                      (("1" (TYPEPRED "A")
                        (("1" (EXPAND "length" -2)
                          (("1" (ASSERT)
                            (("1" (LIFT-IF)
                              (("1" (SPLIT -2)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "A")
                        (("2" (SKEEP)
                          (("2" (INST -3 "i+1")
                            (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "A")
                                (("2" (ASSERT)
                                  (("2" (TYPEPRED "i")
                                    (("2" (EXPAND "length" 1)
                                      (("2" (LIFT-IF)
                                        (("2" (SPLIT 1)
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "length" -2)
                                              (("1" (LIFT-IF)
                                                (("1" (SPLIT -2)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (TYPEPRED "A")
                  (("3" (ASSERT)
                    (("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (HIDE 2)
        (("4" (SKEEP) (("4" (TYPEPRED "i") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mult| DEF-DECL "Vector" |matrix_vector_multiplication| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cdr(A)))"
     |matrix_vector_multiplication| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |matrix_vector_multiplication| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(1 + j, n)" |matrix_vector_multiplication|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (|row| CONST-DECL "Vector" |matrices| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   NIL)
  (|mmult_nth-1| |nil| 3742823623 ("" (POSTPONE) NIL NIL) NIL SHOSTAK))
 (|max_row_2_TCC1| 0
  (|max_row_2_TCC1-1| |nil| 3742830741 ("" (SUBTYPE-TCC) NIL NIL)
   ((|row| CONST-DECL "Vector" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|max_row_2| SUBTYPE
    "matrices.row(matrix_vector_multiplication.A)(matrix_vector_multiplication.j)"
    "(list_adt[real].cons?)")))
 (|max_row_2_TCC2| 0
  (|max_row_2_TCC2-1| |nil| 3742830843 ("" (SUBTYPE-TCC) NIL NIL)
   ((|row| CONST-DECL "Vector" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|max_row_2| SUBTYPE
    "matrices.row(matrix_vector_multiplication.A)(matrix_vector_multiplication.i)"
    "(list_adt[real].cons?)")))
 (|max_row_2| 0
  (|max_row_2-1| |nil| 3742830742
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (CASE "j_1=0")
            (("1" (SKEEP)
              (("1" (INST 1 "0")
                (("1" (SKEEP)
                  (("1" (TYPEPRED "j")
                    (("1" (CASE "NOT j=0")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (REPLACE -1 1)
                        (("2" (EXPAND "row" 1) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (INST -1 "n" "cdr(A)")
                  (("1" (SKEEP)
                    (("1"
                      (CASE
                          "norm_2(n)(row(A)(0)) >= norm_2(n)(row(cdr(A))(i))")
                      (("1" (ASSERT)
                        (("1" (INST 2 "0")
                          (("1" (SKEEP)
                            (("1" (CASE "j=0")
                              (("1" (REPLACE -1 2) (("1" (ASSERT) NIL NIL))
                                NIL)
                               ("2" (INST -2 "j-1")
                                (("1" (EXPAND "row" 3 1)
                                  (("1" (EXPAND "nth" 3 1)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "row" -2 1)
                                        (("1" (ASSERT)
                                          (("1" (LIFT-IF)
                                            (("1" (TYPEPRED "A")
                                              (("1" (TYPEPRED "j")
                                                (("1" (ASSERT)
                                                  (("1" (EXPAND "length" -3)
                                                    (("1" (LIFT-IF)
                                                      (("1" (SPLIT -3)
                                                        (("1" (ASSERT) NIL NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (INST 3 "i+1")
                          (("2" (SKEEP)
                            (("2" (CASE "j=0")
                              (("1" (ASSERT)
                                (("1" (EXPAND "row" 3 2)
                                  (("1" (EXPAND "nth" 3 1)
                                    (("1" (EXPAND "row" 1 2)
                                      (("1" (ASSERT)
                                        (("1" (TYPEPRED "i")
                                          (("1" (TYPEPRED "A")
                                            (("1" (EXPAND "length" -2)
                                              (("1" (LIFT-IF -2)
                                                (("1" (SPLIT -2)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (INST -1 "j-1")
                                  (("2" (EXPAND "row" 4)
                                    (("2" (EXPAND "nth" 4)
                                      (("2" (EXPAND "row" -1)
                                        (("2" (ASSERT)
                                          (("2" (TYPEPRED "A")
                                            (("2" (TYPEPRED "j")
                                              (("2" (EXPAND "length" -3)
                                                (("2" (ASSERT)
                                                  (("2" (LIFT-IF -3)
                                                    (("2" (SPLIT -3)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT)
                                                        (("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (TYPEPRED "row(cdr[list[real]](A))(i)")
                        (("3" (ASSERT)
                          (("3" (TYPEPRED "A")
                            (("3" (TYPEPRED "i")
                              (("3" (INST -4 "i+1")
                                (("3" (EXPAND "nth" -4)
                                  (("3" (EXPAND "row" 1)
                                    (("3" (ASSERT)
                                      (("3" (EXPAND "length" -3)
                                        (("3" (LIFT-IF -3)
                                          (("3" (SPLIT -3)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT)
                                              (("2" (FLATTEN)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("4" (ASSERT)
                        (("4" (TYPEPRED "A")
                          (("4" (EXPAND "length" -2) (("4" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("5" (TYPEPRED "A")
                        (("5" (INST -3 "0")
                          (("5" (EXPAND "nth" -3)
                            (("5" (EXPAND "row" 1)
                              (("5" (EXPAND "nth " 1) (("5" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SPLIT)
                    (("1" (ASSERT)
                      (("1" (TYPEPRED "A")
                        (("1" (EXPAND "length" -2)
                          (("1" (ASSERT)
                            (("1" (LIFT-IF -2)
                              (("1" (SPLIT -2)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP)
                      (("2" (TYPEPRED "A")
                        (("2" (INST -3 "i+1")
                          (("1" (EXPAND "nth" -3) (("1" (PROPAX) NIL NIL)) NIL)
                           ("2" (ASSERT)
                            (("2" (EXPAND "length" -2)
                              (("2" (LIFT-IF)
                                (("2" (SPLIT -2)
                                  (("1" (ASSERT) NIL NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "A")
                    (("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (ASSERT)
      (("4" (SKEEP)
        (("4" (SKEEP)
          (("4" (TYPEPRED "A")
            (("4" (INST -3 "i")
              (("4" (EXPAND "row" 1) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("5" (SKEEP)
      (("5" (SKEEP)
        (("5" (TYPEPRED "A")
          (("5" (INST -3 "j")
            (("5" (EXPAND "row" 1) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((A SKOLEM-CONST-DECL "MatrixMN(1 + j_1, n)" |matrix_vector_multiplication|
     NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (|j_1| SKOLEM-CONST-DECL "nat" |matrix_vector_multiplication| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|j| SKOLEM-CONST-DECL "below(1 + j_1)" |matrix_vector_multiplication| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cdr(A)))"
     |matrix_vector_multiplication| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|row| CONST-DECL "Vector" |matrices| NIL)
    (|norm_2| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|max_row_2_TCC3| 0
  (|max_row_2_TCC3-1| |nil| 3742831781 ("" (SUBTYPE-TCC) NIL NIL)
   ((|row| CONST-DECL "Vector" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|max_row_2| SUBTYPE
    "matrices.row(matrix_vector_multiplication.A)(matrix_vector_multiplication.j)"
    "(list_adt[real].cons?)")))
 (|max_row_2_TCC4| 0
  (|max_row_2_TCC4-1| |nil| 3742831781
   ("" (SKEEP)
    (("" (LEMMA "max_row_2")
      (("" (INST -1 "m" "n" "A")
        (("" (SKEEP)
          (("" (EXPAND "nonempty?")
            (("" (EXPAND "empty?")
              (("" (INST -2 "norm_2(n)(row(A)(i))")
                (("1" (EXPAND "member")
                  (("1" (SPLIT)
                    (("1" (PROPAX) NIL NIL) ("2" (INST 1 "i") NIL NIL)) NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (TYPEPRED "A")
                    (("2" (INST -3 "i")
                      (("2" (EXPAND "row" 1)
                        (("2" (EXPAND "length" -3) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|max_row_2| FORMULA-DECL NIL |matrix_vector_multiplication| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|norm_2| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|row| CONST-DECL "Vector" |matrices| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(m, n)" |matrix_vector_multiplication| NIL)
    (|i| SKOLEM-CONST-DECL "below(m)" |matrix_vector_multiplication| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL
   (|max_row_2| SUBTYPE
    "{c: real_types.nonneg_real | booleans.AND(FORALL (j: naturalnumbers.below(matrix_vector_multiplication.m)): reals.<=(norms.norm_2(matrix_vector_multiplication.n)(matrices.row(matrix_vector_multiplication.A)(j)), c), EXISTS (i: naturalnumbers.below(matrix_vector_multiplication.m)): c = norms.norm_2(matrix_vector_multiplication.n)(matrices.row(matrix_vector_multiplication.A)(i)))}"
    "(sets[nonneg_real].nonempty?)")))
 (|mmult_inf_bound_TCC1| 0
  (|mmult_inf_bound_TCC1-1| |nil| 3742832028
   ("" (SKEEP) (("" (TYPEPRED "mult(m, n, A, v)") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|mmult_inf_bound| SUBTYPE
    "matrix_vector_multiplication.mult(matrix_vector_multiplication.m, matrix_vector_multiplication.n, matrix_vector_multiplication.A, matrix_vector_multiplication.v)"
    "(list_adt[real].cons?)")))
 (|mmult_inf_bound_TCC2| 0
  (|mmult_inf_bound_TCC2-1| |nil| 3742832028 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|mmult_inf_bound| SUBTYPE "matrix_vector_multiplication.v"
    "(list_adt[real].cons?)")))
 (|mmult_inf_bound| 0
  (|mmult_inf_bound-1| |nil| 3742832093
   ("" (SKEEP)
    (("" (LEMMA "norm_inf_nth_m")
      (("" (INST -1 "m" "mult(m, n, A, v)")
        (("" (SKEEP)
          (("" (REPLACE -1 1)
            (("" (LEMMA "mmult_nth")
              (("" (INST -1 "m" "n" "A" "v" "i")
                (("" (REPLACE -1 1)
                  (("" (LEMMA "cauchy_schwarz[n]")
                    (("" (INST -1 "row(A)(i)" "v")
                      (("1" (CASE "NOT norm_2(n)(v) = sqrt(v * v)")
                        (("1" (EXPAND "norm_2" 1)
                          (("1" (EXPAND "norm_2sq" 1) (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (REPLACE -1 -2 RL)
                          (("2"
                            (CASE
                                "NOT sqrt(row(A)(i) * row(A)(i)) = norm_2(n)(row(A)(i))")
                            (("1" (EXPAND "norm_2" 1)
                              (("1" (EXPAND "norm_2sq" 1)
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("2" (REPLACE -1 -3 LR)
                              (("2" (TYPEPRED "max_row_2(m, n, A)")
                                (("2" (INST -2 "i")
                                  (("2" (ASSERT)
                                    (("2" (MULT-BY -2 "norm_2(n)(v)")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (ASSERT)
                              (("3" (TYPEPRED "A")
                                (("3" (EXPAND "row" 1)
                                  (("3" (INST -3 "i") (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("4" (LEMMA "dot_non_neg[n]")
                              (("4" (INST -1 "row(A)(i)")
                                (("4" (ASSERT)
                                  (("4" (TYPEPRED "A")
                                    (("4" (EXPAND "row" 1)
                                      (("4" (INST -3 "i")
                                        (("4" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (LEMMA "dot_non_neg[n]")
                          (("3" (INST -1 "v") NIL NIL)) NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "A")
                          (("2" (EXPAND "row" 1) (("2" (INST -3 "i") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (|cauchy_schwarz| FORMULA-DECL NIL |cauchy_schwarz| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|norm_2| CONST-DECL "(norm?(m))" |norms| NIL)
    (|norm?| CONST-DECL "bool" |norms| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|norm_2sq| CONST-DECL "nonneg_real" |norms| NIL)
    (|max_row_2| CONST-DECL "{c: nonneg_real |
   (FORALL (j: below(m)): norm_2(n)(row(A)(j)) <= c) AND
    EXISTS (i: below(m)): c = norm_2(n)(row(A)(i))}"
     |matrix_vector_multiplication| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL)
    (|dot_non_neg| FORMULA-DECL NIL |cauchy_schwarz| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|row| CONST-DECL "Vector" |matrices| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(m, n)" |matrix_vector_multiplication| NIL)
    (|i| SKOLEM-CONST-DECL "below(m)" |matrix_vector_multiplication| NIL)
    (|mmult_nth| FORMULA-DECL NIL |matrix_vector_multiplication| NIL)
    (|norm_inf_nth_m| FORMULA-DECL NIL |norms| NIL))
   SHOSTAK))
 (|mmult_dist_TCC1| 0
  (|mmult_dist_TCC1-1| |nil| 3742823717
   ("" (SKEEP)
    (("" (TYPEPRED "v1+v2" "v1" "v2")
      (("" (EXPAND "max" -) (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|mmult_dist| SUBTYPE
    "(matrices.+)(matrix_vector_multiplication.v1, matrix_vector_multiplication.v2)"
    "VectorN(matrix_vector_multiplication.n)")))
 (|mmult_dist| 0
  (|mmult_dist-1| |nil| 3742823718
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (TYPEPRED "j")
            (("3" (CASE "j=0")
              (("1" (SKEEP)
                (("1" (EXPAND "mult" 1)
                  (("1" (EXPAND "mult" 1)
                    (("1" (TYPEPRED "A")
                      (("1" (EXPAND "length" -2)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF)
                            (("1" (SPLIT -2)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (ASSERT)
                                (("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "v1+v2" "v1" "v2")
                                      (("2" (EXPAND "max" -)
                                        (("2" (ASSERT)
                                          (("2" (HIDE -1 -2 -3 -4 -5 -6)
                                            (("2" (REPLACE -4 -1)
                                              (("2" (EXPAND "length" -1)
                                                (("2" (LIFT-IF)
                                                  (("2" (SPLIT -1)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "mult" 2)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND "+" 2 2)
                                                            (("1"
                                                              (EXPAND "add" 2
                                                                      1)
                                                              (("1"
                                                                (EXPAND "add"
                                                                        2)
                                                                (("1"
                                                                  (DECOMPOSE-EQUALITY
                                                                   2)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "dot_dist")
                                                                    (("1"
                                                                      (INST -1
                                                                       "car(A)"
                                                                       "v1"
                                                                       "v2")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (INST
                                                                           -3
                                                                           "0")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "nth"
                                                                             -3)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (TYPEPRED
                                                                                 "n")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (LIFT-IF)
                                                                                    (("2"
                                                                                      (SPLIT
                                                                                       -4)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (FLATTEN)
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (SKEEP)
                  (("2" (EXPAND "mult" 2)
                    (("2" (EXPAND "mult" 2)
                      (("2" (TYPEPRED "A")
                        (("2" (EXPAND "length" -2)
                          (("2" (LIFT-IF)
                            (("2" (SPLIT -2)
                              (("1" (ASSERT) NIL NIL)
                               ("2" (FLATTEN)
                                (("2" (ASSERT)
                                  (("2" (TYPEPRED "v1+v2" "v1" "v2")
                                    (("2" (EXPAND "max" -)
                                      (("2" (ASSERT)
                                        (("2" (INST -11 "n" "cdr(A)" "v1" "v2")
                                          (("1" (EXPAND "mult" -11)
                                            (("1" (EXPAND "+" 3 3)
                                              (("1" (EXPAND "add" 3)
                                                (("1" (DECOMPOSE-EQUALITY 3)
                                                  (("1" (LEMMA "dot_dist")
                                                    (("1"
                                                      (INST -1 "car(A)" "v1"
                                                       "v2")
                                                      (("1" (ASSERT)
                                                        (("1" (EXPAND "*" -1)
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT)
                                                        (("2" (TYPEPRED "A")
                                                          (("2" (INST -3 "0")
                                                            (("2"
                                                              (EXPAND "nth" -3)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "+" -11 2)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT)
                                            (("2" (SKEEP)
                                              (("2" (TYPEPRED "A")
                                                (("2" (INST -3 "i+1")
                                                  (("2" (EXPAND "nth" -3)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP)
        (("4" (TYPEPRED "v1+v2" "v1" "v2")
          (("4" (EXPAND "max" -) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(1 + j, n)" |matrix_vector_multiplication|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|mult| DEF-DECL "Vector" |matrix_vector_multiplication| NIL)
    (|dot_dist| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |matrix_vector_multiplication| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(1 + j, n)" |matrix_vector_multiplication|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL))
   SHOSTAK))
 (|mmult_scal_TCC1| 0
  (|mmult_scal_TCC1-1| |nil| 3742829809 ("" (SUBTYPE-TCC) NIL NIL)
   ((* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|mmult_scal| SUBTYPE
    "matrices.*(matrix_vector_multiplication.c, matrix_vector_multiplication.v1)"
    "VectorN(matrix_vector_multiplication.n)")))
 (|mmult_scal| 0
  (|mmult_scal-2| |nil| 3742830326
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (CASE "j=0")
            (("1" (ASSERT)
              (("1" (REPLACE -1 1)
                (("1" (SKEEP)
                  (("1" (HIDE -)
                    (("1" (EXPAND "mult" 1)
                      (("1" (EXPAND "mult" 1)
                        (("1" (ASSERT)
                          (("1" (TYPEPRED "c*v1" "v1")
                            (("1" (TYPEPRED "A")
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -)
                                  (("1" (ASSERT)
                                    (("1" (LIFT-IF)
                                      (("1" (SPLIT -2)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (TYPEPRED "j")
                                              (("2" (CASE "NOT j=0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (REPLACE -1 -3)
                                                  (("2" (EXPAND "mult" 2)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "length" -3)
                                                        (("2" (LIFT-IF)
                                                          (("2" (SPLIT -3)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "*" 2
                                                                        1)
                                                                (("1"
                                                                  (EXPAND
                                                                   "scal" 2 1)
                                                                  (("1"
                                                                    (DECOMPOSE-EQUALITY
                                                                     2)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "dot_scalar1")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "car(A)"
                                                                         "v1"
                                                                         "c")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "*"
                                                                               1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (INST
                                                                           -5
                                                                           "0")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "nth"
                                                                             -5)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "scal"
                                                                       1)
                                                                      (("2"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (EXPAND "mult" 2)
                  (("2" (EXPAND "mult" 2)
                    (("2" (CASE "NOT null?(A)")
                      (("1" (ASSERT)
                        (("1" (CASE "NOT  null?(c * v1)")
                          (("1" (ASSERT)
                            (("1" (EXPAND "*" 4 1)
                              (("1" (EXPAND "scal" 4 1)
                                (("1" (DECOMPOSE-EQUALITY 4)
                                  (("1" (LEMMA "dot_scalar1")
                                    (("1" (INST -1 "car(A)" "v1" "c")
                                      (("1" (EXPAND "*" -1)
                                        (("1" (EXPAND "*" 1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (TYPEPRED "A")
                                        (("2" (INST -3 "0")
                                          (("2" (EXPAND "nth" -3)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "A")
                                    (("2" (INST -4 "n" "cdr(A)" "v1" "c")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "mult" -4)
                                          (("1" (EXPAND "*" -4 1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "v1")
                                        (("2" (ASSERT)
                                          (("2" (SPLIT)
                                            (("1" (EXPAND "length" -4)
                                              (("1" (PROPAX) NIL NIL)) NIL)
                                             ("2" (ASSERT)
                                              (("2" (SKEEP)
                                                (("2" (INST -5 "i+1")
                                                  (("1" (EXPAND "nth" -5)
                                                    (("1" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (TYPEPRED "i")
                                                      (("2" (EXPAND "length" 1)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (ASSERT)
                          (("2" (TYPEPRED "A")
                            (("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKEEP)
      (("4" (SKEEP) (("4" (TYPEPRED "c*v1" "v1") (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mult| DEF-DECL "Vector" |matrix_vector_multiplication| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(1 + j, n)" |matrix_vector_multiplication|
     NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |matrix_vector_multiplication| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|dot_scalar1| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(cdr(A)))"
     |matrix_vector_multiplication| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(1 + j, n)" |matrix_vector_multiplication|
     NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL))
   NIL)
  (|mmult_scal-1| |nil| 3742829860
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (ASSERT)
      (("3" (SKEEP)
        (("3" (ASSERT)
          (("3" (CASE "j=0")
            (("1" (ASSERT)
              (("1" (REPLACE -1 1)
                (("1" (SKEEP)
                  (("1" (HIDE -)
                    (("1" (EXPAND "mult" 1)
                      (("1" (EXPAND "mult" 1)
                        (("1" (ASSERT)
                          (("1" (TYPEPRED "c*v1" "v1")
                            (("1" (TYPEPRED "A")
                              (("1" (ASSERT)
                                (("1" (EXPAND "length" -)
                                  (("1" (ASSERT)
                                    (("1" (LIFT-IF)
                                      (("1" (SPLIT -2)
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (TYPEPRED "j")
                                              (("2" (CASE "NOT j=0")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (REPLACE -1 -3)
                                                  (("2" (EXPAND "mult" 2)
                                                    (("2" (ASSERT)
                                                      (("2"
                                                        (EXPAND "length" -3)
                                                        (("2" (LIFT-IF)
                                                          (("2" (SPLIT -3)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (EXPAND "*" 2
                                                                        1)
                                                                (("1"
                                                                  (EXPAND
                                                                   "scal" 2 1)
                                                                  (("1"
                                                                    (DECOMPOSE-EQUALITY
                                                                     2)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "dot_scalar1")
                                                                      (("1"
                                                                        (INST
                                                                         -1
                                                                         "car(A)"
                                                                         "v1"
                                                                         "c")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "*"
                                                                               1)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (INST
                                                                           -5
                                                                           "0")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "nth"
                                                                             -5)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (EXPAND
                                                                       "scal"
                                                                       1)
                                                                      (("2"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2" (FLATTEN)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (SKEEP)
                (("2" (EXPAND "mult" 2)
                  (("2" (EXPAND "mult" 2)
                    (("2" (CASE "NOT null?(A)")
                      (("1" (ASSERT)
                        (("1" (CASE "NOT  null?(c * v1)")
                          (("1" (ASSERT)
                            (("1" (EXPAND "*" 4 1)
                              (("1" (EXPAND "scal" 4 1)
                                (("1" (DECOMPOSE-EQUALITY 4)
                                  (("1" (LEMMA "dot_scalar1")
                                    (("1" (INST -1 "car(A)" "v1" "c")
                                      (("1" (EXPAND "*" -1)
                                        (("1" (EXPAND "*" 1)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (TYPEPRED "A")
                                        (("2" (INST -3 "0")
                                          (("2" (EXPAND "nth" -3)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "A")
                                    (("2" (INST -4 "n" "cdr(A)" "v1" "c")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "mult" -4)
                                          (("1" (EXPAND "*" -4 1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "v1")
                                        (("2" (ASSERT)
                                          (("2" (POSTPONE) NIL NIL)) NIL))
                                        NIL)
                                       ("3" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (POSTPONE) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (POSTPONE) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (POSTPONE) NIL NIL))
    NIL)
   NIL SHOSTAK))
 (|mmult_sub_dist_TCC1| 0
  (|mmult_sub_dist_TCC1-1| |nil| 3742829809
   ("" (SKEEP)
    (("" (TYPEPRED "v1-v2" "v2" "v1")
      (("" (EXPAND "max") (("" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (- CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   NIL
   (|mmult_sub_dist| SUBTYPE
    "(matrices.-)(matrix_vector_multiplication.v1, matrix_vector_multiplication.v2)"
    "VectorN(matrix_vector_multiplication.n)")))
 (|mmult_sub_dist| 0
  (|mmult_sub_dist-1| |nil| 3742830414
   ("" (SKEEP)
    (("" (LEMMA "sub_idx")
      (("" (INST-CP -1 "mult(m, n, A, v1)" "mult(m, n, A, v2)")
        (("1" (INST -1 "v1" "v2")
          (("1" (REPLACE -1 1)
            (("1" (REPLACE -2 1)
              (("1" (LEMMA "mmult_scal")
                (("1" (INST -1 "m" "n" "A" "v2" "-1")
                  (("1" (REPLACE -1 1)
                    (("1" (LEMMA "mmult_dist")
                      (("1" (INST -1 "m" "n" "A" "v1" "-1*v2") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (TYPEPRED "mult(m, n, A, v2)")
          (("3" (ASSERT)
            (("3" (EXPAND "length" -2) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sub_idx| FORMULA-DECL NIL |vector_arithmetic| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|mmult_dist| FORMULA-DECL NIL |matrix_vector_multiplication| NIL)
    (* CONST-DECL "VectorN(length(v2))" |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|mmult_scal| FORMULA-DECL NIL |matrix_vector_multiplication| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|mult| CONST-DECL "VectorN(m)" |matrix_vector_multiplication| NIL)
    (|m| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (|n| SKOLEM-CONST-DECL "posnat" |matrix_vector_multiplication| NIL)
    (A SKOLEM-CONST-DECL "MatrixMN(m, n)" |matrix_vector_multiplication| NIL)
    (|v1| SKOLEM-CONST-DECL "VectorN(n)" |matrix_vector_multiplication| NIL)
    (|v2| SKOLEM-CONST-DECL "VectorN(n)" |matrix_vector_multiplication| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL))
   SHOSTAK))
 (|eye_TCC1| 0
  (|eye_TCC1-1| |nil| 3737712978
   ("" (SKEEP)
    (("" (SPLIT)
      (("1" (SPLIT)
        (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "n!1")
            (("2" (TYPEPRED "null[list[real]]") (("2" (POSTPONE) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (POSTPONE) NIL NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|eye| SUBTYPE "(number_fields.-)(matrix_vector_multiplication.m, 1)"
          "nat")))
 (|eye_TCC2| 0
  (|no| "no" 3737714387 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK
   (|eye| TERMINATION
          "matrix_vector_multiplication.eye((number_fields.-)(matrix_vector_multiplication.m, 1), matrix_vector_multiplication.n)"
          "NIL"))
  (|eye_TCC2-1| |nil| 3737712978 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|eye| TERMINATION
          "matrix_vector_multiplication.eye((number_fields.-)(matrix_vector_multiplication.m, 1), matrix_vector_multiplication.n)"
          "NIL")))
 (|eye_TCC3| 0
  (|eye_TCC3-1| |nil| 3737712978 ("" (TERMINATION-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|eye| SUBTYPE "(number_fields.-)(matrix_vector_multiplication.m, 1)"
          "nat")))
 (|eye_TCC4| 0
  (|eye_TCC4-1| |nil| 3737712978 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|eye| TERMINATION
          "matrix_vector_multiplication.eye((number_fields.-)(matrix_vector_multiplication.m, 1), matrix_vector_multiplication.n)"
          "NIL")))
 (|eye_TCC5| 0
  (|eye_TCC5-1| |nil| 3737712978
   ("" (SKEEP)
    (("" (TYPEPRED "m")
      (("" (TYPEPRED "n")
        (("" (ASSERT)
          (("" (FLIP-INEQ 1)
            (("" (FLIP-INEQ 3)
              (("" (CASE "NOT m=n!1")
                (("1" (ASSERT) NIL NIL)
                 ("2" (ASSERT)
                  (("2" (TYPEPRED "n") (("2" (POSTPONE) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|eye| SUBTYPE "(number_fields.-)(matrix_vector_multiplication.m, 1)"
          "{ii: naturalnumbers.nat | reals.<(ii, matrix_vector_multiplication.n)}")))
 (|mult_1| 0
  (|mult_1-1| |nil| 3737711033 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|eye_1| 0
  (|eye_1-1| |nil| 3737794082 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|eye_2| 0
  (|eye_2-1| |nil| 3737893921
   ("" (EVAL-EXPR "eye(3,3)")
    (("" (REPLACE -1 1)
      (("" (SKEEP)
        (("" (HIDE -1)
          (("" (GRIND)
            (("" (DECOMPOSE-EQUALITY)
              (("1" (EXPAND "dot")
                (("1" (GRIND)
                  (("1" (TYPEPRED "v")
                    (("1" (EXPAND "dot") (("1" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("2" (GRIND)
                (("2" (DECOMPOSE-EQUALITY)
                  (("1" (EXPAND "dot")
                    (("1" (GRIND)
                      (("1" (GRIND)
                        (("1" (TYPEPRED "v") (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (TYPEPRED "v")
                        (("2" (EXPAND "dot") (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "v")
                    (("2" (DECOMPOSE-EQUALITY)
                      (("1" (EXPAND "dot")
                        (("1" (ASSERT)
                          (("1" (HIDE -1)
                            (("1" (EXPAND "dot" 1) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "v")
                        (("2" (HIDE -1 -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (GRIND)
                    (("3" (DECOMPOSE-EQUALITY 2)
                      (("3" (TYPEPRED "v") (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|v| SKOLEM-CONST-DECL "VectorN(3)" |matrix_vector_multiplication| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "Vector" |matrix_vector_multiplication| NIL)
    (|mult| DEF-DECL "Vector" |matrix_vector_multiplication| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (|eye| DEF-DECL "Matrix" |matrix_vector_multiplication| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|eye_3| 0
  (|eye_3-1| |nil| 3737794569
   ("" (EVAL-EXPR "Id(3)")
    (("" (REPLACE -1 1)
      (("" (HIDE -1)
        (("" (SKEEP)
          (("" (GRIND)
            (("" (DECOMPOSE-EQUALITY)
              (("1" (TYPEPRED "v")
                (("1" (EXPAND "dot" 1)
                  (("1" (ASSERT)
                    (("1" (HIDE -1)
                      (("1" (TYPEPRED "v")
                        (("1" (EXPAND "dot") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (DECOMPOSE-EQUALITY)
                (("1" (TYPEPRED "v")
                  (("1" (EXPAND "dot")
                    (("1" (ASSERT)
                      (("1" (EXPAND "dot") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (DECOMPOSE-EQUALITY)
                  (("1" (TYPEPRED "v")
                    (("1" (EXPAND "dot")
                      (("1" (ASSERT)
                        (("1" (EXPAND "dot" 1) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "v") (("2" (GRIND) NIL NIL)) NIL)
                   ("3" (TYPEPRED "v") (("3" (GRIND) NIL NIL)) NIL))
                  NIL)
                 ("3" (DECOMPOSE-EQUALITY 2)
                  (("3" (GRIND)
                    (("3" (TYPEPRED "v") (("3" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|v| SKOLEM-CONST-DECL "VectorN(3)" |matrix_vector_multiplication| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "Vector" |matrix_vector_multiplication| NIL)
    (|mult| DEF-DECL "Vector" |matrix_vector_multiplication| NIL)
    (|dot| DEF-DECL "real" |matrices| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| NIL)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| NIL)
    (|entry| CONST-DECL "real" |matrices| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)
    (* CONST-DECL "real" |matrices| NIL)
    (|row| CONST-DECL "Vector" |matrices| NIL)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       |matrices| NIL)
    (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
          |matrices| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|mult_3| 0
  (|mult_3-1| |nil| 3737792935 ("" (EVAL-FORMULA 1) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK)))

