(|def_symmetric_matrix|
 (|sym_row_col_upto?_TCC1| 1
  (|sym_row_col_upto?_TCC1-2| "" 3930401093 ("" (SUBTYPE-TCC) NIL NIL) NIL
   SHOSTAK
   (|sym_row_col_upto?| SUBTYPE "def_symmetric_matrix.j"
    "below(matrices.rows(def_symmetric_matrix.A))"))
  (|sym_row_col_upto?_TCC1-0| "" 3928419202 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|sym_row_col_upto?| SUBTYPE "def_symmetric_matrix.j"
    "below(matrices.rows(def_symmetric_matrix.A))"))
  (|sym_row_col_upto?_TCC1-1| |nil| 3837198624 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|sym_row_col_upto?| SUBTYPE "def_symmetric_matrix.j"
    "below(matrices.rows(def_symmetric_matrix.A))")))
 (|sym_forall?_TCC1| 1
  (|sym_forall?_TCC1-2| "" 3930401093 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|sym_forall?| SUBTYPE
    "(number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1)"
    "below(matrices.rows(def_symmetric_matrix.A))"))
  (|sym_forall?_TCC1-0| "" 3928419202 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|sym_forall?| SUBTYPE
    "(number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1)"
    "below(matrices.rows(def_symmetric_matrix.A))"))
  (|sym_forall?_TCC1-1| |nil| 3836816165 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|sym_forall?| SUBTYPE
    "(number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1)"
    "below(matrices.rows(def_symmetric_matrix.A))")))
 (|init_sym?_TCC1| 1
  (|init_sym?_TCC1-2| "" 3930401094 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|init_sym?| SUBTYPE "(number_fields.-)(def_symmetric_matrix.ii, 1)"
                "below(matrices.rows(def_symmetric_matrix.A))"))
  (|init_sym?_TCC1-0| "" 3928419203 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|init_sym?| SUBTYPE "(number_fields.-)(def_symmetric_matrix.ii, 1)"
                "below(matrices.rows(def_symmetric_matrix.A))"))
  (|init_sym?_TCC2-1| |nil| 3836812310 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|init_sym?| SUBTYPE "(number_fields.-)(def_symmetric_matrix.ii, 1)"
                "below(matrices.rows(def_symmetric_matrix.A))")))
 (|init_sym?_TCC2| 1
  (|init_sym?_TCC2-2| "" 3930401094 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|init_sym?| SUBTYPE
                "(number_fields.-)(matrices.rows(def_symmetric_matrix.A), def_symmetric_matrix.i)"
                "naturalnumber"))
  (|init_sym?_TCC2-0| "" 3928419203 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|init_sym?| SUBTYPE
                "(number_fields.-)(matrices.rows(def_symmetric_matrix.A), def_symmetric_matrix.i)"
                "naturalnumber"))
  (|init_sym?_TCC1-1| |nil| 3836812310 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|init_sym?| SUBTYPE
                "(number_fields.-)(matrices.rows(def_symmetric_matrix.A), def_symmetric_matrix.i)"
                "naturalnumber")))
 (|init_sym?_TCC3| 0
  (|init_sym?_TCC3-2| "" 3930401095
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (CASE "i=0")
        (("1" (ASSERT)
          (("1" (REPLACE -1)
            (("1" (REPLACE -3)
              (("1" (EXPAND "sym_row_col?")
                (("1" (EXPAND "sym_row_col_upto?")
                  (("1" (IFF 1)
                    (("1" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "j")
                            (("1" (ASSERT)
                              (("1" (REPLACE -5 -1 RL)
                                (("1" (CASE "j=0")
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "sym_row_col?" 1)
                                      (("1" (REPLACE -6 -3 RL)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "sym_row_col?" -1)
                          (("2" (REPLACE -4 1 RL) (("2" (INST -1 "0") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (IFF 2)
            (("2" (SPLIT 2)
              (("1" (EXPAND "sym_row_col?" 1)
                (("1" (EXPAND "sym_row_col_upto?" 1)
                  (("1" (FLATTEN)
                    (("1" (SKEEP)
                      (("1" (EXPAND "sym_row_col?" 1)
                        (("1" (EXPAND "sym_row_col_upto?" -3)
                          (("1" (INST -3 "j")
                            (("1" (EXPAND "sym_row_col?" -3)
                              (("1" (PROPAX) NIL NIL)) NIL)
                             ("2" (TYPEPRED "j")
                              (("2" (REPLACE -4 1 LR) (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "sym_row_col?" 1)
                  (("2" (EXPAND "sym_row_col_upto?" -1)
                    (("2" (INST -1 "i")
                      (("2" (EXPAND "sym_row_col?" -1) (("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|init_sym?| SUBTYPE
                "def_symmetric_matrix.sym_row_col?(def_symmetric_matrix.A, def_symmetric_matrix.i)"
                "{b: booleans.bool | b = def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1))}"))
  (|init_sym?_TCC3-0| "" 3928419204
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (CASE "i=0")
        (("1" (ASSERT)
          (("1" (REPLACE -1)
            (("1" (REPLACE -3)
              (("1" (EXPAND "sym_row_col?")
                (("1" (EXPAND "sym_row_col_upto?")
                  (("1" (IFF 1)
                    (("1" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "j")
                            (("1" (ASSERT)
                              (("1" (REPLACE -5 -1 RL)
                                (("1" (CASE "j=0")
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "sym_row_col?" 1)
                                      (("1" (REPLACE -6 -3 RL)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "sym_row_col?" -1)
                          (("2" (REPLACE -4 1 RL) (("2" (INST -1 "0") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (IFF 2)
            (("2" (SPLIT 2)
              (("1" (EXPAND "sym_row_col?" 1)
                (("1" (EXPAND "sym_row_col_upto?" 1)
                  (("1" (FLATTEN)
                    (("1" (SKEEP)
                      (("1" (EXPAND "sym_row_col?" 1)
                        (("1" (EXPAND "sym_row_col_upto?" -3)
                          (("1" (INST -3 "j")
                            (("1" (EXPAND "sym_row_col?" -3)
                              (("1" (PROPAX) NIL NIL)) NIL)
                             ("2" (TYPEPRED "j")
                              (("2" (REPLACE -4 1 LR) (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "sym_row_col?" 1)
                  (("2" (EXPAND "sym_row_col_upto?" -1)
                    (("2" (INST -1 "i")
                      (("2" (EXPAND "sym_row_col?" -1) (("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (A SKOLEM-CONST-DECL "Square" |def_symmetric_matrix| NIL)
    (|j| SKOLEM-CONST-DECL "upto(rows(A) - 1)" |def_symmetric_matrix| NIL)
    (|i| SKOLEM-CONST-DECL
     "{ii: below(rows(A)) | ii = 0 OR sym_row_col_upto?(A, ii - 1)}"
     |def_symmetric_matrix| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL))
   SHOSTAK
   (|init_sym?| SUBTYPE
                "def_symmetric_matrix.sym_row_col?(def_symmetric_matrix.A, def_symmetric_matrix.i)"
                "{b: booleans.bool | b = def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1))}"))
  (|init_sym?_TCC3-1| |nil| 3836814409
   ("" (SKEEP)
    (("" (TYPEPRED "i")
      (("" (CASE "i=0")
        (("1" (ASSERT)
          (("1" (REPLACE -1)
            (("1" (REPLACE -3)
              (("1" (EXPAND "sym_row_col?")
                (("1" (EXPAND "sym_row_col_upto?")
                  (("1" (IFF 1)
                    (("1" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (SKEEP)
                          (("1" (TYPEPRED "j")
                            (("1" (ASSERT)
                              (("1" (REPLACE -5 -1 RL)
                                (("1" (CASE "j=0")
                                  (("1" (REPLACE -1)
                                    (("1" (EXPAND "sym_row_col?" 1)
                                      (("1" (REPLACE -6 -3 RL)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN)
                        (("2" (EXPAND "sym_row_col?" -1)
                          (("2" (REPLACE -4 1 RL) (("2" (INST -1 "0") NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (ASSERT)
          (("2" (IFF 2)
            (("2" (SPLIT 2)
              (("1" (EXPAND "sym_row_col?" 1)
                (("1" (EXPAND "sym_row_col_upto?" 1)
                  (("1" (FLATTEN)
                    (("1" (SKEEP)
                      (("1" (EXPAND "sym_row_col?" 1)
                        (("1" (EXPAND "sym_row_col_upto?" -3)
                          (("1" (INST -3 "j")
                            (("1" (EXPAND "sym_row_col?" -3)
                              (("1" (PROPAX) NIL NIL)) NIL)
                             ("2" (TYPEPRED "j")
                              (("2" (REPLACE -4 1 LR) (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "sym_row_col?" 1)
                  (("2" (EXPAND "sym_row_col_upto?" -1)
                    (("2" (INST -1 "i")
                      (("2" (EXPAND "sym_row_col?" -1) (("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL NIL NIL
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL))
   NIL
   (|init_sym?| SUBTYPE
                "def_symmetric_matrix.sym_row_col?(def_symmetric_matrix.A, def_symmetric_matrix.i)"
                "{b: booleans.bool | b = def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1))}")))
 (|init_sym?_TCC4| 0
  (|init_sym?_TCC4-2| "" 3930401096
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "i")
        (("" (ASSERT)
          (("" (CASE "i=0")
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (REPLACE -1)
                  (("1" (EXPAND "sym_row_col?")
                    (("1" (EXPAND "sym_row_col_upto?") (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "sym_row_col_upto?")
              (("2" (SKEEP) (("2" (ASSERT) (("2" (INST -2 "j") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|init_sym?| SUBTYPE "(number_fields.+)(def_symmetric_matrix.i, 1)"
                "{ii: naturalnumbers.below(matrices.rows(def_symmetric_matrix.A)) | booleans.OR(ii = 0, def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(ii, 1)))}"))
  (|init_sym?_TCC4-0| "" 3928419205
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "i")
        (("" (ASSERT)
          (("" (CASE "i=0")
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (REPLACE -1)
                  (("1" (EXPAND "sym_row_col?")
                    (("1" (EXPAND "sym_row_col_upto?") (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "sym_row_col_upto?")
              (("2" (SKEEP) (("2" (ASSERT) (("2" (INST -2 "j") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|init_sym?| SUBTYPE "(number_fields.+)(def_symmetric_matrix.i, 1)"
                "{ii: naturalnumbers.below(matrices.rows(def_symmetric_matrix.A)) | booleans.OR(ii = 0, def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(ii, 1)))}"))
  (|init_sym?_TCC3-1| |nil| 3836812310
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (TYPEPRED "i")
        (("" (ASSERT)
          (("" (CASE "i=0")
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (REPLACE -1)
                  (("1" (EXPAND "sym_row_col?")
                    (("1" (EXPAND "sym_row_col_upto?") (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "sym_row_col_upto?")
              (("2" (SKEEP) (("2" (ASSERT) (("2" (INST -2 "j") NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|init_sym?| SUBTYPE "(number_fields.+)(def_symmetric_matrix.i, 1)"
                "{ii: naturalnumbers.below(matrices.rows(def_symmetric_matrix.A)) | booleans.OR(ii = 0, def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(ii, 1)))}")))
 (|init_sym?_TCC5| 1
  (|init_sym?_TCC5-1| "" 3930401096 ("" (TERMINATION-TCC) NIL NIL) NIL SHOSTAK
   (|init_sym?| TERMINATION
                "def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, (number_fields.+)(def_symmetric_matrix.i, 1))"
                "NIL"))
  (|init_sym?_TCC5-0| "" 3928419205 ("" (TERMINATION-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK
   (|init_sym?| TERMINATION
                "def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, (number_fields.+)(def_symmetric_matrix.i, 1))"
                "NIL"))
  (|init_sym?_TCC4-1| |nil| 3836812310 ("" (TERMINATION-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|init_sym?| TERMINATION
                "def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, (number_fields.+)(def_symmetric_matrix.i, 1))"
                "NIL")))
 (|init_sym?_TCC6| 1
  (|init_sym?_TCC6-2| "" 3930401097
   ("" (SKEEP)
    (("" (IFF 2)
      (("" (SPLIT 2)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (TYPEPRED "v(A,1+i)")
              (("1" (ASSERT) NIL NIL)
               ("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (HIDE -5) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "sym_row_col_upto?" 2)
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (TYPEPRED "v(A,i+1)")
            (("1" (REPLACE -1 1)
              (("1" (ASSERT)
                (("1" (EXPAND "sym_row_col_upto?" -2)
                  (("1" (IFF)
                    (("1" (FLATTEN)
                      (("1" (SPLIT -1)
                        (("1" (HIDE -2) (("1" (INST -2 "i") NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (ASSERT)
                      (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|init_sym?| SUBTYPE
                "booleans.AND(def_symmetric_matrix.sym_row_col?(def_symmetric_matrix.A, def_symmetric_matrix.i), def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, (number_fields.+)(def_symmetric_matrix.i, 1)))"
                "{b: booleans.bool | b = def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1))}"))
  (|init_sym?_TCC6-0| "" 3928419206
   ("" (SKEEP)
    (("" (IFF 2)
      (("" (SPLIT 2)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (TYPEPRED "v(A,1+i)")
              (("1" (ASSERT) NIL NIL)
               ("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (HIDE -5) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "sym_row_col_upto?" 2)
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (TYPEPRED "v(A,i+1)")
            (("1" (REPLACE -1 1)
              (("1" (ASSERT)
                (("1" (EXPAND "sym_row_col_upto?" -2)
                  (("1" (IFF)
                    (("1" (FLATTEN)
                      (("1" (SPLIT -1)
                        (("1" (HIDE -2) (("1" (INST -2 "i") NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (ASSERT)
                      (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|j!1| SKOLEM-CONST-DECL "upto(i)" |def_symmetric_matrix| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|j!1| SKOLEM-CONST-DECL "upto(i)" |def_symmetric_matrix| NIL)
    (|i| SKOLEM-CONST-DECL
     "{ii: below(rows(A)) | ii = 0 OR sym_row_col_upto?(A, ii - 1)}"
     |def_symmetric_matrix| NIL)
    (A SKOLEM-CONST-DECL "Square" |def_symmetric_matrix| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK
   (|init_sym?| SUBTYPE
                "booleans.AND(def_symmetric_matrix.sym_row_col?(def_symmetric_matrix.A, def_symmetric_matrix.i), def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, (number_fields.+)(def_symmetric_matrix.i, 1)))"
                "{b: booleans.bool | b = def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1))}"))
  (|init_sym?_TCC6-1| |nil| 3836814409
   ("" (SKEEP)
    (("" (IFF 2)
      (("" (SPLIT 2)
        (("1" (FLATTEN)
          (("1" (ASSERT)
            (("1" (TYPEPRED "v(A,1+i)")
              (("1" (ASSERT) NIL NIL)
               ("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (HIDE -5) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "sym_row_col_upto?" 2)
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (TYPEPRED "v(A,i+1)")
            (("1" (REPLACE -1 1)
              (("1" (ASSERT)
                (("1" (EXPAND "sym_row_col_upto?" -2)
                  (("1" (IFF)
                    (("1" (FLATTEN)
                      (("1" (SPLIT -1)
                        (("1" (HIDE -2) (("1" (INST -2 "i") NIL NIL)) NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT)
              (("2" (TYPEPRED "i")
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (ASSERT)
                      (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL NIL NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|init_sym?| SUBTYPE
                "booleans.AND(def_symmetric_matrix.sym_row_col?(def_symmetric_matrix.A, def_symmetric_matrix.i), def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, (number_fields.+)(def_symmetric_matrix.i, 1)))"
                "{b: booleans.bool | b = def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(matrices.rows(def_symmetric_matrix.A), 1))}")))
 (|sym?_TCC1| 1
  (|sym?_TCC1-2| "" 3930401098 ("" (SUBTYPE-TCC) NIL NIL) NIL SHOSTAK
   (|sym?| SUBTYPE "0"
           "{ii: naturalnumbers.below(matrices.rows(def_symmetric_matrix.A)) | booleans.OR(ii = 0, def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(ii, 1)))}"))
  (|sym?_TCC1-0| "" 3928419207 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|sym?| SUBTYPE "0"
           "{ii: naturalnumbers.below(matrices.rows(def_symmetric_matrix.A)) | booleans.OR(ii = 0, def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(ii, 1)))}"))
  (|sym?_TCC1-1| |nil| 3836812310 ("" (SUBTYPE-TCC) NIL NIL)
   ((|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|sym?| SUBTYPE "0"
           "{ii: naturalnumbers.below(matrices.rows(def_symmetric_matrix.A)) | booleans.OR(ii = 0, def_symmetric_matrix.sym_row_col_upto?(def_symmetric_matrix.A, (number_fields.-)(ii, 1)))}")))
 (|sym?_TCC2| 0
  (|sym?_TCC2-2| "" 3930401098
   ("" (SKEEP)
    (("" (TYPEPRED "init_sym?(A,0)")
      (("" (REPLACE -1)
        (("" (HIDE -1)
          (("" (EXPAND "sym_forall?" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|sym?| SUBTYPE "def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, 0)"
           "{b: booleans.bool | b = def_symmetric_matrix.sym_forall?(def_symmetric_matrix.A)}"))
  (|sym?_TCC2-0| "" 3928419207
   ("" (SKEEP)
    (("" (TYPEPRED "init_sym?(A,0)")
      (("" (REPLACE -1)
        (("" (HIDE -1)
          (("" (EXPAND "sym_forall?" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_sym?| DEF-DECL "{b: bool | b = sym_row_col_upto?(A, rows(A) - 1)}"
                 |def_symmetric_matrix| NIL)
    (|sym_forall?| CONST-DECL "bool" |def_symmetric_matrix| NIL))
   SHOSTAK
   (|sym?| SUBTYPE "def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, 0)"
           "{b: booleans.bool | b = def_symmetric_matrix.sym_forall?(def_symmetric_matrix.A)}"))
  (|sym?_TCC2-1| |nil| 3836816165
   ("" (SKEEP)
    (("" (TYPEPRED "init_sym?(A,0)")
      (("" (REPLACE -1)
        (("" (HIDE -1)
          (("" (EXPAND "sym_forall?" 1) (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|init_sym?| DEF-DECL "{b: bool | b = sym_row_col_upto?(A, rows(A) - 1)}"
                 |def_symmetric_matrix| NIL)
    (|sym_forall?| CONST-DECL "bool" |def_symmetric_matrix| NIL))
   NIL
   (|sym?| SUBTYPE "def_symmetric_matrix.init_sym?(def_symmetric_matrix.A, 0)"
           "{b: booleans.bool | b = def_symmetric_matrix.sym_forall?(def_symmetric_matrix.A)}")))
 (|sym_ex_TCC1| 1
  (|sym_ex_TCC1-2| "" 3930401100
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (TYPEPRED "i" "j")
            (("1" (GRIND-REALS)
              (("1" (CASE "i=0" "j=0")
                (("1" (GRIND) NIL NIL)
                 ("2" (CASE "j=1")
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE "j=2")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "j=3")
                      (("1" (GRIND) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "length" -3)
                          (("2" (EXPAND "length" -3)
                            (("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (CASE "i=1")
                  (("1" (CASE "j=0")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "j=1")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "j=2")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "j=3")
                          (("1" (GRIND) NIL NIL)
                           ("2" (EXPAND "length" -3)
                            (("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (EXPAND "length" -3)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE "i=2")
                    (("1" (CASE "j=0")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "j=1")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "j=2")
                          (("1" (GRIND) NIL NIL)
                           ("2" (CASE "j=3")
                            (("1" (GRIND) NIL NIL)
                             ("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (EXPAND "length" -3)
                                  (("2" (EXPAND "length" -3)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "length" -1)
                      (("2" (EXPAND "length" -1)
                        (("2" (EXPAND "length" -1)
                          (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
      NIL))
    NIL)
   NIL SHOSTAK (|sym_ex| SUBTYPE "def_symmetric_matrix.A" "Square"))
  (|sym_ex_TCC1-0| "" 3928419209
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (TYPEPRED "i" "j")
            (("1" (GRIND-REALS)
              (("1" (CASE "i=0" "j=0")
                (("1" (GRIND) NIL NIL)
                 ("2" (CASE "j=1")
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE "j=2")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "j=3")
                      (("1" (GRIND) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "length" -3)
                          (("2" (EXPAND "length" -3)
                            (("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (CASE "i=1")
                  (("1" (CASE "j=0")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "j=1")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "j=2")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "j=3")
                          (("1" (GRIND) NIL NIL)
                           ("2" (EXPAND "length" -3)
                            (("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (EXPAND "length" -3)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE "i=2")
                    (("1" (CASE "j=0")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "j=1")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "j=2")
                          (("1" (GRIND) NIL NIL)
                           ("2" (CASE "j=3")
                            (("1" (GRIND) NIL NIL)
                             ("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (EXPAND "length" -3)
                                  (("2" (EXPAND "length" -3)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "length" -1)
                      (("2" (EXPAND "length" -1)
                        (("2" (EXPAND "length" -1)
                          (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK (|sym_ex| SUBTYPE "def_symmetric_matrix.A" "Square"))
  (|sym_ex_TCC1-1| |nil| 3836812310
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (SKEEP)
          (("1" (TYPEPRED "i" "j")
            (("1" (GRIND-REALS)
              (("1" (CASE "i=0" "j=0")
                (("1" (GRIND) NIL NIL)
                 ("2" (CASE "j=1")
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE "j=2")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "j=3")
                      (("1" (GRIND) NIL NIL)
                       ("2" (ASSERT)
                        (("2" (EXPAND "length" -3)
                          (("2" (EXPAND "length" -3)
                            (("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (CASE "i=1")
                  (("1" (CASE "j=0")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "j=1")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "j=2")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "j=3")
                          (("1" (GRIND) NIL NIL)
                           ("2" (EXPAND "length" -3)
                            (("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (EXPAND "length" -3)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE "i=2")
                    (("1" (CASE "j=0")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "j=1")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "j=2")
                          (("1" (GRIND) NIL NIL)
                           ("2" (CASE "j=3")
                            (("1" (GRIND) NIL NIL)
                             ("2" (EXPAND "length" -3)
                              (("2" (EXPAND "length" -3)
                                (("2" (EXPAND "length" -3)
                                  (("2" (EXPAND "length" -3)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "length" -1)
                      (("2" (EXPAND "length" -1)
                        (("2" (EXPAND "length" -1)
                          (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL (|sym_ex| SUBTYPE "def_symmetric_matrix.A" "Square")))
 (|sym_ex_TCC2| 0
  (|sym_ex_TCC2-2| "" 3930401101
   ("" (SKEEP)
    (("" (LEMMA " full_mat_def_forward")
      (("" (INST?)
        (("" (ASSERT)
          (("" (SPLIT 1)
            (("1" (ASSERT)
              (("1" (SPLIT -1)
                (("1" (PROPAX) NIL NIL)
                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK (|sym_ex| SUBTYPE "def_symmetric_matrix.B" "Square"))
  (|sym_ex_TCC2-0| "" 3928419210
   ("" (SKEEP)
    (("" (LEMMA " full_mat_def_forward")
      (("" (INST?)
        (("" (ASSERT)
          (("" (SPLIT 1)
            (("1" (ASSERT)
              (("1" (SPLIT -1)
                (("1" (PROPAX) NIL NIL)
                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|full_mat_def_forward| FORMULA-DECL NIL |alt_full_matrix| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|init_sym?| DEF-DECL "{b: bool | b = sym_row_col_upto?(A, rows(A) - 1)}"
                 |def_symmetric_matrix| NIL)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|full_mat_alt?| DEF-DECL "bool" |alt_full_matrix| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK (|sym_ex| SUBTYPE "def_symmetric_matrix.B" "Square"))
  (|sym_ex_TCC2-1| |nil| 3836812310
   ("" (SKEEP)
    (("" (LEMMA " full_mat_def_forward")
      (("" (INST?)
        (("" (ASSERT)
          (("" (SPLIT 1)
            (("1" (ASSERT)
              (("1" (SPLIT -1)
                (("1" (PROPAX) NIL NIL)
                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|full_mat_def_forward| FORMULA-DECL NIL |alt_full_matrix| NIL) NIL
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|init_sym?| DEF-DECL "{b: bool | b = sym_row_col_upto?(A, rows(A) - 1)}"
                 |def_symmetric_matrix| NIL)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|full_mat_alt?| DEF-DECL "bool" |alt_full_matrix| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   NIL (|sym_ex| SUBTYPE "def_symmetric_matrix.B" "Square")))
 (|sym_ex| 1
  (|sym_ex-2| "" 3930401085
   ("" (SKOLETIN*) (("" (EVAL-FORMULA 1) NIL NIL)) NIL) NIL SHOSTAK)
  (|sym_ex-0| "" 3928419153
   ("" (SKOLETIN*) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|sym_forall?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK)
  (|sym_ex-1| |nil| 3836813761
   ("" (SKOLETIN*) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|sym_forall?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    NIL (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|sym_entry_def_forward| 0
  (|sym_entry_def_forward-2| "" 3930401087
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "tp_sq(A)")
        (("" (EXPAND "entry" 1)
          (("" (EXPAND "access" 1)
            (("" (CASE "j < length(row(A)(i))")
              (("1" (CASE "i < length(row(A)(j))")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "sym?(A)")
                    (("1" (IFF -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sym_forall?" -1)
                          (("1" (EXPAND "sym_row_col_upto?" -1)
                            (("1" (EXPAND "row" 1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "row" -)
                                  (("1" (CASE "i >= length(A)")
                                    (("1" (CASE "j>= length(A)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (CASE "j >= length(A)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "sym_row_col?" -1)
                                            (("2" (INST -1 "j")
                                              (("1" (LEMMA "col_def")
                                                (("1" (INST -1 "A" "j")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "list_extensionality[real]")
                                                      (("1" (INST?)
                                                        (("1" (FLATTEN)
                                                          (("1" (HIDE -2)
                                                            (("1" (SPLIT -1)
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (INST -2 "i")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "row" -2)
                                                                    (("1"
                                                                      (INST -3
                                                                       "i")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "rows" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "row" -1)
                    (("2" (ASSERT)
                      (("2" (FLIP-INEQ 1)
                        (("2" (TYPEPRED "row(A)(j)")
                          (("2" (HIDE -1)
                            (("2" (LIFT-IF -2)
                              (("2" (SPLIT -2)
                                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "row" -2)
                                      (("2" (LIFT-IF -2)
                                        (("2" (SPLIT -2)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "length" -2)
                                              (("1" (ASSERT)
                                                (("1" (INST -7 "i")
                                                  (("1" (EXPAND "rows")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (INST -6 "j")
                                                (("2" (EXPAND "rows" -)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (LIFT-IF 2)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "row" 1)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (TYPEPRED "i")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "row" -3)
                                      (("1" (EXPAND "length" -3)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "row" 3)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF 3)
                                      (("2" (SPLIT 3)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "row" -2)
                                            (("1" (INST -6 "j")
                                              (("1" (EXPAND "rows")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (INST -5 "i")
                                              (("2" (EXPAND "rows")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sym_entry_def_forward-0| "" 3928419176
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "tp_sq(A)")
        (("" (EXPAND "entry" 1)
          (("" (EXPAND "access" 1)
            (("" (CASE "j < length(row(A)(i))")
              (("1" (CASE "i < length(row(A)(j))")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "sym?(A)")
                    (("1" (IFF -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sym_forall?" -1)
                          (("1" (EXPAND "sym_row_col_upto?" -1)
                            (("1" (EXPAND "row" 1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "row" -)
                                  (("1" (CASE "i >= length(A)")
                                    (("1" (CASE "j>= length(A)")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (CASE "j >= length(A)")
                                        (("1" (ASSERT) NIL NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "sym_row_col?" -1)
                                            (("2" (INST -1 "j")
                                              (("1" (LEMMA "col_def")
                                                (("1" (INST -1 "A" "j")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "list_extensionality[real]")
                                                      (("1" (INST?)
                                                        (("1" (FLATTEN)
                                                          (("1" (HIDE -2)
                                                            (("1" (SPLIT -1)
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (INST -2 "i")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "row" -2)
                                                                    (("1"
                                                                      (INST -3
                                                                       "i")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "rows" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "row" -1)
                    (("2" (ASSERT)
                      (("2" (FLIP-INEQ 1)
                        (("2" (TYPEPRED "row(A)(j)")
                          (("2" (HIDE -1)
                            (("2" (LIFT-IF -2)
                              (("2" (SPLIT -2)
                                (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "row" -2)
                                      (("2" (LIFT-IF -2)
                                        (("2" (SPLIT -2)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "length" -2)
                                              (("1" (ASSERT)
                                                (("1" (INST -7 "i")
                                                  (("1" (EXPAND "rows")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (INST -6 "j")
                                                (("2" (EXPAND "rows" -)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (LIFT-IF 2)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "row" 1)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (TYPEPRED "i")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "row" -3)
                                      (("1" (EXPAND "length" -3)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "row" 3)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF 3)
                                      (("2" (SPLIT 3)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "row" -2)
                                            (("1" (INST -6 "j")
                                              (("1" (EXPAND "rows")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (INST -5 "i")
                                              (("2" (EXPAND "rows")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|entry| CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (A SKOLEM-CONST-DECL "Square" |def_symmetric_matrix| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |def_symmetric_matrix| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|col_def| FORMULA-DECL NIL |matrices| |matrices|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|sym_forall?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|tp_sq| CONST-DECL "{p: posnat |
   columns(A) = p AND
    rows(A) = p AND
     (FORALL (i: below(length(A))): length(nth(A, i)) = p) AND
      (FORALL (i: below(length(A))): length(col(A)(i)) = p)}"
     |props_square_matrix| NIL))
   SHOSTAK)
  (|sym_entry_def_forward-1| |nil| 3836815945
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "tp_sq(A)")
        (("" (EXPAND "entry" 1)
          (("" (EXPAND "access" 1)
            (("" (CASE "j < length(row(A)(i))")
              (("1" (CASE "i < length(row(A)(j))")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "sym?(A)")
                    (("1" (IFF -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sym_forall?" -1)
                          (("1" (EXPAND "sym_row_col_upto?" -1)
                            (("1" (EXPAND "row" 1)
                              (("1" (ASSERT)
                                (("1" (EXPAND "row" -)
                                  (("1" (CASE "i >= length(A)")
                                    (("1" (CASE "j>= length(A)")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "length" -)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (ASSERT)
                                        (("2" (EXPAND "length " -4)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (CASE "j >= length(A)")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "length" -3)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (EXPAND "sym_row_col?" -1)
                                            (("2" (INST -1 "j")
                                              (("1" (LEMMA "col_def")
                                                (("1" (INST -1 "A" "j")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "list_extensionality[real]")
                                                      (("1" (INST?)
                                                        (("1" (FLATTEN)
                                                          (("1" (HIDE -2)
                                                            (("1" (SPLIT -1)
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (INST -2 "i")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "row" -2)
                                                                    (("1"
                                                                      (INST -3
                                                                       "i")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (EXPAND "rows" 1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (EXPAND "row" -1)
                    (("2" (ASSERT)
                      (("2" (FLIP-INEQ 1)
                        (("2" (TYPEPRED "row(A)(j)")
                          (("2" (HIDE -1)
                            (("2" (LIFT-IF -2)
                              (("2" (SPLIT -2)
                                (("1" (FLATTEN)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "length " -2)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "row" -2)
                                      (("2" (LIFT-IF -2)
                                        (("2" (SPLIT -2)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "length" -2)
                                              (("1" (ASSERT)
                                                (("1" (INST -7 "i")
                                                  (("1" (EXPAND "rows")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2" (INST -6 "j")
                                                (("2" (EXPAND "rows" -)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (LIFT-IF 2)
                  (("2" (SPLIT 2)
                    (("1" (FLATTEN)
                      (("1" (EXPAND "row" 1)
                        (("1" (ASSERT)
                          (("1" (LIFT-IF 1)
                            (("1" (SPLIT 1)
                              (("1" (FLATTEN)
                                (("1" (TYPEPRED "i")
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "row" -3)
                                      (("1" (EXPAND "length" -3)
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (EXPAND "row" 3)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF 3)
                                      (("2" (SPLIT 3)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "row" -2)
                                            (("1" (INST -6 "j")
                                              (("1" (EXPAND "rows")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2" (INST -5 "i")
                                              (("2" (EXPAND "rows")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|entry| CONST-DECL "real" |matrices| |matrices|)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|col_def| FORMULA-DECL NIL |matrices| |matrices|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|sym_forall?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|tp_sq| CONST-DECL "{p: posnat |
   columns(A) = p AND
    rows(A) = p AND
     (FORALL (i: below(length(A))): length(nth(A, i)) = p) AND
      (FORALL (i: below(length(A))): length(col(A)(i)) = p)}"
     |props_square_matrix| NIL))
   SHOSTAK))
 (|sym_entry_def_backward| 1
  (|sym_entry_def_backward-2| "" 3930401089
   ("" (SKEEP)
    (("" (EXPAND "sym?" 1)
      (("" (TYPEPRED "init_sym?(A,0)")
        (("" (ASSERT)
          (("" (REPLACE -1 1)
            (("" (HIDE -1)
              (("" (EXPAND "sym_row_col_upto?" 1)
                (("" (SKEEP)
                  (("" (EXPAND "sym_row_col?")
                    (("" (LEMMA "list_extensionality[real]")
                      (("" (INST?)
                        (("" (ASSERT)
                          (("" (HIDE 2)
                            (("" (TYPEPRED "A")
                              (("" (HIDE -1)
                                (("" (TYPEPRED "col(A)(j)")
                                  (("" (HIDE -1)
                                    (("" (TYPEPRED "col(A)(j)")
                                      (("" (HIDE -1)
                                        (("" (REPLACE -1)
                                          (("" (EXPAND "row" 1 1)
                                            (("" (CASE "j>= length(A)")
                                              (("1" (REVEAL +)
                                                (("1" (HIDE 2)
                                                  (("1" (EXPAND "row" 1 1)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "rows")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (TYPEPRED "tp_sq(A)")
                                                  (("2" (INST -4 "j")
                                                    (("2" (ASSERT)
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (EXPAND "row" 2 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA "col_def")
                                                              (("2"
                                                                (INST -1 "A"
                                                                 "j")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (INST -2
                                                                     "n")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "tp_sq(A)")
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             2)
                                                                            (("1"
                                                                              (SPLIT
                                                                               2)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (FLIP-INEQ
                                                                                   2)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -20
                                                                                     "n"
                                                                                     "j")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "entry"
                                                                                       -20)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "row"
                                                                                         -20)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "n")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "row"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -17)
                                                                                                (("1"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (INST
                                                                                   -4
                                                                                   "n")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "n")
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "tp_sq(A)")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "row"
                                                                             -6)
                                                                            (("2"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sym_entry_def_backward-0| "" 3928419182
   ("" (SKEEP)
    (("" (EXPAND "sym?" 1)
      (("" (TYPEPRED "init_sym?(A,0)")
        (("" (ASSERT)
          (("" (REPLACE -1 1)
            (("" (HIDE -1)
              (("" (EXPAND "sym_row_col_upto?" 1)
                (("" (SKEEP)
                  (("" (EXPAND "sym_row_col?")
                    (("" (LEMMA "list_extensionality[real]")
                      (("" (INST?)
                        (("" (ASSERT)
                          (("" (HIDE 2)
                            (("" (TYPEPRED "A")
                              (("" (HIDE -1)
                                (("" (TYPEPRED "col(A)(j)")
                                  (("" (HIDE -1)
                                    (("" (TYPEPRED "col(A)(j)")
                                      (("" (HIDE -1)
                                        (("" (REPLACE -1)
                                          (("" (EXPAND "row" 1 1)
                                            (("" (CASE "j>= length(A)")
                                              (("1" (REVEAL +)
                                                (("1" (HIDE 2)
                                                  (("1" (EXPAND "row" 1 1)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "rows")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (TYPEPRED "tp_sq(A)")
                                                  (("2" (INST -4 "j")
                                                    (("2" (ASSERT)
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (EXPAND "row" 2 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA "col_def")
                                                              (("2"
                                                                (INST -1 "A"
                                                                 "j")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (INST -2
                                                                     "n")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "tp_sq(A)")
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             2)
                                                                            (("1"
                                                                              (SPLIT
                                                                               2)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (FLIP-INEQ
                                                                                   2)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -20
                                                                                     "n"
                                                                                     "j")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "entry"
                                                                                       -20)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "row"
                                                                                         -20)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "n")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "row"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -17)
                                                                                                (("1"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (INST
                                                                                   -4
                                                                                   "n")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "n")
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "tp_sq(A)")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "row"
                                                                             -6)
                                                                            (("2"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tp_sq| CONST-DECL "{p: posnat |
   columns(A) = p AND
    rows(A) = p AND
     (FORALL (i: below(length(A))): length(nth(A, i)) = p) AND
      (FORALL (i: below(length(A))): length(col(A)(i)) = p)}"
     |props_square_matrix| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|col_def| FORMULA-DECL NIL |matrices| |matrices|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (A SKOLEM-CONST-DECL "Square" |def_symmetric_matrix| NIL)
    (|j| SKOLEM-CONST-DECL "upto(rows(A) - 1)" |def_symmetric_matrix| NIL)
    (|n| SKOLEM-CONST-DECL "below(length(row(A)(j)))" |def_symmetric_matrix|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|init_sym?| DEF-DECL "{b: bool | b = sym_row_col_upto?(A, rows(A) - 1)}"
                 |def_symmetric_matrix| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK)
  (|sym_entry_def_backward-1| |nil| 3837200937
   ("" (SKEEP)
    (("" (EXPAND "sym?" 1)
      (("" (TYPEPRED "init_sym?(A,0)")
        (("" (ASSERT)
          (("" (REPLACE -1 1)
            (("" (HIDE -1)
              (("" (EXPAND "sym_row_col_upto?" 1)
                (("" (SKEEP)
                  (("" (EXPAND "sym_row_col?")
                    (("" (LEMMA "list_extensionality[real]")
                      (("" (INST?)
                        (("" (ASSERT)
                          (("" (HIDE 2)
                            (("" (TYPEPRED "A")
                              (("" (HIDE -1)
                                (("" (TYPEPRED "col(A)(j)")
                                  (("" (HIDE -1)
                                    (("" (TYPEPRED "col(A)(j)")
                                      (("" (HIDE -1)
                                        (("" (REPLACE -1)
                                          (("" (EXPAND "row" 1 1)
                                            (("" (CASE "j>= length(A)")
                                              (("1" (REVEAL +)
                                                (("1" (HIDE 2)
                                                  (("1" (EXPAND "row" 1 1)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "rows")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT)
                                                (("2" (TYPEPRED "tp_sq(A)")
                                                  (("2" (INST -4 "j")
                                                    (("2" (ASSERT)
                                                      (("2" (SKEEP)
                                                        (("2"
                                                          (EXPAND "row" 2 1)
                                                          (("2" (ASSERT)
                                                            (("2"
                                                              (LEMMA "col_def")
                                                              (("2"
                                                                (INST -1 "A"
                                                                 "j")
                                                                (("2" (FLATTEN)
                                                                  (("2"
                                                                    (INST -2
                                                                     "n")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (TYPEPRED
                                                                           "tp_sq(A)")
                                                                          (("1"
                                                                            (LIFT-IF
                                                                             2)
                                                                            (("1"
                                                                              (SPLIT
                                                                               2)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (FLIP-INEQ
                                                                                   2)
                                                                                  (("1"
                                                                                    (INST
                                                                                     -20
                                                                                     "n"
                                                                                     "j")
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "entry"
                                                                                       -20)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "row"
                                                                                         -20)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          (("1"
                                                                                            (TYPEPRED
                                                                                             "n")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "row"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -17)
                                                                                                (("1"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (GRIND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (INST
                                                                                   -4
                                                                                   "n")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (TYPEPRED
                                                                         "n")
                                                                        (("2"
                                                                          (TYPEPRED
                                                                           "tp_sq(A)")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "row"
                                                                             -6)
                                                                            (("2"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym?| CONST-DECL "{b: bool | b = sym_forall?(A)}" |def_symmetric_matrix|
            NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tp_sq| CONST-DECL "{p: posnat |
   columns(A) = p AND
    rows(A) = p AND
     (FORALL (i: below(length(A))): length(nth(A, i)) = p) AND
      (FORALL (i: below(length(A))): length(col(A)(i)) = p)}"
     |props_square_matrix| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|col_def| FORMULA-DECL NIL |matrices| |matrices|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|access| CONST-DECL "real" |matrices| |matrices|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL NIL NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|row| CONST-DECL "Vector" |matrices| |matrices|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_row_col?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|init_sym?| DEF-DECL "{b: bool | b = sym_row_col_upto?(A, rows(A) - 1)}"
                 |def_symmetric_matrix| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|sym_row_col_upto?| CONST-DECL "bool" |def_symmetric_matrix| NIL)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK))
 (|sym_entry_def| 0
  (|sym_entry_def-2| "" 3930401090
   ("" (LEMMA "sym_entry_def_forward")
    (("" (LEMMA "sym_entry_def_backward")
      (("" (SKEEP)
        (("" (INST -2 "A")
          (("" (INST -1 "A")
            (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sym_entry_def-0| "" 3928419186
   ("" (LEMMA "sym_entry_def_forward")
    (("" (LEMMA "sym_entry_def_backward")
      (("" (SKEEP)
        (("" (INST -2 "A")
          (("" (INST -1 "A")
            (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym_entry_def_backward| FORMULA-DECL NIL |def_symmetric_matrix| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_entry_def_forward| FORMULA-DECL NIL |def_symmetric_matrix| NIL))
   SHOSTAK)
  (|sym_entry_def-1| |nil| 3837201713
   ("" (LEMMA "sym_entry_def_forward")
    (("" (LEMMA "sym_entry_def_backward")
      (("" (SKEEP)
        (("" (INST -2 "A")
          (("" (INST -1 "A")
            (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym_entry_def_backward| FORMULA-DECL NIL |def_symmetric_matrix| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|sym_entry_def_forward| FORMULA-DECL NIL |def_symmetric_matrix| NIL))
   SHOSTAK))
 (|sym_add| 0
  (|sym_add-2| "" 3930401091
   ("" (SKEEP)
    (("" (LEMMA "sym_entry_def")
      (("" (INST-CP -1 "A")
        (("" (INST-CP -1 "B")
          (("" (WITH-TCCS (INST -1 "A+B"))
            (("" (ASSERT)
              (("" (SKEEP)
                (("" (INST?)
                  (("" (INST?)
                    (("" (INST -1 "i" "j")
                      (("" (TYPEPRED "A+B")
                        (("" (HIDE -1)
                          (("" (INST -3 "i" "j")
                            (("" (REPLACE -3)
                              (("" (TYPEPRED "A+B")
                                (("" (INST -4 "j" "i")
                                  (("" (REPLACE -4)
                                    (("" (ASSERT)
                                      (("" (HIDE -1)
                                        (("" (LEMMA "sym_entry_def")
                                          (("" (INST -1 "B")
                                            (("" (FLATTEN)
                                              (("" (ASSERT)
                                                (("" (INST -2 "i" "j")
                                                  (("" (REPLACE -2)
                                                    (("" (REPLACE -16 1)
                                                      (("" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sym_add-0| "" 3928419191
   ("" (SKEEP)
    (("" (LEMMA "sym_entry_def")
      (("" (INST-CP -1 "A")
        (("" (INST-CP -1 "B")
          (("" (WITH-TCCS (INST -1 "A+B"))
            (("" (ASSERT)
              (("" (SKEEP)
                (("" (INST?)
                  (("" (INST?)
                    (("" (INST -1 "i" "j")
                      (("" (TYPEPRED "A+B")
                        (("" (HIDE -1)
                          (("" (INST -3 "i" "j")
                            (("" (REPLACE -3)
                              (("" (TYPEPRED "A+B")
                                (("" (INST -4 "j" "i")
                                  (("" (REPLACE -4)
                                    (("" (ASSERT)
                                      (("" (HIDE -1)
                                        (("" (LEMMA "sym_entry_def")
                                          (("" (INST -1 "B")
                                            (("" (FLATTEN)
                                              (("" (ASSERT)
                                                (("" (INST -2 "i" "j")
                                                  (("" (REPLACE -2)
                                                    (("" (REPLACE -16 1)
                                                      (("" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym_entry_def| FORMULA-DECL NIL |def_symmetric_matrix| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i: nat, j: nat):
     entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}"
       |matrices| |matrices|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|square_sum| APPLICATION-JUDGEMENT "Square" |props_square_matrix| NIL))
   SHOSTAK)
  (|sym_add-1| |nil| 3836919791
   ("" (SKEEP)
    (("" (LEMMA "sym_entry_def")
      (("" (INST-CP -1 "A")
        (("" (INST-CP -1 "B")
          (("" (WITH-TCCS (INST -1 "A+B"))
            (("" (ASSERT)
              (("" (SKEEP)
                (("" (INST?)
                  (("" (INST?)
                    (("" (INST -1 "i" "j")
                      (("" (TYPEPRED "A+B")
                        (("" (HIDE -1)
                          (("" (INST -3 "i" "j")
                            (("" (REPLACE -3)
                              (("" (TYPEPRED "A+B")
                                (("" (INST -4 "j" "i")
                                  (("" (REPLACE -4)
                                    (("" (ASSERT)
                                      (("" (HIDE -1)
                                        (("" (LEMMA "sym_entry_def")
                                          (("" (INST -1 "B")
                                            (("" (FLATTEN)
                                              (("" (ASSERT)
                                                (("" (INST -2 "i" "j")
                                                  (("" (REPLACE -2)
                                                    (("" (REPLACE -16 1)
                                                      (("" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym_entry_def| FORMULA-DECL NIL |def_symmetric_matrix| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i: nat, j: nat):
     entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}"
       |matrices| |matrices|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|square_sum| APPLICATION-JUDGEMENT "Square" |props_square_matrix| NIL))
   SHOSTAK))
 (|sym_scal| 1
  (|sym_scal-2| "" 3930401092
   ("" (SKEEP)
    (("" (LEMMA "sym_entry_def")
      (("" (INST -1 "A")
        (("" (LEMMA "sym_entry_def")
          (("" (INST -1 "c*A")
            (("" (FLATTEN)
              (("" (ASSERT)
                (("" (HIDE -1)
                  (("" (SKEEP)
                    (("" (INST -2 "i" "j")
                      (("" (HIDE -1)
                        (("" (TYPEPRED "c*A")
                          (("" (INST -4 "i" "j")
                            (("" (ASSERT)
                              (("" (HIDE -3)
                                (("" (LEMMA "sym_entry_def")
                                  (("" (HIDE -1)
                                    (("" (TYPEPRED "c*A")
                                      (("" (INST -4 "j" "i")
                                        (("" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sym_scal-0| "" 3928419195
   ("" (SKEEP)
    (("" (LEMMA "sym_entry_def")
      (("" (INST -1 "A")
        (("" (LEMMA "sym_entry_def")
          (("" (INST -1 "c*A")
            (("" (FLATTEN)
              (("" (ASSERT)
                (("" (HIDE -1)
                  (("" (SKEEP)
                    (("" (INST -2 "i" "j")
                      (("" (HIDE -1)
                        (("" (TYPEPRED "c*A")
                          (("" (INST -4 "i" "j")
                            (("" (ASSERT)
                              (("" (HIDE -3)
                                (("" (LEMMA "sym_entry_def")
                                  (("" (HIDE -1)
                                    (("" (TYPEPRED "c*A")
                                      (("" (INST -4 "j" "i")
                                        (("" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym_entry_def| FORMULA-DECL NIL |def_symmetric_matrix| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = r * entry(M)(i, j)}"
       |matrices| |matrices|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|square_scal| APPLICATION-JUDGEMENT "Square" |props_square_matrix| NIL))
   SHOSTAK)
  (|sym_scal-1| |nil| 3836919791
   ("" (SKEEP)
    (("" (LEMMA "sym_entry_def")
      (("" (INST -1 "A")
        (("" (LEMMA "sym_entry_def")
          (("" (INST -1 "c*A")
            (("" (FLATTEN)
              (("" (ASSERT)
                (("" (HIDE -1)
                  (("" (SKEEP)
                    (("" (INST -2 "i" "j")
                      (("" (HIDE -1)
                        (("" (TYPEPRED "c*A")
                          (("" (INST -4 "i" "j")
                            (("" (ASSERT)
                              (("" (HIDE -3)
                                (("" (LEMMA "sym_entry_def")
                                  (("" (HIDE -1)
                                    (("" (TYPEPRED "c*A")
                                      (("" (INST -4 "j" "i")
                                        (("" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sym_entry_def| FORMULA-DECL NIL |def_symmetric_matrix| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = r * entry(M)(i, j)}"
       |matrices| |matrices|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|square_scal| APPLICATION-JUDGEMENT "Square" |props_square_matrix| NIL))
   SHOSTAK)))

