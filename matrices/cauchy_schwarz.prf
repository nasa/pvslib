(cauchy_schwarz
 (dot_non_neg 0
  (dot_non_neg-1 nil 3741944641
   ("" (induct "l1")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)
           ("2" (assert)
            (("2" (expand "*" 2)
              (("2" (assert)
                (("2" (expand "dot" 2)
                  (("2" (assert)
                    (("2" (expand "*" -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dot def-decl "real" matrices "matrices/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "real" matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dot_pos 0
  (dot_pos-1 nil 3741946653
   ("" (induct "l1")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (case "cons2_var=null")
          (("1" (hide -2)
            (("1" (assert)
              (("1" (replace -1 1)
                (("1" (expand "length" 1)
                  (("1" (expand "length" 1)
                    (("1" (expand "zero_vec" 1)
                      (("1" (decompose-equality 1)
                        (("1" (grind)
                          (("1" (mult-by 1 "cons1_var")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "zero_vec" 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "cons2_var = zero_vec(length(cons2_var))")
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (replace -1 3)
                    (("1" (expand "*")
                      (("1" (expand "dot" 3)
                        (("1" (assert)
                          (("1" (expand "length" 2)
                            (("1" (expand "zero_vec" 2)
                              (("1"
                                (decompose-equality 2)
                                (("1"
                                  (lemma "dot_non_neg")
                                  (("1"
                                    (inst
                                     -1
                                     "zero_vec(length(cons2_var))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (mult-by 1 "cons1_var")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT 0 * cons1_var =0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (expand "*" -2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lemma "dot_non_neg")
                  (("2" (expand "*" 4)
                    (("2" (expand "dot" 4)
                      (("2" (expand "length" 3)
                        (("2" (inst -1 "cons2_var")
                          (("2" (expand "*" -1)
                            (("2" (assert)
                              (("2"
                                (case "NOT cons1_var * cons1_var >=0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "*" -3)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dot def-decl "real" matrices "matrices/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props "structures/")
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "real" matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (> const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (dot_linear_right 0
  (dot_linear_right-1 nil 3741944914
   ("" (lemma "dot_scalar1")
    (("" (lemma "dot_dist")
      (("" (skeep)
        (("" (inst -1 "l1" "c*l2" "l3")
          (("1" (replace -1 1)
            (("1" (inst -2 "l1" "l2" "c")
              (("1" (replace -2 1) (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (typepred "c*l2" "l2")
            (("2" (assert)
              (("2" (typepred "l2") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_dist formula-decl nil vector_arithmetic nil)
    (l2 skolem-const-decl "(cons?)" cauchy_schwarz nil)
    (c skolem-const-decl "real" cauchy_schwarz nil)
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (scal def-decl "VectorN(length(v2))" matrices "matrices/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil))
   shostak))
 (dot_linear_left 0
  (dot_linear_left-1 nil 3741945044
   ("" (skeep)
    (("" (lemma "dot_commutes")
      (("" (inst-cp -1 "(c * l2 + l3)" "l1")
        (("" (inst-cp -1 "l2" "l1")
          (("" (inst -1 "l3" "l1")
            (("" (replace -3 1)
              (("" (replace -1 1)
                (("" (replace -2 1)
                  (("" (lemma "dot_linear_right")
                    (("" (inst -1 "l1" "l2" "l3" "c") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_commutes formula-decl nil matrices "matrices/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (dot_linear_right formula-decl nil cauchy_schwarz nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dot_spread 0
  (dot_spread-1 nil 3741945408
   ("" (lemma "dot_linear_left")
    (("" (lemma "dot_linear_right")
      (("" (lemma "sub_idx")
        (("" (skeep)
          (("" (inst -1 "u" "c*v")
            (("1" (replace -1 1)
              (("1" (lemma "asso_v")
                (("1" (inst -1 "-1" "c" "v")
                  (("1" (replace -1 1)
                    (("1" (assert)
                      (("1" (lemma "add_commute")
                        (("1" (inst -1 "u" "(-1 * c) * v")
                          (("1" (replace -1 1)
                            (("1"
                              (inst-cp -5 "((-1 * c) * v + u)" "v" "u"
                               "-1*c")
                              (("1"
                                (replace -6 1)
                                (("1"
                                  (inst-cp -4 "u" "v" "u" "(-1 * c)")
                                  (("1"
                                    (replace -5 1)
                                    (("1"
                                      (inst-cp -4 "v" "v" "u" "(-1*c)")
                                      (("1"
                                        (replace -5 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "(v * v) * c * c=(c * c) * v * v")
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "dot_commutes")
                                                    (("1"
                                                      (inst -1 "u" "v")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "dot_commutes")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "(c*c)*v"
                                                   "v")
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "dot_scalar1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "v"
                                                           "v"
                                                           "c*c")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "v")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "u")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "v")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v")
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "u")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "u")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (typepred "v")
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (typepred
                                 "(-1 * c) * v + u"
                                 "u"
                                 "(-1 * c) * v"
                                 "v")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "(-1 * c) * v" "v")
                            (("2" (assert) nil nil)) nil)
                           ("3" (typepred "u") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "v") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "c*v" "v") (("2" (assert) nil nil)) nil)
             ("3" (typepred "u") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_linear_right formula-decl nil cauchy_schwarz nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (* const-decl "real" matrices "matrices/")
    (dot_commutes formula-decl nil matrices "matrices/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (c skolem-const-decl "real" cauchy_schwarz nil)
    (v skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cauchy_schwarz nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (u skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (sub_idx formula-decl nil vector_arithmetic nil)
    (dot_linear_left formula-decl nil cauchy_schwarz nil))
   shostak))
 (almost_cauchy_schwarz_TCC1 0
  (almost_cauchy_schwarz_TCC1-1 nil 3741947065
   ("" (skeep)
    (("" (lemma "dot_pos")
      (("" (inst -1 "v")
        (("1" (lemma "dot_non_neg")
          (("1" (inst -1 "v")
            (("1" (typepred "v") (("1" (assert) nil nil)) nil)
             ("2" (typepred "v") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "v") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((dot_pos formula-decl nil cauchy_schwarz nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cauchy_schwarz nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     cauchy_schwarz nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (almost_cauchy_schwarz 0
  (almost_cauchy_schwarz-1 nil 3741947066
   ("" (skeep)
    (("" (lemma "dot_spread")
      (("" (inst -1 "u" "v" "(u*v)/(v*v)")
        (("" (assert)
          (("" (assert)
            (("" (lemma "dot_non_neg")
              (("" (inst -1 "(u - (u * v) / (v * v) * v)")
                (("1"
                  (case "NOT  ((u * v) / (v * v) * ((u * v) / (v * v))) * v * v + u * u -
        2 * ((u * v) / (v * v) * (u * v))>=0")
                  (("1" (assert) nil nil)
                   ("2" (hide -2 -3)
                    (("2" (assert)
                      (("2" (lemma "dot_commutes")
                        (("2"
                          (inst -1
                           "((u * v) / (v * v) * ((u * v) / (v * v))) * v"
                           "v")
                          (("2" (replace -1 -2)
                            (("2" (hide -1)
                              (("2"
                                (lemma "dot_scalar1")
                                (("2"
                                  (inst
                                   -1
                                   "v"
                                   "v"
                                   "((u * v) / (v * v) * ((u * v) / (v * v)))")
                                  (("1"
                                    (replace -1 -2)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "v")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "(u - (u * v) / (v * v) * v)")
                  (("2" (typepred "u" "(u * v) / (v * v) * v" "v")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_spread formula-decl nil cauchy_schwarz nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (dot_commutes formula-decl nil matrices "matrices/")
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     cauchy_schwarz nil)
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (u skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* const-decl "real" matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" cauchy_schwarz nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (cauchy_schwarz_TCC1 0
  (cauchy_schwarz_TCC1-1 nil 3741944598
   ("" (lemma "dot_non_neg")
    (("" (skeep)
      (("" (inst -1 "u")
        (("" (assert) (("" (typepred "u") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (u skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" cauchy_schwarz nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil))
   nil))
 (cauchy_schwarz_TCC2 0
  (cauchy_schwarz_TCC2-1 nil 3741944598
   ("" (skeep)
    (("" (lemma "dot_non_neg")
      (("" (inst -1 "v")
        (("" (assert) (("" (typepred "v") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_non_neg formula-decl nil cauchy_schwarz nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (v skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" cauchy_schwarz nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (cauchy_schwarz 0
  (cauchy_schwarz-1 nil 3741947340
   ("" (skeep)
    (("" (lemma "almost_cauchy_schwarz")
      (("" (case "v=zero_vec(n)")
        (("1" (replace -1 1)
          (("1" (lemma "dot_zero")
            (("1" (inst-cp -1 "u" "n")
              (("1" (replace -2 1)
                (("1" (assert)
                  (("1" (expand "abs" 1 1) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "u") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "u" "v")
          (("1" (assert)
            (("1" (isolate -1 l 1)
              (("1" (assert)
                (("1" (mult-by -1 "v*v")
                  (("1" (assert)
                    (("1" (lemma "sqrt_sq_abs")
                      (("1" (inst -1 "(u * v)")
                        (("1" (expand "sq" -1)
                          (("1" (assert)
                            (("1" (lemma "sqrt_le")
                              (("1"
                                (inst
                                 -1
                                 "((u * v) * (u * v))"
                                 "u * u * (v * v)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -2 -1)
                                    (("1"
                                      (lemma "sqrt_times")
                                      (("1"
                                        (inst -1 "u * u" "v*v")
                                        (("1"
                                          (replace -1 -2)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "dot_non_neg")
                                            (("2"
                                              (inst -1 "v")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "dot_non_neg")
                                          (("3" (inst -1 "u") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "dot_non_neg")
                    (("2" (inst -1 "v") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((almost_cauchy_schwarz formula-decl nil cauchy_schwarz nil)
    (v skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "real" matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sqrt_sq_abs formula-decl nil sqrt "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (sqrt_le formula-decl nil sqrt "reals/")
    (sqrt_times formula-decl nil sqrt "reals/")
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (u skolem-const-decl "VectorN(n)" cauchy_schwarz nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" cauchy_schwarz nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))