(|matrices| (|IMP_sigma_swap_TCC1| 0 (|IMP_sigma_swap_TCC1-1| |nil| 3621252270 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|IMP_sigma_swap| ASSUMING "reals@sigma_swap[nat].sigma_swap" "connected_domain: ASSUMPTION (FORALL (x, y: sigma_swap.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma_swap.T_pred(z)))"))) (|length_matrix_eq| 0 (|length_matrix_eq-1| |nil| 3618314996 ("" (SKEEP :BUT "LL") (("" (INDUCT-AND-SIMPLIFY "LL") NIL NIL)) NIL) ((|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|nth_matrix_eq| 0 (|nth_matrix_eq-2| "" 3790097122 ("" (CASE "FORALL (i,nn: nat, LL: list[listn[real](nn)]) : i < length[list[real]](LL) IMPLIES  nth[listn[real](nn)](LL, i) = nth[list[real]](LL, i)") (("1" (SKEEP) NIL NIL) ("2" (HIDE 2) (("2" (INDUCT "i") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) NIL NIL)) NIL)) NIL)) NIL) ((|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL)) SHOSTAK) (|nth_matrix_eq-1| |nil| 3618315013 ("" (CASE "FORALL (i,nn: nat, LL: list[listn[real](nn)]) : i < length[list[real]](LL) IMPLIES  nth[listn[real](nn)](LL, i) = nth[list[real]](LL, i)") (("1" (SKEEP) (("1" (INSTEEP) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "i") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) (("2" (EXPAND "nth" 1) (("2" (INST -1 "nn" "cdr(LL)") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "length_matrix_eq") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (REWRITE "length_matrix_eq") NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|length_matrix_equiv| 0 (|length_matrix_equiv-2| "" 3790097122 ("" (SKOLEM 1 ("nn" _)) (("" (INDUCT "LL") (("" (GRIND) NIL NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL)) SHOSTAK) (|length_matrix_equiv-1| |nil| 3613207327 ("" (SKOLEM 1 ("nn" _)) (("" (INDUCT "LL") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("v" "L")) (("2" (FLATTEN) (("2" (EXPAND "length" +) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|length_matrix_nth| 0 (|length_matrix_nth-2| "" 3790097123 ("" (SKOLEM 1 ("nn" _ _)) (("" (INDUCT "LL") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("v" "L")) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (EXPAND "length" +) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "L") (("1" (REWRITE "every_nth") (("1" (EXPAND "nth" -2) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "v") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST - "i-1") (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "v") (("1" (EXPAND "length" -2) (("1" (LIFT-IF) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "i-1") (("2" (EXPAND "length" -1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|every_nth| FORMULA-DECL NIL |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK) (|length_matrix_nth-1| |nil| 3613210127 ("" (SKOLEM 1 ("nn" _ _)) (("" (INDUCT "LL") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("v" "L")) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (EXPAND "length" +) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "L") (("1" (REWRITE "every_nth") (("1" (EXPAND "nth" -2) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "v") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST - "i-1") (("1" (FLATTEN) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "v") (("1" (EXPAND "length" -2) (("1" (LIFT-IF) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "i-1") (("2" (EXPAND "length" -1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|matrix_listn_nth| 0 (|matrix_listn_nth-3| "" 3790097123 ("" (SKEEP) NIL NIL) NIL SHOSTAK) (|matrix_listn_nth-2| |nil| 3618315031 ("" (SKEEP) (("" (REWRITE "nth_matrix_eq") NIL NIL)) NIL) NIL NIL) (|matrix_listn_nth-1| |nil| 3613218443 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|length_rows| 0 (|length_rows-1| |nil| 3615893404 ("" (SKEEP) (("" (EXPAND "rows") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|rows| CONST-DECL "nat" |matrices| NIL)) SHOSTAK)) (|columns_TCC1| 0 (|columns_TCC1-1| |nil| 3613146060 ("" (SKEEP) (("" (ASSERT) (("" (SKOSIMP*) (("" (TYPEPRED "i!1") (("" (HIDE +) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|columns| SUBTYPE "0" "{c: naturalnumbers.nat | booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): reals.<=(list_props[real].length(list_props[list[real]].nth(matrices.M, i)), c), (booleans.OR(booleans.AND(list_adt[list[real]].null?(matrices.M), c = 0), EXISTS (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): list_props[real].length(list_props[list[real]].nth(matrices.M, i)) = c)))}"))) (|columns_TCC2| 0 (|columns_TCC2-1| |nil| 3613146060 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)) NIL (|columns| SUBTYPE "matrices.M" "(list_adt[list[real]].cons?)"))) (|columns_TCC3| 0 (|columns_TCC3-1| |nil| 3613228106 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|columns| TERMINATION "matrices.columns(list_adt[list[real]].cdr(matrices.M))" "NIL"))) (|columns_TCC4| 0 (|columns_TCC4-1| |nil| 3613228106 ("" (SKEEP) (("" (ASSERT) (("" (SPLIT) (("1" (EXPAND "max") (("1" (CASE "length[real](car[list[real]](M)) < v(cdr[list[real]](M))") (("1" (ASSERT) (("1" (TYPEPRED "v(cdr[list[real]](M))") (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (CASE "i = 0") (("1" (EXPAND "nth" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INST - "i-1") (("1" (ASSERT) (("1" (EXPAND "nth" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (CASE "i = 0") (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "v(cdr[list[real]](M))") (("2" (INST - "i-1") (("1" (ASSERT) (("1" (EXPAND "nth" 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "length" 1 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "max" 1) (("2" (CASE "length[real](car[list[real]](M)) < v(cdr[list[real]](M))") (("1" (ASSERT) (("1" (TYPEPRED "v(cdr[list[real]](M))") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST + "i!1+1") (("1" (EXPAND "nth" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST + "0") (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "length" 1 2) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(cdr[list[real]](M)))" |matrices| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|i| SKOLEM-CONST-DECL "below(length(M))" |matrices| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(M))" |matrices| NIL) (M SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|columns| SUBTYPE "real_defs.max(list_props[real].length(list_adt[list[real]].car(matrices.M)), matrices.columns(list_adt[list[real]].cdr(matrices.M)))" "{c: naturalnumbers.nat | booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): reals.<=(list_props[real].length(list_props[list[real]].nth(matrices.M, i)), c), (booleans.OR(booleans.AND(list_adt[list[real]].null?(matrices.M), c = 0), EXISTS (i: naturalnumbers.below(list_props[list[real]].length(matrices.M))): list_props[real].length(list_props[list[real]].nth(matrices.M, i)) = c)))}"))) (|row_TCC1| 0 (|row_TCC1-1| |nil| 3613147893 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|row| SUBTYPE "matrices.i" "below[length[list[real]](M)]"))) (|col_TCC1| 0 (|col_TCC1-1| |nil| 3613147893 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL)) NIL (|col| SUBTYPE "list_adt[real].null" "VectorN(matrices.rows(matrices.M))"))) (|col_TCC2| 0 (|col_TCC2-1| |nil| 3613147893 ("" (SKEEP) (("" (EXPAND "rows" +) (("" (EXPAND "length" + 2) (("" (ASSERT) (("" (EXPAND "length" + 1) (("" (TYPEPRED "v(cdr[list[real]](M))(i)") (("" (REPLACES -2) (("" (EXPAND "rows") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rows| CONST-DECL "nat" |matrices| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|col| SUBTYPE "list_adt[real].cons(matrices.access(list_adt[list[real]].car(matrices.M))(matrices.i), matrices.col(list_adt[list[real]].cdr(matrices.M))(matrices.i))" "VectorN(matrices.rows(matrices.M))"))) (|col_def_TCC1| 0 (|col_def_TCC1-1| |nil| 3613306052 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL)) NIL (|col_def| SUBTYPE "matrices.j" "below[length[real](col(M)(i))]"))) (|col_def_TCC2| 0 (|col_def_TCC2-1| |nil| 3613306052 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL)) NIL (|col_def| SUBTYPE "matrices.j" "below[length[list[real]](M)]"))) (|col_def| 0 (|col_def-1| |nil| 3613306076 ("" (INDUCT "M") (("1" (SKEEP) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("v" "M")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (ASSERT) (("2" (SPLASH +) (("1" (SKEEP) (("1" (TYPEPRED "j") (("1" (LIFT-IF) (("1" (GROUND) (("1" (CASE "j = 0") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "nth" + 1) (("1" (EXPAND "col" + 1) (("1" (EXPAND "nth" + 2) (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "nth" + 1) (("2" (EXPAND "nth" + 3) (("2" (EXPAND "col" +) (("2" (INST - "i") (("2" (FLATTEN) (("2" (INST - "j-1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows" -2) (("2" (EXPAND "length" -2) (("2" (ASSERT) (("2" (EXPAND "rows" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "i") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "col" +) (("2" (EXPAND "nth" 2) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "access" 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "j-1") (("1" (ASSERT) (("1" (REPLACES -4) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows" (-1 1)) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "col(cons(v,M))(i)") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (SKOSIMP*) (("3" (TYPEPRED "j!1") (("3" (EXPAND "rows") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (TYPEPRED "j!1") (("4" (EXPAND "rows") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) (("5" (TYPEPRED "j!1") (("5" (EXPAND "rows") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "below(rows(cons(v, M)))" |matrices| NIL) (M SKOLEM-CONST-DECL "list[list[real]]" |matrices| NIL) (|v| SKOLEM-CONST-DECL "list[real]" |matrices| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|access| CONST-DECL "real" |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)) SHOSTAK)) (|col_zero| 0 (|col_zero-1| |nil| 3613380700 ("" (SKEEP) (("" (REWRITE "list_extensionality[real]") (("" (SPLASH) (("1" (SKEEP) (("1" (TYPEPRED "n") (("1" (LEMMA "col_def") (("1" (INST - "M" "i") (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST - "n") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (TYPEPRED "columns(M)") (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "zero" 1) (("1" (TYPEPRED "array2list[real](rows(M))(LAMBDA (p: nat): 0)") (("1" (INST - "n") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "col(M)(i)") (("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "col(M)(i)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|zero| CONST-DECL "VectorN(n)" |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|col_def| FORMULA-DECL NIL |matrices| NIL) (|n| SKOLEM-CONST-DECL "below(length(col(M)(i)))" |matrices| NIL) (|i| SKOLEM-CONST-DECL "nat" |matrices| NIL) (M SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)) SHOSTAK)) (|access_zero| 0 (|access_zero-1| |nil| 3615738110 ("" (SKEEP) (("" (EXPAND "access") (("" (LIFT-IF) (("" (GROUND) (("" (EXPAND "zero" 1) (("" (TYPEPRED "array2list[real](n)(LAMBDA (p: nat): 0)") (("" (INST - "i") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|access| CONST-DECL "real" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|zero| CONST-DECL "VectorN(n)" |matrices| NIL)) SHOSTAK)) (|entry_test| 0 (|entry_test-1| |nil| 3614700058 ("" (EVAL-FORMULA) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|access_row| 0 (|access_row-1| |nil| 3615133327 ("" (SKEEP) (("" (EXPAND "entry") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|entry| CONST-DECL "real" |matrices| NIL)) SHOSTAK)) (|access_col| 0 (|access_col-1| |nil| 3615801371 ("" (SKEEP) (("" (LEMMA "col_def") (("" (INST?) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "access" 1) (("" (LIFT-IF) (("" (GROUND) (("1" (INST - "i") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -2) (("1" (EXPAND "entry") (("1" (EXPAND "access") (("1" (EXPAND "row") (("1" (ASSERT) (("1" (COPY -3) (("1" (EXPAND "rows" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "entry" 2) (("2" (EXPAND "row" 2) (("2" (COPY -2) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (EXPAND "access" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "entry" 2) (("2" (COPY -1) (("2" (EXPAND "rows" -1) (("2" (EXPAND "row" 2) (("2" (ASSERT) (("2" (EXPAND "access" 2) (("2" (EXPAND "length" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|col_def| FORMULA-DECL NIL |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|coltest| 0 (|coltest-1| |nil| 3613147897 ("" (EVAL-FORMULA) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|full_matrix_columns_TCC1| 0 (|full_matrix_columns_TCC1-1| |nil| 3613226737 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL)) NIL (|full_matrix_columns| SUBTYPE "matrices.SM" "(list_adt[list[real]].cons?)"))) (|full_matrix_columns| 0 (|full_matrix_columns-1| |nil| 3613226737 ("" (SKEEP) (("" (CASE "null?(SM)") (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (TYPEPRED "columns(SM)") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "SM") (("2" (ASSERT) (("2" (INST - "0" "i!1") (("2" (EXPAND "nth" -2 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|rows_mn| 0 (|rows_mn-1| |nil| 3614001127 ("" (SKEEP) (("" (EXPAND "rows") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|rows| CONST-DECL "nat" |matrices| NIL)) SHOSTAK)) (|columns_mn| 0 (|columns_mn-1| |nil| 3614001169 ("" (SKEEP) (("" (TYPEPRED "M") (("" (TYPEPRED "columns(M)") (("" (ASSERT) (("" (SPLIT) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 -5)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "i!1") (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL)) SHOSTAK)) (|length_row| 0 (|length_row-1| |nil| 3614003138 ("" (SKEEP) (("" (TYPEPRED "SM") (("" (ASSERT) (("" (SPLIT -) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "row") (("2" (TYPEPRED "columns(SM)") (("2" (ASSERT) (("2" (SPLIT -) (("1" (HIDE-ALL-BUT (-1 -5)) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "i" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|length_col| 0 (|length_col-1| |nil| 3614003247 ("" (SKEEP) (("" (LEMMA "col_def") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|col_def| FORMULA-DECL NIL |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|columns_0_entry| 0 (|columns_0_entry-2| "" 3750621702 ("" (SKEEP) (("" (EXPAND "entry") (("" (EXPAND "row") (("" (EXPAND "access") (("" (LIFT-IF) (("" (TYPEPRED "columns(M)") (("" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|entry| CONST-DECL "real" |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|row| CONST-DECL "Vector" |matrices| NIL)) SHOSTAK) (|columns_0_entry-1| |nil| 3614083194 ("" (SKEEP) (("" (EXPAND "entry") (("" (EXPAND "row") (("" (EXPAND "access") (("" (LIFT-IF) (("" (TYPEPRED "columns(M)") (("" (GROUND) (("1" (INST - "i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|rows_0_entry| 0 (|rows_0_entry-1| |nil| 3614083501 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL)) SHOSTAK)) (|entry_eq_0| 0 (|entry_eq_0-1| |nil| 3614090600 ("" (SKEEP) (("" (EXPAND "entry") (("" (EXPAND "rows") (("" (EXPAND "row") (("" (EXPAND "access") (("" (LIFT-IF) (("" (ASSERT) (("" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (TYPEPRED "columns(M)") (("3" (INST - "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|entry| CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL)) SHOSTAK)) (|add_TCC1| 0 (|add_TCC1-1| |nil| 3613147199 ("" (SKEEP) (("" (EXPAND "length" + 2) (("" (ASSERT) (("" (EXPAND "max") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|add| SUBTYPE "matrices.v2" "VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))"))) (|add_TCC2| 0 (|add_TCC2-1| |nil| 3613147199 ("" (SKEEP) (("" (EXPAND "length" + 3) (("" (ASSERT) (("" (EXPAND "max") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) NIL (|add| SUBTYPE "matrices.v1" "VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))"))) (|add_TCC3| 0 (|add_TCC3-1| |nil| 3613147199 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)) NIL (|add| SUBTYPE "matrices.v1" "(list_adt[real].cons?)"))) (|add_TCC4| 0 (|add_TCC4-1| |nil| 3613147199 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)) NIL (|add| SUBTYPE "matrices.v2" "(list_adt[real].cons?)"))) (|add_TCC5| 0 (|add_TCC5-1| |nil| 3613147199 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|add| TERMINATION "matrices.add(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2))" "NIL"))) (|add_TCC6| 0 (|add_TCC6-1| |nil| 3613147199 ("" (SKEEP) (("" (EXPAND "length" + 1) (("" (TYPEPRED "v(cdr[real](v1), cdr[real](v2))") (("" (ASSERT) (("" (REPLACES -2) (("" (EXPAND "length" + 3) (("" (EXPAND "length" + 4) (("" (EXPAND "max" +) (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|add| SUBTYPE "list_adt[real].cons((number_fields.+)(list_adt[real].car(matrices.v1), list_adt[real].car(matrices.v2)), matrices.add(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2)))" "VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))"))) (|scal_TCC1| 0 (|scal_TCC1-1| |nil| 3613147199 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL)) NIL (|scal| SUBTYPE "matrices.v2" "(list_adt[real].cons?)"))) (|scal_TCC2| 0 (|scal_TCC2-1| |nil| 3613147199 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|scal| TERMINATION "matrices.scal(matrices.r, list_adt[real].cdr(matrices.v2))" "NIL"))) (|scal_TCC3| 0 (|scal_TCC3-1| |nil| 3613147199 ("" (SKEEP) (("" (TYPEPRED "v(r, cdr[real](v2))") (("" (EXPAND "length" + 1) (("" (EXPAND "length" + 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|scal| SUBTYPE "list_adt[real].cons(number_fields.*(matrices.r, list_adt[real].car(matrices.v2)), matrices.scal(matrices.r, list_adt[real].cdr(matrices.v2)))" "VectorN(list_props[real].length(matrices.v2))"))) (|sub_TCC1| 0 (|sub_TCC1-1| |nil| 3613147199 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL)) NIL (|sub| SUBTYPE "matrices.add(matrices.v1, matrices.scal(-1, matrices.v2))" "VectorN(real_defs.max(list_props[real].length(matrices.v1), list_props[real].length(matrices.v2)))"))) (|super_dot_TCC1| 0 (|super_dot_TCC1-1| |nil| 3621252270 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL)) NIL (|super_dot| SUBTYPE "0" "{rr: reals.real | rr = matrices.dot(matrices.v1, matrices.v2)}"))) (|super_dot_TCC2| 0 (|super_dot_TCC2-1| |nil| 3621252270 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|super_dot| SUBTYPE "matrices.dot(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2))" "{rr: reals.real | rr = matrices.dot(matrices.v1, matrices.v2)}"))) (|super_dot_TCC3| 0 (|super_dot_TCC3-1| |nil| 3621252270 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|super_dot| SUBTYPE "(number_fields.+)(number_fields.*(list_adt[real].car(matrices.v1), list_adt[real].car(matrices.v2)), matrices.dot(list_adt[real].cdr(matrices.v1), list_adt[real].cdr(matrices.v2)))" "{rr: reals.real | rr = matrices.dot(matrices.v1, matrices.v2)}"))) (|super_duper_dot_TCC1| 0 (|super_duper_dot_TCC1-1| |nil| 3621961564 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|super_duper_dot| SUBTYPE "(number_fields.-)(matrices.kz, 1)" "nat"))) (|super_duper_dot_TCC2| 0 (|super_duper_dot_TCC2-1| |nil| 3621961564 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|super_duper_dot| TERMINATION "matrices.super_duper_dot(matrices.FF, matrices.GG, (number_fields.-)(matrices.kz, 1))" "NIL"))) (|access_sum| 0 (|access_sum-1| |nil| 3614958801 ("" (INDUCT "v1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("r" "v")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "+") (("2" (EXPAND "access" +) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "add" +) (("1" (LIFT-IF) (("1" (GROUND) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nth" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "nth" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST - "i-1" "cdr(v2)") (("2" (ASSERT) (("2" (EXPAND "nth" + 2) (("2" (ASSERT) (("2" (EXPAND "access") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "add" +) (("2" (LIFT-IF) (("2" (GROUND) (("2" (EXPAND "nth" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "nth" + 1) (("1" (EXPAND "length" 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST - "i-1" "cdr(v2)") (("2" (EXPAND "access" -) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "add" +) (("3" (LIFT-IF) (("3" (GROUND) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nth" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (INST - "i-1" "cdr(v2)") (("2" (EXPAND "access") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "add(cons(r,v),v2)") (("4" (EXPAND "max") (("4" (LIFT-IF) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("5" (TYPEPRED "add(cons(r,v),v2)") (("5" (EXPAND "max") (("5" (LIFT-IF) (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("6" (TYPEPRED "add(cons(r,v),v2)") (("6" (EXPAND "max") (("6" (GROUND) NIL NIL)) NIL)) NIL) ("7" (TYPEPRED "add(cons(r,v),v2)") (("7" (EXPAND "max") (("7" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add| DEF-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "VectorN(max(length(v1), length(v2)))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|access| CONST-DECL "real" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|access_scal| 0 (|access_scal-1| |nil| 3614962946 ("" (INDUCT "v") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("r" "v")) (("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "scal" +) (("2" (EXPAND "access" +) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "nth" + 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "nth" +) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST - "i!1-1" "r!1") (("2" (EXPAND "access") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (REPLACES -2) (("1" (EXPAND "nth" + 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "scal" 1) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|scal| DEF-DECL "VectorN(length(v2))" |matrices| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "VectorN(length(v2))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|access| CONST-DECL "real" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|vect_scal_1| 0 (|vect_scal_1-1| |nil| 3615126795 ("" (SKEEP) (("" (LEMMA "list_extensionality[real]") (("" (INST?) (("" (ASSERT) (("" (HIDE 2) (("" (SKOSIMP*) (("" (LEMMA "access_scal") (("" (INST - "n!1" "1" "v") (("" (EXPAND "access") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|access_scal| FORMULA-DECL NIL |matrices| NIL) (* CONST-DECL "VectorN(length(v2))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|dot_eq_sigma| 0 (|dot_eq_sigma-3| "" 3750622730 ("" (INDUCT "v1") (("1" (EXPAND "length" 1 1) (("1" (EXPAND "min") (("1" (ASSERT) (("1" (SKEEP) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "dot") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("r" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "dot" +) (("2" (LIFT-IF) (("2" (GROUND) (("1" (CASE "NOT v2 = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (EXPAND "length" + 2) (("2" (EXPAND "min" +) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" + 1) (("2" (ASSERT) (("2" (INST - "cdr(v2)") (("2" (EXPAND "length" + 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (CASE "NOT l = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "dot" 1 1) (("2" (EXPAND "length" 1 1) (("2" (ASSERT) (("2" (EXPAND "min" 1) (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "access" + 1) (("2" (EXPAND "length" 1) (("2" (EXPAND "nth" 1 1) (("2" (EXPAND "access") (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" 1 1) (("2" (HIDE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (HIDE -2) (("5" (GRIND) NIL NIL)) NIL) ("6" (HIDE -1) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" + 2) (("2" (CASE "NOT min(1 + length[real](cdr(l)), length[real](cdr(v2))) = min(length[real](cdr(l)), length(cdr(v2)) - 1) + 1") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (INVOKE (NAME "S" "%1") (! -2 2 2)) (("2" (REPLACE -1) (("2" (REWRITE "sigma_first" +) (("2" (LEMMA "sigma_shift") (("2" (INST - "LAMBDA (k: nat): access(cons(r, l))(k) * access(v2)(k)" "S" "0" "1") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "access" + 3) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "nth" +) (("1" (EXPAND "access" + 3) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" +) (("1" (ASSERT) (("1" (REPLACES -5) (("1" (REWRITE "sigma_eq") (("1" (HIDE 2) (("1" (SKOLEM 1 "nn") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "nth" + 3) (("1" (EXPAND "nth" + 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "length" 2) (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "length" 3) (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "length" -1) (("5" (ASSERT) (("5" (EXPAND "length" 2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_shift| FORMULA-DECL NIL |sigma_nat| |reals|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|access| CONST-DECL "real" |matrices| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK) (|dot_eq_sigma-2| |nil| 3613746369 ("" (INDUCT "v1") (("1" (EXPAND "length" 1 1) (("1" (EXPAND "min") (("1" (ASSERT) (("1" (SKEEP) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "dot") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("r" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "dot" +) (("2" (LIFT-IF) (("2" (GROUND) (("1" (CASE "NOT v2 = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (EXPAND "length" + 2) (("2" (EXPAND "min" +) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" + 1) (("2" (ASSERT) (("2" (INST - "cdr(v2)") (("2" (EXPAND "length" + 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (CASE "NOT l = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "dot" 1 1) (("2" (EXPAND "length" 1 1) (("2" (ASSERT) (("2" (EXPAND "min" 1) (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "access" + 1) (("2" (EXPAND "length" 1) (("2" (EXPAND "nth" 1 1) (("2" (EXPAND "access") (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" + 2) (("2" (CASE "NOT min(1 + length[real](cdr(l)), length[real](cdr(v2))) = min(length[real](cdr(l)), length(cdr(v2)) - 1) + 1") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (INVOKE (NAME "S" "%1") (! -2 2 2)) (("2" (REPLACE -1) (("2" (REWRITE "sigma_first" +) (("2" (LEMMA "sigma_shift") (("2" (INST - "LAMBDA (k: nat): access(cons(r, l))(k) * access(v2)(k)" "S" "0" "1") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "access" + 3) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "nth" +) (("1" (EXPAND "access" + 3) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" +) (("1" (ASSERT) (("1" (REPLACES -5) (("1" (REWRITE "sigma_eq") (("1" (HIDE 2) (("1" (SKOLEM 1 "nn") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "nth" + 3) (("1" (EXPAND "nth" + 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "length" 2) (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "length" 3) (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "length" -1) (("5" (ASSERT) (("5" (EXPAND "length" 2) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (INST + "min(length[real](v1), length[real](v2)) + 5") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|dot_eq_sigma-1| |nil| 3613318241 ("" (INDUCT "v1") (("1" (SKEEP) (("1" (EXPAND "*" + 1) (("1" (EXPAND "dot") (("1" (EXPAND "length" + 1) (("1" (EXPAND "min") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "access" + 1) (("1" (EXPAND "length" + 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("r" "l")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "*" + 1) (("2" (EXPAND "dot") (("2" (LIFT-IF) (("2" (GROUND) (("1" (CASE "NOT v2 = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (EXPAND "length" + 2) (("2" (EXPAND "min" +) (("2" (ASSERT) (("2" (EXPAND "length" + 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "sigma" +) (("2" (EXPAND "sigma" +) (("2" (EXPAND "access" + 2) (("2" (EXPAND "length" + 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "cdr(v2)") (("2" (EXPAND "length" + 1) (("2" (EXPAND "length" + 2) (("2" (CASE "NOT min(1 + length[real](l), 1 + length[real](cdr(v2))) = 1+min(length[real](l), length[real](cdr(v2)))") (("1" (EXPAND "min" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (REWRITE "sigma_first" +) (("2" (LEMMA "sigma_shift") (("2" (INST - "LAMBDA (k: nat): access(cons(r, l))(k) * access(v2)(k)" " min(length[real](l), length[real](cdr(v2)))" "0" "1") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "access" + 3) (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "nth" +) (("1" (EXPAND "access" + 3) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "nth" +) (("1" (ASSERT) (("1" (EXPAND "*" -3 1) (("1" (ASSERT) (("1" (REPLACES -3) (("1" (REWRITE "sigma_eq") (("1" (HIDE 2) (("1" (SKOLEM 1 "nn") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "nth" + 3) (("1" (EXPAND "nth" + 4) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "length" 2) (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "length" 3) (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "length" -1) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "length" -2) (("6" (ASSERT) NIL NIL)) NIL) ("7" (EXPAND "length" -1) (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (INST + "min(length[real](v1), length[real](v2)) + 5") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|dot_zero_right| 0 (|dot_zero_right-1| |nil| 3613381095 ("" (SKEEP) (("" (EXPAND "*") (("" (REWRITE "dot_eq_sigma") (("" (REWRITE "sigma_restrict_eq_0") (("" (HIDE 2) (("" (SKOSIMP*) (("" (EXPAND "access" + 2) (("" (GROUND) (("" (EXPAND "zero") (("" (TYPEPRED "array2list[real](n)(LAMBDA (p: nat): 0)") (("" (INST - "i!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "real" |matrices| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|access| CONST-DECL "real" |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|zero| CONST-DECL "VectorN(n)" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|dot_eq_sigma| FORMULA-DECL NIL |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL)) SHOSTAK)) (|dot_commutes| 0 (|dot_commutes-1| |nil| 3613381325 ("" (INDUCT "v1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("r" "l")) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (EXPAND "*") (("2" (EXPAND "dot" +) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "cdr(v2)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (* CONST-DECL "real" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|dot_zero_left| 0 (|dot_zero_left-1| |nil| 3613381393 ("" (SKEEP) (("" (REWRITE "dot_commutes") (("" (REWRITE "dot_zero_right") NIL NIL)) NIL)) NIL) ((|dot_commutes| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|zero| CONST-DECL "VectorN(n)" |matrices| NIL) (|dot_zero_right| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|length_add_vect| 0 (|length_add_vect-1| |nil| 3615541943 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) ((|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL)) SHOSTAK)) (|length_add_vect_same| 0 (|length_add_vect_same-1| |nil| 3615541963 ("" (SKEEP) (("" (REWRITE "length_add_vect") (("" (GRIND :EXCLUDE "length") NIL NIL)) NIL)) NIL) ((|length_add_vect| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)) SHOSTAK)) (|length_scal_vect| 0 (|length_scal_vect-1| |nil| 3615541978 ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK)) (|form_matrix_TCC1| 0 (|form_matrix_TCC1-1| |nil| 3613150030 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|row| CONST-DECL "Vector" |matrices| NIL)) NIL (|form_matrix| SUBTYPE "matrices.j" "below[length[real](row(M)(i))]"))) (|form_matrix_TCC2| 0 (|form_matrix_TCC2-2| "" 3750622812 ("" (INDUCT "n") (("1" (INST + "null") (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST + "cons(0,x)") (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|x| SKOLEM-CONST-DECL "listn[real](j)" |matrices| NIL) (|j| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK (|form_matrix| EXISTENCE "" "listn[real](matrices.n)")) (|form_matrix_TCC2-1| |nil| 3613150030 ("" (CASE "FORALL (n: nat): EXISTS (x: listn[real](n)): TRUE") (("1" (SKEEP) (("1" (INST - "n") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (INST + "null") NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST + "cons(0,x)") (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|form_matrix| EXISTENCE "" "listn[real](matrices.n)"))) (|form_matrix_TCC3| 0 (|form_matrix_TCC3-2| "" 3750627399 ("" (SKEEP) (("" (INVOKE (CASE "NOT (%1)") (! 1 1 1)) (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (INVOKE (CASE "NOT (%1)") (! 1 1)) (("1" (HIDE 2) (("1" (SKEEP) (("1" (TYPEPRED "array2list[listn[real](n)]
                         (m)
                         (LAMBDA (k: nat):
                            array2list[real](n)(LAMBDA (p: nat): F(k, p)))") (("1" (INST - "i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "array2list[real](n)(LAMBDA (p: nat): 0)") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (EXPAND "row") (("2" (SKEEP) (("2" (TYPEPRED "array2list[listn[real](n)]
                         (m)
                         (LAMBDA (k: nat):
                            array2list[real](n)(LAMBDA (p: nat): F(k, p)))") (("1" (INST - "i") (("1" (ASSERT) (("1" (LEMMA "matrix_listn_nth") (("1" (ASSERT) (("1" (REPLACE -4 :DIR RL) (("1" (TYPEPRED "array2list[real](n)(LAMBDA (p: nat): F(i, p))") (("1" (INST - "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "array2list[real](n)(LAMBDA (p: nat): 0)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (INST 1 "array2list[real](n)(LAMBDA (p: nat): 0)") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (INST 1 "array2list[real](n)(LAMBDA (p: nat): 0)") NIL NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|matrix_listn_nth| FORMULA-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL)) SHOSTAK (|form_matrix| SUBTYPE "array2list[listn[real](matrices.n)].array2list(matrices.m)(LAMBDA (k: naturalnumbers.nat): array2list[real].array2list(matrices.n)(LAMBDA (p: naturalnumbers.nat): matrices.F(k, p)))" "{M: matrices.MatrixMN(matrices.m, matrices.n) | FORALL (i: naturalnumbers.below(matrices.m), j: naturalnumbers.below(matrices.n)): list_props[real].nth(matrices.row(M)(i), j) = matrices.F(i, j)}")) (|form_matrix_TCC3-1| |nil| 3613217047 ("" (SKEEP) (("" (INVOKE (CASE "NOT (%1)") (! 1 1 1)) (("1" (HIDE 2) (("1" (LEMMA "length_matrix_equiv") (("1" (INST - "n" "array2list[listn[real](n)]
                (m)
                (LAMBDA (k: nat):
                   array2list[real](n)(LAMBDA (p: nat): F(k, p)))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INVOKE (CASE "NOT (%1)") (! 1 1)) (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (LEMMA "length_matrix_nth") (("1" (INST - "n" "array2list[listn[real](n)]
                    (m)
                    (LAMBDA (k: nat):
                       array2list[real](n)(LAMBDA (p: nat): F(k, p)))" "i!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (EXPAND "row") (("2" (SKEEP) (("2" (TYPEPRED "array2list[listn[real](n)]
                   (m)
                   (LAMBDA (k: nat):
                      array2list[real](n)(LAMBDA (p: nat): F(k, p)))") (("2" (INST - "i") (("2" (ASSERT) (("2" (LEMMA "matrix_listn_nth") (("2" (INST - "n" "array2list[listn[real](n)]
                   (m)
                   (LAMBDA (k: nat):
                      array2list[real](n)(LAMBDA (p: nat): F(k, p)))" "i" "j") (("2" (ASSERT) (("2" (REPLACE -4 :DIR RL) (("2" (REPLACE -1 :DIR RL) (("2" (TYPEPRED "array2list[real](n)(LAMBDA (p: nat): F(i, p))") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|form_matrix| SUBTYPE "array2list[listn[real](matrices.n)].array2list(matrices.m)(LAMBDA (k: naturalnumbers.nat): array2list[real].array2list(matrices.n)(LAMBDA (p: naturalnumbers.nat): matrices.F(k, p)))" "{M: matrices.MatrixMN(matrices.m, matrices.n) | FORALL (i: naturalnumbers.below(matrices.m), j: naturalnumbers.below(matrices.n)): list_props[real].nth(matrices.row(M)(i), j) = matrices.F(i, j)}"))) (|columns_form_matrix| 0 (|columns_form_matrix-1| |nil| 3613747835 ("" (SKEEP) (("" (INVOKE (NAME "KV" "%1") (! 2 1 1)) (("" (REPLACES -1) (("" (TYPEPRED "KV") (("" (TYPEPRED "columns(KV)") (("" (SPLIT -) (("1" (FLATTEN) (("1" (CASE "NOT m = 0") (("1" (HIDE-ALL-BUT (-1 -5 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "i!1") (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|rows_form_matrix| 0 (|rows_form_matrix-1| |nil| 3613750191 ("" (SKEEP) (("" (EXPAND "rows") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|rows| CONST-DECL "nat" |matrices| NIL)) SHOSTAK)) (|form_matrix_empty| 0 (|form_matrix_empty-1| |nil| 3615045475 ("" (SKOSIMP*) (("" (REPLACE -1) (("" (EXPAND "form_matrix") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL)) SHOSTAK)) (|form_matrix_test1| 0 (|form_matrix_test1-1| |nil| 3613150439 ("" (EVAL-FORMULA) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|full_matrix_eq| 0 (|full_matrix_eq-1| |nil| 3613230474 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "null?(SM1) OR null?(SM2)") (("1" (HIDE (-3 -4)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (COPY 3) (("2" (LABEL "ans" 4) (("2" (HIDE "ans") (("2" (REWRITE "list_extensionality[list[real]]" 1) (("2" (REVEAL "ans") (("2" (COPY -1) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (SKOLEM 2 "i") (("2" (REWRITE "list_extensionality[real]" 2) (("2" (LEMMA "full_matrix_columns") (("2" (INST-CP - "SM1") (("2" (INST - "SM2") (("2" (ASSERT) (("2" (TYPEPRED "SM1") (("2" (ASSERT) (("2" (HIDE -1) (("2" (INST - "i" "0") (("2" (TYPEPRED "SM2") (("2" (ASSERT) (("2" (HIDE -1) (("2" (INST - "i" "0") (("2" (EXPAND "nth" -1 2) (("2" (EXPAND "nth" -2 2) (("2" (ASSERT) (("2" (SKOLEM + "j") (("2" (INST - "i" "j") (("1" (EXPAND "entry") (("1" (EXPAND "access") (("1" (EXPAND "row") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "i") (("2" (EXPAND "rows" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|full_matrix_columns| FORMULA-DECL NIL |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|i| SKOLEM-CONST-DECL "below(length(SM1))" |matrices| NIL) (SM1 SKOLEM-CONST-DECL "FullMatrix" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|)) SHOSTAK)) (|matrix2array| 0 (|matrix2array-2| "" 3750627565 ("" (SKEEP) (("" (CASE "null?(SM)") (("1" (GRIND) NIL NIL) ("2" (REWRITE "full_matrix_eq") (("1" (NAME "FM" "form_matrix(entry(SM), rows(SM), columns(SM))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (CASE "NOT (rows(SM) = rows(FM) AND
                            columns(SM) = columns(FM))") (("1" (HIDE 3) (("1" (SPLIT) (("1" (TYPEPRED "FM") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "FM") (("2" (TYPEPRED "columns(FM)") (("2" (ASSERT) (("2" (CASE "null?(FM)") (("1" (HIDE-ALL-BUT (-1 -5 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -5 "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (TYPEPRED "FM") (("2" (SKEEP) (("2" (INST - "i" "j") (("2" (ASSERT) (("2" (EXPAND "entry") (("2" (EXPAND "row") (("2" (EXPAND "access") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (NAME "FM" "form_matrix(entry(SM), rows(SM), columns(SM))") (("2" (REPLACES -1) (("2" (TYPEPRED "FM") (("2" (INST-CP - "i!1") (("2" (INST - "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK) (|matrix2array-1| |nil| 3613232644 ("" (SKEEP) (("" (CASE "null?(SM)") (("1" (GRIND) NIL NIL) ("2" (REWRITE "full_matrix_eq") (("1" (NAME "FM" "form_matrix(entry(SM), rows(SM), columns(SM))") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (CASE "NOT (rows(SM) = rows(FM) AND
                 columns(SM) = columns(FM))") (("1" (HIDE 3) (("1" (SPLIT) (("1" (TYPEPRED "FM") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "FM") (("2" (TYPEPRED "columns(FM)") (("2" (ASSERT) (("2" (CASE "null?(FM)") (("1" (HIDE-ALL-BUT (-1 -5 2)) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -5 "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (TYPEPRED "FM") (("2" (SKEEP) (("2" (INST - "i" "j") (("2" (ASSERT) (("2" (EXPAND "entry") (("2" (EXPAND "row") (("2" (EXPAND "access") (("2" (ASSERT) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("2" (COPY -5) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (NAME "FM" "form_matrix(entry(SM), rows(SM), columns(SM))") (("2" (REPLACES -1) (("2" (TYPEPRED "FM") (("2" (INST-CP - "i!1") (("2" (INST - "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|entry_form_matrix| 0 (|entry_form_matrix-3| "" 3750627792 ("" (SKEEP) (("" (NAME "FM" "form_matrix(F,m,n)") (("" (REPLACES -1) (("" (TYPEPRED "FM") (("" (EXPAND "entry") (("" (EXPAND "row") (("" (ASSERT) (("" (EXPAND "access") (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (GROUND) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE -4 -6) (("3" (INST?) NIL NIL)) NIL) ("4" (INST -4 "i") (("4" (ASSERT) NIL NIL)) NIL) ("5" (INST -3 "i") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|entry_form_matrix-2| |nil| 3613825301 ("" (SKEEP) (("" (NAME "FM" "form_matrix(F,m,n)") (("" (REPLACES -1) (("" (TYPEPRED "FM") (("" (EXPAND "entry") (("" (EXPAND "row") (("" (ASSERT) (("" (EXPAND "access") (("" (ASSERT) (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (LIFT-IF) (("" (GROUND) (("1" (INST - "i") (("1" (INST - "i" "j") NIL NIL)) NIL) ("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST - "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|entry_form_matrix-1| |nil| 3613290911 ("" (SKEEP) (("" (NAME "FM" "form_matrix(F,m,n)") (("" (REPLACES -1) (("" (TYPEPRED "FM") (("" (EXPAND "entry") (("" (EXPAND "row") (("" (ASSERT) (("" (EXPAND "access") (("" (ASSERT) (("" (INST -3 "i") (("" (ASSERT) (("" (INST - "i" "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|entry_form_matrix2| 0 (|entry_form_matrix2-1| |nil| 3613826303 ("" (SKEEP) (("" (NAME "FM" "form_matrix(F,m,n)") (("" (REPLACES -1) (("" (TYPEPRED "FM") (("" (EXPAND "entry") (("" (EXPAND "row") (("" (ASSERT) (("" (EXPAND "access") (("" (ASSERT) (("" (LIFT-IF) (("" (GROUND) (("1" (INST - "i") (("1" (INST - "i" "j") NIL NIL)) NIL) ("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL)) (|form_matrix_eq| 0 (|form_matrix_eq-1| |nil| 3613924751 ("" (SKEEP) (("" (GROUND) (("1" (SKEEP) (("1" (LEMMA "entry_form_matrix2") (("1" (INST - "F" "i" "j" "m" "n") (("1" (ASSERT) (("1" (LEMMA "entry_form_matrix2") (("1" (INST - "G" "i" "j" "m" "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "f" "form_matrix(F, m, n)") (("2" (REPLACES -1) (("2" (NAME "g" "form_matrix(G, m, n)") (("2" (REPLACES -1) (("2" (REWRITE "full_matrix_eq") (("1" (CASE "NOT rows(f) = rows(g)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (COPY -1) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (CASE "NOT columns(f)=columns(g)") (("1" (HIDE 2) (("1" (EXPAND "f" 1) (("1" (EXPAND "g" 1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) (("1" (SPLIT -) (("1" (TYPEPRED "form_matrix(F,0,n)") (("1" (CASE "NOT form_matrix(F,0,n)=null") (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (TYPEPRED "form_matrix(G,0,n)") (("2" (CASE "NOT form_matrix(G,0,n)=null") (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "columns_form_matrix") (("2" (INST - "m" "n" "G") (("2" (ASSERT) (("2" (REPLACE -1) (("2" (TYPEPRED "form_matrix(F,0,n)") (("2" (CASE "NOT form_matrix(F,0,n)=null") (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "form_matrix(G,0,n)") (("2" (CASE "NOT form_matrix(G,0,n)=null") (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (COPY -3) (("2" (EXPAND "rows" -1) (("2" (SKEEP) (("2" (EXPAND "f" 1) (("2" (EXPAND "g" 1) (("2" (REWRITE "entry_form_matrix2" 1) (("1" (REWRITE "entry_form_matrix2" 1) (("1" (INST - "i" "j") (("1" (ASSERT) (("1" (TYPEPRED "i") (("1" (EXPAND "rows" -1) (("1" (ASSERT) (("1" (TYPEPRED "j") (("1" (EXPAND "f" -1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "rows" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "j") (("3" (EXPAND "f" -1) (("3" (LEMMA "columns_form_matrix") (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "i") (("3" (EXPAND "rows" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "rows" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "j") (("3" (EXPAND "f" -1) (("3" (LEMMA "columns_form_matrix") (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "i") (("3" (EXPAND "rows" -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "g") (("2" (SKEEP) (("2" (INST-CP - "i") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (TYPEPRED "f") (("3" (SKEEP) (("3" (INST-CP - "i") (("3" (INST - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|entry_form_matrix2| FORMULA-DECL NIL |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|f| SKOLEM-CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|g| SKOLEM-CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = G(i, j)}" |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL)) SHOSTAK)) (|matrix_reduce_prop| 0 (|matrix_reduce_prop-1| |nil| 3613998916 ("" (SKEEP) (("" (CASE "m = 0") (("1" (SKEEP) (("1" (CASE "NOT M = null") (("1" (TYPEPRED "M") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST - "LAMBDA (i,j): 0") (("2" (CASE "NOT form_matrix(LAMBDA (i,j):0,m,n)=null") (("1" (REPLACES -2) (("1" (TYPEPRED "form_matrix(LAMBDA (i, j): 0, 0, n)") (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "M = null") (("1" (TYPEPRED "M") (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "matrix2array") (("2" (INST - "M") (("1" (CASE "rows(M) = m and columns(M)=n") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL) ("2" (SPLIT +) (("1" (EXPAND "rows" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "columns(M)") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "M") (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "M") (("2" (INST-CP - "i") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (M SKOLEM-CONST-DECL "MatrixMN(m, n)" |matrices| NIL) (|n| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|m| SKOLEM-CONST-DECL "nat" |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|matrix2array| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|mult_TCC1| 0 (|mult_TCC1-1| |nil| 3613219504 ("" (SKEEP) (("" (SKOSIMP*) (("" (REWRITE "entry_form_matrix") (("" (EXPAND "*") (("" (LIFT-IF) (("" (GROUND) (("1" (REWRITE "dot_eq_sigma") (("1" (REWRITE "sigma_restrict_eq_0") (("1" (SKOSIMP*) (("1" (EXPAND "row" + 1) (("1" (COPY 2) (("1" (EXPAND "rows" 1) (("1" (ASSERT) (("1" (EXPAND "access" 2 1) (("1" (EXPAND "length" 2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "dot_eq_sigma") (("2" (REWRITE "sigma_restrict_eq_0") (("2" (SKOSIMP*) (("2" (REWRITE "col_zero" 1) (("2" (REWRITE "access_zero") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "real" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|dot_eq_sigma| FORMULA-DECL NIL |matrices| NIL) (|col_zero| FORMULA-DECL NIL |matrices| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|access_zero| FORMULA-DECL NIL |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL)) NIL (|mult| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): matrices.dot(matrices.row(matrices.M)(i), matrices.col(matrices.N)(j)), matrices.rows(matrices.M), matrices.columns(matrices.N))" "{A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(matrices.N)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = matrices.*(matrices.row(matrices.M)(matrices.i), matrices.col(matrices.N)(matrices.j))}"))) (|mult_full| 0 (|mult_full-1| |nil| 3613231597 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "M*N") (("" (INST-CP - "i") (("" (INST - "j") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL)) NIL (|mult_full| SUBTYPE "matrices.*(matrices.M, matrices.N)" "FullMatrix"))) (|mult_null_left| 0 (|mult_null_left-1| |nil| 3613291665 ("" (SKEEP) (("" (TYPEPRED "null[list[real]]*M") (("" (EXPAND "rows" -2) (("" (HIDE-ALL-BUT (-2 +)) (("" (GRIND :EXCLUDE "*") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|mult_null_right_TCC1| 0 (|mult_null_right_TCC1-1| NIL 3883680499 ("" (SKEEP) (("" (EXPAND "*" 1) (("" (EXPAND "mult") (("" (EXPAND "col") (("" (EXPAND "columns") (("" (EXPAND "dot") (("" (EXPAND "form_matrix") (("" (EXPAND "array2list") (("" (EXPAND "array2list_it") (("" (LIFT-IF) (("" (ASSERT) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "*") (("2" (EXPAND "mult") (("2" (EXPAND "col") (("2" (EXPAND "columns") (("2" (EXPAND "dot") (("2" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): 0, rows(M), 0)") (("2" (HIDE -1) (("2" (INST-CP -2 "i") (("2" (REPLACE -3) (("2" (INST -2 "j") (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL)) NIL (|mult_null_right| SUBTYPE "matrices.*(matrices.M, list_adt[list[real]].null)" "{x: {A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(list_adt[list[real]].null)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = matrices.*(matrices.row(matrices.M)(matrices.i), matrices.col(list_adt[list[real]].null)(matrices.j))} | booleans.OR(list_adt[list[real]].null?(x), FORALL (i, j: naturalnumbers.below(list_props[list[real]].length(x))): list_props[real].length(list_props[list[real]].nth(x, i)) = list_props[real].length(list_props[list[real]].nth(x, j)))}"))) (|mult_null_right| 0 (|mult_null_right-1| |nil| 3613293057 ("" (SKEEP) (("" (NAME "NN" "M*null[list[real]]") (("" (REPLACE -1) (("" (ASSERT) (("" (SPLASH) (("1" (TYPEPRED "NN") (("1" (SKEEP) (("1" (INST - "i") (("1" (HIDE-ALL-BUT (-3 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "NN") (("2" (EXPAND "rows" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|columns_mult| 0 (|columns_mult-1| |nil| 3613300815 ("" (SKEEP) (("" (ASSERT) (("" (TYPEPRED "columns(M*N)") (("" (TYPEPRED "M*N") (("" (ASSERT) (("" (CASE "null?(M*N)") (("1" (ASSERT) (("1" (CASE "NOT M = null") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "mult_null_left") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|mult_null_left| FORMULA-DECL NIL |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|rows_mult| 0 (|rows_mult-1| |nil| 3613301627 ("" (SKEEP) (("" (EXPAND "rows" + 1) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|rows| CONST-DECL "nat" |matrices| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL)) SHOSTAK)) (|columns_append| 0 (|columns_append-1| |nil| 3613301930 ("" (SKEEP) (("" (TYPEPRED "columns(append(M,N))") (("" (SPLIT -) (("1" (FLATTEN) (("1" (CASE "NOT (M = null and N = null)") (("1" (LEMMA "length_append[list[real]]") (("1" (INST - "M" "N") (("1" (HIDE-ALL-BUT (-1 -2 1)) (("1" (GRIND :EXCLUDE "append") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (HIDE -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (REWRITE "length_append" -1) (("2" (TYPEPRED "columns(M)") (("2" (ASSERT) (("2" (CASE "null?(M)") (("1" (CASE "NOT M = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -1) (("2" (REWRITE "append_null_left") (("2" (EXPAND "columns" + 2) (("2" (EXPAND "max") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null?(N)") (("1" (CASE "N = null") (("1" (REPLACES -1) (("1" (REWRITE "append_null") (("1" (EXPAND "columns" + 3) (("1" (EXPAND "max") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "columns(N)") (("2" (ASSERT) (("2" (SKOLEM - ("jn")) (("2" (SKOLEM - ("jm")) (("2" (CASE "columns(append(M, N)) <= max(columns(M), columns(N))") (("1" (CASE "columns(append(M, N)) >= max(columns(M), columns(N))") (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 4)) (("2" (INST-CP -7 "jm") (("1" (INST-CP -7 "length(M)+jn") (("1" (REWRITE "nth_append" -8) (("1" (REWRITE "nth_append" -9) (("1" (ASSERT) (("1" (EXPAND "max" 1) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (CASE "i!1 < length(M)") (("1" (REWRITE "nth_append") (("1" (ASSERT) (("1" (INST -4 "i!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "i!1-length(M)") (("1" (REWRITE "nth_append") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append_null| FORMULA-DECL NIL |list_props| NIL) (|jn| SKOLEM-CONST-DECL "below(length(N))" |matrices| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (M SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|jm| SKOLEM-CONST-DECL "below(length(M))" |matrices| NIL) (N SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(append(M, N)))" |matrices| NIL) (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)) SHOSTAK)) (|append_mult| 0 (|append_mult-3| "" 3790097151 ("" (SKEEP) (("" (LEMMA "full_matrix_eq") (("" (INST?) (("1" (ASSERT) (("1" (HIDE 3) (("1" (CASE "NOT (rows(append(M, N) * A) = rows(append(M * A, N * A)) AND
                                            columns(append(M, N) * A) = columns(append(M * A, N * A)))") (("1" (HIDE 2) (("1" (SPLIT) (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (REWRITE "length_append") (("1" (REWRITE "length_append") (("1" (TYPEPRED "M*A") (("1" (TYPEPRED "N*A") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (REWRITE "columns_append") (("1" (LEMMA "columns_mult") (("1" (INST-CP - "M" "A") (("1" (ASSERT) (("1" (REPLACES -2) (("1" (INST - "N" "A") (("1" (GROUND) (("1" (GRIND) NIL NIL) ("2" (EXPAND "max") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (GROUND) (("1" (REPLACES -1) (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows" -2) (("1" (REWRITE "length_append") (("1" (EXPAND "*" 1 1) (("1" (EXPAND "mult") (("1" (REWRITE "entry_form_matrix") (("1" (EXPAND "entry" 1) (("1" (EXPAND "row") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (REWRITE "length_append") (("1" (REWRITE "length_append") (("1" (LEMMA "rows_mult") (("1" (INST-CP - "M" "A") (("1" (INST - "N" "A") (("1" (EXPAND "rows") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (LEMMA "rows_mult") (("2" (INST-CP - "M" "A") (("2" (INST - "N" "A") (("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (LEMMA "rows_mult") (("3" (INST-CP - "M" "A") (("3" (INST - "N" "A") (("3" (EXPAND "rows") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "access") (("4" (LIFT-IF) (("4" (ASSERT) (("4" (GROUND) (("1" (REWRITE "nth_append" 1) (("1" (REWRITE "nth_append" 1) (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "M*A") (("1" (HIDE (-1 -2 -3)) (("1" (INST - "i" "j") (("1" (EXPAND "entry" -1) (("1" (EXPAND "row" -1) (("1" (EXPAND "access") (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "N*A") (("2" (HIDE (-1 -2 -3)) (("2" (INST - "i-length(M)" "j") (("2" (EXPAND "entry") (("2" (EXPAND "row" -1) (("2" (EXPAND "access") (("2" (LEMMA "rows_mult") (("2" (EXPAND "rows" -1) (("2" (REWRITE -1) (("2" (ASSERT) (("2" (EXPAND "*") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "rows_mult") (("2" (EXPAND "rows" -1) (("2" (REWRITE -1) (("2" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nth_append" 1) (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "M*A") (("1" (INST - "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "N*A") (("2" (INST - "i-length(M)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "rows_mult") (("2" (EXPAND "rows" -1) (("2" (REWRITE -1) (("2" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (REWRITE "nth_append") (("1" (REWRITE "nth_append") (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (REWRITE -1) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "M*A") (("1" (INST-CP - "i!1") (("1" (INST-CP - "j!1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "M*A") (("2" (INST?) (("2" (TYPEPRED "N*A") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "M*A") (("3" (INST?) (("3" (TYPEPRED "N*A") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "N*A") (("4" (INST-CP - "i!1-length(M)") (("4" (INST-CP - "j!1-length(M)") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REWRITE "nth_append") (("1" (TYPEPRED "M*A") (("1" (INST?) (("1" (TYPEPRED "N*A") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|rows_mult| FORMULA-DECL NIL |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|columns_append| FORMULA-DECL NIL |matrices| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|dot| DEF-DECL "real" |matrices| NIL) (|columns_mult| FORMULA-DECL NIL |matrices| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (|access| CONST-DECL "real" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (M SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (A SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (N SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL)) SHOSTAK) (|append_mult-2| |nil| 3613315727 ("" (SKEEP) (("" (LEMMA "full_matrix_eq") (("" (INST?) (("1" (ASSERT) (("1" (HIDE 3) (("1" (CASE "NOT (rows(append(M, N) * A) = rows(append(M * A, N * A)) AND
                                            columns(append(M, N) * A) = columns(append(M * A, N * A)))") (("1" (HIDE 2) (("1" (SPLIT) (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (REWRITE "length_append") (("1" (REWRITE "length_append") (("1" (TYPEPRED "M*A") (("1" (TYPEPRED "N*A") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (REWRITE "columns_append") (("1" (LEMMA "columns_mult") (("1" (INST-CP - "M" "A") (("1" (ASSERT) (("1" (REPLACES -2) (("1" (INST - "N" "A") (("1" (GROUND) (("1" (GRIND) NIL NIL) ("2" (EXPAND "max") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (GROUND) (("1" (REPLACES -1) (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows" -2) (("1" (REWRITE "length_append") (("1" (EXPAND "*" 1 1) (("1" (EXPAND "mult") (("1" (REWRITE "entry_form_matrix") (("1" (EXPAND "entry" 1) (("1" (EXPAND "row") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (REWRITE "length_append") (("1" (REWRITE "length_append") (("1" (LEMMA "rows_mult") (("1" (INST-CP - "M" "A") (("1" (INST - "N" "A") (("1" (EXPAND "rows") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (LEMMA "rows_mult") (("2" (INST-CP - "M" "A") (("2" (INST - "N" "A") (("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "length_append") (("3" (REWRITE "length_append") (("3" (LEMMA "rows_mult") (("3" (INST-CP - "M" "A") (("3" (INST - "N" "A") (("3" (EXPAND "rows") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "access") (("4" (LIFT-IF) (("4" (ASSERT) (("4" (GROUND) (("1" (REWRITE "nth_append" 1) (("1" (REWRITE "nth_append" 1) (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "M*A") (("1" (HIDE (-1 -2 -3)) (("1" (INST - "i" "j") (("1" (EXPAND "entry" -1) (("1" (EXPAND "row" -1) (("1" (EXPAND "access") (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "N*A") (("2" (HIDE (-1 -2 -3)) (("2" (INST - "i-length(M)" "j") (("2" (EXPAND "entry") (("2" (EXPAND "row" -1) (("2" (EXPAND "access") (("2" (LEMMA "rows_mult") (("2" (EXPAND "rows" -1) (("2" (REWRITE -1) (("2" (ASSERT) (("2" (EXPAND "*") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "rows_mult") (("2" (EXPAND "rows" -1) (("2" (REWRITE -1) (("2" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "nth_append" 1) (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "M*A") (("1" (INST - "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "N*A") (("2" (INST - "i-length(M)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "rows_mult") (("2" (EXPAND "rows" -1) (("2" (REWRITE -1) (("2" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (REWRITE "nth_append") (("1" (REWRITE "nth_append") (("1" (LEMMA "rows_mult") (("1" (EXPAND "rows" -1) (("1" (REWRITE -1) (("1" (REWRITE -1) (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "M*A") (("1" (INST-CP - "i!1") (("1" (INST-CP - "j!1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "M*A") (("2" (INST?) (("2" (TYPEPRED "N*A") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "M*A") (("3" (INST?) (("3" (TYPEPRED "N*A") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "N*A") (("4" (INST-CP - "i!1-length(M)") (("4" (INST-CP - "j!1-length(M)") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (REWRITE "nth_append") (("1" (TYPEPRED "M*A") (("1" (INST?) (("1" (TYPEPRED "N*A") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (REWRITE "length_append") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|append_mult-1| |nil| 3613292381 ("" (INDUCT "N") (("1" (SKEEP) (("1" (REWRITE "append_null") (("1" (REWRITE "mult_null_left") (("1" (REWRITE "append_null") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("v" "N")) (("2" (FLATTEN) (("2" (INDUCT "A") (("1" (SKEEP) (("1" (REWRITE "cons_append") (("1" (REWRITE "append_assoc" :DIR RL) (("1" (ASSERT) (("1" (REWRITE "list_extensionality[list[real]]" 2) (("1" (SPLASH +) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA "mult_null_right") (("1" (INST - "append(append(M, (: v :)), N)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST - "n") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (REWRITE "nth_append" +) (("1" (LIFT-IF) (("1" (GROUND) (("1" (LEMMA "mult_null_right") (("1" (INST - "M") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME "k" "n - length(M * null)") (("2" (REPLACE -1) (("2" (LEMMA "mult_null_right") (("2" (INST - "append((: v :), N)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (INST - "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "append((: v :), N) * null") (("2" (HIDE (-1 -3 -4 -5)) (("2" (REPLACES -1) (("2" (EXPAND "rows" 1) (("2" (TYPEPRED "n") (("2" (TYPEPRED "append(append(M, (: v :)), N) * null") (("2" (HIDE (-1 -3 -4 -5)) (("2" (REPLACES -1) (("2" (EXPAND "rows" -1) (("2" (REWRITE "length_append" -1) (("2" (REWRITE "length_append" -1) (("2" (REWRITE "length_append" 1) (("2" (ASSERT) (("2" (TYPEPRED "M*null") (("2" (HIDE (-1 -3 -4 -5)) (("2" (ASSERT) (("2" (REPLACES -1) (("2" (EXPAND "rows" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "length_append") (("2" (TYPEPRED "append((: v :), N) * null") (("2" (HIDE (-1 -3 -4 -5)) (("2" (REPLACES -1) (("2" (TYPEPRED "append(append(M, (: v :)), N) * null") (("2" (HIDE (-1 -3 -4 -5)) (("2" (REPLACES -1) (("2" (EXPAND "rows") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (REWRITE "length_append") (("2" (ASSERT) (("2" (TYPEPRED "M*null") (("2" (EXPAND "rows" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("l" "AA")) (("2" (FLATTEN) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|matrix_mult_assoc| 0 (|matrix_mult_assoc-5| "" 3790097165 ("" (INDUCT "M") (("1" (SKEEP) (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("v" "M")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (REWRITE "cons_append") (("2" (LEMMA "append_mult") (("2" (INST - "N" "(: v :)" "M") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "append_mult") (("2" (INST - "A" "(: v :) * N" "M*N") (("2" (ASSERT) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "append_mult") (("1" (INST - "N*A" "(: v :)" "M") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST-CP - "A" "N") (("1" (ASSERT) (("1" (CASE "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)") (("1" (INST - "N" "A") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) (("2" (NAME "K" "(: v :)") (("2" (REPLACE -1) (("2" (CASE "NOT length(K) = 1") (("1" (EXPAND "K" 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "full_matrix_eq" 2) (("2" (CASE "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                                                               columns((K * X) * Y) = columns(K * (X * Y)))") (("1" (HIDE 3) (("1" (SPLIT) (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "K*X") (("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACE -7) (("2" (HIDE-ALL-BUT (-2 -5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (COPY -2) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (EXPAND "*" +) (("2" (EXPAND "mult" +) (("2" (REWRITE "entry_form_matrix2") (("1" (REWRITE "entry_form_matrix2") (("1" (CASE "NOT i = 0") (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "row" + 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)),
                                                                                                                                                                                          rows(K), columns(X))") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "row" + 2) (("2" (CASE "NOT rows(K) = 1") (("1" (EXPAND "rows" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (NAME "FKXM" "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)), 1,
                                                                                                                                                                                                                                                  columns(X))") (("2" (REPLACE -1) (("2" (NAME "FXYM" "form_matrix(LAMBDA (i, j: nat): dot(row(X)(i) , col(Y)(j)), rows(X),
                                                                                                                                                                                                                                                columns(Y))") (("2" (REPLACE -1) (("2" (TYPEPRED "FKXM") (("2" (CASE "nth(K,0) = v") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (TYPEPRED "FKXM") (("1" (INST -4 "0" _) (("1" (EXPAND "row" -4 1) (("1" (HIDE (-1 -6)) (("1" (REWRITE "dot_eq_sigma" 2) (("1" (INST-CP - "0") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (TYPEPRED "col(Y)(j)") (("1" (HIDE -1) (("1" (REPLACES -1) (("1" (CASE "NOT (LAMBDA (k: nat):
                                                                                                                                                                                                                                                      access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):dot(row(K)(0) , col(X)(k))*access(col(Y)(j))(k))") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "access" 1 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (INST-CP -6 "0") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (LEMMA "col_zero") (("1" (INST - "X" "x!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "dot_zero_right") (("1" (EXPAND "*" -1) (("1" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "col_zero") (("2" (INST - "X" "x!1") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "dot_zero_right") (("2" (EXPAND "*" -1) (("2" (REWRITE -1) (("2" (ASSERT) (("2" (EXPAND "access" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "NOT row(K)(0) = v") (("1" (EXPAND "row" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "dot_eq_sigma") (("2" (CASE "NOT (LAMBDA (k: nat): dot(v , col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                                                                                                                       LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST - "v" "col(X)(x!1)") (("1" (REPLACES -1) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (TYPEPRED "col(X)(x!1)") (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (REWRITE "sigma_swap") (("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10)) (("2" (TYPEPRED "FXYM") (("2" (HIDE -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (TYPEPRED "col(FXYM)(j)") (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (EXPAND "rows" + 3) (("2" (REPLACE -2) (("2" (REWRITE "sigma_eq") (("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (TYPEPRED "n!1") (("2" (EXPAND "access" + 5) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (LEMMA "col_def") (("1" (INST - "FXYM" "j") (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST - "n!1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -2) (("1" (INST -9 "n!1" "j") (("1" (EXPAND "row" -9) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "col(FXYM)(j)") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (REWRITE "sigma_scal" :DIR RL) (("2" (TYPEPRED "col(Y)(j)") (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (EXPAND "rows" 2) (("2" (INVOKE (NAME "K1" "%1") (! 2 1 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "K2" "%1") (! 2 2 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F1" "%1") (! 2 1 3)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F2" "%1") (! 2 2 3)) (("2" (REPLACE -1) (("2" (HIDE (-1 -2 -3 -4)) (("2" (CASE "NOT K1>=K2") (("1" (EXPAND "K1" 1) (("1" (EXPAND "K2" 1) (("1" (TYPEPRED "columns(X)") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_split") (("2" (INST - "F1" "K1" "0" "K2") (("2" (ASSERT) (("2" (CASE "NOT -1<=K2") (("1" (EXPAND "K2" 1) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (CASE "NOT sigma(1+K2,K1,F1)=0") (("1" (HIDE 3) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "K2") (("1" (EXPAND "min" -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "F1" 2) (("1" (CASE "access(col(X)(i!1))(n!1)=0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "access" 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LEMMA "col_def") (("2" (INST - "X" "i!1") (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (REWRITE "sigma_eq" 2) (("2" (SKOSIMP*) (("2" (EXPAND "F1" 1) (("2" (EXPAND "F2" 1) (("2" (LEMMA "col_def") (("2" (INST - "X" "n!2") (("2" (FLATTEN) (("2" (INST - "n!1") (("2" (ASSERT) (("2" (EXPAND "access" 1 1) (("2" (REPLACES -2) (("2" (ASSERT) (("2" (EXPAND "access" + 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST - "n!1") (("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) (("2" (CASE "NOT K*X = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "rows" -16) (("2" (EXPAND "*" -16) (("2" (EXPAND "mult") (("2" (ASSERT) (("2" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): dot(row(null)(i) , col(Y)(j)),
                                                                                                                                                                                  rows(null), columns(Y))") (("2" (REPLACES -2) (("2" (EXPAND "rows" -19) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (EXPAND "rows" 1) (("2" (REPLACE -4) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND :EXCLUDE "length") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -13 1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rows_mult" -3) (("2" (REWRITE "rows_mult" -3) NIL NIL)) NIL) ("3" (INVOKE (NAME "KV" "%1") (! 1 2 1)) (("3" (REPLACE -1) (("3" (LEMMA "columns_mult") (("3" (INST - "K*X" "Y") (("3" (ASSERT) (("3" (SPLIT -1) (("1" (ASSERT) (("1" (TYPEPRED "KV") (("1" (REPLACE -5) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "K*X") (("2" (HIDE-ALL-BUT (-2 -6 -14)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_form_matrix") NIL NIL)) NIL)) NIL) ("3" (LEMMA "columns_mult") (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "K*X") (("3" (CASE "NOT rows(K)=0") (("1" (EXPAND "rows") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -6 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-14 -1)) (("2" (REPLACE -2 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|append_mult| FORMULA-DECL NIL |matrices| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (K SKOLEM-CONST-DECL "(cons?[list[real]])" |matrices| NIL) (|rows_mult| FORMULA-DECL NIL |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|columns_mult| FORMULA-DECL NIL |matrices| NIL) (|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|dot_eq_sigma| FORMULA-DECL NIL |matrices| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|j| SKOLEM-CONST-DECL "below(columns((K * X) * Y))" |matrices| NIL) (Y SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|sigma_split| FORMULA-DECL NIL |sigma| |reals|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (F2 SKOLEM-CONST-DECL "[nat -> real]" |matrices| NIL) (F1 SKOLEM-CONST-DECL "[nat -> real]" |matrices| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (K1 SKOLEM-CONST-DECL "{k: int | k <= columns(X) - 1 AND k <= length(Y) - 1}" |matrices| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (K2 SKOLEM-CONST-DECL "{k: int | k <= length(nth(X, n!1)) - 1 AND k <= length(Y) - 1}" |matrices| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|col_def| FORMULA-DECL NIL |matrices| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (|sigma_swap| FORMULA-DECL NIL |sigma_swap| |reals|) (|sigma_scal_right| FORMULA-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (X SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|x!1| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|dot_zero_right| FORMULA-DECL NIL |matrices| NIL) (|col_zero| FORMULA-DECL NIL |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|entry_form_matrix2| FORMULA-DECL NIL |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons_append| FORMULA-DECL NIL |more_list_props| |structures|) (|mult_null_left| FORMULA-DECL NIL |matrices| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL)) SHOSTAK) (|matrix_mult_assoc-4| "" 3750628112 ("" (INDUCT "M") (("1" (SKEEP) (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("v" "M")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (REWRITE "cons_append") (("2" (LEMMA "append_mult") (("2" (INST - "N" "(: v :)" "M") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "append_mult") (("2" (INST - "A" "(: v :) * N" "M*N") (("2" (ASSERT) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "append_mult") (("1" (INST - "N*A" "(: v :)" "M") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST-CP - "A" "N") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (CASE "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)") (("1" (INST - "N" "A") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) (("2" (NAME "K" "(: v :)") (("2" (REPLACE -1) (("2" (CASE "NOT length(K) = 1") (("1" (EXPAND "K" 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "full_matrix_eq" 2) (("2" (CASE "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                                                               columns((K * X) * Y) = columns(K * (X * Y)))") (("1" (HIDE 3) (("1" (SPLIT) (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "K*X") (("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACE -7) (("2" (HIDE-ALL-BUT (-2 -5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (COPY -2) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (EXPAND "*" +) (("2" (EXPAND "mult" +) (("2" (REWRITE "entry_form_matrix2") (("1" (REWRITE "entry_form_matrix2") (("1" (CASE "NOT i = 0") (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "row" + 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)),
                                                                                                                                                                                          rows(K), columns(X))") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "row" + 2) (("2" (CASE "NOT rows(K) = 1") (("1" (EXPAND "rows" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (NAME "FKXM" "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)), 1,
                                                                                                                                                                                                                                                  columns(X))") (("2" (REPLACE -1) (("2" (NAME "FXYM" "form_matrix(LAMBDA (i, j: nat): dot(row(X)(i) , col(Y)(j)), rows(X),
                                                                                                                                                                                                                                                columns(Y))") (("2" (REPLACE -1) (("2" (TYPEPRED "FKXM") (("2" (CASE "nth(K,0) = v") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (TYPEPRED "FKXM") (("1" (INST -4 "0" _) (("1" (EXPAND "row" -4 1) (("1" (HIDE (-1 -6)) (("1" (REWRITE "dot_eq_sigma" 2) (("1" (INST-CP - "0") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (TYPEPRED "col(Y)(j)") (("1" (HIDE -1) (("1" (REPLACES -1) (("1" (CASE "NOT (LAMBDA (k: nat):
                                                                                                                                                                                                                                                      access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):dot(row(K)(0) , col(X)(k))*access(col(Y)(j))(k))") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "access" 1 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (INST-CP -6 "0") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (LEMMA "col_zero") (("1" (INST - "X" "x!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "dot_zero_right") (("1" (EXPAND "*" -1) (("1" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "col_zero") (("2" (INST - "X" "x!1") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "dot_zero_right") (("2" (EXPAND "*" -1) (("2" (REWRITE -1) (("2" (ASSERT) (("2" (EXPAND "access" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "NOT row(K)(0) = v") (("1" (EXPAND "row" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "dot_eq_sigma") (("2" (CASE "NOT (LAMBDA (k: nat): dot(v , col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                                                                                                                       LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST - "v" "col(X)(x!1)") (("1" (REPLACES -1) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (TYPEPRED "col(X)(x!1)") (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (REWRITE "sigma_swap") (("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10)) (("2" (TYPEPRED "FXYM") (("2" (HIDE -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (TYPEPRED "col(FXYM)(j)") (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (EXPAND "rows" + 3) (("2" (REPLACE -2) (("2" (REWRITE "sigma_eq") (("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (TYPEPRED "n!1") (("2" (EXPAND "access" + 5) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (LEMMA "col_def") (("1" (INST - "FXYM" "j") (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST - "n!1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -2) (("1" (INST -9 "n!1" "j") (("1" (EXPAND "row" -9) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "col(FXYM)(j)") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (REWRITE "sigma_scal" :DIR RL) (("2" (TYPEPRED "col(Y)(j)") (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (EXPAND "rows" 2) (("2" (INVOKE (NAME "K1" "%1") (! 2 1 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "K2" "%1") (! 2 2 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F1" "%1") (! 2 1 3)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F2" "%1") (! 2 2 3)) (("2" (REPLACE -1) (("2" (HIDE (-1 -2 -3 -4)) (("2" (CASE "NOT K1>=K2") (("1" (EXPAND "K1" 1) (("1" (EXPAND "K2" 1) (("1" (TYPEPRED "columns(X)") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_split") (("2" (INST - "F1" "K1" "0" "K2") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (CASE "NOT -1<=K2") (("1" (EXPAND "K2" 1) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (CASE "NOT sigma(1+K2,K1,F1)=0") (("1" (HIDE 3) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "K2") (("1" (EXPAND "min" -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "F1" 2) (("1" (CASE "access(col(X)(i!1))(n!1)=0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "access" 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LEMMA "col_def") (("2" (INST - "X" "i!1") (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (REWRITE "sigma_eq" 2) (("2" (SKOSIMP*) (("2" (EXPAND "F1" 1) (("2" (EXPAND "F2" 1) (("2" (LEMMA "col_def") (("2" (INST - "X" "n!2") (("2" (FLATTEN) (("2" (INST - "n!1") (("2" (ASSERT) (("2" (EXPAND "access" 1 1) (("2" (REPLACES -2) (("2" (ASSERT) (("2" (EXPAND "access" + 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST - "n!1") (("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) (("2" (CASE "NOT K*X = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "rows" -16) (("2" (EXPAND "*" -16) (("2" (EXPAND "mult") (("2" (ASSERT) (("2" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): dot(row(null)(i) , col(Y)(j)),
                                                                                                                                                                                  rows(null), columns(Y))") (("2" (REPLACES -2) (("2" (EXPAND "rows" -19) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (EXPAND "rows" 1) (("2" (REPLACE -4) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND :EXCLUDE "length") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -13 1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rows_mult" -3) (("2" (REWRITE "rows_mult" -3) NIL NIL)) NIL) ("3" (INVOKE (NAME "KV" "%1") (! 1 2 1)) (("3" (REPLACE -1) (("3" (LEMMA "columns_mult") (("3" (INST - "K*X" "Y") (("3" (ASSERT) (("3" (SPLIT -1) (("1" (ASSERT) (("1" (TYPEPRED "KV") (("1" (REPLACE -5) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "K*X") (("2" (HIDE-ALL-BUT (-2 -6 -14)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_form_matrix") NIL NIL)) NIL)) NIL) ("3" (LEMMA "columns_mult") (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "K*X") (("3" (REPLACES -2) (("3" (CASE "NOT rows(K)=0") (("1" (EXPAND "rows") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -6 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-14 -1)) (("2" (REPLACE -2 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|matrix_mult_assoc-3| |nil| 3613826341 ("" (INDUCT "M") (("1" (SKEEP) (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("v" "M")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (REWRITE "cons_append") (("2" (LEMMA "append_mult") (("2" (INST - "N" "(: v :)" "M") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "append_mult") (("2" (INST - "A" "(: v :) * N" "M*N") (("2" (ASSERT) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "append_mult") (("1" (INST - "N*A" "(: v :)" "M") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST-CP - "A" "N") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (CASE "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)") (("1" (INST - "N" "A") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) (("2" (NAME "K" "(: v :)") (("2" (REPLACE -1) (("2" (CASE "NOT length(K) = 1") (("1" (EXPAND "K" 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REWRITE "full_matrix_eq" 2) (("2" (CASE "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                                                               columns((K * X) * Y) = columns(K * (X * Y)))") (("1" (HIDE 3) (("1" (SPLIT) (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "K*X") (("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACE -7) (("2" (HIDE-ALL-BUT (-2 -5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (COPY -2) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (EXPAND "*" +) (("2" (EXPAND "mult" +) (("2" (REWRITE "entry_form_matrix2") (("1" (REWRITE "entry_form_matrix2") (("1" (CASE "NOT i = 0") (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "row" + 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)),
                                                                                                                                                                                          rows(K), columns(X))") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "row" + 2) (("2" (CASE "NOT rows(K) = 1") (("1" (EXPAND "rows" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (NAME "FKXM" "form_matrix(LAMBDA (i, j: nat): dot(row(K)(i),col(X)(j)), 1,
                                                                                                                                                                                                                                                  columns(X))") (("2" (REPLACE -1) (("2" (NAME "FXYM" "form_matrix(LAMBDA (i, j: nat): dot(row(X)(i) , col(Y)(j)), rows(X),
                                                                                                                                                                                                                                                columns(Y))") (("2" (REPLACE -1) (("2" (TYPEPRED "FKXM") (("2" (CASE "nth(K,0) = v") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (TYPEPRED "FKXM") (("1" (INST -4 "0" _) (("1" (EXPAND "row" -4 1) (("1" (HIDE (-1 -6)) (("1" (REWRITE "dot_eq_sigma" 2) (("1" (INST-CP - "0") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (TYPEPRED "col(Y)(j)") (("1" (HIDE -1) (("1" (REPLACES -1) (("1" (CASE "NOT (LAMBDA (k: nat):
                                                                                                                                                                                                                                                      access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):dot(row(K)(0) , col(X)(k))*access(col(Y)(j))(k))") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "access" 1 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (INST-CP -6 "0") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (LEMMA "col_zero") (("1" (INST - "X" "x!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "dot_zero_right") (("1" (EXPAND "*" -1) (("1" (REWRITE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "col_zero") (("2" (INST - "X" "x!1") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "dot_zero_right") (("2" (EXPAND "*" -1) (("2" (REWRITE -1) (("2" (ASSERT) (("2" (EXPAND "access" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "NOT row(K)(0) = v") (("1" (EXPAND "row" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "dot_eq_sigma") (("2" (CASE "NOT (LAMBDA (k: nat): dot(v , col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                                                                                                                       LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST - "v" "col(X)(x!1)") (("1" (REPLACES -1) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (TYPEPRED "col(X)(x!1)") (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST + "2") (("2" (HIDE-ALL-BUT (1 2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (REWRITE "sigma_swap") (("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10)) (("2" (TYPEPRED "FXYM") (("2" (HIDE -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (TYPEPRED "col(FXYM)(j)") (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (EXPAND "rows" + 3) (("2" (REPLACE -2) (("2" (REWRITE "sigma_eq") (("1" (HIDE 3) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "access" + 5) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "col_def") (("1" (INST - "FXYM" "j") (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST - "n!1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -2) (("1" (INST -9 "n!1" "j") (("1" (EXPAND "row" -9) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "col(FXYM)(j)") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (REWRITE "sigma_scal" :DIR RL) (("2" (TYPEPRED "col(Y)(j)") (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (EXPAND "rows" 2) (("2" (INVOKE (NAME "K1" "%1") (! 2 1 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "K2" "%1") (! 2 2 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F1" "%1") (! 2 1 3)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F2" "%1") (! 2 2 3)) (("2" (REPLACE -1) (("2" (HIDE (-1 -2 -3 -4)) (("2" (CASE "NOT K1>=K2") (("1" (EXPAND "K1" 1) (("1" (EXPAND "K2" 1) (("1" (TYPEPRED "columns(X)") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sigma_split") (("2" (INST - "F1" "K1" "0" "K2") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (CASE "NOT -1<=K2") (("1" (EXPAND "K2" 1) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (CASE "NOT sigma(1+K2,K1,F1)=0") (("1" (HIDE 3) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "K2") (("1" (EXPAND "min" -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "F1" 2) (("1" (CASE "access(col(X)(i!1))(n!1)=0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "access" 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LEMMA "col_def") (("2" (INST - "X" "i!1") (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (REWRITE "sigma_eq" 2) (("2" (SKOSIMP*) (("2" (EXPAND "F1" 1) (("2" (EXPAND "F2" 1) (("2" (LEMMA "col_def") (("2" (INST - "X" "n!2") (("2" (FLATTEN) (("2" (INST - "n!1") (("2" (ASSERT) (("2" (EXPAND "access" 1 1) (("2" (REPLACES -2) (("2" (ASSERT) (("2" (EXPAND "access" + 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST - "n!1") (("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) (("2" (CASE "NOT K*X = null") (("1" (ASSERT) NIL NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "rows" -16) (("2" (EXPAND "*" -16) (("2" (EXPAND "mult") (("2" (ASSERT) (("2" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): dot(row(null)(i) , col(Y)(j)),
                                                                                                                                                                                  rows(null), columns(Y))") (("2" (REPLACES -2) (("2" (EXPAND "rows" -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3) (("2" (EXPAND "rows" 1) (("2" (REPLACE -4) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND :EXCLUDE "length") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST + "2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (INST + "2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -13 1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rows_mult" -3) (("2" (REWRITE "rows_mult" -3) NIL NIL)) NIL) ("3" (INVOKE (NAME "KV" "%1") (! 1 2 1)) (("3" (REPLACE -1) (("3" (LEMMA "columns_mult") (("3" (INST - "K*X" "Y") (("3" (ASSERT) (("3" (SPLIT -1) (("1" (ASSERT) (("1" (TYPEPRED "KV") (("1" (REPLACE -5) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "K*X") (("2" (HIDE-ALL-BUT (-2 -6 -14)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_form_matrix") NIL NIL)) NIL)) NIL) ("3" (LEMMA "columns_mult") (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "K*X") (("3" (REPLACES -2) (("3" (CASE "NOT rows(K)=0") (("1" (EXPAND "rows") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -6 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-14 -1)) (("2" (REPLACE -2 :DIR RL) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|matrix_mult_assoc-2| |nil| 3613750410 ("" (INDUCT "M") (("1" (SKEEP) (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") (("1" (REWRITE "mult_null_left") NIL))))))) ("2" (SKOLEM 1 ("v" "M")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (REWRITE "cons_append") (("2" (LEMMA "append_mult") (("2" (INST - "N" "(: v :)" "M") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "append_mult") (("2" (INST - "A" "(: v :) * N" "M*N") (("2" (ASSERT) (("2" (SPLIT -) (("1" (HIDE-ALL-BUT -1) (("1" (TYPEPRED "(: v :)*N") (("1" (HIDE-ALL-BUT (-2 -6)) (("1" (GRIND) NIL))))))) ("2" (REPLACES -1) (("2" (LEMMA "append_mult") (("2" (INST - "N*A" "(: v :)" "M") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (INST-CP - "A" "N") (("2" (REPLACES -2) (("2" (ASSERT) (("2" (CASE "FORALL (X,Y:Matrix): null?(X) OR LET K = (: v :) IN (K*X)*Y = K*(X*Y)") (("1" (INST - "N" "A") (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (ASSERT) (("2" (NAME "K" "(: v :)") (("2" (REPLACE -1) (("2" (CASE "NOT length(K) = 1") (("1" (EXPAND "K" 1) (("1" (GRIND) NIL))) ("2" (REWRITE "full_matrix_eq" 2) (("2" (CASE "NOT (rows((K * X) * Y) = rows(K * (X * Y)) AND
                                                                                                  columns((K * X) * Y) = columns(K * (X * Y)))") (("1" (HIDE 3) (("1" (SPLIT) (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") NIL))))))) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (SPLIT -) (("1" (TYPEPRED "K*X") (("1" (EXPAND "rows") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (HIDE-ALL-BUT (-2 -5)) (("1" (GRIND) NIL))))))))))) ("2" (REPLACES -1) (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (COPY -2) (("2" (EXPAND "rows" -1) (("2" (ASSERT) (("2" (EXPAND "*" +) (("2" (EXPAND "mult" +) (("2" (REWRITE "entry_form_matrix") (("1" (REWRITE "entry_form_matrix") (("1" (CASE "NOT i = 0") (("1" (ASSERT) (("1" (REWRITE "rows_mult") (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (ASSERT) NIL))))))))) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "row" + 1) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): row(K)(i) * col(X)(j),
                                                                                                                              rows(K), columns(X))") (("1" (EXPAND "rows") (("1" (ASSERT) NIL))))) ("2" (EXPAND "row" + 2) (("2" (CASE "NOT rows(K) = 1") (("1" (EXPAND "rows" 1) (("1" (PROPAX) NIL))) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (NAME "FKXM" "form_matrix(LAMBDA (i, j: nat): row(K)(i) * col(X)(j), 1,
                                                                                                                                                                 columns(X))") (("2" (REPLACE -1) (("2" (NAME "FXYM" "form_matrix(LAMBDA (i, j: nat): row(X)(i) * col(Y)(j), rows(X),
                                                                                                                                                               columns(Y))") (("2" (REPLACE -1) (("2" (TYPEPRED "FKXM") (("2" (CASE "nth(K,0) = v") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (TYPEPRED "FKXM") (("1" (INST -4 "0" _) (("1" (EXPAND "row" -4 1) (("1" (HIDE (-1 -6)) (("1" (REWRITE "dot_eq_sigma" 2) (("1" (INST-CP - "0") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (TYPEPRED "col(Y)(j)") (("1" (HIDE -1) (("1" (REPLACES -1) (("1" (CASE "NOT (LAMBDA (k: nat):
                                                                                                                                                               access(nth(FKXM, 0))(k) * access(col(Y)(j))(k))=(LAMBDA (k:nat):(row(K)(0) * col(X)(k))*access(col(Y)(j))(k))") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "access" 1 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (INST-CP -6 "0") (("1" (REPLACE -7) (("1" (ASSERT) (("1" (LEMMA "col_zero") (("1" (INST - "X" "x!1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "dot_zero_right") NIL))))))))))))))))))))))))) ("2" (ASSERT) (("2" (LEMMA "col_zero") (("2" (INST - "X" "x!1") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (REWRITE "dot_zero_right") (("2" (ASSERT) (("2" (EXPAND "access" + 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (INST - "0") NIL))))))))))))))))))))))))))) ("2" (REPLACES -1) (("2" (CASE "NOT row(K)(0) = v") (("1" (EXPAND "row" 1) (("1" (PROPAX) NIL))) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "dot_eq_sigma") (("2" (CASE "NOT (LAMBDA (k: nat): (v * col(X)(k)) * access(col(Y)(j))(k)) = (LAMBDA (k: nat): sigma(0, min(length(v)-1, rows(X)-1),
                                                                                                                                                                                    LAMBDA (i: nat): (access(v)(i) * access(col(X)(k))(i))*access(col(Y)(j))(k)))") (("1" (DECOMPOSE-EQUALITY 1) (("1" (INST - "v" "col(X)(x!1)") (("1" (REPLACES -1) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (TYPEPRED "col(X)(x!1)") (("1" (REPLACE -2) (("1" (PROPAX) NIL))))))))))) ("2" (FLATTEN) (("2" (INST + "2") (("2" (HIDE-ALL-BUT (1 2)) (("2" (ASSERT) NIL))))))))) ("2" (REPLACES -1) (("2" (REWRITE "sigma_swap") (("2" (HIDE (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10)) (("2" (TYPEPRED "FXYM") (("2" (HIDE -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (TYPEPRED "col(FXYM)(j)") (("2" (HIDE -1) (("2" (REPLACE -1) (("2" (EXPAND "rows" + 3) (("2" (REPLACE -2) (("2" (REWRITE "sigma_eq") (("1" (HIDE 3) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (EXPAND "access" + 5) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "col_def") (("1" (INST - "FXYM" "j") (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST - "n!1") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (REPLACES -2) (("1" (INST -9 "n!1" "j") (("1" (EXPAND "row" -9) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "col(FXYM)(j)") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "rows") (("1" (ASSERT) NIL))))))))) ("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (REWRITE "dot_eq_sigma" 2) (("2" (REWRITE "sigma_scal" :DIR RL) (("2" (TYPEPRED "col(Y)(j)") (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (EXPAND "rows" 2) (("2" (INVOKE (NAME "K1" "%1") (! 2 1 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "K2" "%1") (! 2 2 2)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F1" "%1") (! 2 1 3)) (("2" (REPLACE -1) (("2" (INVOKE (NAME "F2" "%1") (! 2 2 3)) (("2" (REPLACE -1) (("2" (HIDE (-1 -2 -3 -4)) (("2" (CASE "NOT K1>=K2") (("1" (EXPAND "K1" 1) (("1" (EXPAND "K2" 1) (("1" (TYPEPRED "columns(X)") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) NIL))))))))))))))))))) ("2" (LEMMA "sigma_split") (("2" (INST - "F1" "K1" "0" "K2") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (CASE "NOT -1<=K2") (("1" (EXPAND "K2" 1) (("1" (EXPAND "min") (("1" (LIFT-IF) (("1" (GROUND) NIL))))))) ("2" (ASSERT) (("2" (HIDE -1) (("2" (REPLACES -1) (("2" (CASE "NOT sigma(1+K2,K1,F1)=0") (("1" (HIDE 3) (("1" (REWRITE "sigma_restrict_eq_0") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "K2") (("1" (EXPAND "min" -1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "F1" 2) (("1" (CASE "access(col(X)(i!1))(n!1)=0") (("1" (ASSERT) NIL) ("2" (EXPAND "access" 1) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LEMMA "col_def") (("2" (INST - "X" "i!1") (("2" (FLATTEN) (("2" (REPLACES -1) (("2" (INST - "n!1") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (REWRITE "sigma_eq" 2) (("2" (SKOSIMP*) (("2" (EXPAND "F1" 1) (("2" (EXPAND "F2" 1) (("2" (LEMMA "col_def") (("2" (INST - "X" "n!2") (("2" (FLATTEN) (("2" (INST - "n!1") (("2" (ASSERT) (("2" (EXPAND "access" 1 1) (("2" (REPLACES -2) (("2" (ASSERT) (("2" (EXPAND "access" + 4) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (INST - "n!1") (("2" (ASSERT) NIL))))))) ("2" (INST - "n!1") (("2" (ASSERT) (("2" (TYPEPRED "j") (("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) (("2" (CASE "NOT K*X = null") (("1" (ASSERT) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (EXPAND "rows" -16) (("2" (EXPAND "*" -16) (("2" (EXPAND "mult") (("2" (ASSERT) (("2" (TYPEPRED "form_matrix(LAMBDA (i, j: nat): row(null)(i) * col(Y)(j),
                                                                rows(null), columns(Y))") (("2" (REPLACES -2) (("2" (EXPAND "rows" -19) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (REPLACE -3) (("2" (EXPAND "rows" 1) (("2" (REPLACE -4) (("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND :EXCLUDE "length") NIL))))))))))))))))))))))) ("2" (FLATTEN) (("2" (INST + "2") (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("3" (FLATTEN) (("3" (INST + "2") (("3" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))) ("2" (REPLACE -13 1 :DIR RL) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))) ("2" (REWRITE "rows_mult" -3) (("2" (REWRITE "rows_mult" -3) NIL))) ("3" (INVOKE (NAME "KV" "%1") (! 1 2 1)) (("3" (REPLACE -1) (("3" (LEMMA "columns_mult") (("3" (INST - "K*X" "Y") (("3" (ASSERT) (("3" (SPLIT -1) (("1" (TYPEPRED "K*X") (("1" (HIDE-ALL-BUT (-2 -6 -14)) (("1" (GRIND) NIL))))) ("2" (ASSERT) (("2" (TYPEPRED "KV") (("2" (REPLACE -5) (("2" (LEMMA "columns_form_matrix") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 2)) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_mult") (("2" (REWRITE "rows_form_matrix") NIL))))) ("3" (LEMMA "columns_mult") (("3" (INST?) (("3" (ASSERT) (("3" (TYPEPRED "K*X") (("3" (REPLACES -2) (("3" (CASE "NOT rows(K)=0") (("1" (EXPAND "rows") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 -6 1)) (("1" (GRIND) NIL))))))) ("2" (HIDE-ALL-BUT (-14 -1)) (("2" (REPLACE -2 :DIR RL) (("2" (GRIND) NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) NIL) NIL NIL) (|matrix_mult_assoc-1| |nil| 3613225605 ("" (SKEEP) (("" (REWRITE "full_matrix_eq") (("" (CASE "NOT (rows((M * N) * A) = rows(M * (N * A)) AND
               columns((M * N) * A) = columns(M * (N * A)))") (("1" (HIDE 2) (("1" (SPLIT) (("1" (ASSERT) (("1" (TYPEPRED "(M*N)*A") (("1" (EXPAND "rows" +) (("1" (ASSERT) (("1" (REPLACES -2) (("1" (HIDE -) (("1" (TYPEPRED "M*(N*A)") (("1" (REPLACES -2) (("1" (HIDE -) (("1" (EXPAND "rows" + 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST-CP - "M*N" "A") (("2" (ASSERT) (("2" (CASE "null?(M*N)") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|entry_mult| 0 (|entry_mult-1| |nil| 3615029027 ("" (SKEEP) (("" (EXPAND "*" +) (("" (EXPAND "mult") (("" (REWRITE "entry_form_matrix") NIL NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "real" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL)) SHOSTAK)) (|form_matrix_mult| 0 (|form_matrix_mult-2| "" 3750628167 ("" (SKEEP) (("" (INVOKE (NAME "f" "%1") (! 1 1 1)) (("" (REPLACES -1) (("" (INVOKE (NAME "g" "%1") (! 1 1 2)) (("" (REPLACES -1) (("" (INVOKE (NAME "h" "%1") (! 1 2)) (("" (REPLACES -1) (("" (CASE "f = null") (("1" (REPLACE -1) (("1" (REWRITE "mult_null_left") (("1" (CASE "length(h)=0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "h") (("2" (TYPEPRED "f") (("2" (REPLACE -9) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "g = null") (("1" (TYPEPRED "g") (("1" (REPLACE -5) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "h = null") (("1" (TYPEPRED "h") (("1" (REPLACE -5) (("1" (EXPAND "length" -2) (("1" (TYPEPRED "f") (("1" (EXPAND "length" -2) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "full_matrix_eq" 4) (("1" (CASE "NOT rows(f*g)=rows(h)") (("1" (HIDE 5) (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT columns(f*g)=columns(h)") (("1" (REWRITE "columns_mult") (("1" (TYPEPRED "g") (("1" (EXPAND "g" 1) (("1" (EXPAND "h" 1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (TYPEPRED "f*g") (("2" (INST - "i" "j") (("2" (HIDE (-1 -2 -3 -5)) (("2" (REPLACES -1) (("2" (EXPAND "*" +) (("2" (REWRITE "dot_eq_sigma") (("2" (CASE "NOT columns(f*g)=n") (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "g" 1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT rows(f*g) = k") (("1" (EXPAND "rows" 1) (("1" (ASSERT) (("1" (TYPEPRED "f*g") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h") (("2" (INST - "i" "j") (("1" (HIDE -1) (("1" (EXPAND "row" -3) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "entry" +) (("1" (EXPAND "row" +) (("1" (EXPAND "access" + 3) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACES -4) (("1" (CASE "NOT length(nth(f, i)) = m") (("1" (TYPEPRED "f") (("1" (INST - "i") NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (CASE "NOT length(col(g)(j))=m") (("1" (HIDE 2) (("1" (LEMMA "col_def") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "rows" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "min" 1 1) (("2" (REWRITE "sigma_eq") (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "col_def") (("2" (INST?) (("2" (FLATTEN) (("2" (EXPAND "access" 1 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST - "n!1") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "access" 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "f") (("1" (INST - "i" "n!1") (("1" (TYPEPRED "g") (("1" (INST - "n!1" "j") (("1" (ASSERT) (("1" (EXPAND "row") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACE -3) (("2" (TYPEPRED "f") (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "g") (("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h") (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "h") (("2" (INST-CP - "i") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|mult_null_left| FORMULA-DECL NIL |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rows_mult| FORMULA-DECL NIL |matrices| NIL) (|h| SKOLEM-CONST-DECL "{M: MatrixMN(k, n) |
   FORALL (i_1: below(k), j_1: below(n)):
     nth(row(M)(i_1), j_1) =
      sigma(0, m - 1, LAMBDA (d: nat): F(i_1, d) * G(d, j_1))}" |matrices| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|g| SKOLEM-CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = G(i, j)}" |matrices| NIL) (|columns_mult| FORMULA-DECL NIL |matrices| NIL) (|dot_eq_sigma| FORMULA-DECL NIL |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|i| SKOLEM-CONST-DECL "below(rows(f * g))" |matrices| NIL) (G SKOLEM-CONST-DECL "[[nat, nat] -> real]" |matrices| NIL) (|n| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|f| SKOLEM-CONST-DECL "{M: MatrixMN(k, m) |
   FORALL (i: below(k), j: below(m)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (F SKOLEM-CONST-DECL "[[nat, nat] -> real]" |matrices| NIL) (|m| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|k| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|j| SKOLEM-CONST-DECL "below(columns(f * g))" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|col_def| FORMULA-DECL NIL |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|form_matrix_mult-1| |nil| 3613922357 ("" (SKEEP) (("" (INVOKE (NAME "f" "%1") (! 1 1 1)) (("" (REPLACES -1) (("" (INVOKE (NAME "g" "%1") (! 1 1 2)) (("" (REPLACES -1) (("" (INVOKE (NAME "h" "%1") (! 1 2)) (("1" (REPLACES -1) (("1" (CASE "f = null") (("1" (REPLACE -1) (("1" (REWRITE "mult_null_left") (("1" (CASE "length(h)=0") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (TYPEPRED "h") (("2" (TYPEPRED "f") (("2" (REPLACE -9) (("2" (REWRITE "length_null") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "g = null") (("1" (TYPEPRED "g") (("1" (REPLACE -5) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "h = null") (("1" (TYPEPRED "h") (("1" (REPLACE -5) (("1" (EXPAND "length" -2) (("1" (TYPEPRED "f") (("1" (EXPAND "length" -2) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "full_matrix_eq" 4) (("1" (CASE "NOT rows(f*g)=rows(h)") (("1" (HIDE 5) (("1" (REWRITE "rows_mult") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT columns(f*g)=columns(h)") (("1" (REWRITE "columns_mult") (("1" (TYPEPRED "g") (("1" (EXPAND "g" 1) (("1" (EXPAND "h" 1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (TYPEPRED "f*g") (("2" (INST - "i" "j") (("2" (HIDE (-1 -2 -3 -5)) (("2" (REPLACES -1) (("2" (EXPAND "*" +) (("2" (REWRITE "dot_eq_sigma") (("2" (CASE "NOT columns(f*g)=n") (("1" (LEMMA "columns_mult") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "g" 1) (("1" (LEMMA "columns_form_matrix") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "NOT rows(f*g) = k") (("1" (EXPAND "rows" 1) (("1" (ASSERT) (("1" (TYPEPRED "f*g") (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h") (("2" (INST - "i" "j") (("1" (HIDE -1) (("1" (EXPAND "row" -3) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "entry" +) (("1" (EXPAND "row" +) (("1" (EXPAND "access" + 3) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (REPLACES -4) (("1" (CASE "NOT length(nth(f, i)) = m") (("1" (TYPEPRED "f") (("1" (INST - "i") NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (CASE "NOT length(col(g)(j))=m") (("1" (HIDE 2) (("1" (LEMMA "col_def") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "rows" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "min" 1 1) (("2" (REWRITE "sigma_eq") (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "col_def") (("2" (INST?) (("2" (FLATTEN) (("2" (EXPAND "access" 1 2) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST - "n!1") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "access" 1) (("1" (LIFT-IF) (("1" (GROUND) (("1" (TYPEPRED "f") (("1" (INST - "i" "n!1") (("1" (TYPEPRED "g") (("1" (INST - "n!1" "j") (("1" (ASSERT) (("1" (EXPAND "row") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) (("2" (REPLACE -3) (("2" (TYPEPRED "f") (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "g") (("2" (INST - "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "h") (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "h") (("2" (INST-CP - "i") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST + "m+10") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|add_TCC7| 0 (|add_TCC7-2| "" 3750628486 ("" (SKEEP) (("" (SKOLEM 1 ("ii" "jj")) (("" (INVOKE (NAME "FM" "%1") (! 1 1 0 1)) (("" (TYPEPRED "FM") (("" (CASE "ii < max(rows(M),rows(N))") (("1" (CASE "jj < max(columns(M), columns(N))") (("1" (REPLACE -7) (("1" (INST -6 "ii" "jj") (("1" (REPLACE -6 :DIR RL) (("1" (EXPAND "entry" +) (("1" (EXPAND "row" +) (("1" (EXPAND "access" +) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST - "ii") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (EXPAND "FM" +) (("2" (REWRITE "entry_form_matrix") (("2" (ASSERT) (("2" (EXPAND "entry" 2) (("2" (EXPAND "row" 2) (("2" (EXPAND "access" 2) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (TYPEPRED "columns(N)") (("4" (INST - "ii") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (TYPEPRED "columns(M)") (("6" (INST - "ii") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (TYPEPRED "columns(M)") (("7" (INST - "ii") (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (TYPEPRED "columns(M)") (("8" (INST - "ii") (("8" (ASSERT) NIL NIL)) NIL)) NIL) ("9" (GRIND) NIL NIL) ("10" (TYPEPRED "columns(N)") (("10" (INST - "ii") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "entry_form_matrix") (("2" (ASSERT) (("2" (EXPAND "entry" 2) (("2" (EXPAND "row" 2) (("2" (EXPAND "access" 2) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (N SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (M SKOLEM-CONST-DECL "Matrix" |matrices| NIL) (|ii| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|jj| SKOLEM-CONST-DECL "nat" |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (FM SKOLEM-CONST-DECL "{M_1: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i_1: below(max(rows(M), rows(N))),
           j_1: below(max(columns(M), columns(N)))):
     nth(row(M_1)(i_1), j_1) = entry(M)(i_1, j_1) + entry(N)(i_1, j_1)}" |matrices| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL)) SHOSTAK (|add| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): (number_fields.+)(matrices.entry(matrices.M)(i, j), matrices.entry(matrices.N)(i, j)), real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N)))" "{A: matrices.MatrixMN(real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N))) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = (number_fields.+)(matrices.entry(matrices.M)(matrices.i, matrices.j), matrices.entry(matrices.N)(matrices.i, matrices.j))}")) (|add_TCC7-1| |nil| 3613752161 ("" (SKEEP) (("" (SKOLEM 1 ("ii" "jj")) (("" (INVOKE (NAME "FM" "%1") (! 1 1 0 1)) (("" (TYPEPRED "FM") (("" (CASE "ii < max(rows(M),rows(N))") (("1" (CASE "jj < max(columns(M), columns(N))") (("1" (REPLACE -7) (("1" (INST -6 "ii" "jj") (("1" (REPLACE -6 :DIR RL) (("1" (EXPAND "entry" +) (("1" (EXPAND "row" +) (("1" (EXPAND "access" +) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST - "ii") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6) (("2" (EXPAND "FM" +) (("2" (REWRITE "entry_form_matrix") (("2" (ASSERT) (("2" (EXPAND "entry" 2) (("2" (EXPAND "row" 2) (("2" (EXPAND "access" 2) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (TYPEPRED "columns(N)") (("1" (INST - "ii") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "columns(M)") (("2" (INST - "ii") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "columns(M)") (("3" (INST - "ii") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (TYPEPRED "columns(M)") (("4" (INST - "ii") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (TYPEPRED "columns(N)") (("5" (INST - "ii") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "entry_form_matrix") (("2" (ASSERT) (("2" (EXPAND "entry" 2) (("2" (EXPAND "row" 2) (("2" (EXPAND "access" 2) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "rows") (("3" (ASSERT) NIL NIL)) NIL) ("4" (EXPAND "rows") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "rows") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|add| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): (number_fields.+)(matrices.entry(matrices.M)(i, j), matrices.entry(matrices.N)(i, j)), real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N)))" "{A: matrices.MatrixMN(real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N))) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = (number_fields.+)(matrices.entry(matrices.M)(matrices.i, matrices.j), matrices.entry(matrices.N)(matrices.i, matrices.j))}"))) (|columns_add| 0 (|columns_add-1| |nil| 3613826965 ("" (SKEEP) (("" (ASSERT) (("" (EXPAND "+") (("" (EXPAND "add") (("" (LEMMA "columns_form_matrix") (("" (INST?) (("" (ASSERT) (("" (INVOKE (NAME "FM" "%1") (! 1 1 1)) (("" (REPLACES -1) (("" (TYPEPRED "FM") (("" (CASE "NOT (M = null and N = null)") (("1" (HIDE-ALL-BUT (-5 1)) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (REPLACE -5) (("2" (CASE "NOT FM = null") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "columns" +) (("2" (EXPAND "max") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|add| CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" |matrices| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (+ CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" |matrices| NIL)) SHOSTAK)) (|rows_add| 0 (|rows_add-1| |nil| 3613827142 ("" (SKEEP) (("" (TYPEPRED "M+N") (("" (EXPAND "rows") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((+ CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" |matrices| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|matrix_add_assoc| 0 (|matrix_add_assoc-1| |nil| 3613826875 ("" (SKEEP) (("" (REWRITE "full_matrix_eq") (("1" (SPLASH +) (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (TYPEPRED "j") (("1" (TYPEPRED "(M+N)+A") (("1" (INST - "i" "j") (("1" (REPLACES -4) (("1" (TYPEPRED "M+N") (("1" (INST - "i" "j") (("1" (REPLACES -4) (("1" (TYPEPRED "M+(N+A)") (("1" (INST - "i" "j") (("1" (REPLACES -4) (("1" (TYPEPRED "N+A") (("1" (INST - "i" "j") (("1" (REPLACES -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "columns_add") (("2" (REWRITE "columns_add") (("2" (REWRITE "columns_add") (("2" (REWRITE "columns_add") (("2" (HIDE -) (("2" (GRIND :EXCLUDE "columns") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "rows_add") (("3" (REWRITE "rows_add") (("3" (REWRITE "rows_add") (("3" (REWRITE "rows_add") (("3" (GRIND :EXCLUDE "rows") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (ASSERT) (("2" (TYPEPRED "M+(N+A)") (("2" (INST-CP - "i") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (TYPEPRED "(M+N)+A") (("3" (SKEEP) (("3" (INST-CP - "i") (("3" (INST-CP - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" |matrices| NIL) (|rows_add| FORMULA-DECL NIL |matrices| NIL) (|columns_add| FORMULA-DECL NIL |matrices| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|matrix_add_comm| 0 (|matrix_add_comm-1| |nil| 3620564502 ("" (SKEEP) (("" (REWRITE "full_matrix_eq") (("1" (SPLASH +) (("1" (SKEEP) (("1" (TYPEPRED "i") (("1" (TYPEPRED "j") (("1" (TYPEPRED "M+N") (("1" (INST -4 "i" "j") (("1" (REPLACE -4) (("1" (TYPEPRED "N+M") (("1" (INST -4 "i" "j") (("1" (REPLACE -4) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "columns_add") (("2" (REWRITE "columns_add") (("2" (GROUND) (("2" (EXPAND "max") (("2" (HIDE -) (("2" (GRIND :EXCLUDE "columns") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REWRITE "rows_add") (("3" (REWRITE "rows_add") (("3" (GRIND :EXCLUDE "rows") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "i") (("2" (TYPEPRED "j") (("2" (ASSERT) (("2" (TYPEPRED "N+M") (("2" (INST-CP - "i") (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (TYPEPRED "M+N") (("3" (SKEEP) (("3" (INST-CP - "i") (("3" (INST-CP - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" |matrices| NIL) (|rows_add| FORMULA-DECL NIL |matrices| NIL) (|columns_add| FORMULA-DECL NIL |matrices| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|scal_TCC4| 0 (|scal_TCC4-2| "" 3750628723 ("" (SKEEP) (("" (SKOSIMP*) (("" (REWRITE "entry_form_matrix") (("" (ASSERT) (("" (LIFT-IF) (("" (GROUND) (("1" (EXPAND "entry") (("1" (EXPAND "rows") (("1" (EXPAND "row") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "entry") (("2" (EXPAND "row") (("2" (EXPAND "access") (("2" (LIFT-IF) (("2" (GROUND) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "columns(M)") (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL)) SHOSTAK (|scal| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): number_fields.*(matrices.r, matrices.entry(matrices.M)(i, j)), matrices.rows(matrices.M), matrices.columns(matrices.M))" "{A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(matrices.M)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = number_fields.*(matrices.r, matrices.entry(matrices.M)(matrices.i, matrices.j))}")) (|scal_TCC4-1| |nil| 3613832279 ("" (SKEEP) (("" (SKOSIMP*) (("" (REWRITE "entry_form_matrix") (("" (ASSERT) (("" (LIFT-IF) (("" (GROUND) (("1" (EXPAND "entry") (("1" (EXPAND "rows") (("1" (EXPAND "row") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "entry") (("2" (EXPAND "row") (("2" (EXPAND "access") (("2" (LIFT-IF) (("2" (GROUND) (("2" (TYPEPRED "columns(M)") (("2" (INST - "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|scal| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): number_fields.*(matrices.r, matrices.entry(matrices.M)(i, j)), matrices.rows(matrices.M), matrices.columns(matrices.M))" "{A: matrices.MatrixMN(matrices.rows(matrices.M), matrices.columns(matrices.M)) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = number_fields.*(matrices.r, matrices.entry(matrices.M)(matrices.i, matrices.j))}"))) (|columns_scal| 0 (|columns_scal-1| |nil| 3613832453 ("" (SKEEP) (("" (EXPAND "*") (("" (EXPAND "scal") (("" (LEMMA "columns_form_matrix") (("" (INST?) (("" (GROUND) (("" (COPY -1) (("" (EXPAND "rows" -1) (("" (REPLACE -2) (("" (ASSERT) (("" (EXPAND "form_matrix") (("" (EXPAND "array2list" + 1) (("" (EXPAND "array2list_it") (("" (CASE "M = null") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|scal| CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL)) SHOSTAK)) (|rows_scal| 0 (|rows_scal-1| |nil| 3613832556 ("" (SKEEP) (("" (EXPAND "*") (("" (EXPAND "scal") (("" (REWRITE "rows_form_matrix") NIL NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|scal| CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL)) SHOSTAK)) (|sub_TCC2| 0 (|sub_TCC2-1| |nil| 3613832702 ("" (SKEEP) (("" (SPLIT) (("1" (LEMMA "rows_add") (("1" (EXPAND "rows" -1 1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (REWRITE "rows_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (LEMMA "columns_add") (("2" (INST - "M" "(-1)*N") (("2" (TYPEPRED "M+(-1)*N") (("2" (INST - "i") (("2" (REPLACE -3) (("2" (REWRITE "columns_scal" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "M+(-1)*N") (("3" (INST - "i" "j") (("3" (REPLACES -4) (("3" (TYPEPRED "(-1)*N") (("3" (INST - "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rows| CONST-DECL "nat" |matrices| NIL) (|rows_scal| FORMULA-DECL NIL |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|rows_add| FORMULA-DECL NIL |matrices| NIL) (|columns_add| FORMULA-DECL NIL |matrices| NIL) (+ CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}" |matrices| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|columns_scal| FORMULA-DECL NIL |matrices| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|sub| SUBTYPE "(matrices.+)(matrices.M, matrices.*((-1), matrices.N))" "{A: matrices.MatrixMN(real_defs.max(matrices.rows(matrices.M), matrices.rows(matrices.N)), real_defs.max(matrices.columns(matrices.M), matrices.columns(matrices.N))) | FORALL (i, j): matrices.entry(A)(matrices.i, matrices.j) = (number_fields.-)(matrices.entry(matrices.M)(matrices.i, matrices.j), matrices.entry(matrices.N)(matrices.i, matrices.j))}"))) (|rows_sub| 0 (|rows_sub-1| |nil| 3613833017 ("" (SKEEP) (("" (EXPAND "-") (("" (EXPAND "sub") (("" (REWRITE "rows_add") (("" (REWRITE "rows_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" |matrices| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|rows_add| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL) (|rows_scal| FORMULA-DECL NIL |matrices| NIL) (|sub| CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|columns_sub| 0 (|columns_sub-1| |nil| 3613833098 ("" (SKEEP) (("" (EXPAND "-") (("" (EXPAND "sub") (("" (REWRITE "columns_add") (("" (REWRITE "columns_scal") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((- CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" |matrices| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|columns_add| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i, j): entry(A)(i, j) = r * entry(M)(i, j)}" |matrices| NIL) (|columns_scal| FORMULA-DECL NIL |matrices| NIL) (|sub| CONST-DECL "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i, j): entry(A)(i, j) = entry(M)(i, j) - entry(N)(i, j)}" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|matrix_sub_test| 0 (|matrix_sub_test-1| |nil| 3613833337 ("" (EVAL-FORMULA) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|Id_TCC1| 0 (|Id_TCC1-1| |nil| 3615032398 ("" (SKEEP) (("" (NAME "IV" "form_matrix(LAMBDA (i, j: nat): IF i = j THEN 1 ELSE 0 ENDIF,
                                                      pm, pm)") (("" (REPLACE -1) (("" (SPLIT) (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (TYPEPRED "IV") (("1" (INST-CP - "i!1") (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "columns_form_matrix") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "rows_form_matrix") (("4" (INST?) (("4" (LEMMA "columns_form_matrix") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "rows") (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKOSIMP*) (("6" (EXPAND "IV" 1) (("6" (REWRITE "entry_form_matrix") (("6" (LIFT-IF) (("6" (LIFT-IF) (("6" (LIFT-IF) (("6" (LIFT-IF) (("6" (ASSERT) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (NAME "P" "LAMBDA (M:Matrix): IV*M=M") (("7" (LEMMA "matrix_reduce_prop") (("7" (SKEEP) (("7" (INST - "pm" "pn" "P") (("7" (SPLIT -) (("1" (INST - "N") (("1" (ASSERT) (("1" (EXPAND "P" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "P") (("2" (EXPAND "IV") (("2" (NAME "H" "LAMBDA (i, j: nat): IF i = j THEN 1 ELSE 0 ENDIF") (("2" (REPLACES -1) (("2" (REWRITE "form_matrix_mult") (("2" (ASSERT) (("2" (REWRITE "form_matrix_eq") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LEMMA "sigma_eq_one_arg") (("2" (INST?) (("2" (INST - "i!1") (("2" (ASSERT) (("2" (SPLIT -) (("1" (EXPAND "H" -1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 4) (("2" (SKOSIMP*) (("2" (EXPAND "H" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 4) (("3" (SKOSIMP*) (("3" (EXPAND "H" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (NAME "P" "LAMBDA (M:Matrix): M*IV=M") (("8" (LEMMA "matrix_reduce_prop") (("8" (SKEEP) (("8" (INST - "pn" "pm" "P") (("8" (SPLIT -1) (("1" (INST - "N") (("1" (EXPAND "P" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "P") (("2" (EXPAND "IV") (("2" (NAME "H" "LAMBDA (i, j: nat): IF i = j THEN 1 ELSE 0 ENDIF") (("2" (REPLACES -1) (("2" (REWRITE "form_matrix_mult") (("2" (ASSERT) (("2" (REWRITE "form_matrix_eq") (("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("2" (LEMMA "sigma_eq_one_arg") (("2" (INST?) (("2" (INST - "j!1") (("2" (ASSERT) (("2" (SPLIT -) (("1" (EXPAND "H" -1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 4) (("2" (SKOSIMP*) (("2" (EXPAND "H" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE 4) (("3" (SKOSIMP*) (("3" (EXPAND "H" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL) (IV SKOLEM-CONST-DECL "{M: MatrixMN(pm, pm) |
   FORALL (i_1: below(pm), j_1: below(pm)):
     nth(row(M)(i_1), j_1) = IF i_1 = j_1 THEN 1 ELSE 0 ENDIF}" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|matrix_reduce_prop| FORMULA-DECL NIL |matrices| NIL) (|form_matrix_mult| FORMULA-DECL NIL |matrices| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|form_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sigma_eq_one_arg| FORMULA-DECL NIL |sigma| |reals|) (H SKOLEM-CONST-DECL "[[nat, nat] -> uint8]" |matrices| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (P SKOLEM-CONST-DECL "[Matrix -> boolean]" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (H SKOLEM-CONST-DECL "[[nat, nat] -> uint8]" |matrices| NIL) (P SKOLEM-CONST-DECL "[Matrix -> boolean]" |matrices| NIL)) NIL (|Id| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): IF i = j THEN 1 ELSE 0 ENDIF, matrices.pm, matrices.pm)" "{M: matrices.SquareMatrix(matrices.pm) | booleans.AND(FORALL (i, j): matrices.entry(M)(matrices.i, matrices.j) = IF booleans.AND(reals.<(matrices.i, matrices.pm), matrices.i = matrices.j) THEN 1 ELSE 0 ENDIF, booleans.AND(FORALL (pn: integers.posnat, N: matrices.MatrixMN(matrices.pm, pn)): matrices.*(M, N) = N, FORALL (pn: integers.posnat, N: matrices.MatrixMN(pn, matrices.pm)): matrices.*(N, M) = N))}"))) (|mult_Id_left| 0 (|mult_Id_left-1| |nil| 3615032862 ("" (SKEEP) (("" (TYPEPRED "Id(pm)") (("" (INST -8 "columns(D1)" "D1") (("" (ASSERT) (("" (SPLIT 1) (("1" (EXPAND "rows") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "D1") (("2" (SPLIT -2) (("1" (EXPAND "rows") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "columns(D1)") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST - "i!2" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Square| TYPE-EQ-DECL NIL |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (D1 SKOLEM-CONST-DECL "PosFullMatrix" |matrices| NIL) (|pm| SKOLEM-CONST-DECL "posnat" |matrices| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|mult_Id_right| 0 (|mult_Id_right-1| |nil| 3615032980 ("" (SKEEP) (("" (TYPEPRED "Id(pm)") (("" (INST -9 "rows(D1)" "D1") (("" (ASSERT) (("" (SPLIT 1) (("1" (EXPAND "rows") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "D1") (("2" (SPLIT -2) (("1" (EXPAND "rows") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "columns(D1)") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST - "i!2" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Square| TYPE-EQ-DECL NIL |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (D1 SKOLEM-CONST-DECL "PosFullMatrix" |matrices| NIL) (|pm| SKOLEM-CONST-DECL "posnat" |matrices| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|rows_Id| 0 (|rows_Id-1| |nil| 3615035586 ("" (SKEEP) (("" (EXPAND "Id") (("" (REWRITE "rows_form_matrix") NIL NIL)) NIL)) NIL) ((|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|columns_Id| 0 (|columns_Id-1| |nil| 3615035599 ("" (SKEEP) (("" (EXPAND "Id") (("" (LEMMA "columns_form_matrix") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|entry_Id| 0 (|entry_Id-1| |nil| 3615047182 ("" (SKEEP) (("" (EXPAND "Id") (("" (REWRITE "entry_form_matrix") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|transpose_TCC1| 0 (|transpose_TCC1-1| |nil| 3614001715 ("" (SKEEP) (("" (NAME "FM" "form_matrix(LAMBDA (i, j: nat): entry(PFM)(j, i),
                            columns(PFM), rows(PFM))") (("" (REPLACES -1) (("" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "FM") (("1" (INST-CP - "i!1") (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "FM") (("2" (REWRITE "rows_form_matrix") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "FM") (("3" (LEMMA "columns_form_matrix") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (FM SKOLEM-CONST-DECL "{M: MatrixMN(columns(PFM), rows(PFM)) |
   FORALL (i_1: below(columns(PFM)), j_1: below(rows(PFM))):
     nth(row(M)(i_1), j_1) = entry(PFM)(j_1, i_1)}" |matrices| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|transpose| SUBTYPE "matrices.form_matrix(LAMBDA (i, j: naturalnumbers.nat): matrices.entry(matrices.PFM)(j, i), matrices.columns(matrices.PFM), matrices.rows(matrices.PFM))" "PosFullMatrix"))) (|rows_transpose| 0 (|rows_transpose-1| |nil| 3614001716 ("" (SKEEP) (("" (EXPAND "transpose") (("" (REWRITE "rows_form_matrix") NIL NIL)) NIL)) NIL) ((|transpose| CONST-DECL "PosFullMatrix" |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|columns_transpose| 0 (|columns_transpose-1| |nil| 3614001728 ("" (SKEEP) (("" (EXPAND "transpose") (("" (LEMMA "columns_form_matrix") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|transpose| CONST-DECL "PosFullMatrix" |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|entry_transpose| 0 (|entry_transpose-2| "" 3750628841 ("" (SKEEP) (("" (EXPAND "transpose") (("" (REWRITE "entry_form_matrix") (("" (LIFT-IF) (("" (GROUND) (("1" (EXPAND "entry") (("1" (EXPAND "row") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "columns(PFM)") (("2" (ASSERT) (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (EXPAND "entry") (("2" (EXPAND "access") (("2" (EXPAND "row") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|transpose| CONST-DECL "PosFullMatrix" |matrices| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK) (|entry_transpose-1| |nil| 3614002234 ("" (SKEEP) (("" (EXPAND "transpose") (("" (REWRITE "entry_form_matrix") (("" (LIFT-IF) (("" (GROUND) (("1" (EXPAND "entry") (("1" (EXPAND "row") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (TYPEPRED "columns(PFM)") (("1" (ASSERT) (("1" (INST - "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (EXPAND "entry") (("2" (EXPAND "access") (("2" (EXPAND "row") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|transpose_transpose| 0 (|transpose_transpose-1| |nil| 3614002174 ("" (SKEEP) (("" (REWRITE "full_matrix_eq") (("" (SPLIT) (("1" (REWRITE "rows_transpose") (("1" (REWRITE "columns_transpose") NIL NIL)) NIL) ("2" (REWRITE "columns_transpose") (("2" (REWRITE "rows_transpose") NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (REWRITE "entry_transpose") (("3" (REWRITE "entry_transpose") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|transpose| CONST-DECL "PosFullMatrix" |matrices| NIL) (|entry_transpose| FORMULA-DECL NIL |matrices| NIL) (|rows_transpose| FORMULA-DECL NIL |matrices| NIL) (|columns_transpose| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK)) (|transpose_mult_TCC1| 0 (|transpose_mult_TCC1-1| |nil| 3614002421 ("" (SKEEP) (("" (SPLIT) (("1" (REWRITE "rows_mult") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "columns_mult") (("2" (INST?) (("2" (ASSERT) (("2" (TYPEPRED "D1") (("2" (EXPAND "rows") (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|rows_mult| FORMULA-DECL NIL |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|columns_mult| FORMULA-DECL NIL |matrices| NIL)) NIL (|transpose_mult| SUBTYPE "matrices.*(matrices.D1, matrices.D2)" "PosFullMatrix"))) (|transpose_mult| 0 (|transpose_mult-2| "" 3750629093 ("" (SKEEP) (("" (EXPAND "transpose") (("" (REPLACE -1) (("" (REWRITE "form_matrix_mult") (("" (LEMMA "columns_mult") (("" (INST?) (("" (ASSERT) (("" (SPLIT -) (("1" (REPLACE -1) (("1" (REWRITE "rows_mult") (("1" (REWRITE "form_matrix_eq") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (EXPAND "*" + 1) (("1" (EXPAND "mult" 1) (("1" (REWRITE "entry_form_matrix") (("1" (REWRITE "dot_eq_sigma" 1) (("1" (REWRITE "length_row") (("1" (REWRITE "length_col") (("1" (REPLACE -2) (("1" (EXPAND "min" 1) (("1" (REWRITE "sigma_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (LEMMA "col_def") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REWRITE -2) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "entry") (("1" (EXPAND "row") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "length" -2) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "length" -3) (("3" (ASSERT) NIL NIL)) NIL) ("4" (TYPEPRED "columns(D1)") (("4" (INST - "j!1") (("4" (ASSERT) (("4" (EXPAND "rows") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "length_row") (("2" (INST - "D2" "n!1") (("2" (ASSERT) (("2" (EXPAND "row" -1) (("2" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA "length_row") (("2" (INST?) (("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n!1") (("2" (REWRITE "length_row" 1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "rows") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "D1") (("2" (EXPAND "rows" -3) (("2" (EXPAND "length" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|transpose| CONST-DECL "PosFullMatrix" |matrices| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|mult_full| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|form_matrix_mult| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|rows_mult| FORMULA-DECL NIL |matrices| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|dot| DEF-DECL "real" |matrices| NIL) (|length_row| FORMULA-DECL NIL |matrices| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (|access| CONST-DECL "real" |matrices| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|col_def| FORMULA-DECL NIL |matrices| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|length_col| FORMULA-DECL NIL |matrices| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|dot_eq_sigma| FORMULA-DECL NIL |matrices| NIL) (|mult| CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|form_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|columns_mult| FORMULA-DECL NIL |matrices| NIL)) SHOSTAK) (|transpose_mult-1| |nil| 3614002422 ("" (SKEEP) (("" (EXPAND "transpose") (("" (REPLACE -1) (("" (REWRITE "form_matrix_mult") (("" (LEMMA "columns_mult") (("" (INST?) (("" (ASSERT) (("" (SPLIT -) (("1" (REPLACE -1) (("1" (REWRITE "rows_mult") (("1" (REWRITE "form_matrix_eq") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (EXPAND "*" + 1) (("1" (EXPAND "mult" 1) (("1" (REWRITE "entry_form_matrix") (("1" (REWRITE "dot_eq_sigma" 1) (("1" (REWRITE "length_row") (("1" (REWRITE "length_col") (("1" (REPLACE -2) (("1" (EXPAND "min" 1) (("1" (REWRITE "sigma_eq") (("1" (HIDE 2) (("1" (SKOSIMP*) (("1" (LEMMA "col_def") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (GROUND) (("1" (REWRITE -2) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "entry") (("1" (EXPAND "row") (("1" (EXPAND "access") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (GROUND) (("1" (TYPEPRED "columns(D1)") (("1" (INST - "j!1") (("1" (ASSERT) (("1" (EXPAND "rows") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "length_row") (("2" (INST - "D2" "n!1") (("2" (ASSERT) (("2" (EXPAND "row" -1) (("2" (ASSERT) (("2" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL) ("2" (LEMMA "length_row") (("2" (INST?) (("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n!1") (("2" (REWRITE "length_row" 1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "rows") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rows") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "D1") (("2" (EXPAND "rows" -3) (("2" (EXPAND "length" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|form_matrix_square| 0 (|form_matrix_square-1| |nil| 3615720732 ("" (SKEEP) (("" (NAME "FM" "form_matrix(F,i,j)") (("" (REPLACE -1) (("" (ASSERT) (("" (TYPEPRED "FM") (("" (SKOSIMP*) (("" (INST-CP - "i!1") (("" (INST - "j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|form_matrix| CONST-DECL "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL (|form_matrix_square| SUBTYPE "matrices.form_matrix(matrices.F, matrices.i, matrices.j)" "FullMatrix"))) (|transpose_Id| 0 (|transpose_Id-1| |nil| 3615827109 ("" (SKEEP) (("" (REWRITE "full_matrix_eq") (("" (SPLIT) (("1" (REWRITE "rows_transpose") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "columns_transpose") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (REWRITE "entry_transpose") (("3" (REWRITE "entry_Id") (("3" (REWRITE "entry_Id") (("3" (LIFT-IF) (("3" (LIFT-IF) (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|full_matrix_eq| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|transpose| CONST-DECL "PosFullMatrix" |matrices| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Square| TYPE-EQ-DECL NIL |matrices| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|SquareMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|MatrixMN| TYPE-EQ-DECL NIL |matrices| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (* CONST-DECL "real" |matrices| NIL) (|row| CONST-DECL "Vector" |matrices| NIL) (|VectorN| TYPE-EQ-DECL NIL |matrices| NIL) (|col| DEF-DECL "VectorN(rows(M))" |matrices| NIL) (* CONST-DECL "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" |matrices| NIL) (|Id| CONST-DECL "{M: SquareMatrix(pm) |
   (FORALL (i, j):
      entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
    AND
    (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
     (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}" |matrices| NIL) (|entry_Id| FORMULA-DECL NIL |matrices| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|entry_transpose| FORMULA-DECL NIL |matrices| NIL) (|columns_transpose| FORMULA-DECL NIL |matrices| NIL) (|rows_transpose| FORMULA-DECL NIL |matrices| NIL)) NIL)) (|vect2matrix_TCC1| 0 (|vect2matrix_TCC1-1| |nil| 3621252845 ("" (SKEEP) (("" (REWRITE "rows_form_matrix") (("" (LEMMA "columns_form_matrix") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|rows_form_matrix| FORMULA-DECL NIL |matrices| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (> CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|form_matrix_square| APPLICATION-JUDGEMENT "FullMatrix" |matrices| NIL) (|columns_form_matrix| FORMULA-DECL NIL |matrices| NIL)) NIL (|vect2matrix| SUBTYPE "matrices.form_matrix(LAMBDA (i, j): IF matrices.i = 0 THEN matrices.access(matrices.v)(matrices.j) ELSE 0 ENDIF, 1, list_props[real].length(matrices.v))" "{PFM | booleans.AND(matrices.rows(matrices.PFM) = 1, matrices.columns(matrices.PFM) = list_props[real].length(matrices.v))}"))) (|vect2matrix_eq| 0 (|vect2matrix_eq-1| |nil| 3621260785 ("" (SKEEP) (("" (LEMMA "list_extensionality[real]") (("" (INST?) (("" (ASSERT) (("" (SKOSIMP*) (("" (BOTH-SIDES-F -3 "entry") (("" (DECOMPOSE-EQUALITY -1) (("" (INST - "(0,n!1)") (("" (EXPAND "vect2matrix") (("" (REWRITE "entry_form_matrix") (("" (REWRITE "entry_form_matrix") (("" (EXPAND "access") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|vect2matrix| CONST-DECL "{PFM | rows(PFM) = 1 AND columns(PFM) = length(v)}" |matrices| NIL) (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" |matrices| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rows| CONST-DECL "nat" |matrices| NIL) (|FullMatrix| TYPE-EQ-DECL NIL |matrices| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|entry| CONST-DECL "real" |matrices| NIL) (|Matrix| TYPE-EQ-DECL NIL |matrices| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|entry_form_matrix| FORMULA-DECL NIL |matrices| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|access| CONST-DECL "real" |matrices| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Vector| TYPE-EQ-DECL NIL |matrices| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)))
