def_symmetric_matrix : THEORY

  BEGIN

 IMPORTING outer_product
 IMPORTING alt_full_matrix
 IMPORTING props_square_matrix
 IMPORTING more_matrix_props

 sym_row_col?(A:Square,i:below(rows(A))): bool =
 (row(A)(i) = col(A)(i))

 sym_row_col_upto?(A:Square,i:below(rows(A))): bool =
 FORALL(j:upto(i)): sym_row_col?(A,j)

 sym_forall?(A:Square): bool =
 sym_row_col_upto?(A,rows(A)-1)
 
 init_sym?(A:Square,i:{ii:below(rows(A))| ii=0 OR sym_row_col_upto?(A,ii-1)}): RECURSIVE {b:bool | b = sym_row_col_upto?(A,rows(A)-1)} =
 IF i = rows(A)-1 THEN sym_row_col?(A,i)
 ELSE sym_row_col?(A,i) AND init_sym?(A,i+1)
 ENDIF
 MEASURE
 rows(A)-i

 sym?(A:Square): {b:bool| b = sym_forall?(A)} = init_sym?(A,0)

 sym_ex: LEMMA
 LET A = (: (: 1 , 2 , 3:),
             (: 2, 4, 5 :),
	     (: 3, 5, 6 :) :),
     B = (: (: 1, 2, 3 :),
            (: 4, 5, 6 :),
	    (: 7, 8, 9 :) :)
 IN
 sym?(A) AND NOT sym?(B)


sym_entry_def_forward: LEMMA
 FORALL(A:Square):
  sym?(A) IMPLIES
  FORALL(i,j:nat):
  entry(A)(i,j) = entry(A)(j,i)

sym_entry_def_backward: LEMMA
 FORALL(A:Square):
  (FORALL(i,j:nat):
  entry(A)(i,j) = entry(A)(j,i))
  IMPLIES
  sym?(A)

sym_entry_def: LEMMA
 FORALL(A:Square):
  (FORALL(i,j:nat):
  entry(A)(i,j) = entry(A)(j,i))
  IFF
  sym?(A)


sym_add: LEMMA
FORALL(A,B:Square):
 ((sym?(A) AND sym?(B)) AND rows(A) = rows(B))
 IMPLIES
 sym?(A+B)

sym_scal: LEMMA
FORALL(A:Square,c:real):
 sym?(A) IMPLIES 
  sym?(c*A)

%sym_scal: LEMMA
%FORALL(A:(sym?),c:real):
%sym?(c*A)





 
  

  END def_symmetric_matrix
