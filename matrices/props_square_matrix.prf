(|props_square_matrix|
 (|tp_sq_TCC1| 0
  (|tp_sq_TCC1-2| "" 3930401201
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (SPLIT 1)
        (("1" (SKEEP)
          (("1" (TYPEPRED "A")
            (("1" (HIDE -1)
              (("1" (ASSERT)
                (("1" (SPLIT -1)
                  (("1" (GRIND) NIL NIL)
                   ("2" (TYPEPRED "columns(A)")
                    (("2" (SPLIT -2)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (SKEEP -1)
                        (("2" (INST-CP -3 "i!1" "i") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "col(A)(i)") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|tp_sq| SUBTYPE "matrices.rows(props_square_matrix.A)"
    "{p: integers.posnat | booleans.AND(matrices.columns(props_square_matrix.A) = p, booleans.AND(matrices.rows(props_square_matrix.A) = p, booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(props_square_matrix.A))): list_props[real].length(list_props[list[real]].nth(props_square_matrix.A, i)) = p, FORALL (i: naturalnumbers.below(list_props[list[real]].length(props_square_matrix.A))): list_props[real].length(matrices.col(props_square_matrix.A)(i)) = p)))}"))
  (|tp_sq_TCC1-0| "" 3928418101
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (SPLIT 1)
        (("1" (SKEEP)
          (("1" (TYPEPRED "A")
            (("1" (HIDE -1)
              (("1" (ASSERT)
                (("1" (SPLIT -1)
                  (("1" (GRIND) NIL NIL)
                   ("2" (TYPEPRED "columns(A)")
                    (("2" (SPLIT -2)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (SKEEP -1)
                        (("2" (INST-CP -3 "i!1" "i") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "col(A)(i)") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK
   (|tp_sq| SUBTYPE "matrices.rows(props_square_matrix.A)"
    "{p: integers.posnat | booleans.AND(matrices.columns(props_square_matrix.A) = p, booleans.AND(matrices.rows(props_square_matrix.A) = p, booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(props_square_matrix.A))): list_props[real].length(list_props[list[real]].nth(props_square_matrix.A, i)) = p, FORALL (i: naturalnumbers.below(list_props[list[real]].length(props_square_matrix.A))): list_props[real].length(matrices.col(props_square_matrix.A)(i)) = p)))}"))
  (|tp_sq_TCC1-1| |nil| 3837198233
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (SPLIT 1)
        (("1" (SKEEP)
          (("1" (TYPEPRED "A")
            (("1" (HIDE -1)
              (("1" (ASSERT)
                (("1" (SPLIT -1)
                  (("1" (GRIND) NIL NIL)
                   ("2" (TYPEPRED "columns(A)")
                    (("2" (SPLIT -2)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (SKEEP -1)
                        (("2" (INST-CP -3 "i!1" "i") (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "col(A)(i)") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|) NIL
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|tp_sq| SUBTYPE "matrices.rows(props_square_matrix.A)"
    "{p: integers.posnat | booleans.AND(matrices.columns(props_square_matrix.A) = p, booleans.AND(matrices.rows(props_square_matrix.A) = p, booleans.AND(FORALL (i: naturalnumbers.below(list_props[list[real]].length(props_square_matrix.A))): list_props[real].length(list_props[list[real]].nth(props_square_matrix.A, i)) = p, FORALL (i: naturalnumbers.below(list_props[list[real]].length(props_square_matrix.A))): list_props[real].length(matrices.col(props_square_matrix.A)(i)) = p)))}")))
 (|square_sum| 1
  (|square_sum-2| "" 3930401198
   ("" (SKEEP)
    (("" (TYPEPRED "A" "B" "tp_sq(A)" "tp_sq(B)")
      (("" (HIDE -1)
        (("" (HIDE -5)
          (("" (ASSERT)
            (("" (TYPEPRED "A+B")
              (("" (HIDE -1)
                (("" (EXPAND "rows")
                  (("" (ASSERT)
                    (("" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (SKEEP)
                          (("1" (INST-CP -2 "i")
                            (("1" (INST -2 "j") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "A+B")
                          (("2" (HIDE -1)
                            (("2" (TYPEPRED "columns(A+B)")
                              (("2" (ASSERT)
                                (("2" (SPLIT -2)
                                  (("1" (EXPAND "length" -6)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "max" -6)
                                        (("1" (LIFT-IF -6)
                                          (("1" (SPLIT -6)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP -1)
                                    (("2" (INST-CP -4 "i")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (REPLACE -1)
                        (("3" (TYPEPRED "columns(A+B)")
                          (("3" (SPLIT -2)
                            (("1" (FLATTEN)
                              (("1" (EXPAND "length" -4)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "max" -4)
                                    (("1" (LIFT-IF -4)
                                      (("1" (SPLIT -4)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (SKEEP -1)
                                (("2" (INST -4 "i") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|square_sum| SUBTYPE
    "(matrices.+)(props_square_matrix.A, props_square_matrix.B)" "Square"))
  (|square_sum-0| "" 3928418073
   ("" (SKEEP)
    (("" (TYPEPRED "A" "B" "tp_sq(A)" "tp_sq(B)")
      (("" (HIDE -1)
        (("" (HIDE -5)
          (("" (ASSERT)
            (("" (TYPEPRED "A+B")
              (("" (HIDE -1)
                (("" (EXPAND "rows")
                  (("" (ASSERT)
                    (("" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (SKEEP)
                          (("1" (INST-CP -2 "i")
                            (("1" (INST -2 "j") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "A+B")
                          (("2" (HIDE -1)
                            (("2" (TYPEPRED "columns(A+B)")
                              (("2" (ASSERT)
                                (("2" (SPLIT -2)
                                  (("1" (EXPAND "length" -6)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "max" -6)
                                        (("1" (LIFT-IF -6)
                                          (("1" (SPLIT -6)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP -1)
                                    (("2" (INST-CP -4 "i")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (REPLACE -1)
                        (("3" (TYPEPRED "columns(A+B)")
                          (("3" (SPLIT -2)
                            (("1" (FLATTEN)
                              (("1" (EXPAND "length" -4)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "max" -4)
                                    (("1" (LIFT-IF -4)
                                      (("1" (SPLIT -4)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (SKEEP -1)
                                (("2" (INST -4 "i") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|tp_sq| CONST-DECL "{p: posnat |
   columns(A) = p AND
    rows(A) = p AND
     (FORALL (i: below(length(A))): length(nth(A, i)) = p) AND
      (FORALL (i: below(length(A))): length(col(A)(i)) = p)}"
     |props_square_matrix| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (+ CONST-DECL
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i: nat, j: nat):
     entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}"
       |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK
   (|square_sum| SUBTYPE
    "(matrices.+)(props_square_matrix.A, props_square_matrix.B)" "Square"))
  (|square_sum-1| |nil| 3837202089
   ("" (SKEEP)
    (("" (TYPEPRED "A" "B" "tp_sq(A)" "tp_sq(B)")
      (("" (HIDE -1)
        (("" (HIDE -5)
          (("" (ASSERT)
            (("" (TYPEPRED "A+B")
              (("" (HIDE -1)
                (("" (EXPAND "rows")
                  (("" (ASSERT)
                    (("" (SPLIT 1)
                      (("1" (FLATTEN)
                        (("1" (SKEEP)
                          (("1" (INST-CP -2 "i")
                            (("1" (INST -2 "j") (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (TYPEPRED "A+B")
                          (("2" (HIDE -1)
                            (("2" (TYPEPRED "columns(A+B)")
                              (("2" (ASSERT)
                                (("2" (SPLIT -2)
                                  (("1" (EXPAND "length" -6)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "max" -6)
                                        (("1" (LIFT-IF -6)
                                          (("1" (SPLIT -6)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKEEP -1)
                                    (("2" (INST-CP -4 "i")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (REPLACE -1)
                        (("3" (TYPEPRED "columns(A+B)")
                          (("3" (SPLIT -2)
                            (("1" (FLATTEN)
                              (("1" (EXPAND "length" -4)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "max" -4)
                                    (("1" (LIFT-IF -4)
                                      (("1" (SPLIT -4)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (SKEEP -1)
                                (("2" (INST -4 "i") (("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|tp_sq| CONST-DECL "{p: posnat |
   columns(A) = p AND
    rows(A) = p AND
     (FORALL (i: below(length(A))): length(nth(A, i)) = p) AND
      (FORALL (i: below(length(A))): length(col(A)(i)) = p)}"
     |props_square_matrix| NIL)
    (|col| DEF-DECL "VectorN(rows(M))" |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (+ CONST-DECL
       "{A: MatrixMN(max(rows(M), rows(N)), max(columns(M), columns(N))) |
   FORALL (i: nat, j: nat):
     entry(A)(i, j) = entry(M)(i, j) + entry(N)(i, j)}"
       |matrices| |matrices|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) NIL
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|square_sum| SUBTYPE
    "(matrices.+)(props_square_matrix.A, props_square_matrix.B)" "Square")))
 (|square_scal| 1
  (|square_scal-2| "" 3930401199
   ("" (SKEEP)
    (("" (TYPEPRED "c*A")
      (("" (HIDE -1)
        (("" (TYPEPRED "A")
          (("" (ASSERT)
            (("" (HIDE -1)
              (("" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (SKEEP)
                    (("1" (INST-CP -6 "i")
                      (("1" (INST -6 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (TYPEPRED "columns(c*A)")
                  (("3" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "rows")
                          (("1" (ASSERT)
                            (("1" (EXPAND "length" -8) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP -1)
                      (("2" (INST -8 "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (EXPAND "rows" -5)
                  (("4" (EXPAND "rows")
                    (("4" (REPLACE -5 1)
                      (("4" (TYPEPRED " columns(c*A)")
                        (("4" (SPLIT -2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "length" -8) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (INST -8 "i") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|square_scal| SUBTYPE
    "matrices.*(props_square_matrix.c, props_square_matrix.A)" "Square"))
  (|square_scal-0| "" 3928418084
   ("" (SKEEP)
    (("" (TYPEPRED "c*A")
      (("" (HIDE -1)
        (("" (TYPEPRED "A")
          (("" (ASSERT)
            (("" (HIDE -1)
              (("" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (SKEEP)
                    (("1" (INST-CP -6 "i")
                      (("1" (INST -6 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (TYPEPRED "columns(c*A)")
                  (("3" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "rows")
                          (("1" (ASSERT)
                            (("1" (EXPAND "length" -8) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP -1)
                      (("2" (INST -8 "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (EXPAND "rows" -5)
                  (("4" (EXPAND "rows")
                    (("4" (REPLACE -5 1)
                      (("4" (TYPEPRED " columns(c*A)")
                        (("4" (SPLIT -2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "length" -8) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (INST -8 "i") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = r * entry(M)(i, j)}"
       |matrices| |matrices|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK
   (|square_scal| SUBTYPE
    "matrices.*(props_square_matrix.c, props_square_matrix.A)" "Square"))
  (|square_scal-1| |nil| 3837202089
   ("" (SKEEP)
    (("" (TYPEPRED "c*A")
      (("" (HIDE -1)
        (("" (TYPEPRED "A")
          (("" (ASSERT)
            (("" (HIDE -1)
              (("" (SPLIT 1)
                (("1" (FLATTEN)
                  (("1" (SKEEP)
                    (("1" (INST-CP -6 "i")
                      (("1" (INST -6 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "rows") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (TYPEPRED "columns(c*A)")
                  (("3" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (EXPAND "rows")
                          (("1" (ASSERT)
                            (("1" (EXPAND "length" -8) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKEEP -1)
                      (("2" (INST -8 "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (EXPAND "rows" -5)
                  (("4" (EXPAND "rows")
                    (("4" (REPLACE -5 1)
                      (("4" (TYPEPRED " columns(c*A)")
                        (("4" (SPLIT -2)
                          (("1" (FLATTEN)
                            (("1" (EXPAND "length" -8) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP)
                            (("2" (INST -8 "i") (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (* CONST-DECL "{A: MatrixMN(rows(M), columns(M)) |
   FORALL (i: nat, j: nat): entry(A)(i, j) = r * entry(M)(i, j)}"
       |matrices| |matrices|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|entry| CONST-DECL "real" |matrices| |matrices|)
    (|MatrixMN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    NIL
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|square_scal| SUBTYPE
    "matrices.*(props_square_matrix.c, props_square_matrix.A)" "Square")))
 (|suare_mult| 1
  (|suare_mult-2| "" 3930401200
   ("" (SKEEP)
    (("" (LEMMA "mult_length")
      (("" (INST?)
        (("" (INST -1 "v" "length(A)")
          (("" (ASSERT)
            (("" (TYPEPRED "v")
              (("" (TYPEPRED "A")
                (("" (EXPAND "rows")
                  (("" (ASSERT) (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|suare_mult| SUBTYPE
    "matrix_vector_multiplication.*(props_square_matrix.A, props_square_matrix.v)"
    "VectorN(list_props[list[real]].length(props_square_matrix.A))"))
  (|suare_mult-0| "" 3928418093
   ("" (SKEEP)
    (("" (LEMMA "mult_length")
      (("" (INST?)
        (("" (INST -1 "v" "length(A)")
          (("" (ASSERT)
            (("" (TYPEPRED "v")
              (("" (TYPEPRED "A")
                (("" (EXPAND "rows")
                  (("" (ASSERT) (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mult_length| FORMULA-DECL NIL |matrix_vector_multiplication|
     |mv_analysis|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (* CONST-DECL "Vector" |matrix_vector_multiplication| |mv_analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|listn_0| NAME-JUDGEMENT "listn[real](0)" |vector_arithmetic|
     |mv_analysis|))
   SHOSTAK
   (|suare_mult| SUBTYPE
    "matrix_vector_multiplication.*(props_square_matrix.A, props_square_matrix.v)"
    "VectorN(list_props[list[real]].length(props_square_matrix.A))"))
  (|suare_mult-1| |nil| 3837206776
   ("" (SKEEP)
    (("" (LEMMA "mult_length")
      (("" (INST?)
        (("" (INST -1 "v" "length(A)")
          (("" (ASSERT)
            (("" (TYPEPRED "v")
              (("" (TYPEPRED "A")
                (("" (EXPAND "rows")
                  (("" (ASSERT) (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mult_length| FORMULA-DECL NIL |matrix_vector_multiplication|
     |mv_analysis|)
    (|Vector| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|VectorN| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (* CONST-DECL "Vector" |matrix_vector_multiplication| |mv_analysis|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Square| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|PosFullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|columns| DEF-DECL "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}"
     |matrices| |matrices|)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rows| CONST-DECL "nat" |matrices| |matrices|)
    (> CONST-DECL "bool" |reals| NIL)
    (|FullMatrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Matrix| TYPE-EQ-DECL NIL |matrices| |matrices|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL)
   NIL
   (|suare_mult| SUBTYPE
    "matrix_vector_multiplication.*(props_square_matrix.A, props_square_matrix.v)"
    "VectorN(list_props[list[real]].length(props_square_matrix.A))"))))

