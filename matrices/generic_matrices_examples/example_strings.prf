(example_strings
 (duplicate_TCC1 0
  (duplicate_TCC1-1 nil 3907431400 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (duplicate subtype "(number_fields.-)(example_strings.n, 1)"
    "nat")))
 (duplicate_TCC2 0
  (duplicate_TCC2-1 nil 3907431400 ("" (termination-tcc) nil nil) nil
   nil
   (duplicate termination
    "example_strings.duplicate((number_fields.-)(example_strings.n, 1), example_strings.s)"
    "nil")))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3907431400
   ("" (expand "is_idempotent?")
    (("" (expand "concat")
      (("" (expand "o ")
        (("" (grind)
          (("" (decompose-equality) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((concat const-decl "string" stdstr nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nth def-decl "T" list_props nil)
    (FALSE const-decl "bool" booleans nil)
    (O const-decl "finseq" finite_sequences nil)
    (is_idempotent? const-decl "bool" algebra_defs nil))
   nil
   (plus subtype
    "LAMBDA (s1, s2: strings.string): stdstr.concat(s1, s2)"
    "{binop: [[string, string] -> string] | algebra_defs[string, string].is_idempotent?(example_strings.binop)(\"\")}")))
 (times_TCC1 0
  (times_TCC1-1 nil 3907431400 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (concat_exception const-decl "string" example_strings nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_idempotent? const-decl "bool" algebra_defs nil))
   nil
   (times subtype "example_strings.concat_exception"
    "{binop: [[string, string] -> string] | algebra_defs[string, string].is_idempotent?(example_strings.binop)(\"\")}")))
 (times_TCC2 0
  (times_TCC2-1 nil 3907432164 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (concat_exception const-decl "string" example_strings nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_absorbing_element? const-decl "bool" algebra_defs nil))
   nil
   (times subtype "example_strings.concat_exception"
    "{binop: [[string, string] -> string] | algebra_defs[string, string].is_absorbing_element?(example_strings.binop)(\"\")}")))
 (times_TCC3 0
  (times_TCC2-1 nil 3907431400
   ("" (expand "is_action_absorbing?")
    (("" (induct "a")
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (expand "duplicate" 1 1)
          (("2" (replaces -1)
            (("2" (assert)
              (("2" (expand "concat")
                (("2" (expand "o")
                  (("2" (decompose-equality)
                    (("1" (grind) nil nil)
                     ("2" (decompose-equality)
                      (("1" (grind) nil nil)
                       ("2" (skeep)
                        (("2" (typepred "n") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep) (("3" (grind) nil nil)) nil)
                     ("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (duplicate def-decl "string" example_strings nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (concat const-decl "string" stdstr nil)
    (TRUE const-decl "bool" booleans nil)
    (is_action_absorbing? const-decl "bool" algebra_defs nil))
   nil
   (times subtype "example_strings.duplicate"
    "{action: [[nat, string] -> string] | algebra_defs[string, nat].is_action_absorbing?(example_strings.action)(\"\")}"))))

