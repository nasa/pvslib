(|example_ffnn|
 (|plus_TCC1| 0
  (|plus_TCC1-1| |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL)
   ((|is_idempotent?| CONST-DECL "bool" |algebra_defs| |generic_matrices|)) NIL
   (|plus| SUBTYPE
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.+)"
    "{binop: [[real, real] -> real] | algebra_defs[real, real].is_idempotent?(example_ffnn.binop)(0)}"
    (16 27 16 28))))
 (|times_TCC1| 0
  (|times_TCC1-1| |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL)
   ((|is_idempotent?| CONST-DECL "bool" |algebra_defs| |generic_matrices|)) NIL
   (|times| SUBTYPE
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)"
    "{binop: [[real, real] -> real] | algebra_defs[real, real].is_idempotent?(example_ffnn.binop)(0)}"
    (22 32 22 33))))
 (|times_TCC2| 0
  (|times_TCC2-1| |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL)
   ((|is_absorbing_element?| CONST-DECL "bool" |algebra_defs|
     |generic_matrices|))
   NIL
   (|times| SUBTYPE
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)"
    "{binop: [[real, real] -> real] | algebra_defs[real, real].is_absorbing_element?(example_ffnn.binop)(0)}"
    (25 32 25 33))))
 (|times_TCC3| 0
  (|times_TCC3-1| |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL)
   ((|is_action_absorbing?| CONST-DECL "bool" |algebra_defs|
     |generic_matrices|))
   NIL
   (|times| SUBTYPE
    "restrict[[numfield, numfield], [real, real], numfield].restrict(number_fields.*)"
    "{action: [[real, real] -> real] | algebra_defs[real, real].is_action_absorbing?(example_ffnn.action)(0)}"
    (28 24 28 25))))
 (W1_TCC1 0
  (W1_TCC1-1 |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (W1 SUBTYPE "(3, 3)"
       "{(i_1: nat, j_1: nat) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(k, i_1), FORALL (j1: naturalnumbers.nat): IF (booleans.AND(reals.<(k, 3), reals.<(j1, 3))) THEN 1 ELSE 0 ENDIF = 0), FORALL (k: nat): booleans.IMPLIES(reals.>=(k, j_1), FORALL (i1: naturalnumbers.nat): IF (booleans.AND(reals.<(i1, 3), reals.<(k, 3))) THEN 1 ELSE 0 ENDIF = 0)))}"
       (45 14 45 19))))
 (|b1_TCC1| 0
  (|b1_TCC1-1| |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|b1| SUBTYPE "(3, 1)"
         "{(i_1: nat, j_1: nat) | booleans.AND((booleans.IFF(i_1 = 0, j_1 = 0)), booleans.AND(FORALL (k: nat): booleans.IMPLIES(reals.>=(k, i_1), FORALL (j1: naturalnumbers.nat): IF (booleans.AND(reals.<(k, 3), j1 = 0)) THEN (number_fields.-)((number_fields.-)(k), 1/2) ELSE 0 ENDIF = 0), FORALL (k: nat): booleans.IMPLIES(reals.>=(k, j_1), FORALL (i1: naturalnumbers.nat): IF (booleans.AND(reals.<(i1, 3), k = 0)) THEN (number_fields.-)((number_fields.-)(i1), 1/2) ELSE 0 ENDIF = 0)))}"
         (50 20 50 25))))
 (|parity_net_works_TCC1| 0
  (|parity_net_works_TCC1-1| |nil| 3907936261 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|parity_net_works| SUBTYPE
    "(number_fields.+)((number_fields.+)(example_ffnn.a, example_ffnn.b), example_ffnn.c)"
    "int" (75 13 75 18))))
 (|parity_net_works| 0
  (|parity_net_works-1| |nil| 3907937269
   ("" (SKEEP)
    (("" (TYPEPRED "a")
      (("" (TYPEPRED "b")
        (("" (TYPEPRED "c")
          (("" (SPLIT)
            (("1" (REPLACES -1)
              (("1" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (SPLIT)
                    (("1" (REPLACES -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "odd?")
                          (("1" (EVAL-EXPR "eval_mat(parity_net(0,0,0))")
                            (("1" (LEMMA "eval_mat_lemma")
                              (("1" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACES -1)
                      (("2" (ASSERT)
                        (("2" (EXPAND "even?")
                          (("2" (EVAL-EXPR "eval_mat(parity_net(1,0,0))")
                            (("2" (LEMMA "eval_mat_lemma")
                              (("2" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (SPLIT)
                    (("1" (REPLACES -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "even?")
                          (("1" (EVAL-EXPR "eval_mat(parity_net(0,1,0))")
                            (("1" (LEMMA "eval_mat_lemma")
                              (("1" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACES -1)
                      (("2" (ASSERT)
                        (("2" (EXPAND "odd?")
                          (("2" (EVAL-EXPR "eval_mat(parity_net(1,1,0))")
                            (("2" (LEMMA "eval_mat_lemma")
                              (("2" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACES -1)
              (("2" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (SPLIT)
                    (("1" (REPLACES -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "even?")
                          (("1" (EVAL-EXPR "eval_mat(parity_net(0,0,1))")
                            (("1" (LEMMA "eval_mat_lemma")
                              (("1" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACES -1)
                      (("2" (ASSERT)
                        (("2" (EXPAND "odd?")
                          (("2" (EVAL-EXPR "eval_mat(parity_net(1,0,1))")
                            (("2" (LEMMA "eval_mat_lemma")
                              (("2" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (SPLIT)
                    (("1" (REPLACES -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "odd?")
                          (("1" (EVAL-EXPR "eval_mat(parity_net(0,1,1))")
                            (("1" (LEMMA "eval_mat_lemma")
                              (("1" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACES -1)
                      (("2" (ASSERT)
                        (("2" (EXPAND "even?")
                          (("2" (EVAL-EXPR "eval_mat(parity_net(1,1,1))")
                            (("2" (LEMMA "eval_mat_lemma")
                              (("2" (INST?)
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|eval_mat_lemma| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|)
    (|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|)
    (|eval_mat| DEF-DECL "{l: list[list[T]] |
   length(l) = height(M) AND
    (FORALL (i: below(length(l))): length(nth(l, i)) = width(M)) AND
     (FORALL (i: below(length(l)), j: below(length(nth(l, i)))):
        nth(nth(l, i), j) = ijth(M)(i, j))}"
     |generic_matrix_defs| |generic_matrices|)
    (|width| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|height| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|gmat| TYPE-EQ-DECL NIL |generic_matrix_defs| |generic_matrices|))
   SHOSTAK))
 (|W1_behavior| 0
  (|W1_behavior-1| |nil| 3907940265
   ("" (SKEEP)
    (("" (ASSERT)
      (("" (EXPAND "*")
        (("" (EXPAND "gmat_product")
          (("" (LIFT-IF)
            (("" (SPLIT)
              (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (FLATTEN)
                (("2" (EXPAND "abstract_mat")
                  (("2" (LIFT-IF)
                    (("2" (SPLIT)
                      (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (FLATTEN)
                        (("2" (DECOMPOSE-EQUALITY 2)
                          (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "length" -1)
                                      (("1" (EXPAND "length" -1)
                                        (("1" (EXPAND "length" -1)
                                          (("1" (EXPAND "length" -1)
                                            (("1"
                                              (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                              (("1" (SPLIT)
                                                (("1" (REPLACES -1)
                                                  (("1" (EXPAND "nth" -2)
                                                    (("1" (EXPAND "length" -2)
                                                      (("1"
                                                        (EXPAND "length" -2)
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (REPLACES -1)
                                                  (("2" (GRIND) NIL NIL)) NIL)
                                                 ("3" (GRIND) NIL NIL))
                                                NIL)
                                               ("2" (HIDE 2)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (AUTO-REWRITE-DEFS :ALWAYS? T)
                                      (("2" (BDDSIMP)
                                        (("1"
                                          (ASSERT :REWRITE-FLAG NIL
                                                  :LET-REDUCE? T :FLUSH? NIL
                                                  :CASES-REWRITE? NIL
                                                  :TYPE-CONSTRAINTS? T
                                                  :IGNORE-PROVER-OUTPUT? NIL
                                                  :QUANT-SIMP? NIL
                                                  :IMPLICIT-TYPEPREDS? NIL
                                                  :IGNORE-TYPEPREDS? NIL)
                                          (("1" (LIFT-IF :UPDATES? T)
                                            (("1"
                                              (ASSERT :REWRITE-FLAG NIL
                                                      :LET-REDUCE? T :FLUSH?
                                                      NIL :CASES-REWRITE? NIL
                                                      :TYPE-CONSTRAINTS? T
                                                      :IGNORE-PROVER-OUTPUT?
                                                      NIL :QUANT-SIMP? NIL
                                                      :IMPLICIT-TYPEPREDS? NIL
                                                      :IGNORE-TYPEPREDS? NIL)
                                              (("1" (BDDSIMP)
                                                (("1" (LIFT-IF :UPDATES? T)
                                                  (("1"
                                                    (ASSERT :REWRITE-FLAG NIL
                                                            :LET-REDUCE? T
                                                            :FLUSH? NIL
                                                            :CASES-REWRITE? NIL
                                                            :TYPE-CONSTRAINTS?
                                                            T
                                                            :IGNORE-PROVER-OUTPUT?
                                                            NIL :QUANT-SIMP?
                                                            NIL
                                                            :IMPLICIT-TYPEPREDS?
                                                            NIL
                                                            :IGNORE-TYPEPREDS?
                                                            NIL)
                                                    (("1" (BDDSIMP)
                                                      (("1"
                                                        (ASSERT :REWRITE-FLAG
                                                                NIL
                                                                :LET-REDUCE? T
                                                                :FLUSH? NIL
                                                                :CASES-REWRITE?
                                                                NIL
                                                                :TYPE-CONSTRAINTS?
                                                                T
                                                                :IGNORE-PROVER-OUTPUT?
                                                                NIL
                                                                :QUANT-SIMP?
                                                                NIL
                                                                :IMPLICIT-TYPEPREDS?
                                                                NIL
                                                                :IGNORE-TYPEPREDS?
                                                                NIL)
                                                        (("1"
                                                          (CASE
                                                              "x!2=0 AND (x!1=0 OR x!1=1 OR x!1=2)")
                                                          (("1" (GRIND) NIL
                                                            NIL)
                                                           ("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (LIFT-IF :UPDATES? T)
                                                  (("2"
                                                    (ASSERT :REWRITE-FLAG NIL
                                                            :LET-REDUCE? T
                                                            :FLUSH? NIL
                                                            :CASES-REWRITE? NIL
                                                            :TYPE-CONSTRAINTS?
                                                            T
                                                            :IGNORE-PROVER-OUTPUT?
                                                            NIL :QUANT-SIMP?
                                                            NIL
                                                            :IMPLICIT-TYPEPREDS?
                                                            NIL
                                                            :IGNORE-TYPEPREDS?
                                                            NIL)
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2"
                                          (ASSERT :REWRITE-FLAG NIL
                                                  :LET-REDUCE? T :FLUSH? NIL
                                                  :CASES-REWRITE? NIL
                                                  :TYPE-CONSTRAINTS? T
                                                  :IGNORE-PROVER-OUTPUT? NIL
                                                  :QUANT-SIMP? NIL
                                                  :IMPLICIT-TYPEPREDS? NIL
                                                  :IGNORE-TYPEPREDS? NIL)
                                          NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)
                           ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ijth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|nth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|pointwise| CONST-DECL "gvec" |ops_pointwise| |generic_matrices|)
    (|car| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|cdr| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|collapse| DEF-DECL "T" |ops_unrestricted| |generic_matrices|)
    (|is_idempotent?| CONST-DECL "bool" |algebra_defs| |generic_matrices|)
    (|column| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|row| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|gmat| TYPE-EQ-DECL NIL |generic_matrix_defs| |generic_matrices|)
    (|gvec_product| CONST-DECL "T" |ops_derived| |generic_matrices|)
    (|gvec| TYPE-EQ-DECL NIL |generic_matrix_defs| |generic_matrices|)
    (|height| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|width| DEF-DECL "{w: nat |
   IF null?(l) THEN w = 0
   ELSE EXISTS (i: below(length(l))): w = length(nth(l, i))
   ENDIF
    AND (FORALL (i: below(length(l))): w >= length(nth(l, i)))}"
     |generic_matrix_defs| |generic_matrices|)
    (|abstract_mat| CONST-DECL "{g: gmat |
   height(g) = IF width(l) = 0 THEN 0 ELSE length(l) ENDIF AND
    width(g) = width(l) AND
     FORALL (i, j: nat):
       ijth(g)(i, j) =
        IF i < length(l) AND j < length(nth(l, i)) THEN nth(nth(l, i), j)
        ELSE default
        ENDIF}"
     |generic_matrix_defs| |generic_matrices|)
    (|width| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|gmat_product| CONST-DECL "gmat" |ops_derived| |generic_matrices|))
   SHOSTAK))
 (|stepW1b1_values| 0
  (|stepW1b1_values-1| |nil| 3907942260
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (CASE "i>height(step o ((W1 * cast(a, b, c)) + b1))")
        (("1" (TYPEPRED "dimension(step o ((W1 * cast(a, b, c)) + b1))")
          (("1" (EXPAND "height")
            (("1" (INSTANTIATE -3 "i")
              (("1" (ASSERT)
                (("1" (INSTANTIATE -3 "j")
                  (("1" (EXPAND "ijth") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "height(step o ((W1 * cast(a, b, c)) + b1)) = 3")
          (("1" (REPLACES -1)
            (("1" (TYPEPRED "dimension(step o ((W1 * cast(a, b, c)) + b1))")
              (("1" (INSTANTIATE -4 "j")
                (("1" (SPLIT -4)
                  (("1" (INSTANTIATE -1 "i")
                    (("1" (EXPAND "ijth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                   ("2"
                    (CASE
                        "dimension(step o ((W1 * cast(a, b, c)) + b1))`2 = 1")
                    (("1" (REPLACES -1)
                      (("1" (CASE "j=0")
                        (("1" (REPLACES -1)
                          (("1" (CASE "i=0 OR i=1 OR i=2 OR i=3")
                            (("1" (HIDE (-2 -3))
                              (("1" (INSTANTIATE -2 "i")
                                (("1" (SPLIT)
                                  (("1" (REPLACES -1)
                                    (("1" (HIDE -1) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REPLACES -1)
                                    (("2" (HIDE -1) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (REPLACES -1)
                                    (("3" (HIDE -1) (("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("4" (REPLACES -1)
                                    (("4" (HIDE -1) (("4" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (HIDE-ALL-BUT (1 4))
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|width| DEF-DECL "{w: nat |
   IF null?(l) THEN w = 0
   ELSE EXISTS (i: below(length(l))): w = length(nth(l, i))
   ENDIF
    AND (FORALL (i: below(length(l))): w >= length(nth(l, i)))}"
     |generic_matrix_defs| |generic_matrices|)
    (|abstract_mat| CONST-DECL "{g: gmat |
   height(g) = IF width(l) = 0 THEN 0 ELSE length(l) ENDIF AND
    width(g) = width(l) AND
     FORALL (i, j: nat):
       ijth(g)(i, j) =
        IF i < length(l) AND j < length(nth(l, i)) THEN nth(nth(l, i), j)
        ELSE default
        ENDIF}"
     |generic_matrix_defs| |generic_matrices|)
    (|width| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|row| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|column| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|nth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|pointwise| CONST-DECL "gvec" |ops_pointwise| |generic_matrices|)
    (|car| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|cdr| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|collapse| DEF-DECL "T" |ops_unrestricted| |generic_matrices|)
    (|gvec_product| CONST-DECL "T" |ops_derived| |generic_matrices|)
    (|gmat_product| CONST-DECL "gmat" |ops_derived| |generic_matrices|)
    (|pointwise| CONST-DECL "gmat" |ops_pointwise| |generic_matrices|)
    (|map| CONST-DECL "gmat" |ops_unrestricted| |generic_matrices|)
    (|ijth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|height| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|gmat| TYPE-EQ-DECL NIL |generic_matrix_defs| |generic_matrices|))
   SHOSTAK))
 (|stepW1b1_value_limit| 0
  (|stepW1b1_value_limit-1| |nil| 3907943126
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (LEMMA "W1_behavior")
        (("" (INST?)
          (("" (REPLACES -1)
            (("" (ASSERT)
              (("" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (EXPAND "abstract_mat")
                    (("1" (EXPAND "length" -1 1)
                      (("1" (EXPAND "length" -1 1)
                        (("1" (EXPAND "length" -1 1)
                          (("1" (EXPAND "length" -1 1)
                            (("1" (EXPAND "length" -1 2)
                              (("1" (EXPAND "length" -1 2)
                                (("1" (EXPAND "length" -1 2)
                                  (("1" (EXPAND "length" -1 2)
                                    (("1" (EXPAND "b1")
                                      (("1" (EXPAND "+")
                                        (("1" (EXPAND "pointwise")
                                          (("1" (EXPAND "height")
                                            (("1" (EXPAND "width" -1 5)
                                              (("1" (EXPAND "width" -1 5)
                                                (("1" (EXPAND "width" -1 5)
                                                  (("1" (EXPAND "M_default")
                                                    (("1"
                                                      (EXPAND
                                                       "minimal_default_matrix")
                                                      (("1" (LIFT-IF)
                                                        (("1" (SPLIT)
                                                          (("1" (FLATTEN)
                                                            (("1" (HIDE -2)
                                                              (("1"
                                                                (EXPAND
                                                                 "width")
                                                                (("1"
                                                                  (EXPAND
                                                                   "width")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "width")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "width")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "length")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "length")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "max")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2"
                                                              (EXPAND "width")
                                                              (("2"
                                                                (EXPAND
                                                                 "width")
                                                                (("2"
                                                                  (EXPAND
                                                                   "width")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "width")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       -1 2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1 2)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "length"
                                                                           -1
                                                                           2)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "length"
                                                                               -1
                                                                               2)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -1
                                                                                 2)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "length"
                                                                                   -1
                                                                                   2)
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "length"
                                                                                     -1
                                                                                     2)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       -1
                                                                                       2)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "length"
                                                                                         -1
                                                                                         2)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "length"
                                                                                           -1
                                                                                           2)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "length"
                                                                                             -1
                                                                                             2)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "length"
                                                                                               1)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "max")
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "ijth")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "o")
                                                                                                      (("2"
                                                                                                        (EXPAND
                                                                                                         "map")
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "height")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "width")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "ijth")
                                                                                                              (("2"
                                                                                                                (LIFT-IF)
                                                                                                                (("2"
                                                                                                                  (SPLIT)
                                                                                                                  (("1"
                                                                                                                    (FLATTEN)
                                                                                                                    (("1"
                                                                                                                      (SPLIT)
                                                                                                                      (("1"
                                                                                                                        (FLATTEN)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "step")
                                                                                                                          (("1"
                                                                                                                            (LIFT-IF)
                                                                                                                            (("1"
                                                                                                                              (ASSERT)
                                                                                                                              (("1"
                                                                                                                                (SPLIT)
                                                                                                                                (("1"
                                                                                                                                  (HIDE
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (CASE
                                                                                                                                        "i=0 OR i=1 OR i=2")
                                                                                                                                    (("1"
                                                                                                                                      (SPLIT)
                                                                                                                                      (("1"
                                                                                                                                        (REPLACES
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "nth")
                                                                                                                                          (("1"
                                                                                                                                            (TYPEPRED
                                                                                                                                             ("a"
                                                                                                                                              "b"
                                                                                                                                              "c"))
                                                                                                                                            (("1"
                                                                                                                                              (GRIND)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("2"
                                                                                                                                        (REPLACES
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "nth")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "nth")
                                                                                                                                            (("2"
                                                                                                                                              (TYPEPRED
                                                                                                                                               ("a"
                                                                                                                                                "b"
                                                                                                                                                "c"))
                                                                                                                                              (("2"
                                                                                                                                                (GRIND)
                                                                                                                                                NIL
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL)
                                                                                                                                       ("3"
                                                                                                                                        (REPLACES
                                                                                                                                         -1)
                                                                                                                                        (("3"
                                                                                                                                          (EXPAND
                                                                                                                                           "nth")
                                                                                                                                          (("3"
                                                                                                                                            (EXPAND
                                                                                                                                             "nth")
                                                                                                                                            (("3"
                                                                                                                                              (EXPAND
                                                                                                                                               "nth")
                                                                                                                                              (("3"
                                                                                                                                                (TYPEPRED
                                                                                                                                                 ("a"
                                                                                                                                                  "b"
                                                                                                                                                  "c"))
                                                                                                                                                (("3"
                                                                                                                                                  (GRIND)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL)
                                                                                                                                     ("2"
                                                                                                                                      (FLATTEN)
                                                                                                                                      (("2"
                                                                                                                                        (ASSERT)
                                                                                                                                        NIL
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL)
                                                                                                                                 ("2"
                                                                                                                                  (PROPAX)
                                                                                                                                  NIL
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL)
                                                                                                                       ("2"
                                                                                                                        (FLATTEN)
                                                                                                                        (("2"
                                                                                                                          (CASE
                                                                                                                              "i=0 OR i=1 OR i=2")
                                                                                                                          (("1"
                                                                                                                            (GRIND)
                                                                                                                            NIL
                                                                                                                            NIL)
                                                                                                                           ("2"
                                                                                                                            (HIDE
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (GRIND)
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (TYPEPRED ("a" "b" "c"))
                    (("2" (EXPAND "abstract_mat")
                      (("2" (LIFT-IF)
                        (("2" (SPLIT 1)
                          (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (FLATTEN)
                            (("2" (HIDE 1)
                              (("2" (CASE "(i=0 OR i=1 OR i=2)")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abstract_mat| CONST-DECL "{g: gmat |
   height(g) = IF width(l) = 0 THEN 0 ELSE length(l) ENDIF AND
    width(g) = width(l) AND
     FORALL (i, j: nat):
       ijth(g)(i, j) =
        IF i < length(l) AND j < length(nth(l, i)) THEN nth(nth(l, i), j)
        ELSE default
        ENDIF}"
     |generic_matrix_defs| |generic_matrices|)
    (|height| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|M_default| CONST-DECL "gmat" |generic_matrix_defs| |generic_matrices|)
    (|ijth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|map| CONST-DECL "gmat" |ops_unrestricted| |generic_matrices|)
    (|minimal_default_matrix| CONST-DECL "gmat" |generic_matrix_defs|
     |generic_matrices|)
    (|width| DEF-DECL "{w: nat |
   IF null?(l) THEN w = 0
   ELSE EXISTS (i: below(length(l))): w = length(nth(l, i))
   ENDIF
    AND (FORALL (i: below(length(l))): w >= length(nth(l, i)))}"
     |generic_matrix_defs| |generic_matrices|)
    (|width| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|pointwise| CONST-DECL "gmat" |ops_pointwise| |generic_matrices|))
   SHOSTAK))
 (|Layer1_result_TCC1| 0
  (|Layer1_result_TCC1-1| |nil| 3907948765
   ("" (SKEEP)
    (("" (EXPAND "rectangular?")
      (("" (SPLIT)
        (("1" (SKEEP)
          (("1" (TYPEPRED ("n" "m"))
            (("1" (EXPAND "length" (-1 -2))
              (("1" (EXPAND "length" (-1 -2))
                (("1" (EXPAND "length" (-1 -2))
                  (("1" (EXPAND "length" (-1 -2))
                    (("1" (CASE "(n=0 OR n=1 OR n=2) AND (m=0 OR m=1 OR m=2)")
                      (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (SPLIT)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKEEP)
          (("2" (TYPEPRED "n")
            (("2" (EXPAND "length" -1)
              (("2" (EXPAND "length" -1)
                (("2" (EXPAND "length" -1)
                  (("2" (EXPAND "length" -1)
                    (("2" (CASE "n=0 OR n=1 OR n=2")
                      (("1" (GRIND) NIL NIL)
                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_result| SUBTYPE "(: (: 0 :), (: 0 :), (: 0 :) :)"
    "(generic_matrix_props[real, 0].rectangular?)" (95 38 95 59))))
 (|Layer1_result_TCC2| 0
  (|Layer1_result_TCC2-1| |nil| 3907948765
   ("" (SKEEP)
    (("" (HIDE 1)
      (("" (EXPAND "rectangular?")
        (("" (SPLIT)
          (("1" (SKEEP)
            (("1" (TYPEPRED ("n" "m"))
              (("1" (CASE "(n=0 OR n=1 OR n=2) AND (m=0 OR m=1 OR m=2)")
                (("1" (GRIND) NIL NIL)
                 ("2" (EXPAND "length" (-1 -2))
                  (("2" (EXPAND "length" (-1 -2))
                    (("2" (EXPAND "length" (-1 -2))
                      (("2" (EXPAND "length" (-1 -2))
                        (("2" (SPLIT)
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKEEP)
            (("2" (TYPEPRED "n")
              (("2" (EXPAND "length" -1)
                (("2" (EXPAND "length" -1)
                  (("2" (EXPAND "length" -1)
                    (("2" (EXPAND "length" -1)
                      (("2" (CASE "n=0 OR n=1 OR n=2")
                        (("1" (GRIND) NIL NIL)
                         ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_result| SUBTYPE "(: (: 1 :), (: 0 :), (: 0 :) :)"
    "(generic_matrix_props[real, 0].rectangular?)" (96 38 96 59))))
 (|Layer1_result_TCC3| 0
  (|Layer1_result_TCC3-1| |nil| 3907948765
   ("" (SKEEP)
    (("" (HIDE-ALL-BUT 3)
      (("" (GRIND)
        (("1" (CASE "n!1=0 OR n!1=1 OR n!1=2")
          (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (CASE "(n!1=0 OR n!1=1 OR n!1=2) AND (m!1=0 OR m!1=1 OR m!1=2)")
          (("1" (GRIND) NIL NIL)
           ("2" (SPLIT)
            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_result| SUBTYPE "(: (: 1 :), (: 1 :), (: 0 :) :)"
    "(generic_matrix_props[real, 0].rectangular?)" (97 38 97 59))))
 (|Layer1_result_TCC4| 0
  (|Layer1_result_TCC4-1| |nil| 3907948765
   ("" (SKEEP)
    (("" (HIDE-ALL-BUT 4)
      (("" (GRIND)
        (("1" (CASE "n!1=0 OR n!1=1 OR n!1=2")
          (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
          NIL)
         ("2" (CASE "(n!1=0 OR n!1=1 OR n!1=2) AND (m!1=0 OR m!1=1 OR m!1=2)")
          (("1" (GRIND) NIL NIL)
           ("2" (SPLIT)
            (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_result| SUBTYPE "(: (: 1 :), (: 1 :), (: 1 :) :)"
    "(generic_matrix_props[real, 0].rectangular?)" (98 38 98 59))))
 (|Layer1_result| 0
  (|Layer1_result-1| |nil| 3907949328
   ("" (SKEEP)
    (("" (EXPAND "Layer1")
      (("" (TYPEPRED ("a" "b" "c"))
        (("" (SPLIT)
          (("1" (REPLACES -1)
            (("1" (SPLIT)
              (("1" (REPLACES -1)
                (("1" (SPLIT)
                  (("1" (REPLACES -1)
                    (("1" (ASSERT)
                      (("1" (HIDE-ALL-BUT 1)
                        (("1" (EXPAND "abstract")
                          (("1" (EXPAND "abstract_mat")
                            (("1" (LIFT-IF)
                              (("1" (SPLIT)
                                (("1" (GRIND) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "length" 2 1)
                                    (("2" (EXPAND "length" 2 1)
                                      (("2" (EXPAND "length" 2 1)
                                        (("2" (EXPAND "length" 2 1)
                                          (("2" (EXPAND "length" 2 2)
                                            (("2" (EXPAND "length" 2 2)
                                              (("2" (EXPAND "length" 2 2)
                                                (("2" (EXPAND "length" 2 2)
                                                  (("2" (EXPAND "width" 2)
                                                    (("2" (EXPAND "width" 2)
                                                      (("2" (EXPAND "width" 2)
                                                        (("2"
                                                          (EXPAND "width" 2)
                                                          (("2"
                                                            (EXPAND "length" 2
                                                                    2)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      2 2)
                                                              (("2"
                                                                (EXPAND
                                                                 "length" 2 2)
                                                                (("2"
                                                                  (EXPAND
                                                                   "length" 2
                                                                   2)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length" 2
                                                                     2)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       2 2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "max")
                                                                        (("2"
                                                                          (GRIND)
                                                                          (("2"
                                                                            (DECOMPOSE-EQUALITY)
                                                                            (("1"
                                                                              (LIFT-IF)
                                                                              (("1"
                                                                                (GRIND)
                                                                                (("1"
                                                                                  (CASE
                                                                                      "x!1=0 OR x!1=1 OR x!1=2")
                                                                                  (("1"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (SKEEP)
                                                                              NIL
                                                                              NIL)
                                                                             ("3"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACES -1)
                    (("2" (ASSERT)
                      (("2" (HIDE-ALL-BUT 2)
                        (("2" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("2"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1"
                                      (CASE
                                          "(x!1=0 OR x!1=1 OR x!1=2) AND (x!2=0 OR x!2=1)")
                                      (("1" (AUTO-REWRITE-DEFS :ALWAYS? T)
                                        (("1" (BDDSIMP)
                                          (("1"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("2"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("3"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("4"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("5"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("6"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("7"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("8"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("9"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("10"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("11"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL)
                                           ("12"
                                            (ASSERT :REWRITE-FLAG NIL
                                                    :LET-REDUCE? T :FLUSH? NIL
                                                    :CASES-REWRITE? NIL
                                                    :TYPE-CONSTRAINTS? T
                                                    :IGNORE-PROVER-OUTPUT? NIL
                                                    :QUANT-SIMP? NIL
                                                    :IMPLICIT-TYPEPREDS? NIL
                                                    :IGNORE-TYPEPREDS? NIL)
                                            NIL NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACES -1)
                (("2" (SPLIT)
                  (("1" (REPLACES -1)
                    (("1" (ASSERT)
                      (("1" (HIDE-ALL-BUT 2)
                        (("1" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("1"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1"
                                      (CASE
                                          "(x!1=0 OR x!1=1 OR x!1=2) AND x!2=0")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SPLIT)
                                        (("1" (ASSERT)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACES -1)
                    (("2" (ASSERT)
                      (("2" (HIDE-ALL-BUT 3)
                        (("2" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("2"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1"
                                      (CASE
                                          "(x!1=0 OR x!1=1 OR x!1=2) AND x!2=0")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REPLACES -1)
            (("2" (SPLIT)
              (("1" (REPLACES -1)
                (("1" (SPLIT)
                  (("1" (REPLACES -1)
                    (("1" (ASSERT)
                      (("1" (HIDE-ALL-BUT 2)
                        (("1" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("1"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1"
                                    (CASE
                                        "(x!1=0 OR x!1=1 OR x!1=2) AND x!2=0")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (FLATTEN)
                                      (("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACES -1)
                    (("2" (ASSERT)
                      (("2" (HIDE-ALL-BUT 3)
                        (("2" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("2"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1"
                                      (CASE
                                          "(x!1=0 OR x!1=1 OR x!1=2) AND x!2=0")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACES -1)
                (("2" (SPLIT)
                  (("1" (REPLACES -1)
                    (("1" (ASSERT)
                      (("1" (HIDE-ALL-BUT 3)
                        (("1" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("1"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1"
                                      (CASE
                                          "(x!1=0 OR x!1=1 OR x!1=2) AND x!2=0")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (REPLACES -1)
                    (("2" (ASSERT)
                      (("2" (HIDE-ALL-BUT 4)
                        (("2" (AUTO-REWRITE-DEFS :ALWAYS? T)
                          (("2"
                            (ASSERT :REWRITE-FLAG NIL :LET-REDUCE? T :FLUSH?
                                    NIL :CASES-REWRITE? NIL :TYPE-CONSTRAINTS?
                                    T :IGNORE-PROVER-OUTPUT? NIL :QUANT-SIMP?
                                    NIL :IMPLICIT-TYPEPREDS? NIL
                                    :IGNORE-TYPEPREDS? NIL)
                            (("2" (DECOMPOSE-EQUALITY)
                              (("1" (LIFT-IF)
                                (("1" (SPLIT)
                                  (("1" (FLATTEN)
                                    (("1"
                                      (CASE
                                          "(x!1=0 OR x!1=1 OR x!1=2) AND x!2=0")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (SPLIT)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN)
                                    (("2" (LIFT-IF)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1"
                                            (CASE "x!1=0 OR x!1=1 OR x!1=2")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKEEP) NIL NIL) ("3" (SKEEP) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bint| TYPE-EQ-DECL NIL |example_ffnn| NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|times_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|abstract_mat| CONST-DECL "{g: gmat |
   height(g) = IF width(l) = 0 THEN 0 ELSE length(l) ENDIF AND
    width(g) = width(l) AND
     FORALL (i, j: nat):
       ijth(g)(i, j) =
        IF i < length(l) AND j < length(nth(l, i)) THEN nth(nth(l, i), j)
        ELSE default
        ENDIF}"
     |generic_matrix_defs| |generic_matrices|)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|width| DEF-DECL "{w: nat |
   IF null?(l) THEN w = 0
   ELSE EXISTS (i: below(length(l))): w = length(nth(l, i))
   ENDIF
    AND (FORALL (i: below(length(l))): w >= length(nth(l, i)))}"
     |generic_matrix_defs| |generic_matrices|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (W1 CONST-DECL "gmat" |example_ffnn| NIL)
    (|cast| CONST-DECL "gmat" |example_ffnn| NIL)
    (|ijth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|width| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|row| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|height| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|column| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|nth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|pointwise| CONST-DECL "gvec" |ops_pointwise| |generic_matrices|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|car| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|cdr| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|collapse| DEF-DECL "T" |ops_unrestricted| |generic_matrices|)
    (|gvec_product| CONST-DECL "T" |ops_derived| |generic_matrices|)
    (|gmat_product| CONST-DECL "gmat" |ops_derived| |generic_matrices|)
    (* CONST-DECL "gmat" |example_ffnn| NIL)
    (|b1| CONST-DECL "gmat" |example_ffnn| NIL)
    (|pointwise| CONST-DECL "gmat" |ops_pointwise| |generic_matrices|)
    (+ CONST-DECL "gmat" |example_ffnn| NIL)
    (|step| CONST-DECL "real" |example_ffnn| NIL)
    (|map| CONST-DECL "gmat" |ops_unrestricted| |generic_matrices|)
    (O CONST-DECL "gmat" |example_ffnn| NIL)
    (|abstract| CONST-DECL "gmat" |generic_matrix_props| |generic_matrices|)
    (|Layer1| CONST-DECL "gmat" |example_ffnn| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   SHOSTAK))
 (|Layer1_explicit_TCC1| 0
  (|Layer1_explicit_TCC1-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 0 :), (: 0 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (103 36 103 57))))
 (|Layer1_explicit_TCC2| 0
  (|Layer1_explicit_TCC2-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 0 :), (: 0 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (104 36 104 57))))
 (|Layer1_explicit_TCC3| 0
  (|Layer1_explicit_TCC3-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 1 :), (: 0 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (105 36 105 57))))
 (|Layer1_explicit_TCC4| 0
  (|Layer1_explicit_TCC4-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 0 :), (: 0 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (106 36 106 57))))
 (|Layer1_explicit_TCC5| 0
  (|Layer1_explicit_TCC5-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 1 :), (: 0 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (107 36 107 57))))
 (|Layer1_explicit_TCC6| 0
  (|Layer1_explicit_TCC6-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 1 :), (: 0 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (108 36 108 57))))
 (|Layer1_explicit_TCC7| 0
  (|Layer1_explicit_TCC7-1| |nil| 3908023365
   ("" (SKEEP)
    (("" (LEMMA "iff_rectangular")
      (("" (INST?) (("" (ASSERT) (("" (EVAL-FORMULA 1) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|iff_rectangular| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   NIL
   (|Layer1_explicit| SUBTYPE "(: (: 1 :), (: 1 :), (: 1 :) :)"
                      "(generic_matrix_props[real, 0].rectangular?)"
                      (109 36 109 57))))
 (|Layer1_explicit_TCC8| 0
  (|Layer1_explicit_TCC8-1| |nil| 3908023365 ("" (COND-DISJOINT-TCC) NIL NIL)
   NIL NIL
   (|Layer1_explicit| DISJOINTNESS
                      "COND booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 0 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 1 :) :)) ENDCOND"
                      "NIL" (101 2 110 9))))
 (|Layer1_explicit_TCC9| 0
  (|Layer1_explicit_TCC9-1| |nil| 3908023365 ("" (COND-COVERAGE-TCC) NIL NIL)
   NIL NIL
   (|Layer1_explicit| COVERAGE
                      "COND booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 0 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 0, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 0 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 0, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 0)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 0 :) :)), booleans.AND(example_ffnn.a = 1, booleans.AND(example_ffnn.b = 1, example_ffnn.c = 1)) -> generic_matrix_props[real, 0].abstract((: (: 1 :), (: 1 :), (: 1 :) :)) ENDCOND"
                      "NIL" (101 2 110 9))))
 (|Layer1_explicit_correct| 0
  (|Layer1_explicit_correct-1| |nil| 3908023949
   ("" (SKEEP)
    (("" (TYPEPRED ("a" "b" "c"))
      (("" (SPLIT)
        (("1" (REPLACES -1)
          (("1" (SPLIT)
            (("1" (REPLACES -1)
              (("1" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (EXPAND "Layer1_explicit")
                    (("1" (EXPAND "abstract")
                      (("1" (LEMMA "eval_mat_lemma")
                        (("1" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (EXPAND "Layer1_explicit")
                    (("2" (EXPAND "abstract")
                      (("2" (LEMMA "eval_mat_lemma")
                        (("2" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACES -1)
              (("2" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (EXPAND "Layer1_explicit")
                    (("1" (EXPAND "abstract")
                      (("1" (LEMMA "eval_mat_lemma")
                        (("1" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (EXPAND "Layer1_explicit")
                    (("2" (EXPAND "abstract")
                      (("2" (LEMMA "eval_mat_lemma")
                        (("2" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REPLACES -1)
          (("2" (SPLIT)
            (("1" (REPLACES -1)
              (("1" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (EXPAND "Layer1_explicit")
                    (("1" (EXPAND "abstract")
                      (("1" (LEMMA "eval_mat_lemma")
                        (("1" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (EXPAND "Layer1_explicit")
                    (("2" (EXPAND "abstract")
                      (("2" (LEMMA "eval_mat_lemma")
                        (("2" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACES -1)
              (("2" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (EXPAND "Layer1_explicit")
                    (("1" (EXPAND "abstract")
                      (("1" (LEMMA "eval_mat_lemma")
                        (("1" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (EXPAND "Layer1_explicit")
                    (("2" (EXPAND "abstract")
                      (("2" (LEMMA "eval_mat_lemma")
                        (("2" (INST?)
                          (("1" (ASSERT) (("1" (EVAL-FORMULA 1) NIL NIL)) NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abstract| CONST-DECL "gmat" |generic_matrix_props| |generic_matrices|)
    (|gmat| TYPE-EQ-DECL NIL |generic_matrix_defs| |generic_matrices|)
    (|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|)
    (|eval_mat_lemma| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|))
   SHOSTAK))
 (|W2_behavior| 0
  (|W2_behavior-1| |nil| 3908028157
   ("" (SKEEP)
    (("" (TYPEPRED ("a" "b" "c"))
      (("" (SPLIT)
        (("1" (REPLACES -1)
          (("1" (SPLIT)
            (("1" (REPLACES -1)
              (("1" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (SPLIT)
                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (REWRITE "Layer1_explicit_correct")
                          (("2" (EXPAND "Layer1_explicit")
                            (("2" (REWRITE "eval_mat_lemma")
                              (("1" (EVAL-FORMULA 1) NIL NIL)
                               ("2" (EVAL-FORMULA 1) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (FLATTEN)
                      (("3" (REWRITE "Layer1_explicit_correct")
                        (("3" (EXPAND "Layer1_explicit")
                          (("3" (GRIND)
                            (("3" (DECOMPOSE-EQUALITY)
                              (("3" (INSTANTIATE -1 "(0,0)")
                                (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (ASSERT)
                      (("4" (EXPAND "odd?") (("4" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (SPLIT)
                    (("1" (FLATTEN)
                      (("1" (GRIND)
                        (("1" (DECOMPOSE-EQUALITY)
                          (("1" (INSTANTIATE -1 "(0,0)")
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL)
                     ("3" (FLATTEN)
                      (("3" (REWRITE "Layer1_explicit_correct")
                        (("3" (EXPAND "Layer1_explicit")
                          (("3" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("4" (ASSERT)
                      (("4" (REWRITE "Layer1_explicit_correct")
                        (("4" (REWRITE "eval_mat_lemma")
                          (("1" (EVAL-FORMULA 1) NIL NIL)
                           ("2" (EVAL-FORMULA 1) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACES -1)
              (("2" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (SPLIT)
                    (("1" (EXPAND "even?")
                      (("1" (LEMMA "matrix_evaluation")
                        (("1" (EXPAND "eval")
                          (("1" (EXPAND "abstract")
                            (("1" (INST?)
                              (("1" (ASSERT) (("1" (EVAL-FORMULA -1) NIL NIL))
                                NIL)
                               ("2" (EVAL-FORMULA) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL)
                     ("3" (ASSERT) NIL NIL)
                     ("4" (ASSERT)
                      (("4" (REWRITE "Layer1_explicit_correct")
                        (("4" (REWRITE "eval_mat_lemma")
                          (("1" (EVAL-FORMULA) NIL NIL)
                           ("2" (EVAL-FORMULA) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (SPLIT)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (ASSERT)
                      (("2" (REWRITE "eval_mat_lemma")
                        (("1" (EVAL-FORMULA) NIL NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL)
                     ("3" (ASSERT)
                      (("3" (EXPAND "odd?")
                        (("3" (LEMMA "matrix_evaluation")
                          (("3" (EXPAND "eval")
                            (("3" (EXPAND "abstract")
                              (("3" (INST?)
                                (("1" (ASSERT)
                                  (("1" (EVAL-FORMULA -1) NIL NIL)) NIL)
                                 ("2" (EVAL-FORMULA) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (ASSERT)
                      (("4" (EXPAND "odd?") (("4" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (REPLACES -1)
          (("2" (SPLIT)
            (("1" (REPLACES -1)
              (("1" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (SPLIT)
                    (("1" (ASSERT)
                      (("1" (EXPAND "even?")
                        (("1" (LEMMA "matrix_evaluation")
                          (("1" (EXPAND "eval")
                            (("1" (EXPAND "abstract")
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (EVAL-FORMULA -1) NIL NIL)) NIL)
                                 ("2" (EVAL-FORMULA) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL))
                      NIL)
                     ("3" (ASSERT) NIL NIL)
                     ("4" (ASSERT)
                      (("4" (REWRITE "eval_mat_lemma")
                        (("1" (EVAL-FORMULA) NIL NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (SPLIT)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (ASSERT)
                      (("2" (REWRITE "eval_mat_lemma")
                        (("1" (EVAL-FORMULA) NIL NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "odd?")
                      (("3" (LEMMA "matrix_evaluation")
                        (("3" (EXPAND "eval")
                          (("3" (EXPAND "abstract")
                            (("3" (INST?)
                              (("1" (ASSERT) (("1" (EVAL-FORMULA -1) NIL NIL))
                                NIL)
                               ("2" (EVAL-FORMULA) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (EXPAND "odd?") (("4" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACES -1)
              (("2" (SPLIT)
                (("1" (REPLACES -1)
                  (("1" (SPLIT)
                    (("1" (ASSERT) NIL NIL)
                     ("2" (ASSERT)
                      (("2" (REWRITE "eval_mat_lemma")
                        (("1" (EVAL-FORMULA) NIL NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "odd?")
                      (("3" (LEMMA "matrix_evaluation")
                        (("3" (EXPAND "eval")
                          (("3" (EXPAND "abstract")
                            (("3" (INST?)
                              (("1" (ASSERT) (("1" (EVAL-FORMULA -1) NIL NIL))
                                NIL)
                               ("2" (EVAL-FORMULA) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (EXPAND "odd?") (("4" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (REPLACES -1)
                  (("2" (SPLIT)
                    (("1" (EXPAND "even?")
                      (("1" (LEMMA "matrix_evaluation")
                        (("1" (EXPAND "eval")
                          (("1" (EXPAND "abstract")
                            (("1" (INST?)
                              (("1" (ASSERT) (("1" (EVAL-FORMULA -1) NIL NIL))
                                NIL)
                               ("2" (EVAL-FORMULA) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL)
                     ("3" (ASSERT) NIL NIL)
                     ("4" (ASSERT)
                      (("4" (REWRITE "eval_mat_lemma")
                        (("1" (EVAL-FORMULA) NIL NIL)
                         ("2" (EVAL-FORMULA) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|matrix_evaluation| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|)
    (|pointwise| CONST-DECL "gmat" |ops_pointwise| |generic_matrices|)
    (|map| CONST-DECL "gmat" |ops_unrestricted| |generic_matrices|)
    (|width| DEF-DECL "{w: nat |
   IF null?(l) THEN w = 0
   ELSE EXISTS (i: below(length(l))): w = length(nth(l, i))
   ENDIF
    AND (FORALL (i: below(length(l))): w >= length(nth(l, i)))}"
     |generic_matrix_defs| |generic_matrices|)
    (|abstract_mat| CONST-DECL "{g: gmat |
   height(g) = IF width(l) = 0 THEN 0 ELSE length(l) ENDIF AND
    width(g) = width(l) AND
     FORALL (i, j: nat):
       ijth(g)(i, j) =
        IF i < length(l) AND j < length(nth(l, i)) THEN nth(nth(l, i), j)
        ELSE default
        ENDIF}"
     |generic_matrix_defs| |generic_matrices|)
    (|ijth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|width| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|row| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|height| CONST-DECL "nat" |generic_matrix_defs| |generic_matrices|)
    (|column| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|nth| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|pointwise| CONST-DECL "gvec" |ops_pointwise| |generic_matrices|)
    (|car| CONST-DECL "T" |generic_matrix_defs| |generic_matrices|)
    (|cdr| CONST-DECL "gvec" |generic_matrix_defs| |generic_matrices|)
    (|collapse| DEF-DECL "T" |ops_unrestricted| |generic_matrices|)
    (|gvec_product| CONST-DECL "T" |ops_derived| |generic_matrices|)
    (|gmat_product| CONST-DECL "gmat" |ops_derived| |generic_matrices|)
    (|eval_mat_lemma| FORMULA-DECL NIL |generic_matrix_props|
     |generic_matrices|)
    (|gmat| TYPE-EQ-DECL NIL |generic_matrix_defs| |generic_matrices|)
    (|rectangular?| CONST-DECL "bool" |generic_matrix_props|
     |generic_matrices|)
    (|abstract| CONST-DECL "gmat" |generic_matrix_props| |generic_matrices|))
   SHOSTAK)))

