(|query_coeff| (|bump_one_ind_TCC1| 0 (|bump_one_ind_TCC1-1| |nil| 3621165054 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind| SUBTYPE "((number_fields.-)((number_fields.+)(query_coeff.j, 1), query_coeff.i))" "naturalnumber"))) (|bump_one_ind_TCC2| 0 (|bump_one_ind_TCC2-1| |nil| 3621165054 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_ind| SUBTYPE "(number_fields.+)(query_coeff.f(query_coeff.i), 1)" "below(3)"))) (|bump_one_ind_TCC3| 0 (|bump_one_ind_TCC3-2| "" 3883681821 ("" (SKEEP) (("" (TYPEPRED ("f")) (("" (TYPEPRED ("i")) (("" (SKEEP) (("" (INST -2 "k") (("" (TYPEPRED ("k")) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_ind| SUBTYPE "query_coeff.f WITH [(query_coeff.i) := (number_fields.+)(query_coeff.f(query_coeff.i), 1)]" "{ff: [naturalnumbers.nat -> naturalnumbers.below(3)] | FORALL (k: integers.above((number_fields.+)(query_coeff.j, 1))): ff(k) = 0}")) (|bump_one_ind_TCC3-1| |nil| 3621165054 ("" (SKEEP) (("" (TYPEPRED (F)) (("" (TYPEPRED (I)) (("" (SKEEP) (("" (INST -2 "k") (("" (TYPEPRED (K)) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_ind| SUBTYPE "query_coeff.f WITH [(query_coeff.i) := (number_fields.+)(query_coeff.f(query_coeff.i), 1)]" "{ff: [naturalnumbers.nat -> naturalnumbers.below(3)] | FORALL (k: integers.above((number_fields.+)(query_coeff.j, 1))): ff(k) = 0}"))) (|bump_one_ind_TCC4| 0 (|bump_one_ind_TCC4-1| |nil| 3621165054 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_ind| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto((number_fields.+)(1, query_coeff.j))"))) (|bump_one_ind_TCC5| 0 (|bump_one_ind_TCC5-3| "" 3883681843 ("" (SKEEP) (("" (TYPEPRED ("i")) (("" (SPLIT-INEQ -1) NIL NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_ind| TERMINATION "query_coeff.bump_one_ind(query_coeff.j, query_coeff.f, (number_fields.+)(query_coeff.i, 1))" "NIL")) (|bump_one_ind_TCC5-2| "" 3790097663 ("" (SKEEP) (("" (TYPEPRED (I)) (("" (SPLIT-INEQ -1) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bump_one_ind| TERMINATION "query_coeff.bump_one_ind(query_coeff.j, query_coeff.f, (number_fields.+)(query_coeff.i, 1))" "NIL")) (|bump_one_ind_TCC5-1| |nil| 3621165054 ("" (SKEEP) (("" (TYPEPRED (I)) (("" (SPLIT-INEQ -1) (("" (TYPEPRED (F)) (("" (INST -1 "i") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bump_one_ind| TERMINATION "query_coeff.bump_one_ind(query_coeff.j, query_coeff.f, (number_fields.+)(query_coeff.i, 1))" "NIL"))) (|bump_one_ind_TCC6| 0 (|bump_one_ind_TCC6-2| "" 3883681891 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED " v(j, f, i + 1)") (("1" (TYPEPRED ("k")) (("1" (INST -2 "k") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED ("i")) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (GROUND) (("1" (TYPEPRED ("f")) (("1" (INST -1 "i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_ind| SUBTYPE "query_coeff.bump_one_ind(query_coeff.j, query_coeff.f, (number_fields.+)(query_coeff.i, 1)) WITH [(query_coeff.i) := 0]" "{ff: [naturalnumbers.nat -> naturalnumbers.below(3)] | FORALL (k: integers.above((number_fields.+)(query_coeff.j, 1))): ff(k) = 0}")) (|bump_one_ind_TCC6-1| |nil| 3621165054 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED " v(j, f, i + 1)") (("1" (TYPEPRED (K)) (("1" (INST -2 "k") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (GROUND) (("1" (TYPEPRED (F)) (("1" (INST -1 "i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|bump_one_ind| SUBTYPE "query_coeff.bump_one_ind(query_coeff.j, query_coeff.f, (number_fields.+)(query_coeff.i, 1)) WITH [(query_coeff.i) := 0]" "{ff: [naturalnumbers.nat -> naturalnumbers.below(3)] | FORALL (k: integers.above((number_fields.+)(query_coeff.j, 1))): ff(k) = 0}"))) (|switch_one_entry_TCC1| 0 (|switch_one_entry_TCC1-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|switch_one_entry| SUBTYPE "query_coeff.i" "below[length[below(3)](ll)]"))) (|switch_one_entry_TCC2| 0 (|switch_one_entry_TCC2-1| |nil| 3621672198 ("" (SKEEP) (("" (SPLIT 1) (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|switch_one_entry| SUBTYPE "list_adt[below(3)].cons(query_coeff.new, list_adt[below(3)].cdr(query_coeff.L))" "{ll: list_adt[below(3)].list | booleans.AND(list_props[below(3)].length(ll) = list_props[below(3)].length(query_coeff.L), FORALL (i: naturalnumbers.below(list_props[below(3)].length(query_coeff.L))): booleans.IMPLIES(i /= query_coeff.n, list_props[below(3)].nth(ll, i) = list_props[below(3)].nth(query_coeff.L, i)))}"))) (|switch_one_entry_TCC3| 0 (|switch_one_entry_TCC3-2| "" 3883682042 ("" (SKEEP) (("" (GRIND) (("" (TYPEPRED ("L")) (("" (GRIND) (("" (TYPEPRED ("n")) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|switch_one_entry| SUBTYPE "list_adt[below(3)].cdr(query_coeff.L)" "{ll: list_adt[below(3)].list | list_adt[below(3)].cons?(ll)}")) (|switch_one_entry_TCC3-1| |nil| 3621672198 ("" (SKEEP) (("" (GRIND) (("" (TYPEPRED (L)) (("" (GRIND) (("" (TYPEPRED (N)) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)) NIL (|switch_one_entry| SUBTYPE "list_adt[below(3)].cdr(query_coeff.L)" "{ll: list_adt[below(3)].list | list_adt[below(3)].cons?(ll)}"))) (|switch_one_entry_TCC4| 0 (|switch_one_entry_TCC4-2| "" 3883682060 ("" (SKEEP) (("" (TYPEPRED ("n")) (("" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK (|switch_one_entry| SUBTYPE "(number_fields.-)(query_coeff.n, 1)" "below(list_props[below(3)].length(list_adt[below(3)].cdr(query_coeff.L)))")) (|switch_one_entry_TCC4-1| |nil| 3621672198 ("" (SKEEP) (("" (TYPEPRED (N)) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|switch_one_entry| SUBTYPE "(number_fields.-)(query_coeff.n, 1)" "below(list_props[below(3)].length(list_adt[below(3)].cdr(query_coeff.L)))"))) (|switch_one_entry_TCC5| 0 (|switch_one_entry_TCC5-1| |nil| 3621672198 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|switch_one_entry| TERMINATION "query_coeff.switch_one_entry(list_adt[below(3)].cdr(query_coeff.L), (number_fields.-)(query_coeff.n, 1), query_coeff.new)" "NIL"))) (|switch_one_entry_TCC6| 0 (|switch_one_entry_TCC6-2| "" 3883682118 ("" (SKEEP) (("" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "v(cdr[below(3)](L), n-1, new)") (("1" (INST -3 "i-1") (("1" (GRIND) (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (TYPEPRED ("L")) (("2" (TYPEPRED ("i")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("n")) (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED ("n")) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|switch_one_entry| SUBTYPE "list_adt[below(3)].cons(list_adt[below(3)].car(query_coeff.L), query_coeff.switch_one_entry(list_adt[below(3)].cdr(query_coeff.L), (number_fields.-)(query_coeff.n, 1), query_coeff.new))" "{ll: list_adt[below(3)].list | booleans.AND(list_props[below(3)].length(ll) = list_props[below(3)].length(query_coeff.L), FORALL (i: naturalnumbers.below(list_props[below(3)].length(query_coeff.L))): booleans.IMPLIES(i /= query_coeff.n, list_props[below(3)].nth(ll, i) = list_props[below(3)].nth(query_coeff.L, i)))}")) (|switch_one_entry_TCC6-1| |nil| 3621672198 ("" (SKEEP) (("" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "v(cdr[below(3)](L), n-1, new)") (("1" (INST -3 "i-1") (("1" (GRIND) (("1" (EXPAND "nth" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (TYPEPRED (L)) (("2" (TYPEPRED (I)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (N)) (("2" (GRIND) NIL NIL)) NIL) ("3" (TYPEPRED (N)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (L SKOLEM-CONST-DECL "{ll: list[below(3)] | cons?[below(3)](ll)}" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "below(length(L))" |query_coeff| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|switch_one_entry| SUBTYPE "list_adt[below(3)].cons(list_adt[below(3)].car(query_coeff.L), query_coeff.switch_one_entry(list_adt[below(3)].cdr(query_coeff.L), (number_fields.-)(query_coeff.n, 1), query_coeff.new))" "{ll: list_adt[below(3)].list | booleans.AND(list_props[below(3)].length(ll) = list_props[below(3)].length(query_coeff.L), FORALL (i: naturalnumbers.below(list_props[below(3)].length(query_coeff.L))): booleans.IMPLIES(i /= query_coeff.n, list_props[below(3)].nth(ll, i) = list_props[below(3)].nth(query_coeff.L, i)))}"))) (|switch_is_with_TCC1| 0 (|switch_is_with_TCC1-1| |nil| 3621678714 ("" (EXISTENCE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|switch_is_with| EXISTENCE "" "below(3)"))) (|switch_is_with| 0 (|switch_is_with-3| "" 3883682744 ("" (CASE " FORALL (nn:posnat, L: list[below(3)], n: below(length(L)), new: below(3),
                            (f: [nat -> below(3)]
                                 | array2list[below(3)](length(L))(f) = L)):
                      nn = length(L) IMPLIES switch_one_entry(L, n, new) =
                       array2list[below(3)](length(L))(f WITH [n := new])") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(L)") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE-REPLACE "j=0") (("1" (EXPAND "switch_one_entry") (("1" (HIDE -2) (("1" (TYPEPRED ("n")) (("1" (GROUND) (("1" (REPLACE -4 :DIR RL) (("1" (CASE-REPLACE "n=0") (("1" (GRIND) (("1" (CASE "cdr(L) = null") (("1" (GROUND) NIL NIL) ("2" (GRIND) (("2" (EXPAND "length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "n=0") (("1" (EXPAND "switch_one_entry" 2) (("1" (GROUND) (("1" (EXPAND "array2list" 2) (("1" (EXPAND "array2list_it") (("1" (CASE-REPLACE "cdr(L) = array2list_it(f WITH [n := new], length(L), 1)") (("1" (HIDE 3) (("1" (LEMMA "list_extensionality[below(3)]") (("1" (INST -1 "cdr(L)" " array2list_it(f WITH [n := new], length(L), 1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("2" (REPLACE -2) (("2" (GROUND) (("2" (TYPEPRED "cdr(L)") (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED ("L")) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("3" (TYPEPRED ("n_1")) (("3" (INST -4 "n_1+1") (("1" (REPLACE -6) (("1" (GROUND) (("1" (REPLACE -4 :DIR RL) (("1" (TYPEPRED ("f")) (("1" (CASE-REPLACE "nth(cdr(L), n_1) = nth(L, n_1+1)") (("1" (REPLACE -2 :DIR RL) (("1" (HIDE 2) (("1" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "n_1+1") (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "length" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "switch_one_entry" 3) (("2" (GROUND) (("2" (EXPAND "array2list" 3) (("2" (EXPAND "array2list_it") (("2" (TYPEPRED ("f")) (("2" (CASE-REPLACE "f(0) = car(L)") (("1" (CASE-REPLACE "switch_one_entry(cdr(L), n - 1, new) = array2list_it(f WITH [n := new], length(L), 1)") (("1" (HIDE 4) (("1" (LEMMA "list_extensionality[below(3)]") (("1" (HIDE -2) (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "array2list_it(f WITH [n:=new], length(L), 1)") (("2" (REPLACE -2) (("2" (HIDE 2) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("3" (SKEEP) (("3" (INST -3 "n_1+1") (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "switch_one_entry(cdr(L), n - 1, new)") (("1" (INST -3 "n_1") (("1" (TYPEPRED ("n_1")) (("1" (CASE "n_1/=n-1") (("1" (GROUND) (("1" (REPLACE -1) (("1" (TYPEPRED ("f")) (("1" (CASE-REPLACE "nth(cdr(L), n_1) = nth(L, n_1+1)") (("1" (TYPEPRED ("n_1")) (("1" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "n_1+1") (("1" (REPLACE -6) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "length" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GROUND) (("2" (REPLACE -1) (("2" (CASE "FORALL (mm:posnat, ll:{lll:list[below(3)]|cons?(lll) AND length(lll) =mm}, m:below(mm)):
                               nth(switch_one_entry(ll, m, new), m) = new") (("1" (INST -1 "length(cdr(L))" "cdr(L)" "n-1") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE "j!1=0") (("1" (CASE-REPLACE "m=0") (("1" (EXPAND "switch_one_entry") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED ("m")) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "m=0") (("1" (REPLACE -1) (("1" (EXPAND "switch_one_entry") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "switch_one_entry" 3) (("2" (GROUND) (("2" (EXPAND "nth" 3) (("2" (INST -1 "cdr(ll)" "m-1") (("2" (TYPEPRED ("ll")) (("2" (EXPAND "length" -3) (("2" (GROUND) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED ("ll")) (("4" (TYPEPRED "switch_one_entry(ll, m, new)") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -) (("3" (SKEEP) (("3" (TYPEPRED ("m")) (("3" (TYPEPRED "mm") (("3" (TYPEPRED ("ll")) (("3" (TYPEPRED "switch_one_entry(ll, m, new)") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("n_1")) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (TYPEPRED "array2list[below(3)](length(L))(f)") (("2" (INST -3 "0") (("2" (GROUND) (("2" (REPLACE -4) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|switch_is_with-2| "" 3744292736 ("" (CASE " FORALL (nn:posnat, L: list[below(3)], n: below(length(L)), new: below(3),
                            (f: [nat -> below(3)]
                                 | array2list[below(3)](length(L))(f) = L)):
                      nn = length(L) IMPLIES switch_one_entry(L, n, new) =
                       array2list[below(3)](length(L))(f WITH [n := new])") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(L)") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE-REPLACE "j=0") (("1" (EXPAND "switch_one_entry") (("1" (HIDE -2) (("1" (TYPEPRED (N)) (("1" (GROUND) (("1" (REPLACE -4 :DIR RL) (("1" (CASE-REPLACE "n=0") (("1" (GRIND) (("1" (CASE "cdr(L) = null") (("1" (GROUND) NIL NIL) ("2" (GRIND) (("2" (EXPAND "length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "n=0") (("1" (EXPAND "switch_one_entry" 2) (("1" (GROUND) (("1" (EXPAND "array2list" 2) (("1" (EXPAND "array2list_it") (("1" (CASE-REPLACE "cdr(L) = array2list_it(f WITH [n := new], length(L), 1)") (("1" (HIDE 3) (("1" (LEMMA "list_extensionality[below(3)]") (("1" (INST -1 "cdr(L)" " array2list_it(f WITH [n := new], length(L), 1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("1" (REPLACE -2) (("1" (GROUND) (("1" (TYPEPRED "cdr(L)") (("1" (EXPAND "length" 1 2) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (L)) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("1" (TYPEPRED (N_1)) (("1" (INST -4 "n_1+1") (("1" (REPLACE -6) (("1" (GROUND) (("1" (REPLACE -4 :DIR RL) (("1" (TYPEPRED (F)) (("1" (CASE-REPLACE "nth(cdr(L), n_1) = nth(L, n_1+1)") (("1" (REPLACE -2 :DIR RL) (("1" (HIDE 2) (("1" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "n_1+1") (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "length" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "switch_one_entry" 3) (("2" (GROUND) (("2" (EXPAND "array2list" 3) (("2" (EXPAND "array2list_it") (("2" (TYPEPRED (F)) (("2" (CASE-REPLACE "f(0) = car(L)") (("1" (CASE-REPLACE "switch_one_entry(cdr(L), n - 1, new) = array2list_it(f WITH [n := new], length(L), 1)") (("1" (HIDE 4) (("1" (LEMMA "list_extensionality[below(3)]") (("1" (HIDE -2) (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "array2list_it(f WITH [n:=new], length(L), 1)") (("1" (REPLACE -2) (("1" (HIDE 2) (("1" (EXPAND "length" 1 2) (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL) ("3" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("1" (SKEEP) (("1" (INST -3 "n_1+1") (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "switch_one_entry(cdr(L), n - 1, new)") (("1" (INST -3 "n_1") (("1" (TYPEPRED (N_1)) (("1" (CASE "n_1/=n-1") (("1" (GROUND) (("1" (REPLACE -1) (("1" (TYPEPRED (F)) (("1" (CASE-REPLACE "nth(cdr(L), n_1) = nth(L, n_1+1)") (("1" (TYPEPRED (N_1)) (("1" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "n_1+1") (("1" (REPLACE -6) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "length" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GROUND) (("2" (REPLACE -1) (("2" (CASE "FORALL (mm:posnat, ll:{lll:list[below(3)]|cons?(lll) AND length(lll) =mm}, m:below(mm)):
                               nth(switch_one_entry(ll, m, new), m) = new") (("1" (INST -1 "length(cdr(L))" "cdr(L)" "n-1") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE "j!1=0") (("1" (CASE-REPLACE "m=0") (("1" (EXPAND "switch_one_entry") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED (M)) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "m=0") (("1" (REPLACE -1) (("1" (EXPAND "switch_one_entry") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "switch_one_entry" 3) (("2" (GROUND) (("2" (EXPAND "nth" 3) (("2" (INST -1 "cdr(ll)" "m-1") (("2" (TYPEPRED (LL)) (("2" (EXPAND "length" -3) (("2" (GROUND) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED (LL)) (("4" (TYPEPRED "switch_one_entry(ll, m, new)") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -) (("3" (SKEEP) (("3" (TYPEPRED (M)) (("3" (TYPEPRED "mm") (("3" (TYPEPRED (LL)) (("3" (TYPEPRED "switch_one_entry(ll, m, new)") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED (N_1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL) ("2" (HIDE 4) (("2" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "0") (("1" (GROUND) (("1" (REPLACE -4) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) (("4" (GRIND) NIL NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|array2list_it| DEF-DECL "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}" |array2list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|n_1| SKOLEM-CONST-DECL "below(length(switch_one_entry(cdr(L), n - 1, new)))" |query_coeff| NIL) (|new| SKOLEM-CONST-DECL "below(3)" |query_coeff| NIL) (|n| SKOLEM-CONST-DECL "below(length(L))" |query_coeff| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |query_coeff| NIL) (|ll| SKOLEM-CONST-DECL "{lll: list[below(3)] | cons?(lll) AND length(lll) = 1 + j!1}" |query_coeff| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|n_1| SKOLEM-CONST-DECL "below(length(cdr(L)))" |query_coeff| NIL) (L SKOLEM-CONST-DECL "list[below(3)]" |query_coeff| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|switch_one_entry| DEF-DECL "{ll: list[below(3)] |
   length(ll) = length(L) AND
    FORALL (i: below(length(L))): i /= n IMPLIES nth(ll, i) = nth(L, i)}" |query_coeff| NIL)) SHOSTAK) (|switch_is_with-1| |nil| 3621678727 ("" (CASE " FORALL (nn:posnat, L: list[below(3)], n: below(length(L)), new: below(3),
                     (f: [nat -> below(3)]
                          | array2list[below(3)](length(L))(f) = L)):
               nn = length(L) IMPLIES switch_one_entry(L, n, new) =
                array2list[below(3)](length(L))(f WITH [n := new])") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(L)") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE-REPLACE "j=0") (("1" (EXPAND "switch_one_entry") (("1" (HIDE -2) (("1" (TYPEPRED (N)) (("1" (GROUND) (("1" (REPLACE -4 :DIR RL) (("1" (CASE-REPLACE "n=0") (("1" (GRIND) (("1" (CASE "cdr(L) = null") (("1" (GROUND) NIL NIL) ("2" (GRIND) (("2" (EXPAND "length") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "n=0") (("1" (EXPAND "switch_one_entry" 2) (("1" (GROUND) (("1" (EXPAND "array2list" 2) (("1" (EXPAND "array2list_it") (("1" (CASE-REPLACE "cdr(L) = array2list_it(f WITH [n := new], length(L), 1)") (("1" (HIDE 3) (("1" (LEMMA "list_extensionality[below(3)]") (("1" (INST -1 "cdr(L)" " array2list_it(f WITH [n := new], length(L), 1)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("2" (REPLACE -2) (("2" (GROUND) (("2" (TYPEPRED "cdr(L)") (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (TYPEPRED (L)) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("3" (TYPEPRED (N_1)) (("3" (INST -4 "n_1+1") (("1" (REPLACE -6) (("1" (GROUND) (("1" (REPLACE -4 :DIR RL) (("1" (TYPEPRED (F)) (("1" (CASE-REPLACE "nth(cdr(L), n_1) = nth(L, n_1+1)") (("1" (REPLACE -2 :DIR RL) (("1" (HIDE 2) (("1" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "n_1+1") (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "length" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "switch_one_entry" 3) (("2" (GROUND) (("2" (EXPAND "array2list" 3) (("2" (EXPAND "array2list_it") (("2" (TYPEPRED (F)) (("2" (CASE-REPLACE "f(0) = car(L)") (("1" (CASE-REPLACE "switch_one_entry(cdr(L), n - 1, new) = array2list_it(f WITH [n := new], length(L), 1)") (("1" (HIDE 4) (("1" (LEMMA "list_extensionality[below(3)]") (("1" (HIDE -2) (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "array2list_it(f WITH [n:=new], length(L), 1)") (("2" (REPLACE -2) (("2" (HIDE 2) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "array2list_it(f WITH [n := new], length(L), 1)") (("3" (SKEEP) (("3" (INST -3 "n_1+1") (("1" (REPLACE -3 :DIR RL) (("1" (TYPEPRED "switch_one_entry(cdr(L), n - 1, new)") (("1" (INST -3 "n_1") (("1" (TYPEPRED (N_1)) (("1" (CASE "n_1/=n-1") (("1" (GROUND) (("1" (REPLACE -1) (("1" (TYPEPRED (F)) (("1" (CASE-REPLACE "nth(cdr(L), n_1) = nth(L, n_1+1)") (("1" (TYPEPRED (N_1)) (("1" (TYPEPRED "array2list[below(3)](length(L))(f)") (("1" (INST -3 "n_1+1") (("1" (REPLACE -6) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "length" 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4) (("2" (GROUND) (("2" (REPLACE -1) (("2" (CASE "FORALL (mm:posnat, ll:{lll:list[below(3)]|cons?(lll) AND length(lll) =mm}, m:below(mm)):
        nth(switch_one_entry(ll, m, new), m) = new") (("1" (INST -1 "length(cdr(L))" "cdr(L)" "n-1") NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "mm") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE "j!1=0") (("1" (CASE-REPLACE "m=0") (("1" (EXPAND "switch_one_entry") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED (M)) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "m=0") (("1" (REPLACE -1) (("1" (EXPAND "switch_one_entry") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "switch_one_entry" 3) (("2" (GROUND) (("2" (EXPAND "nth" 3) (("2" (INST -1 "cdr(ll)" "m-1") (("2" (TYPEPRED (LL)) (("2" (EXPAND "length" -3) (("2" (GROUND) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED (LL)) (("4" (TYPEPRED "switch_one_entry(ll, m, new)") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -) (("3" (SKEEP) (("3" (TYPEPRED (M)) (("3" (TYPEPRED "mm") (("3" (TYPEPRED (LL)) (("3" (TYPEPRED "switch_one_entry(ll, m, new)") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (LIFT-IF) (("2" (SPLIT) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED (N_1)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (TYPEPRED "array2list[below(3)](length(L))(f)") (("2" (INST -3 "0") (("2" (GROUND) (("2" (REPLACE -4) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|bump_one_ind_list_TCC1| 0 (|bump_one_ind_list_TCC1-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "(number_fields.-)((number_fields.+)(query_coeff.j, 1), query_coeff.i)" "naturalnumber"))) (|bump_one_ind_list_TCC2| 0 (|bump_one_ind_list_TCC2-2| "" 3883684242 ("" (SKEEP) (("" (TYPEPRED ("j")) (("" (LEMMA "expt_ge1") (("" (INST -1 "3" "j+1") (("" (GROUND) (("" (SKEEP) (("" (GRIND) (("" (TYPEPRED ("L")) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_ind_list| SUBTYPE "query_coeff.L" "{ll: list_adt[below(3)].list | list_adt[below(3)].cons?(ll)}")) (|bump_one_ind_list_TCC2-1| |nil| 3621672198 ("" (SKEEP) (("" (TYPEPRED (J)) (("" (LEMMA "expt_ge1") (("" (INST -1 "3" "j+1") (("" (GROUND) (("" (SKEEP) (("" (GRIND) (("" (TYPEPRED (L)) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt_ge1| FORMULA-DECL NIL |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "query_coeff.L" "{ll: list_adt[below(3)].list | list_adt[below(3)].cons?(ll)}"))) (|bump_one_ind_list_TCC3| 0 (|bump_one_ind_list_TCC3-3| "" 3883685891 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED ("j")) (("" (TYPEPRED ("L")) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_ind_list| SUBTYPE "query_coeff.i" "below(list_props[below(3)].length(query_coeff.L))")) (|bump_one_ind_list_TCC3-2| "" 3790097669 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (J)) (("" (TYPEPRED (L)) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|bump_one_ind_list| SUBTYPE "query_coeff.i" "below(list_props[below(3)].length(query_coeff.L))")) (|bump_one_ind_list_TCC3-1| |nil| 3621672198 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (J)) (("" (TYPEPRED (L)) (("" (GROUND) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|bump_one_ind_list| SUBTYPE "query_coeff.i" "below(list_props[below(3)].length(query_coeff.L))"))) (|bump_one_ind_list_TCC4| 0 (|bump_one_ind_list_TCC4-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "(number_fields.+)(query_coeff.ent, 1)" "below(3)"))) (|bump_one_ind_list_TCC5| 0 (|bump_one_ind_list_TCC5-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "query_coeff.switch_one_entry(query_coeff.L, query_coeff.i, (number_fields.+)(query_coeff.ent, 1))" "listn[below(3)]((number_fields.+)(1, query_coeff.j))"))) (|bump_one_ind_list_TCC6| 0 (|bump_one_ind_list_TCC6-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto((number_fields.+)(1, query_coeff.j))"))) (|bump_one_ind_list_TCC7| 0 (|bump_one_ind_list_TCC7-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| TERMINATION "query_coeff.bump_one_ind_list(query_coeff.j, query_coeff.L, (number_fields.+)(query_coeff.i, 1))" "NIL"))) (|bump_one_ind_list_TCC8| 0 (|bump_one_ind_list_TCC8-1| |nil| 3621672198 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(j, L, i + 1)") (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED (L)) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "query_coeff.bump_one_ind_list(query_coeff.j, query_coeff.L, (number_fields.+)(query_coeff.i, 1))" "{ll: list_adt[below(3)].list | list_adt[below(3)].cons?(ll)}"))) (|bump_one_ind_list_TCC9| 0 (|bump_one_ind_list_TCC9-1| |nil| 3621672198 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(j, L, i + 1)") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED (L)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "query_coeff.i" "below(list_props[below(3)].length(query_coeff.bump_one_ind_list(query_coeff.j, query_coeff.L, (number_fields.+)(1, query_coeff.i))))"))) (|bump_one_ind_list_TCC10| 0 (|bump_one_ind_list_TCC10-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "query_coeff.switch_one_entry(query_coeff.bump_one_ind_list(query_coeff.j, query_coeff.L, (number_fields.+)(query_coeff.i, 1)), query_coeff.i, 0)" "listn[below(3)]((number_fields.+)(1, query_coeff.j))"))) (|bump_one_ind_list_TCC11| 0 (|bump_one_ind_list_TCC11-1| |nil| 3621672198 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|bump_one_ind_list| SUBTYPE "query_coeff.i" "below[length[below(3)](L)]"))) (|bump_one_below| 0 (|bump_one_below-2| "" 3883685982 ("" (SKOLEM 1 ("j" "_" "_" "_")) (("" (CASE "FORALL (n:nat, 
              (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
              (i: upto(j + 1)), (k: nat)): (n=j+1-i) IMPLIES (
        k < i IMPLIES bump_one_ind(j, f, i)(k) = f(k))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j+1-i") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (TYPEPRED ("f")) (("1" (INST -1 "i") (("1" (EXPAND "bump_one_ind") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SIMPLIFY) (("2" (SKEEP) (("2" (EXPAND "bump_one_ind" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "f" "i+1" "k") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|bump_one_below-1| |nil| 3621242035 ("" (SKOLEM 1 ("j" "_" "_" "_")) (("" (CASE "FORALL (n:nat, 
              (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
              (i: upto(j + 1)), (k: nat)): (n=j+1-i) IMPLIES (
        k < i IMPLIES bump_one_ind(j, f, i)(k) = f(k))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j+1-i") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (TYPEPRED (F)) (("1" (INST -1 "i") (("1" (EXPAND "bump_one_ind") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SIMPLIFY) (("2" (SKEEP) (("2" (EXPAND "bump_one_ind" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "f" "i+1" "k") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|bump_one_ind_lem| 0 (|bump_one_ind_lem-3| "" 3883688358 ("" (SKEEP) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (EXPAND "base_n_to_nat") (("1" (LEMMA "sigma_with") (("1" (EXPAND "bump_one_ind") (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (s: nat):
                  3 ^ s *
                   IF f(i) < 2 THEN f WITH [i := 1 + f(i)](s)
                   ELSE bump_one_ind(j, f, 1 + i) WITH [i := 0](s)
                   ENDIF) =  (LAMBDA (s: nat): 3 ^ s * f(s)) WITH [i:= 3^i*(1+f(i))]") (("1" (INST -2 "(LAMBDA (s: nat): 3 ^ s * f(s)) WITH [i := 3 ^ i * (1 + f(i))]" "LAMBDA (s: nat): 3 ^ s * f(s)" "3 ^ i * (1 + f(i))" "1+j" "i" "0") (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (GROUND) (("2" (CASE "i=x!1") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "base_n_to_nat") (("2" (EXPAND "bump_one_ind" 2 1) (("2" (LEMMA "sigma_with") (("2" (INST -1 "LAMBDA (s: nat):
              3 ^ s *
               IF f(i) < 2 THEN f WITH [i := 1 + f(i)](s)
               ELSE bump_one_ind(j, f, 1 + i) WITH [i := 0](s)
               ENDIF " " LAMBDA (s: nat): 3 ^ s * bump_one_ind(j, f, 1 + i)(s)" "0" "j+1" "i" "0") (("1" (SPLIT -1) (("1" (GROUND) (("1" (CASE "i+1<=j+1") (("1" (GROUND) (("1" (REPLACE -2) (("1" (CASE-REPLACE "bump_one_ind(j, f, 1 + i)(i) = f(i)") (("1" (GROUND) NIL NIL) ("2" (LEMMA "bump_one_below") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (TYPEPRED ("f")) (("2" (TYPEPRED ("i")) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (HIDE 3) (("4" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!1 = i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("f")) (("2" (TYPEPRED ("i")) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED ("f")) (("3" (TYPEPRED ("i")) (("3" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("f")) (("2" (TYPEPRED ("i")) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (TYPEPRED ("f")) (("3" (TYPEPRED ("i")) (("3" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|bump_one_ind_lem-2| "" 3750606833 ("" (SKEEP) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (EXPAND "base_n_to_nat") (("1" (LEMMA "sigma_with") (("1" (EXPAND "bump_one_ind") (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (s: nat):
                  3 ^ s *
                   IF f(i) < 2 THEN f WITH [i := 1 + f(i)](s)
                   ELSE bump_one_ind(j, f, 1 + i) WITH [i := 0](s)
                   ENDIF) =  (LAMBDA (s: nat): 3 ^ s * f(s)) WITH [i:= 3^i*(1+f(i))]") (("1" (INST -2 "(LAMBDA (s: nat): 3 ^ s * f(s)) WITH [i := 3 ^ i * (1 + f(i))]" "LAMBDA (s: nat): 3 ^ s * f(s)" "3 ^ i * (1 + f(i))" "1+j" "i" "0") (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (GROUND) (("2" (CASE "i=x!1") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "base_n_to_nat") (("2" (EXPAND "bump_one_ind" 2 1) (("2" (LEMMA "sigma_with") (("2" (INST -1 "LAMBDA (s: nat):
              3 ^ s *
               IF f(i) < 2 THEN f WITH [i := 1 + f(i)](s)
               ELSE bump_one_ind(j, f, 1 + i) WITH [i := 0](s)
               ENDIF " " LAMBDA (s: nat): 3 ^ s * bump_one_ind(j, f, 1 + i)(s)" "0" "j+1" "i" "0") (("1" (SPLIT -1) (("1" (GROUND) (("1" (CASE "i+1<=j+1") (("1" (GROUND) (("1" (REPLACE -2) (("1" (CASE-REPLACE "bump_one_ind(j, f, 1 + i)(i) = f(i)") (("1" (GROUND) NIL NIL) ("2" (LEMMA "bump_one_below") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (TYPEPRED (F)) (("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (HIDE 3) (("4" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!1 = i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (F)) (("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (F)) (("3" (TYPEPRED (I)) (("3" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (F)) (("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (I)) (("3" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bump_one_below| FORMULA-DECL NIL |query_coeff| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| |reals|) (|base_n_to_nat| CONST-DECL "nat" |base_repr| |reals|) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|f| SKOLEM-CONST-DECL "{f | FORALL (k: above(j)): f(k) = 0}" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sigma_with| FORMULA-DECL NIL |sigma| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|bump_one_ind_lem-1| |nil| 3621174807 ("" (SKEEP) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (EXPAND "base_n_to_nat") (("1" (LEMMA "sigma_with") (("1" (EXPAND "bump_one_ind") (("1" (FLATTEN) (("1" (CASE-REPLACE "(LAMBDA (s: nat):
                  3 ^ s *
                   IF f(i) < 2 THEN f WITH [i := 1 + f(i)](s)
                   ELSE bump_one_ind(j, f, 1 + i) WITH [i := 0](s)
                   ENDIF) =  (LAMBDA (s: nat): 3 ^ s * f(s)) WITH [i:= 3^i*(1+f(i))]") (("1" (INST -2 "(LAMBDA (s: nat): 3 ^ s * f(s)) WITH [i := 3 ^ i * (1 + f(i))]" "LAMBDA (s: nat): 3 ^ s * f(s)" "3 ^ i * (1 + f(i))" "1+j" "i" "0") (("1" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (DECOMPOSE-EQUALITY 1) (("2" (GROUND) (("2" (CASE "i=x!1") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "base_n_to_nat") (("2" (EXPAND "bump_one_ind" 2 1) (("2" (LEMMA "sigma_with") (("2" (INST -1 "LAMBDA (s: nat):
              3 ^ s *
               IF f(i) < 2 THEN f WITH [i := 1 + f(i)](s)
               ELSE bump_one_ind(j, f, 1 + i) WITH [i := 0](s)
               ENDIF " " LAMBDA (s: nat): 3 ^ s * bump_one_ind(j, f, 1 + i)(s)" "0" "j+1" "i" "0") (("1" (SPLIT -1) (("1" (GROUND) (("1" (CASE "i+1<=j+1") (("1" (GROUND) (("1" (REPLACE -2) (("1" (CASE-REPLACE "bump_one_ind(j, f, 1 + i)(i) = f(i)") (("1" (GROUND) NIL NIL) ("2" (LEMMA "bump_one_below") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 3)) (("2" (TYPEPRED (F)) (("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (HIDE 3) (("4" (DECOMPOSE-EQUALITY 1) (("1" (CASE "x!1 = i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (F)) (("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (F)) (("3" (TYPEPRED (I)) (("3" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (F)) (("2" (TYPEPRED (I)) (("2" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (I)) (("3" (CASE "i<1+j") (("1" (GROUND) NIL NIL) ("2" (CASE "i=1+j") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|bump_one_ind_lem2_TCC1| 0 (|bump_one_ind_lem2_TCC1-1| |nil| 3621258320 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_ind_lem2| SUBTYPE "0" "upto((number_fields.+)(1, query_coeff.j))"))) (|bump_one_ind_lem2_TCC2| 0 (|bump_one_ind_lem2_TCC2-2| "" 3883688385 ("" (SKEEP) (("" (TYPEPRED ("i")) (("" (CASE "i=j+1") (("1" (TYPEPRED ("f")) (("1" (INST -1 "i") (("1" (INST -4 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_ind_lem2| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto((number_fields.+)(1, query_coeff.j))")) (|bump_one_ind_lem2_TCC2-1| |nil| 3621258320 ("" (SKEEP) (("" (TYPEPRED (I)) (("" (CASE "i=j+1") (("1" (TYPEPRED (F)) (("1" (INST -1 "i") (("1" (INST -4 "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_ind_lem2| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto((number_fields.+)(1, query_coeff.j))"))) (|bump_one_ind_lem2| 0 (|bump_one_ind_lem2-3| "" 3883688546 ("" (SKOLEM 1 ("j" "_" "_")) (("" (CASE "FORALL (n:nat, (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
                     (i: upto(1 + j))): n=i IMPLIES
               (FORALL (m: nat): m <= i IMPLIES f(m) = 2) IMPLIES
                base_n_to_nat(3, bump_one_ind(j, f, 0), j + 1) =
                 base_n_to_nat(3, bump_one_ind(j, f, i + 1), j + 1) -
                  sigma(0, i, LAMBDA (s: nat): 2 * 3 ^ s)") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "i") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (SIMPLIFY) (("1" (REWRITE "sigma_eq_arg") (("1" (EXPAND "bump_one_ind" 1 1) (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "base_n_to_nat") (("1" (LEMMA "sigma_with") (("1" (INST -1 "LAMBDA (s: nat):
              3 ^ s * bump_one_ind(j, f, 1) WITH [(0) := 0](s)" "LAMBDA (s: nat): 3 ^ s * bump_one_ind(j, f, 1)(s)" "0" "j+1" "0" "0") (("1" (SPLIT -1) (("1" (REWRITE "bump_one_below") (("1" (GROUND) (("1" (REPLACE -2) (("1" (GROUND) (("1" (EXPAND "*") (("1" (GROUND) (("1" (CASE-REPLACE "(LAMBDA (s: nat):
              (LAMBDA (x: nat): 3 ^ s * bump_one_ind(j, f, 1)(x))
                WITH [(0) := 0]
                  (s)) = LAMBDA (s: nat):
              3 ^ s * (bump_one_ind(j, f, 1) WITH [(0) := 0])(s)") (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (HIDE 2) (("4" (DECOMPOSE-EQUALITY 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "f" "i-1") (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "i") (("1" (LIFT-IF -1) (("1" (INST-CP -4 "i") (("1" (SPLIT -5) (("1" (GROUND) (("1" (REPLACE -3) (("1" (REPLACE -1) (("1" (SIMPLIFY 2) (("1" (BOTH-SIDES "*" "-1" 2) (("1" (SIMPLIFY 2) (("1" (REPLACE -2) (("1" (EXPAND "sigma" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "m") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (HIDE 2) (("3" (TYPEPRED ("f")) (("3" (TYPEPRED ("i")) (("3" (INST - "i") (("1" (INST - "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED ("f")) (("3" (TYPEPRED ("j")) (("3" (TYPEPRED ("i")) (("3" (INST -5 "i") (("3" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|bump_one_ind_lem2-2| "" 3804279830 ("" (SKOLEM 1 ("j" "_" "_")) (("" (CASE "FORALL (n:nat, (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
                     (i: upto(1 + j))): n=i IMPLIES
               (FORALL (m: nat): m <= i IMPLIES f(m) = 2) IMPLIES
                base_n_to_nat(3, bump_one_ind(j, f, 0), j + 1) =
                 base_n_to_nat(3, bump_one_ind(j, f, i + 1), j + 1) -
                  sigma(0, i, LAMBDA (s: nat): 2 * 3 ^ s)") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "i") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (SIMPLIFY) (("1" (REWRITE "sigma_eq_arg") (("1" (EXPAND "bump_one_ind" 1 1) (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "base_n_to_nat") (("1" (LEMMA "sigma_with") (("1" (INST -1 "LAMBDA (s: nat):
              3 ^ s * bump_one_ind(j, f, 1) WITH [(0) := 0](s)" "LAMBDA (s: nat): 3 ^ s * bump_one_ind(j, f, 1)(s)" "0" "j+1" "0" "0") (("1" (SPLIT -1) (("1" (REWRITE "bump_one_below") (("1" (GROUND) (("1" (REPLACE -2) (("1" (GROUND) (("1" (EXPAND "*") (("1" (GROUND) (("1" (CASE-REPLACE "(LAMBDA (s: nat):
              (LAMBDA (x: nat): 3 ^ s * bump_one_ind(j, f, 1)(x))
                WITH [(0) := 0]
                  (s)) = LAMBDA (s: nat):
              3 ^ s * (bump_one_ind(j, f, 1) WITH [(0) := 0])(s)") (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (HIDE 2) (("4" (DECOMPOSE-EQUALITY 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "f" "i-1") (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "i") (("1" (LIFT-IF -1) (("1" (INST-CP -4 "i") (("1" (SPLIT -5) (("1" (GROUND) (("1" (REPLACE -3) (("1" (REPLACE -1) (("1" (SIMPLIFY 2) (("1" (BOTH-SIDES "*" "-1" 2) (("1" (SIMPLIFY 2) (("1" (REPLACE -2) (("1" (EXPAND "sigma" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "m") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (HIDE 2) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (I)) (("3" (INST - "i") (("1" (INST - "i") (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (J)) (("3" (TYPEPRED (I)) (("3" (INST -5 "i") (("3" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|base_n_to_nat| CONST-DECL "nat" |base_repr| |reals|) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| |reals|) (|sigma_eq_arg| FORMULA-DECL NIL |sigma| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_with| FORMULA-DECL NIL |sigma| |reals|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|bump_one_below| FORMULA-DECL NIL |query_coeff| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|bump_one_ind_lem| FORMULA-DECL NIL |query_coeff| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|bump_one_ind_lem2-1| |nil| 3621258372 ("" (SKOLEM 1 ("j" "_" "_")) (("" (CASE "FORALL (n:nat, (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
                     (i: upto(1 + j))): n=i IMPLIES
               (FORALL (m: nat): m <= i IMPLIES f(m) = 2) IMPLIES
                base_n_to_nat(3, bump_one_ind(j, f, 0), j + 1) =
                 base_n_to_nat(3, bump_one_ind(j, f, i + 1), j + 1) -
                  sigma(0, i, LAMBDA (s: nat): 2 * 3 ^ s)") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "i") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (SIMPLIFY) (("1" (REWRITE "sigma_eq_arg") (("1" (EXPAND "bump_one_ind" 1 1) (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "base_n_to_nat") (("1" (LEMMA "sigma_with") (("1" (INST -1 "LAMBDA (s: nat):
              3 ^ s * bump_one_ind(j, f, 1) WITH [(0) := 0](s)" "LAMBDA (s: nat): 3 ^ s * bump_one_ind(j, f, 1)(s)" "0" "j+1" "0" "0") (("1" (SPLIT -1) (("1" (REWRITE "bump_one_below") (("1" (GROUND) (("1" (REPLACE -2) (("1" (GROUND) (("1" (EXPAND "*") (("1" (GROUND) (("1" (CASE-REPLACE "(LAMBDA (s: nat):
              (LAMBDA (x: nat): 3 ^ s * bump_one_ind(j, f, 1)(x))
                WITH [(0) := 0]
                  (s)) = LAMBDA (s: nat):
              3 ^ s * (bump_one_ind(j, f, 1) WITH [(0) := 0])(s)") (("1" (DECOMPOSE-EQUALITY 1) (("1" (HIDE (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL) ("4" (HIDE 2) (("4" (DECOMPOSE-EQUALITY 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "f" "i-1") (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "i") (("1" (LIFT-IF -1) (("1" (INST-CP -4 "i") (("1" (SPLIT -5) (("1" (GROUND) (("1" (REPLACE -3) (("1" (REPLACE -1) (("1" (SIMPLIFY 2) (("1" (BOTH-SIDES "*" "-1" 2) (("1" (SIMPLIFY 2) (("1" (REPLACE -2) (("1" (EXPAND "sigma" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "m") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (HIDE 2) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (I)) (("3" (INST -3 "i") (("3" (INST -2 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (J)) (("3" (TYPEPRED (I)) (("3" (INST -4 "i") (("3" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|low2_TCC1| 0 (|low2_TCC1-1| |nil| 3621333123 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|i!1| SKOLEM-CONST-DECL "{ii: upto(1 + j!1) | f!1(ii) < 2}" |query_coeff| NIL) (|f!1| SKOLEM-CONST-DECL "{f | FORALL (k: above(j!1)): f(k) = 0}" |query_coeff| NIL) (|j!1| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL)) NIL (|low2| SUBTYPE "{m: naturalnumbers.nat | booleans.AND(reals.<(m, query_coeff.i), reals.<(query_coeff.f(m), 2))}" "(sets[nat].nonempty?)"))) (|low2_TCC2| 0 (|low2_TCC2-1| |nil| 3621333123 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|j!1| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|f!1| SKOLEM-CONST-DECL "{f | FORALL (k: above(j!1)): f(k) = 0}" |query_coeff| NIL) (|i!1| SKOLEM-CONST-DECL "{ii: upto(1 + j!1) | f!1(ii) < 2}" |query_coeff| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|low2| SUBTYPE "sets[nat].choose({m: naturalnumbers.nat | booleans.AND(reals.<(m, query_coeff.i), reals.<(query_coeff.f(m), 2))})" "{ii: naturalnumbers.upto((number_fields.+)(1, query_coeff.j)) | reals.<(query_coeff.f(ii), 2)}"))) (|low2_lem| 0 (|low2_lem-2| "" 3883688678 ("" (SKOLEM 1 ("j" "f" "_")) (("" (CASE "FORALL (n:nat, i: {ii: upto(1 + j) | f(ii) < 2}):
               LET M = low2(j, f, i) IN
               n=i IMPLIES (
                 f(M) < 2 AND (FORALL (m: nat): m < M IMPLIES f(m) = 2))") (("1" (SKEEP) (("1" (INST -1 "i" "i") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n" 1 "NAT_induction") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (GROUND) (("2" (SKEEP) (("2" (EXPAND "low2" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -2 "choose({m: nat | m < i AND f(m) < 2}) ") (("1" (SPLIT -2) (("1" (INST -1 "choose({m: nat | m < i AND f(m) < 2}) ") (("1" (GROUND) NIL NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKEEP -2) (("2" (INST -1 "m") (("2" (GROUND) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKEEP -2) (("2" (INST -1 "m") (("2" (GROUND) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED ("i")) (("2" (GROUND) (("2" (CASE "nonempty?({m:nat| m<i AND f(m)<2})") (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (SKEEP) (("1" (EXPAND "member") (("1" (INST 2 "x") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (SKEEP) (("2" (EXPAND "empty?") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|low2_lem-1| |nil| 3621333584 ("" (SKOLEM 1 ("j" "f" "_")) (("" (CASE "FORALL (n:nat, i: {ii: upto(1 + j) | f(ii) < 2}):
               LET M = low2(j, f, i) IN
               n=i IMPLIES (
                 f(M) < 2 AND (FORALL (m: nat): m < M IMPLIES f(m) = 2))") (("1" (SKEEP) (("1" (INST -1 "i" "i") NIL NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n" 1 "NAT_induction") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (GROUND) (("2" (SKEEP) (("2" (EXPAND "low2" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -2 "choose({m: nat | m < i AND f(m) < 2}) ") (("1" (SPLIT -2) (("1" (INST -1 "choose({m: nat | m < i AND f(m) < 2}) ") (("1" (GROUND) NIL NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKEEP -2) (("2" (INST -1 "m") (("2" (GROUND) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (SKEEP -2) (("2" (INST -1 "m") (("2" (GROUND) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED (I)) (("2" (GROUND) (("2" (CASE "nonempty?({m:nat| m<i AND f(m)<2})") (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (SKEEP) (("1" (EXPAND "member") (("1" (INST 2 "x") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?") (("2" (SKEEP) (("2" (EXPAND "empty?") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|low2| DEF-DECL "{ii: upto(j + 1) | f(ii) < 2}" |query_coeff| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|i| SKOLEM-CONST-DECL "{ii: upto(1 + j) | f(ii) < 2}" |query_coeff| NIL) (|f| SKOLEM-CONST-DECL "{f | FORALL (k: above(j)): f(k) = 0}" |query_coeff| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|bump_one_prep_TCC1| 0 (|bump_one_prep_TCC1-1| |nil| 3621256133 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|bump_one_prep| SUBTYPE "0" "upto((number_fields.+)(1, query_coeff.j))"))) (|bump_one_prep| 0 (|bump_one_prep-2| "" 3883688794 ("" (CASE "FORALL (j: posnat,
                     (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0), n:{nn:upto(j+1)|f(nn)<2 AND (FORALL (m:nat):m<nn IMPLIES f(m) = 2 )}):
               base_n_to_nat(3, bump_one_ind(j, f, 0), j + 1) =
                base_n_to_nat(3, f, j + 1) + 1") (("1" (SKEEP) (("1" (CASE "EXISTS (nn:upto(j+1)): f(nn) < 2 AND
                                   (FORALL (m: nat): m < nn IMPLIES f(m) = 2)") (("1" (SKEEP) (("1" (INST? -3) (("1" (INST -3 "nn") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (TYPEPRED ("f")) (("2" (GROUND) (("2" (INST 1 " low2(j, f, j+1)") (("1" (LEMMA "low2_lem") (("1" (INST -1 "j" "f" "j+1") (("1" (GROUND) NIL NIL) ("2" (INST -1 "j+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED ("n")) (("2" (LEMMA "bump_one_ind_lem2") (("2" (INST?) (("2" (CASE-REPLACE "n=0") (("1" (TYPEPRED ("j")) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "0") (("1" (GROUND) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "n-1") (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "n") (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (SIMPLIFY 2) (("1" (REWRITE "sigma_scal") (("1" (LEMMA "sigma_geometric") (("1" (INST -1 "n-1" "0" "3") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (SIMPLIFY 2) (("1" (GROUND) (("1" (CASE-REPLACE "2 * ((3 ^ 0 - 3 ^ n) / (-2)) = - (3^0-3^n)") (("1" (GROUND) (("1" (CASE "forall(a,b:real): a - (-b) = a+b") (("1" (INST -1 "3^n" "(3 ^ 0 - 3 ^ n)") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SKEEP) (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|bump_one_prep-1| |nil| 3621256149 ("" (CASE "FORALL (j: posnat,
                     (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0), n:{nn:upto(j+1)|f(nn)<2 AND (FORALL (m:nat):m<nn IMPLIES f(m) = 2 )}):
               base_n_to_nat(3, bump_one_ind(j, f, 0), j + 1) =
                base_n_to_nat(3, f, j + 1) + 1") (("1" (SKEEP) (("1" (CASE "EXISTS (nn:upto(j+1)): f(nn) < 2 AND
                                   (FORALL (m: nat): m < nn IMPLIES f(m) = 2)") (("1" (SKEEP) (("1" (INST? -3) (("1" (INST -3 "nn") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (TYPEPRED (F)) (("2" (GROUND) (("2" (INST 1 " low2(j, f, j+1)") (("1" (LEMMA "low2_lem") (("1" (INST -1 "j" "f" "j+1") (("1" (GROUND) NIL NIL) ("2" (INST -1 "j+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED (N)) (("2" (LEMMA "bump_one_ind_lem2") (("2" (INST?) (("2" (CASE-REPLACE "n=0") (("1" (TYPEPRED (J)) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "0") (("1" (GROUND) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "n-1") (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "bump_one_ind_lem") (("1" (INST -1 "j" "f" "n") (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (SIMPLIFY 2) (("1" (REWRITE "sigma_scal") (("1" (LEMMA "sigma_geometric") (("1" (INST -1 "n-1" "0" "3") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (SIMPLIFY 2) (("1" (GROUND) (("1" (CASE-REPLACE "2 * ((3 ^ 0 - 3 ^ n) / (-2)) = - (3^0-3^n)") (("1" (GROUND) (("1" (CASE "forall(a,b:real): a - (-b) = a+b") (("1" (INST -1 "3^n" "(3 ^ 0 - 3 ^ n)") (("1" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CROSS-MULT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (SKEEP) (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| |reals|) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|n| SKOLEM-CONST-DECL "{nn: upto(1 + j) | f(nn) < 2 AND FORALL (m: nat): m < nn IMPLIES f(m) = 2}" |query_coeff| NIL) (|f| SKOLEM-CONST-DECL "{f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0}" |query_coeff| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma_geometric| FORMULA-DECL NIL |sigma_nat| |reals|) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|bump_one_ind_lem| FORMULA-DECL NIL |query_coeff| NIL) (|bump_one_ind_lem2| FORMULA-DECL NIL |query_coeff| NIL) (|low2_lem| FORMULA-DECL NIL |query_coeff| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|low2| DEF-DECL "{ii: upto(j + 1) | f(ii) < 2}" |query_coeff| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nn| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (|f| SKOLEM-CONST-DECL "{f | FORALL (k: above(j)): f(k) = 0}" |query_coeff| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (|base_n_to_nat| CONST-DECL "nat" |base_repr| |reals|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|bump_one_prep2_TCC1| 0 (|bump_one_prep2_TCC1-2| "" 3883688910 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED ("f")) (("" (TYPEPRED ("k_1")) (("" (LEMMA "upper_is_bound") (("" (INST?) (("" (INST -1 "k_1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_prep2| SUBTYPE "query_coeff.f" "{f | FORALL (k_1: integers.above((number_fields.+)(1, base_repr.upper_index(3, query_coeff.k)))): query_coeff.f(k_1) = 0}")) (|bump_one_prep2_TCC1-1| |nil| 3621264743 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (F)) (("" (TYPEPRED (K_1)) (("" (LEMMA "upper_is_bound") (("" (INST?) (("" (INST -1 "k_1") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upper_index| CONST-DECL "nat" |base_repr| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|upper_is_bound| FORMULA-DECL NIL |base_repr| |reals|) (|base_n| DEF-DECL "nat" |base_repr| |reals|) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|bump_one_prep2| SUBTYPE "query_coeff.f" "{f | FORALL (k_1: integers.above((number_fields.+)(1, base_repr.upper_index(3, query_coeff.k)))): query_coeff.f(k_1) = 0}"))) (|bump_one_prep2_TCC2| 0 (|bump_one_prep2_TCC2-1| |nil| 3621264743 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|base_n| DEF-DECL "nat" |base_repr| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_prep2| SUBTYPE "0" "upto((number_fields.+)(2, base_repr.upper_index(3, query_coeff.k)))"))) (|bump_one_prep2| 0 (|bump_one_prep2-2| "" 3883689031 ("" (SKEEP) (("" (LEMMA "bump_one_prep") (("" (INST?) (("" (LEMMA "base_n_unique") (("" (TYPEPRED ("f")) (("" (REPLACE -1) (("" (LEMMA "base_n_is_n_alt") (("" (INST -1 "3" "k" "upper_index(3, k) +2") (("" (SPLIT -1) (("1" (REPLACE -1 :DIR RL) (("1" (INST -3 "upper_index(3,k)+2 " "3" "bump_one_ind(upper_index(3, k) + 1, base_n(3, k), 0)") (("1" (EXPAND "base_n_to_nat" -4) (("1" (GROUND) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "bump_one_ind(1 + upper_index(3, k), base_n(3, k), 0)") (("1" (CASE "x!1>2+upper_index(3,k)") (("1" (INST -2 "x!1") (("1" (LEMMA "upper_is_bound") (("1" (INST -1 "3" "k+1" "x!1") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (HIDE (2 -6 -2 -6)) (("2" (HIDE -4) (("2" (EXPAND "upper_index") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (LEMMA "log_nat_incr") (("1" (REPLACE -2) (("1" (EXPAND "log_nat") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "log_nat_incr") (("2" (EXPAND "log_nat" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 1) (("2" (EXPAND "log_nat" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SIMPLIFY 2) (("2" (INST -2 "3" "(1 + k) / 3 / 3" "k") (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (HIDE (-3 -4 -2 3)) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!1") (("2" (SPLIT -4) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (LEMMA "log_nat_bounds") (("2" (INST -1 "3" "k") (("2" (GROUND) (("2" (FLATTEN) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2) (("2" (EXPAND "expt" 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|bump_one_prep2-1| |nil| 3621264745 ("" (SKEEP) (("" (LEMMA "bump_one_prep") (("" (INST?) (("" (LEMMA "base_n_unique") (("" (TYPEPRED (F)) (("" (REPLACE -1) (("" (LEMMA "base_n_is_n_alt") (("" (INST -1 "3" "k" "upper_index(3, k) +2") (("" (SPLIT -1) (("1" (REPLACE -1 :DIR RL) (("1" (INST -3 "upper_index(3,k)+2 " "3" "bump_one_ind(upper_index(3, k) + 1, base_n(3, k), 0)") (("1" (EXPAND "base_n_to_nat" -4) (("1" (GROUND) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "bump_one_ind(1 + upper_index(3, k), base_n(3, k), 0)") (("1" (CASE "x!1>2+upper_index(3,k)") (("1" (INST -2 "x!1") (("1" (LEMMA "upper_is_bound") (("1" (INST -1 "3" "k+1" "x!1") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (HIDE (2 -6 -2 -6)) (("2" (HIDE -4) (("2" (EXPAND "upper_index") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (LEMMA "log_nat_incr") (("1" (REPLACE -2) (("1" (EXPAND "log_nat") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "log_nat_incr") (("2" (EXPAND "log_nat" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (FLIP-INEQ 1) (("2" (EXPAND "log_nat" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SIMPLIFY 2) (("2" (INST -2 "3" "(1 + k) / 3 / 3" "k") (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (HIDE (-3 -4 -2 3)) (("2" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -4 "x!1") (("2" (SPLIT -4) (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "upper_index") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (LEMMA "log_nat_bounds") (("2" (INST -1 "3" "k") (("2" (GROUND) (("2" (FLATTEN) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2) (("2" (EXPAND "expt" 2) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|bump_one_prep| FORMULA-DECL NIL |query_coeff| NIL) (|base_n_unique| FORMULA-DECL NIL |base_repr| |reals|) (|log_nat_bounds| FORMULA-DECL NIL |log_nat| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|base_n_to_nat| CONST-DECL "nat" |base_repr| |reals|) (|k| SKOLEM-CONST-DECL "nat" |query_coeff| NIL) (|upper_is_bound| FORMULA-DECL NIL |base_repr| |reals|) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|log_nat| DEF-DECL "[n: nat, {y | y < p AND x = p ^ n * y}]" |log_nat| |reals|) (|log_nat_incr| FORMULA-DECL NIL |log_nat| |reals|) (|x!1| SKOLEM-CONST-DECL "nat" |query_coeff| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|base_n_lt_n| FORMULA-DECL NIL |base_repr| |reals|) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sigma_nat| APPLICATION-JUDGEMENT "nat" |sigma_nat| |reals|) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|base_n_is_n_alt| FORMULA-DECL NIL |base_repr| |reals|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|base_n| DEF-DECL "nat" |base_repr| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|upper_index| CONST-DECL "nat" |base_repr| |reals|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|bump_one_TCC1| 0 (|bump_one_TCC1-1| |nil| 3621165054 ("" (LEMMA "bump_one_prep2") (("" (GROUND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|bump_one_prep2| FORMULA-DECL NIL |query_coeff| NIL)) NIL (|bump_one| SUBTYPE "query_coeff.bump_one_ind((number_fields.+)(base_repr.upper_index(3, query_coeff.k), 1), query_coeff.f, 0)" "{ff: [naturalnumbers.nat -> naturalnumbers.below(3)] | ff = base_repr.base_n(3, (number_fields.+)(1, query_coeff.k))}"))) (|switch_to_array| 0 (|switch_to_array-3| "" 3883689212 ("" (CASE "FORALL (nn:nat, j: posnat, L: listn[below(3)](j + 1),
              (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
              i: upto(j + 1)): nn = j+1-i IMPLIES
        ( array2list[below(3)](j + 1)(f) = L IMPLIES
         bump_one_ind_list(j, L, i) =
          array2list[below(3)](j + 1)(bump_one_ind(j, f, i)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j+1-i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY) (("1" (EXPAND "bump_one_ind_list") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (LEMMA "bump_one_below") (("1" (LEMMA "list_extensionality[below(3)]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (TYPEPRED "array2list[below(3)](1 + j)(bump_one_ind(j, f, i))") (("1" (REPLACE -2) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED ("L")) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -3 "n") (("3" (REPLACE -3 :DIR RL) (("3" (INST -4 "j" "f" "i" "n") (("3" (TYPEPRED ("n")) (("3" (GROUND) (("3" (REPLACE -1) (("3" (TYPEPRED ("f")) (("3" (TYPEPRED ("L")) (("3" (REPLACE -11 :DIR RL) (("3" (HIDE 2) (("3" (TYPEPRED "array2list[below(3)](1 + j)(f)") (("3" (INST -3 "n") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "nth(L,i) = f(i)") (("1" (CASE "f(i)<2") (("1" (EXPAND "bump_one_ind_list") (("1" (EXPAND "bump_one_ind") (("1" (HIDE -3) (("1" (GROUND) (("1" (LEMMA "switch_is_with") (("1" (INST -1 "L" "i" "1+f(i)" "f") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bump_one_ind" 2) (("2" (EXPAND "bump_one_ind_list" 2) (("2" (GROUND) (("2" (LEMMA "switch_is_with") (("2" (INST -1 "bump_one_ind_list(j, L, 1 + i)" "i" "0" "bump_one_ind(j, f, 1 + i)") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (INST -2 "j" "L" "f" "i+1") (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (TYPEPRED "array2list[below(3)](j + 1)(f)") (("2" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|switch_to_array-2| "" 3750606908 ("" (CASE "FORALL (nn:nat, j: posnat, L: listn[below(3)](j + 1),
              (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
              i: upto(j + 1)): nn = j+1-i IMPLIES
        ( array2list[below(3)](j + 1)(f) = L IMPLIES
         bump_one_ind_list(j, L, i) =
          array2list[below(3)](j + 1)(bump_one_ind(j, f, i)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j+1-i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY) (("1" (EXPAND "bump_one_ind_list") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (LEMMA "bump_one_below") (("1" (LEMMA "list_extensionality[below(3)]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (TYPEPRED "array2list[below(3)](1 + j)(bump_one_ind(j, f, i))") (("1" (REPLACE -2) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED (L)) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -3 "n") (("3" (REPLACE -3 :DIR RL) (("3" (INST -4 "j" "f" "i" "n") (("3" (TYPEPRED (N)) (("3" (GROUND) (("3" (REPLACE -1) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (L)) (("3" (REPLACE -11 :DIR RL) (("3" (HIDE 2) (("3" (TYPEPRED "array2list[below(3)](1 + j)(f)") (("3" (INST -3 "n") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "nth(L,i) = f(i)") (("1" (CASE "f(i)<2") (("1" (EXPAND "bump_one_ind_list") (("1" (EXPAND "bump_one_ind") (("1" (HIDE -3) (("1" (GROUND) (("1" (LEMMA "switch_is_with") (("1" (INST -1 "L" "i" "1+f(i)" "f") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bump_one_ind" 2) (("2" (EXPAND "bump_one_ind_list" 2) (("2" (GROUND) (("2" (LEMMA "switch_is_with") (("2" (INST -1 "bump_one_ind_list(j, L, 1 + i)" "i" "0" "bump_one_ind(j, f, 1 + i)") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (INST -2 "j" "L" "f" "i+1") (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (TYPEPRED "array2list[below(3)](j + 1)(f)") (("1" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST 1 "0") NIL NIL)) NIL) ("4" (SKEEP) (("4" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST 1 "0") NIL NIL)) NIL) ("4" (SKEEP) (("4" (INST 1 "0") NIL NIL)) NIL)) NIL) ((|f| SKOLEM-CONST-DECL "{f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0}" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "upto(1 + j)" |query_coeff| NIL) (L SKOLEM-CONST-DECL "listn[below(3)](1 + j)" |query_coeff| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|switch_is_with| FORMULA-DECL NIL |query_coeff| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|bump_one_below| FORMULA-DECL NIL |query_coeff| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (|bump_one_ind_list| DEF-DECL "listn[below(3)](j + 1)" |query_coeff| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|switch_to_array-1| |nil| 3621677401 ("" (CASE "FORALL (nn:nat, j: posnat, L: listn[below(3)](j + 1),
              (f: [nat -> below(3)] | FORALL (k: above(j)): f(k) = 0),
              i: upto(j + 1)): nn = j+1-i IMPLIES
        ( array2list[below(3)](j + 1)(f) = L IMPLIES
         bump_one_ind_list(j, L, i) =
          array2list[below(3)](j + 1)(bump_one_ind(j, f, i)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j+1-i") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY) (("1" (EXPAND "bump_one_ind_list") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (LEMMA "bump_one_below") (("1" (LEMMA "list_extensionality[below(3)]") (("1" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (TYPEPRED "array2list[below(3)](1 + j)(bump_one_ind(j, f, i))") (("1" (REPLACE -2) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED (L)) (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (INST -3 "n") (("3" (REPLACE -3 :DIR RL) (("3" (INST -4 "j" "f" "i" "n") (("3" (TYPEPRED (N)) (("3" (GROUND) (("3" (REPLACE -1) (("3" (TYPEPRED (F)) (("3" (TYPEPRED (L)) (("3" (REPLACE -11 :DIR RL) (("3" (HIDE 2) (("3" (TYPEPRED "array2list[below(3)](1 + j)(f)") (("3" (INST -3 "n") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "nth(L,i) = f(i)") (("1" (CASE "f(i)<2") (("1" (EXPAND "bump_one_ind_list") (("1" (EXPAND "bump_one_ind") (("1" (HIDE -3) (("1" (GROUND) (("1" (LEMMA "switch_is_with") (("1" (INST -1 "L" "i" "1+f(i)" "f") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "bump_one_ind" 2) (("2" (EXPAND "bump_one_ind_list" 2) (("2" (GROUND) (("2" (LEMMA "switch_is_with") (("2" (INST -1 "bump_one_ind_list(j, L, 1 + i)" "i" "0" "bump_one_ind(j, f, 1 + i)") (("1" (GROUND) NIL NIL) ("2" (HIDE 3) (("2" (INST -2 "j" "L" "f" "i+1") (("2" (SPLIT -2) (("1" (GROUND) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL) (("2" (TYPEPRED "array2list[below(3)](j + 1)(f)") (("2" (INST -3 "i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|bump_one_list_TCC1| 0 (|bump_one_list_TCC1-1| |nil| 3621696480 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_list| SUBTYPE "0" "upto((number_fields.+)(1, query_coeff.j))"))) (|bump_one_list_TCC2| 0 (|bump_one_list_TCC2-2| "" 3883689408 ("" (SKEEP) (("" (LEMMA "switch_to_array") (("" (INST -1 "j" "L" "base_n(3,k)" "0") (("1" (TYPEPRED ("L")) (("1" (SPLIT -4) (("1" (REPLACE -1) (("1" (EXPAND "base_list") (("1" (CASE-REPLACE "bump_one_ind(j, base_n(3, k), 0) = base_n(3, 1 + k)") (("1" (HIDE -) (("1" (HIDE 2) (("1" (LEMMA "bump_one_prep") (("1" (INST -1 "j" " base_n(3, k)") (("1" (LEMMA "base_n_is_n_alt") (("1" (INST -1 "3" "k" "j+1") (("1" (TYPEPRED ("k")) (("1" (SPLIT -2) (("1" (REPLACE -1 :DIR RL) (("1" (LEMMA "base_n_to_nat_unique") (("1" (INST -1 "3" "k" "j+1" "bump_one_ind(j, base_n(3, k), 0)" " base_n(3, k+1)") (("1" (SPLIT -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "bump_one_ind(j, base_n(3, k), 0)") (("1" (CASE "x!1 >1+j") (("1" (INST -2 "x!1") (("1" (LEMMA "base_n_0") (("1" (INST -1 "3 " "1+k" "x!1") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (TYPEPRED ("k")) (("2" (CASE "k=0") (("1" (REPLACE -1) (("1" (LEMMA "both_sides_expt_gt1_gt") (("1" (INST -1 "3" "x!1" "1+j") (("1" (GROUND) (("1" (CASE "forall (a,b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "0" "3^(1+j)") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k+1<=3^(1+j)") (("1" (LEMMA "both_sides_expt_gt1_gt") (("1" (INST -1 "3" "x!1" "1+j") (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "forall (a,b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "k" "3^(1+j)") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") (("2" (TYPEPRED "bump_one_ind(j, base_n(3, k), 0)") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (LEMMA "base_n_is_n_alt") (("3" (INST -1 "3" "k+1" "j+1") (("3" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (CASE "forall (a,b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "k" "3^(1+j)") (("1" (GROUND) (("1" (LEMMA "both_sides_expt_gt1_gt") (("1" (INST -1 "3" "j+2" "j+1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (CASE "1<3") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "base_list") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (SKEEP) (("1" (REWRITE "base_n_lt_n") NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED ("k_1")) (("2" (TYPEPRED ("k")) (("2" (LEMMA "base_n_0") (("2" (INST -1 "3" "k" "k_1") (("2" (CASE "k_1>=j+1") (("1" (LEMMA "both_sides_expt_gt1_ge") (("1" (INST -1 "3" "k_1" "j+1") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|bump_one_list| SUBTYPE "query_coeff.bump_one_ind_list(query_coeff.j, query_coeff.L, 0)" "{ll: listn[below(3)].listn((number_fields.+)(query_coeff.j, 1)) | ll = base_repr.base_list(3, (number_fields.+)(1, query_coeff.k), (number_fields.+)(1, query_coeff.j))}")) (|bump_one_list_TCC2-1| |nil| 3621696480 ("" (SKEEP) (("" (LEMMA "switch_to_array") (("" (INST -1 "j" "L" "base_n(3,k)" "0") (("1" (TYPEPRED (L)) (("1" (SPLIT -4) (("1" (REPLACE -1) (("1" (EXPAND "base_list") (("1" (CASE-REPLACE "bump_one_ind(j, base_n(3, k), 0) = base_n(3, 1 + k)") (("1" (HIDE -) (("1" (HIDE 2) (("1" (LEMMA "bump_one_prep") (("1" (INST -1 "j" " base_n(3, k)") (("1" (LEMMA "base_n_is_n_alt") (("1" (INST -1 "3" "k" "j+1") (("1" (TYPEPRED (K)) (("1" (SPLIT -2) (("1" (REPLACE -1 :DIR RL) (("1" (LEMMA "base_n_to_nat_unique") (("1" (INST -1 "3" "k" "j+1" "bump_one_ind(j, base_n(3, k), 0)" " base_n(3, k+1)") (("1" (SPLIT -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED "bump_one_ind(j, base_n(3, k), 0)") (("1" (CASE "x!1 >1+j") (("1" (INST -2 "x!1") (("1" (LEMMA "base_n_0") (("1" (INST -1 "3 " "1+k" "x!1") (("1" (SPLIT -1) (("1" (GROUND) NIL NIL) ("2" (TYPEPRED (K)) (("2" (CASE "k=0") (("1" (REPLACE -1) (("1" (LEMMA "both_sides_expt_gt1_gt") (("1" (INST -1 "3" "x!1" "1+j") (("1" (GROUND) (("1" (CASE "forall (a,b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "0" "3^(1+j)") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k+1<=3^(1+j)") (("1" (LEMMA "both_sides_expt_gt1_gt") (("1" (INST -1 "3" "x!1" "1+j") (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (CASE "forall (a,b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "k" "3^(1+j)") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "x!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") (("2" (TYPEPRED "bump_one_ind(j, base_n(3, k), 0)") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3) (("3" (LEMMA "base_n_is_n_alt") (("3" (INST -1 "3" "k+1" "j+1") (("3" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (CASE "forall (a,b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "k" "3^(1+j)") (("1" (GROUND) (("1" (LEMMA "both_sides_expt_gt1_gt") (("1" (INST -1 "3" "j+2" "j+1") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (CASE "1<3") (("1" (MULT-INEQ -1 -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "base_list") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (SKEEP) (("1" (REWRITE "base_n_lt_n") NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED (K_1)) (("2" (TYPEPRED (K)) (("2" (LEMMA "base_n_0") (("2" (INST -1 "3" "k" "k_1") (("2" (CASE "k_1>=j+1") (("1" (LEMMA "both_sides_expt_gt1_ge") (("1" (INST -1 "3" "k_1" "j+1") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|switch_to_array| FORMULA-DECL NIL |query_coeff| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_expt_gt1_ge| FORMULA-DECL NIL |exponentiation| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bump_one_ind| DEF-DECL "{ff: [nat -> below(3)] | FORALL (k: above(j + 1)): ff(k) = 0}" |query_coeff| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|base_n_to_nat_unique| FORMULA-DECL NIL |base_repr| |reals|) (|base_n_lt_n| FORMULA-DECL NIL |base_repr| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|x!1| SKOLEM-CONST-DECL "nat" |query_coeff| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|both_sides_expt_gt1_gt| FORMULA-DECL NIL |exponentiation| NIL) (|base_n_0| FORMULA-DECL NIL |base_repr| |reals|) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|base_n_is_n_alt| FORMULA-DECL NIL |base_repr| |reals|) (|bump_one_prep| FORMULA-DECL NIL |query_coeff| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|base_n| DEF-DECL "nat" |base_repr| |reals|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|j| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|k| SKOLEM-CONST-DECL "below(3 ^ (1 + j))" |query_coeff| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| |reals|) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|bump_one_list| SUBTYPE "query_coeff.bump_one_ind_list(query_coeff.j, query_coeff.L, 0)" "{ll: listn[below(3)].listn((number_fields.+)(query_coeff.j, 1)) | ll = base_repr.base_list(3, (number_fields.+)(1, query_coeff.k), (number_fields.+)(1, query_coeff.j))}"))) (|is_nonzero_TCC1| 0 (|is_nonzero_TCC1-1| |nil| 3621592121 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|is_nonzero| SUBTYPE "0" "{x: reals.real | x = number_fields.*(query_coeff.F(query_coeff.l), query_coeff.G(query_coeff.l))}"))) (|dot_tail_sum2plus_TCC1| 0 (|dot_tail_sum2plus_TCC1-1| |nil| 3621758096 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|dot_tail_sum2plus| SUBTYPE "query_coeff.n" "posnat"))) (|dot_tail_sum2plus_TCC2| 0 (|dot_tail_sum2plus_TCC2-1| |nil| 3621758096 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (^ CONST-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)) NIL (|dot_tail_sum2plus| SUBTYPE "(number_fields.-)(exponentiation.^(3, query_coeff.n), query_coeff.i)" "naturalnumber"))) (|dot_tail_sum2plus_TCC3| 0 (|dot_tail_sum2plus_TCC3-3| "" 3883689438 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("" (TYPEPRED ("i")) (("" (CASE "forall (a, b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "i" "3^n") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|dot_tail_sum2plus| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto(exponentiation.^(3, query_coeff.n))")) (|dot_tail_sum2plus_TCC3-2| "" 3790097680 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("" (TYPEPRED (I)) (("" (CASE "forall (a, b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "i" "3^n") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (> CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)) SHOSTAK (|dot_tail_sum2plus| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto(exponentiation.^(3, query_coeff.n))")) (|dot_tail_sum2plus_TCC3-1| |nil| 3621758096 ("" (SKEEP) (("" (SKEEP) (("" (GROUND) (("" (TYPEPRED (I)) (("" (GROUND) (("" (CASE "forall (a, b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "i" "3^n") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|dot_tail_sum2plus| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto(exponentiation.^(3, query_coeff.n))"))) (|dot_tail_sum2plus_TCC4| 0 (|dot_tail_sum2plus_TCC4-1| |nil| 3621758096 ("" (SUBTYPE-TCC) NIL NIL) ((^ CONST-DECL "real" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)) NIL (|dot_tail_sum2plus| SUBTYPE "(number_fields.-)(query_coeff.n, 1)" "posnat"))) (|dot_tail_sum2plus_TCC5| 0 (|dot_tail_sum2plus_TCC5-1| |nil| 3621758096 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (^ CONST-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)) NIL (|dot_tail_sum2plus| SUBTYPE "query_coeff.i" "below(exponentiation.^(3, query_coeff.n))"))) (|dot_tail_sum2plus_TCC6| 0 (|dot_tail_sum2plus_TCC6-1| |nil| 3621758096 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| |reals|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (^ CONST-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|dot_tail_sum2plus| SUBTYPE "query_coeff.L" "{ll: listn[below(3)].listn(query_coeff.n) | ll = base_repr.base_list(3, query_coeff.i, query_coeff.n)}"))) (|dot_tail_sum2plus_TCC7| 0 (|dot_tail_sum2plus_TCC7-1| |nil| 3621758096 ("" (TERMINATION-TCC) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|is_nonzero| CONST-DECL "{x: real | x = F(l) * G(l)}" |query_coeff| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|dot_tail_sum2plus| TERMINATION "query_coeff.dot_tail_sum2plus(query_coeff.n, query_coeff.F, query_coeff.G, query_coeff.A, (number_fields.+)(query_coeff.i, 1), query_coeff.bump_one_list((number_fields.-)(query_coeff.n, 1), query_coeff.i, query_coeff.L))" "NIL"))) (|dot_tail_sum2plus_TCC8| 0 (|dot_tail_sum2plus_TCC8-1| |nil| 3621758096 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| |reals|) (|array2list| CONST-DECL "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}" |array2list| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)) NIL (|dot_tail_sum2plus| SUBTYPE "query_coeff.L" "{ll: list_adt[below(3)].list | list_props[below(3)].length(ll) = query_coeff.n}"))) (|dot_tail_sum_lem| 0 (|dot_tail_sum_lem-2| "" 3790097685 ("" (CASE "FORALL (nn:nat, n: {x:nat|x>1},
                     F, G: [{ll: list[below(3)] | length(ll) = n} -> real],
                     a: real, i: upto(3 ^ n), L:{ll:list[below(3)]| ll = base_list(3, i, n)}):
               nn = 3^n-i IMPLIES
               dot_tail_sum2plus(n, F, G, a, i, L) =
                a +
                 sigma(i, 3 ^ n - 1,
                       LAMBDA (j: nat):
                         F(base_list(3, j, n)) * G(base_list(3, j, n)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "3^n-i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("_" "n" "F" "G" "_" "_" "_")) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (EXPAND "dot_tail_sum2plus") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "dot_tail_sum2plus" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "is_nonzero(n, L, F, G) + a" "i+1" "bump_one_list(n - 1, i, L)") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (SWAP-REL 2) (("1" (REWRITE "sigma_first" (2 2)) (("1" (SIMPLIFY 2) (("1" (TYPEPRED "is_nonzero(n, L, F, G)") (("1" (TYPEPRED (L)) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sigma_first| FORMULA-DECL NIL |sigma| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|bump_one_list| CONST-DECL "{ll: listn[below(3)](j + 1) | ll = base_list(3, k + 1, j + 1)}" |query_coeff| NIL) (|is_nonzero| CONST-DECL "{x: real | x = F(l) * G(l)}" |query_coeff| NIL) (|n| SKOLEM-CONST-DECL "{x: nat | x > 1}" |query_coeff| NIL) (|i| SKOLEM-CONST-DECL "upto(3 ^ n)" |query_coeff| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|dot_tail_sum2plus| DEF-DECL "real" |query_coeff| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|base_list| CONST-DECL "listn[below(n)](digits)" |base_repr| |reals|) (|listn| TYPE-EQ-DECL NIL |listn| |structures|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|dot_tail_sum_lem-1| |nil| 3621592773 ("" (CASE "FORALL (nn:nat, n: {x:nat|x>1},
                     F, G: [{ll: list[below(3)] | length(ll) = n} -> real],
                     a: real, i: upto(3 ^ n), L:{ll:list[below(3)]| ll = base_list(3, i, n)}):
               nn = 3^n-i IMPLIES
               dot_tail_sum2plus(n, F, G, a, i, L) =
                a +
                 sigma(i, 3 ^ n - 1,
                       LAMBDA (j: nat):
                         F(base_list(3, j, n)) * G(base_list(3, j, n)))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "3^n-i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("_" "n" "F" "G" "_" "_" "_")) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (EXPAND "dot_tail_sum2plus") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "dot_tail_sum2plus" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "is_nonzero(n, L, F, G) + a" "i+1" "bump_one_list(n - 1, i, L)") (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (SWAP-REL 2) (("1" (REWRITE "sigma_first" (2 2)) (("1" (SIMPLIFY 2) (("1" (TYPEPRED "is_nonzero(n, L, F, G)") (("1" (TYPEPRED (L)) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (GROUND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|is_nz_TCC1| 0 (|is_nz_TCC1-1| |nil| 3621595927 ("" (SUBTYPE-TCC) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|is_nz| SUBTYPE "0" "{x: reals.real | x = number_fields.*(query_coeff.F(query_coeff.f), query_coeff.G(query_coeff.f))}"))) (|dot_tail_sum2_TCC1| 0 (|dot_tail_sum2_TCC1-3| "" 3883689457 ("" (SKEEP) (("" (TYPEPRED ("i")) (("" (GROUND) NIL NIL)) NIL)) NIL) NIL SHOSTAK (|dot_tail_sum2| SUBTYPE "(number_fields.-)(exponentiation.^(3, query_coeff.n), query_coeff.i)" "naturalnumber")) (|dot_tail_sum2_TCC1-2| "" 3790097685 ("" (SKEEP) (("" (TYPEPRED (I)) (("" (GROUND) NIL NIL)) NIL)) NIL) ((|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|dot_tail_sum2| SUBTYPE "(number_fields.-)(exponentiation.^(3, query_coeff.n), query_coeff.i)" "naturalnumber")) (|dot_tail_sum2_TCC1-1| |nil| 3621595927 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (I)) (("" (GROUND) (("" (CASE "forall (k, l:nat): k<l IMPLIES k+1<=l") (("1" (INST -1 "i" "3^n") (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|dot_tail_sum2| SUBTYPE "(number_fields.-)(exponentiation.^(3, query_coeff.n), query_coeff.i)" "naturalnumber"))) (|dot_tail_sum2_TCC2| 0 (|dot_tail_sum2_TCC2-2| "" 3883689481 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED ("i")) (("" (CASE "forall (a, b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "i" "3^n") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|dot_tail_sum2| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto(exponentiation.^(3, query_coeff.n))")) (|dot_tail_sum2_TCC2-1| |nil| 3621595927 ("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED (I)) (("" (CASE "forall (a, b:nat): a<b IMPLIES a+1<=b") (("1" (INST -1 "i" "3^n") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|dot_tail_sum2| SUBTYPE "(number_fields.+)(query_coeff.i, 1)" "upto(exponentiation.^(3, query_coeff.n))"))) (|dot_tail_sum2_TCC3| 0 (|dot_tail_sum2_TCC3-1| |nil| 3621758128 ("" (TERMINATION-TCC) NIL NIL) ((|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|is_nz| CONST-DECL "{x: real | x = F(f) * G(f)}" |query_coeff| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)) NIL (|dot_tail_sum2| TERMINATION "query_coeff.dot_tail_sum2(query_coeff.n, query_coeff.F, query_coeff.G, query_coeff.A, (number_fields.+)(query_coeff.i, 1), query_coeff.bump_one(query_coeff.i, query_coeff.f))" "NIL"))) (|dot_tail_sum_lem2_TCC1| 0 (|dot_tail_sum_lem2_TCC1-1| |nil| 3621595927 ("" (SKEEP) (("" (SKEEP) (("" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|base_n_lt_n| FORMULA-DECL NIL |base_repr| |reals|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL (|dot_tail_sum_lem2| SUBTYPE "base_repr.base_n(3, query_coeff.i)" "{f | query_coeff.f = base_repr.base_n(3, query_coeff.i)}"))) (|dot_tail_sum_lem2_TCC2| 0 (|dot_tail_sum_lem2_TCC3-1| |nil| 3621758128 ("" (SKEEP) (("" (SKEEP) (("" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|base_n_lt_n| FORMULA-DECL NIL |base_repr| |reals|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL)) NIL (|dot_tail_sum_lem2| SUBTYPE "base_repr.base_n(3, query_coeff.j)" "[nat -> below(3)]"))) (|dot_tail_sum_lem2| 0 (|dot_tail_sum_lem2-2| "" 3750606989 ("" (SKOLEM 1 ("n" "F" "G" "_" "_")) (("" (CASE "FORALL (nn:nat, a: real, i: upto(3 ^ n)): nn=3^n-i IMPLIES
        dot_tail_sum2(n, F, G, a, i, base_n(3, i)) =
         a +
          sigma(i, 3 ^ n - 1,
                LAMBDA (j: nat): F(base_n(3, j)) * G(base_n(3, j))) ") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "3^n-i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (EXPAND "dot_tail_sum2") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "dot_tail_sum2" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "is_nz(n, base_n(3, i), F, G) + a " "1 + i") (("2" (SPLIT -1) (("1" (TYPEPRED "bump_one(i, base_n(3, i))") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (SWAP-REL 2) (("1" (REWRITE "sigma_first" 2) (("1" (TYPEPRED "is_nz(n, base_n(3, i), F, G)") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) (("4" (SKEEP) (("4" (SKEEP) (("4" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) (("4" (SKEEP) (("4" (SKEEP) (("4" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|base_n| DEF-DECL "nat" |base_repr| |reals|) (|dot_tail_sum2| DEF-DECL "real" |query_coeff| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|n| SKOLEM-CONST-DECL "posnat" |query_coeff| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|base_n_lt_n| FORMULA-DECL NIL |base_repr| |reals|) (|sigma_first| FORMULA-DECL NIL |sigma| |reals|) (|bump_one| CONST-DECL "{ff: [nat -> below(3)] | ff = base_n(3, k + 1)}" |query_coeff| NIL) (|is_nz| CONST-DECL "{x: real | x = F(f) * G(f)}" |query_coeff| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK) (|dot_tail_sum_lem2-1| |nil| 3621596460 ("" (SKOLEM 1 ("n" "F" "G" "_" "_")) (("" (CASE "FORALL (nn:nat, a: real, i: upto(3 ^ n)): nn=3^n-i IMPLIES
        dot_tail_sum2(n, F, G, a, i, base_n(3, i)) =
         a +
          sigma(i, 3 ^ n - 1,
                LAMBDA (j: nat): F(base_n(3, j)) * G(base_n(3, j))) ") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "3^n-i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "nn") (("1" (SKEEP) (("1" (BOTH-SIDES "+" "i" -1) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (EXPAND "dot_tail_sum2") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "dot_tail_sum2" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "is_nz(n, base_n(3, i), F, G) + a " "1 + i") (("2" (SPLIT -1) (("1" (TYPEPRED "bump_one(i, base_n(3, i))") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (SWAP-REL 2) (("1" (REWRITE "sigma_first" 2) (("1" (TYPEPRED "is_nz(n, base_n(3, i), F, G)") (("1" (GROUND) NIL NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (SKEEP) (("3" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (GROUND) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "base_n_lt_n") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
