(|numerical_bandb|
 (|evaluate_TCC1| 0
  (|evaluate_TCC1-4| "" 3804447428
   ("" (SKOSIMP*)
    (("" (LIFT-IF -7)
      (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|Lbbox_Proper| APPLICATION-JUDGEMENT "ProperBox" |box| NIL)) SHOSTAK
   (|evaluate| SUBTYPE "box.Lbbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}"))
  (|evaluate_TCC1-3| "" 3803696112
   ("" (SKOSIMP*)
    (("" (LIFT-IF -6)
      (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL) SHOSTAK
   (|evaluate| SUBTYPE "box.Lbbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}"))
  (|evaluate_TCC1-2| "" 3803661766
   ("" (SKOSIMP*)
    (("" (LIFT-IF -7)
      (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL) SHOSTAK
   (|evaluate| SUBTYPE "box.Lbbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}"))
  (|evaluate_TCC1-1| |nil| 3546971207
   ("" (SKOSIMP*)
    (("" (LIFT-IF -6)
      (("" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL) NIL
   (|evaluate| SUBTYPE "box.Lbbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}")))
 (|evaluate_TCC2| 0
  (|evaluate_TCC2-4| "" 3804447446
   ("" (SKOSIMP*) (("" (LIFT-IF -9) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|Ubbox_Proper| APPLICATION-JUDGEMENT "ProperBox" |box| NIL)
    (|Lbbox_Proper| APPLICATION-JUDGEMENT "ProperBox" |box| NIL))
   SHOSTAK
   (|evaluate| SUBTYPE "box.Ubbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}"))
  (|evaluate_TCC2-3| "" 3803696158
   ("" (SKOSIMP*) (("" (LIFT-IF -7) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   (NIL NIL NIL NIL NIL NIL) SHOSTAK
   (|evaluate| SUBTYPE "box.Ubbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}"))
  (|evaluate_TCC2-2| "" 3803661809
   ("" (SKOSIMP*) (("" (LIFT-IF -9) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   (NIL NIL NIL NIL NIL NIL) SHOSTAK
   (|evaluate| SUBTYPE "box.Ubbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}"))
  (|evaluate_TCC2-1| |nil| 3546971207
   ("" (SKOSIMP*) (("" (LIFT-IF -8) (("" (ASSERT) NIL NIL)) NIL)) NIL)
   (NIL NIL NIL NIL NIL NIL) NIL
   (|evaluate| SUBTYPE "box.Ubbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}")))
 (|mindir_maxvar_aux_TCC1| 0
  (|mindir_maxvar_aux_TCC1-1| NIL 3912294632
   ("" (SKEEP) (("" (LEMMA "Midbox_Proper") (("" (INST?) NIL NIL)) NIL)) NIL)
   ((|Midbox_Proper| JUDGEMENT-TCC NIL |box| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL))
   NIL
   (|mindir_maxvar_aux| SUBTYPE "box.Midbox(numerical_bandb.box)"
    "{x: listn[Interval](list_props[Interval].length(numerical_bandb.box)) | box.ProperBox?(x)}")))
 (|mindir_maxvar_aux_TCC2| 0
  (|mindir_maxvar_aux_TCC1-1| |nil| 3547134405
   ("" (SKOSIMP*) (("" (TYPEPRED "box!1") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|slice| CONST-DECL "real" |interval| NIL)
    (|midpoint| CONST-DECL "real" |interval| NIL)
    (|[\|\|]| CONST-DECL "Interval" |interval| NIL)
    (|Midbox| CONST-DECL "listn[Interval](length(box))" |box| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| NIL)
    (|Midbox_Proper| APPLICATION-JUDGEMENT "ProperBox" |box| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   NIL
   (|mindir_maxvar_aux| SUBTYPE
    "(number_fields.-)(list_props[Interval].length(numerical_bandb.box), 1)"
    "upfrom(0)")))
 (|mindir_maxvar_aux_TCC3| 0
  (|mindir_maxvar_aux_TCC2-1| |nil| 3547134405 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|listn| TYPE-EQ-DECL NIL |listn| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Midbox| CONST-DECL "listn[Interval](length(box))" |box| NIL)
    (|[\|\|]| CONST-DECL "Interval" |interval| NIL)
    (|midpoint| CONST-DECL "real" |interval| NIL)
    (|slice| CONST-DECL "real" |interval| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL))
   NIL
   (|mindir_maxvar_aux| SUBTYPE
    "numerical_bandb.var_varsel(numerical_bandb.expr, numerical_bandb.box, numerical_bandb.both, numerical_bandb.Mb)"
    "IterateBody[VarSel](0, (number_fields.-)(list_props[Interval].length(numerical_bandb.box), 1))")))
 (|max_rec_TCC1| 0
  (|max_rec_TCC1-1| |nil| 3546365509 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|max_rec| SUBTYPE "numerical_bandb.b"
    "{b_1: box.Box | numerical_bandb.n = (number_fields.+)(numerical_bandb.i, list_props[Interval].length(b_1))}")))
 (|max_rec_TCC2| 0
  (|max_rec_TCC2-1| |nil| 3546365509 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL (|max_rec| SUBTYPE "numerical_bandb.i" "below(numerical_bandb.n)")))
 (|max_rec_TCC3| 0
  (|max_rec_TCC3-1| |nil| 3546365509 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL
   (|max_rec| SUBTYPE "(number_fields.+)(numerical_bandb.i, 1)"
    "subrange(1, numerical_bandb.n)")))
 (|max_rec_TCC4| 0
  (|max_rec_TCC4-1| |nil| 3546365509 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL (|max_rec| SUBTYPE "numerical_bandb.b" "(list_adt[Interval].cons?)")))
 (|max_rec_TCC5| 0
  (|max_rec_TCC5-1| |nil| 3546365509 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "real" |interval| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|max_rec| SUBTYPE "list_adt[Interval].cdr(numerical_bandb.b)"
    "{b: box.Box | numerical_bandb.n = (number_fields.+)((number_fields.+)(1, numerical_bandb.i), list_props[Interval].length(b))}")))
 (|max_rec_TCC6| 0
  (|max_rec_TCC6-1| |nil| 3546365509 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL
   (|max_rec| TERMINATION
    "numerical_bandb.max_rec(numerical_bandb.n, numerical_bandb.mm, numerical_bandb.i, (number_fields.+)(numerical_bandb.i, 1), list_adt[Interval].cdr(numerical_bandb.b))"
    "NIL")))
 (|max_rec_TCC7| 0
  (|max_rec_TCC7-1| |nil| 3546365509 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL
   (|max_rec| SUBTYPE "(number_fields.+)(numerical_bandb.i, 1)"
    "subrange(1, numerical_bandb.n)")))
 (|max_rec_TCC8| 0
  (|max_rec_TCC8-1| |nil| 3546365509 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL (|max_rec| SUBTYPE "numerical_bandb.b" "(list_adt[Interval].cons?)")))
 (|max_rec_TCC9| 0
  (|max_rec_TCC9-1| |nil| 3546365509 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "real" |interval| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|max_rec| SUBTYPE "list_adt[Interval].cdr(numerical_bandb.b)"
    "{b: box.Box | numerical_bandb.n = (number_fields.+)((number_fields.+)(1, numerical_bandb.i), list_props[Interval].length(b))}")))
 (|max_rec_TCC10| 0
  (|max_rec_TCC10-1| |nil| 3546365509 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)
    (|size| CONST-DECL "real" |interval| NIL))
   NIL
   (|max_rec| TERMINATION
    "numerical_bandb.max_rec(numerical_bandb.n, numerical_bandb.m, numerical_bandb.v, (number_fields.+)(numerical_bandb.i, 1), list_adt[Interval].cdr(numerical_bandb.b))"
    "NIL")))
 (|max_rec_TCC11| 0
  (|max_rec_TCC11-1| |nil| 3546365509 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|max_rec| SUBTYPE "numerical_bandb.b" "(list_adt[Interval].cons?)")))
 (|max_aux_TCC1| 0
  (|max_aux_TCC1-1| |nil| 3547134405 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   NIL
   (|max_aux| SUBTYPE "list_props[Interval].length(numerical_bandb.box)"
    "posnat")))
 (|max_aux_TCC2| 0
  (|max_aux_TCC2-1| |nil| 3547134405
   ("" (SKOSIMP*) (("" (TYPEPRED "box!1") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL))
   NIL (|max_aux| SUBTYPE "numerical_bandb.box" "(list_adt[Interval].cons?)")))
 (|max_aux_TCC3| 0
  (|max_aux_TCC3-1| |nil| 3547134405 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   NIL
   (|max_aux| SUBTYPE "0"
    "below(list_props[Interval].length(numerical_bandb.box))")))
 (|max_aux_TCC4| 0
  (|max_aux_TCC4-1| |nil| 3547134405
   ("" (SKOSIMP*) (("" (TYPEPRED "box!1") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|max_aux| SUBTYPE "1"
    "subrange(1, list_props[Interval].length(numerical_bandb.box))")))
 (|max_aux_TCC5| 0
  (|max_aux_TCC5-1| |nil| 3547134405
   ("" (SKEEP)
    (("" (CASE-REPLACE "box=null")
      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|max_aux| SUBTYPE "list_adt[Interval].cdr(numerical_bandb.box)"
    "{b: box.Box | list_props[Interval].length(numerical_bandb.box) = (number_fields.+)(1, list_props[Interval].length(b))}")))
 (|altvar_TCC1| 0
  (|altvar_TCC1-1| |nil| 3547136696
   ("" (SKEEP :PREDS? T) (("" (GRIND) NIL NIL)) NIL)
   ((|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL))
   NIL
   (|altvar| SUBTYPE "list_props[Interval].length(numerical_bandb.box)"
    "nonzero_real")))
 (|altvar_TCC2| 0
  (|altvar_TCC2-1| |nil| 3547136696
   ("" (SKEEP :PREDS? T)
    (("" (LEMMA "mod_pos")
      (("" (INST?) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|mod_pos| FORMULA-DECL NIL |reals_mod| |reals|)
    (|mod| CONST-DECL "{k | abs(k) < abs(j)}" |reals_mod| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|box| SKOLEM-CONST-DECL "ProperBox" |numerical_bandb| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|DirVarStack| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|stack| TYPE-EQ-DECL NIL |stack| |structures|)
    (|DirVar| TYPE-EQ-DECL NIL |branch_and_bound| |structures|)
    (|IntervalMinMax| TYPE-EQ-DECL NIL |numerical_bandb| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|))
   NIL
   (|altvar| SUBTYPE
    "reals_mod.mod(length(numerical_bandb.dirvars), list_props[Interval].length(numerical_bandb.box))"
    "nat")))
 (|interval_minmax_soundness| 0
  (|interval_minmax_soundness-3| |nil| 3579703168
   ("" (SKEEP)
    (("" (LEMMA "b_and_b_id_sound")
      (("" (EXPAND "interval_minmax")
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (SPLIT)
                (("1" (EXPAND "accomodates?")
                  (("1" (SKEEP)
                    (("1" (EXPAND "sound?")
                      (("1" (FLATTEN)
                        (("1"
                          (NAME-REPLACE "ev" "evaluate(dom, obj)" :HIDE? NIL)
                          (("1" (COPY -1)
                            (("1" (EXPAND "evaluate" -1 :ASSERT? NONE)
                              (("1" (SKOLETIN* -1 :OLD? T)
                                (("1" (DECOMPOSE-EQUALITY -3)
                                  (("1"
                                    (CASE
                                        "Inclusion?(ev`lb_box, dom) AND Inclusion?(ev`ub_box, dom)")
                                    (("1" (FLATTEN)
                                      (("1" (ASSERT)
                                        (("1" (SPLIT 1)
                                          (("1" (SKEEP)
                                            (("1"
                                              (LEMMA "Eval_inclusion_Proper")
                                              (("1" (INST?)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKEEP :PREDS? T)
                                            (("2" (REPLACES -18)
                                              (("2" (HIDE (-3 -7 -8 -9 -10))
                                                (("2"
                                                  (CASE-REPLACE
                                                   "ub(P1) < ub(P2)")
                                                  (("1"
                                                    (LEMMA
                                                     "Eval_inclusion_Proper")
                                                    (("1"
                                                      (INST -1 "Lb" "vs" "obj")
                                                      (("1" (BETA)
                                                        (("1" (ASSERT)
                                                          (("1" (EXPAND "##")
                                                            (("1"
                                                              (LEMMA
                                                               "Proper_Inclusion")
                                                              (("1" (INST?)
                                                                (("1" (ASSERT)
                                                                  (("1" (INST?)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2"
                                                      (LEMMA
                                                       "Eval_inclusion_Proper")
                                                      (("2"
                                                        (INST -1 "Ub" "vs"
                                                         "obj")
                                                        (("2" (BETA)
                                                          (("2" (EXPAND "##")
                                                            (("2"
                                                              (LEMMA
                                                               "Proper_Inclusion")
                                                              (("2" (INST?)
                                                                (("2" (ASSERT)
                                                                  (("2" (INST?)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (SKEEP :PREDS? T)
                                            (("3" (REPLACES -18)
                                              (("3" (HIDE (-2 -4 -5 -11 -12))
                                                (("3"
                                                  (CASE-REPLACE
                                                   "lb(P1) > lb(P2)")
                                                  (("1"
                                                    (LEMMA
                                                     "Eval_inclusion_Proper")
                                                    (("1"
                                                      (INST -1 "Lb" "vs" "obj")
                                                      (("1" (BETA)
                                                        (("1" (EXPAND "##")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (LEMMA
                                                               "Proper_Inclusion")
                                                              (("1" (INST?)
                                                                (("1" (ASSERT)
                                                                  (("1" (INST?)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2"
                                                      (LEMMA
                                                       "Eval_inclusion_Proper")
                                                      (("2"
                                                        (INST -1 "Ub" "vs"
                                                         "obj")
                                                        (("2" (EXPAND "##")
                                                          (("2"
                                                            (LEMMA
                                                             "Proper_Inclusion")
                                                            (("2" (INST?)
                                                              (("2" (ASSERT)
                                                                (("2" (INST?)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 2)
                                      (("2" (SPLIT 1)
                                        (("1" (HIDE (-4 -5 -6 -7))
                                          (("1" (CASE "ub(P1) < ub(P2)")
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "Lbbox_Inclusion")
                                                (("1" (INST?)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (LEMMA "Ubbox_Inclusion")
                                                (("2" (INST?)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE (-1 -2 -8 -9))
                                          (("2" (CASE "lb(P1) > lb(P2)")
                                            (("1" (ASSERT)
                                              (("1" (LEMMA "Lbbox_Inclusion")
                                                (("1" (INST?)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (LEMMA "Ubbox_Inclusion")
                                                (("2" (INST? -1)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "subdiv_presound?")
                  (("2" (SKEEP)
                    (("2" (EXPAND "denorm")
                      (("2" (EXPAND "branch")
                        (("2" (EXPAND "subdivide")
                          (("2" (EXPAND "sound?")
                            (("2" (FLATTEN)
                              (("2" (EXPAND "combine" -3)
                                (("2" (USE "Proper_Safe2")
                                  (("2" (ASSERT)
                                    (("2" (FLATTEN)
                                      (("2" (EXPAND "combine" 1 1)
                                        (("2" (REPLACES -3)
                                          (("2" (ASSERT)
                                            (("2" (FLATTEN)
                                              (("2" (EXPAND "combine")
                                                (("2" (EXPAND "sound_dir")
                                                  (("2"
                                                    (LEMMA "split_Inclusion")
                                                    (("2" (INST? -1)
                                                      (("2"
                                                        (SKOLETIN* -1 :OLD? T)
                                                        (("2"
                                                          (LEMMA
                                                           "split_Proper")
                                                          (("2" (INST? -1)
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (REPLACE -3
                                                                         :DIR
                                                                         RL)
                                                                (("2"
                                                                  (REPLACE -4
                                                                           :DIR
                                                                           RL)
                                                                  (("2"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (SKEEP
                                                                       :PREDS?
                                                                       T)
                                                                      (("1"
                                                                        (INST -
                                                                         "vs")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "Union_inclusion")
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (LIFT-IF)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (SPLIT
                                                                           1)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "Inclusion_trans")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "ans1`lb_box"
                                                                                     "bl"
                                                                                     "dom")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "Inclusion_trans")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "ans1`lb_box"
                                                                                     "br"
                                                                                     "dom")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (LIFT-IF)
                                                                      (("3"
                                                                        (ASSERT)
                                                                        (("3"
                                                                          (SPLIT
                                                                           1)
                                                                          (("1"
                                                                            (FLATTEN)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "Inclusion_trans")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "ans1`ub_box"
                                                                                     "bl"
                                                                                     "dom")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "Inclusion_trans")
                                                                                  (("2"
                                                                                    (INST
                                                                                     -1
                                                                                     "ans1`ub_box"
                                                                                     "br"
                                                                                     "dom")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("4"
                                                                      (SKEEP
                                                                       :PREDS?
                                                                       T)
                                                                      (("4"
                                                                        (EXPAND
                                                                         "combine")
                                                                        (("4"
                                                                          (CASE
                                                                              "ans1`lb_max < ans`lb_max")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (INST
                                                                                   -5
                                                                                   "vs")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "length_split_1")
                                                                                    (("1"
                                                                                      (INST?)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (INST
                                                                                   -4
                                                                                   "vs")
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "length_split_1")
                                                                                    (("2"
                                                                                      (INST?)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (HIDE
                                                                               -15)
                                                                              (("2"
                                                                                (INST
                                                                                 -13
                                                                                 "vs")
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("5"
                                                                      (SKEEP
                                                                       :PREDS?
                                                                       T)
                                                                      (("5"
                                                                        (EXPAND
                                                                         "combine")
                                                                        (("5"
                                                                          (CASE
                                                                              "ans1`ub_min > ans`ub_min")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (SPLIT
                                                                               -)
                                                                              (("1"
                                                                                (FLATTEN)
                                                                                (("1"
                                                                                  (INST
                                                                                   -6
                                                                                   "vs")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "length_split_1")
                                                                                    (("1"
                                                                                      (INST?)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (FLATTEN)
                                                                                (("2"
                                                                                  (INST
                                                                                   -5
                                                                                   "vs")
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "length_split_1")
                                                                                    (("2"
                                                                                      (INST?)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (HIDE
                                                                               -15)
                                                                              (("2"
                                                                                (INST
                                                                                 -14
                                                                                 "vs")
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (EXPAND "subdiv_sound?")
                  (("3" (SKEEP)
                    (("3" (EXPAND "denorm")
                      (("3" (EXPAND "branch")
                        (("3" (EXPAND "subdivide")
                          (("3" (EXPAND "sound?")
                            (("3" (FLATTEN)
                              (("3" (EXPAND "combine" -3)
                                (("3" (USE "Proper_Safe2")
                                  (("3" (ASSERT)
                                    (("3" (FLATTEN)
                                      (("3" (EXPAND "combine" 1 1)
                                        (("3" (REPLACES -3)
                                          (("3" (ASSERT)
                                            (("3" (LEMMA "split_Inclusion")
                                              (("3" (INST? -1)
                                                (("3" (SKOLETIN* -1 :OLD? T)
                                                  (("3" (LEMMA "split_Proper")
                                                    (("3" (INST? -1)
                                                      (("3" (FLATTEN)
                                                        (("3"
                                                          (REPLACE -3 :DIR RL)
                                                          (("3"
                                                            (REPLACE -4 :DIR
                                                                     RL)
                                                            (("3"
                                                              (EXPAND
                                                               "combine")
                                                              (("3" (SPLIT 1)
                                                                (("1"
                                                                  (SKEEP
                                                                   :PREDS? T)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "split_vars_in_box")
                                                                    (("1"
                                                                      (INST?
                                                                       -1)
                                                                      (("1"
                                                                        (INST?)
                                                                        (("1"
                                                                          (BETA)
                                                                          (("1"
                                                                            (SPLIT
                                                                             -1)
                                                                            (("1"
                                                                              (INST?
                                                                               -11)
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "Union_inclusion")
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (INST?
                                                                               -16)
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "Union_inclusion")
                                                                                NIL
                                                                                NIL)
                                                                               ("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (LIFT-IF)
                                                                  (("2"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "Inclusion_trans")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "ans1`lb_box"
                                                                           "bl"
                                                                           "dom")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "Inclusion_trans")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "ans2`lb_box"
                                                                           "br"
                                                                           "dom")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3" (LIFT-IF)
                                                                  (("3"
                                                                    (SPLIT 1)
                                                                    (("1"
                                                                      (FLATTEN)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "Inclusion_trans")
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "ans1`ub_box"
                                                                           "bl"
                                                                           "dom")
                                                                          (("1"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "Inclusion_trans")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "ans2`ub_box"
                                                                           "br"
                                                                           "dom")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("4"
                                                                  (SKEEP
                                                                   :PREDS? T)
                                                                  (("4"
                                                                    (EXPAND
                                                                     "combine")
                                                                    (("4"
                                                                      (CASE
                                                                          "ans1`lb_max < ans2`lb_max")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -14
                                                                           "vs")
                                                                          (("1"
                                                                            (LEMMA
                                                                             "length_split_1")
                                                                            (("1"
                                                                              (INST?)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (INST
                                                                           -18
                                                                           "vs")
                                                                          (("2"
                                                                            (LEMMA
                                                                             "length_split_1")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("5"
                                                                  (SKEEP
                                                                   :PREDS? T)
                                                                  (("5"
                                                                    (EXPAND
                                                                     "combine")
                                                                    (("5"
                                                                      (CASE
                                                                          "ans1`ub_min > ans2`ub_min")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (INST
                                                                           -15
                                                                           "vs")
                                                                          (("1"
                                                                            (LEMMA
                                                                             "length_split_1")
                                                                            (("1"
                                                                              (INST?)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (INST
                                                                           -19
                                                                           "vs")
                                                                          (("2"
                                                                            (LEMMA
                                                                             "length_split_1")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL)
   NIL))
 (|numerical_soundness| 0
  (|numerical_soundness-1| |nil| 3567682854
   ("" (SKEEP)
    (("" (EXPAND "numerical")
      (("" (REWRITE "interval_minmax_soundness") NIL NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)))

