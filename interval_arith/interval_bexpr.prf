(|interval_bexpr|
 (|beval_TCC1| 0
  (|beval_TCC1-1| |nil| 3568996631
   ("" (LEMMA "well_founded_restrict[IntervalExpr,BoolExpr]")
    (("" (INST?) (("" (EXPAND "well_founded?") (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| WELL-FOUNDED
    "restrict[[IntervalExpr_adt.IntervalExpr, IntervalExpr_adt.IntervalExpr], [BoolExpr, BoolExpr], bool].restrict(IntervalExpr_adt.<<)"
    "NIL" (73 19 73 21))))
 (|beval_TCC2| 0
  (|beval_TCC2-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (50 10 50 32))))
 (|beval_TCC3| 0
  (|beval_TCC3-1| |nil| 3568996631 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| SUBTYPE "interval_bexpr.bexpr"
    "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.bimplies?(x), booleans.OR(IntervalExpr_adt.bor?(x), IntervalExpr_adt.band?(x)))}"
    (52 17 52 22))))
 (|beval_TCC4| 0
  (|beval_TCC4-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop1(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (52 6 52 29))))
 (|beval_TCC5| 0
  (|beval_TCC5-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop2(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (52 34 52 57))))
 (|beval_TCC6| 0
  (|beval_TCC6-1| |nil| 3568996631 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| SUBTYPE "interval_bexpr.bexpr"
    "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.bimplies?(x), booleans.OR(IntervalExpr_adt.bor?(x), IntervalExpr_adt.band?(x)))}"
    (54 17 54 22))))
 (|beval_TCC7| 0
  (|beval_TCC7-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop1(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (54 6 54 29))))
 (|beval_TCC8| 0
  (|beval_TCC8-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop2(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (54 33 54 56))))
 (|beval_TCC9| 0
  (|beval_TCC9-1| |nil| 3568996631 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| SUBTYPE "interval_bexpr.bexpr"
    "{x: IntervalExpr_adt.IntervalExpr | booleans.OR(IntervalExpr_adt.bimplies?(x), booleans.OR(IntervalExpr_adt.bor?(x), IntervalExpr_adt.band?(x)))}"
    (56 17 56 22))))
 (|beval_TCC10| 0
  (|beval_TCC10-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop1(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (56 6 56 29))))
 (|beval_TCC11| 0
  (|beval_TCC11-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bop2(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (56 38 56 61))))
 (|beval_TCC12| 0
  (|beval_TCC12-1| |nil| 3568996631 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| SUBTYPE "interval_bexpr.bexpr"
    "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.brel?(x) OR IntervalExpr_adt.fun4?(x) OR IntervalExpr_adt.fun2?(x) OR IntervalExpr_adt.div?(x) OR IntervalExpr_adt.mult?(x) OR IntervalExpr_adt.sub?(x) OR IntervalExpr_adt.add?(x)}"
    (58 26 58 31))))
 (|beval_TCC13| 0
  (|beval_TCC13-1| |nil| 3569606887 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| SUBTYPE "interval_bexpr.bexpr"
    "{x: IntervalExpr_adt.IntervalExpr |      IntervalExpr_adt.bincludes?(x) OR IntervalExpr_adt.fun?(x) OR IntervalExpr_adt.pow?(x) OR IntervalExpr_adt.sq?(x) OR IntervalExpr_adt.neg?(x) OR IntervalExpr_adt.abs?(x)}"
    (60 14 60 19))))
 (|beval_TCC14| 0
  (|beval_TCC14-1| |nil| 3569606887 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bin(interval_bexpr.bexpr), interval_bexpr.vs WITH [`n := interval_bexpr.blet], (number_fields.+)(interval_bexpr.n, 1))"
    "NIL" (64 10 64 52))))
 (|beval_TCC15| 0
  (|beval_TCC15-1| |nil| 3576871852 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   NIL
   (|beval| SUBTYPE "IntervalExpr_adt.blet(interval_bexpr.bexpr)" "RealExpr"
    (63 24 63 35))))
 (|beval_TCC16| 0
  (|beval_TCC16-1| |nil| 3576871852 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bin(interval_bexpr.bexpr), interval_bexpr.vs WITH [`n := IF interval_bexpr.blet THEN 1 ELSE -1 ENDIF], (number_fields.+)(interval_bexpr.n, 1))"
    "NIL" (67 10 67 76))))
 (|beval_TCC17| 0
  (|beval_TCC17-1| |nil| 3576871852 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   NIL
   (|beval| SUBTYPE "IntervalExpr_adt.blet(interval_bexpr.bexpr)" "BoolExpr"
    (66 25 66 36))))
 (|beval_TCC18| 0
  (|beval_TCC18-1| |nil| 3577463524 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.blet(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (66 19 66 42))))
 (|beval_TCC19| 0
  (|beval_TCC19-1| |nil| 3577463524 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|beval| SUBTYPE "interval_bexpr.bexpr" "(IntervalExpr_adt.bite?)"
    (69 20 69 25))))
 (|beval_TCC20| 0
  (|beval_TCC20-1| |nil| 3577463524 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bif(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (69 10 69 32))))
 (|beval_TCC21| 0
  (|beval_TCC21-1| |nil| 3577463524 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.bthen(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (70 6 70 30))))
 (|beval_TCC22| 0
  (|beval_TCC22-1| |nil| 3577463524 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|beval| TERMINATION
    "interval_bexpr.beval(IntervalExpr_adt.belse(interval_bexpr.bexpr), interval_bexpr.vs, interval_bexpr.n)"
    "NIL" (71 9 71 33))))
 (|BEval_TCC1| 0
  (|BEval_TCC1-2| |nil| 3569607328 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|BEval| SUBTYPE "interval_bexpr.bop" "(Maybe[bool].some?)" (81 24 81 27)))
  (|BEval_TCC1-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| SUBTYPE "interval_bexpr.bop" "(Maybe[bool].some?)" (81 24 81 27))))
 (|BEval_TCC2| 0
  (|BEval_TCC2-1| |nil| 3568996631 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|BEval| SUBTYPE "interval_bexpr.bop1" "(Maybe[bool].some?)"
    (85 28 85 32))))
 (|BEval_TCC3| 0
  (|BEval_TCC3-1| |nil| 3568996631 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bop2(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (86 19 86 41))))
 (|BEval_TCC4| 0
  (|BEval_TCC4-1| |nil| 3569002381 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|BEval| SUBTYPE "interval_bexpr.bop1" "(Maybe[bool].some?)"
    (94 32 94 36))))
 (|BEval_TCC5| 0
  (|BEval_TCC5-1| |nil| 3569002381 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bop2(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (95 19 95 41))))
 (|BEval_TCC6| 0
  (|BEval_TCC6-1| |nil| 3569002381 ("" (SUBTYPE-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL))
   NIL
   (|BEval| SUBTYPE "interval_bexpr.bop1" "(Maybe[bool].some?)"
    (103 28 103 32))))
 (|BEval_TCC7| 0
  (|BEval_TCC7-1| |nil| 3576797914 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bop2(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (104 19 104 41))))
 (|BEval_TCC8| 0
  (|BEval_TCC8-1| |nil| 3576871852 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|Proper?| CONST-DECL "bool" |interval| NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bin(interval_bexpr.bexpr), list_props[Interval].append(interval_bexpr.box, (: interval_bexpr.blet :)))"
    "NIL" (147 10 147 50))))
 (|BEval_TCC9| 0
  (|BEval_TCC9-1| NIL 3945275310 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|BEval| SUBTYPE "interval_bexpr.blet" "(Maybe[bool].some?)"
    (154 38 154 42))))
 (|BEval_TCC10| 0
  (|BEval_TCC9-1| |nil| 3576871852 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bin(interval_bexpr.bexpr), list_props[Interval].append(interval_bexpr.box, (: IF Maybe[bool].none?(interval_bexpr.blet) THEN [|-1, 1|] ELSIF Maybe[bool].val(interval_bexpr.blet) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)))"
    "NIL" (152 8 155 55))))
 (|BEval_TCC11| 0
  (|BEval_TCC10-1| |nil| 3576871852 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bthen(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (160 8 160 31))))
 (|BEval_TCC12| 0
  (|BEval_TCC11-1| |nil| 3577234317 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.belse(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (162 8 162 31))))
 (|BEval_TCC13| 0
  (|BEval_TCC12-1| |nil| 3577463524 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.bthen(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (164 17 164 40))))
 (|BEval_TCC14| 0
  (|BEval_TCC13-1| |nil| 3577463524 ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|BEval| TERMINATION
    "interval_bexpr.BEval(IntervalExpr_adt.belse(interval_bexpr.bexpr), interval_bexpr.box)"
    "NIL" (166 19 166 42))))
 (|BEval_inclusion| 0
  (|BEval_inclusion-4| "" 3790350999
   (""
    (DEFTACTIC CLOSE_BRANCH_BE_BE
     (THEN (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T) (REPLACES -) (FLATTEN)
      (SKEEP) (INSTEEP -) (INSTEEP -) (EXPAND "beval" 1)
      (EXPAND "BEval" (-3 1)) (LIFT-IF) (GROUND)))
    ((""
      (DEFTACTIC CLOSE_BRANCH_OR_RE_RE
       (THEN (SKOLEM 1 ("rel" "r1" "r2")) (FLATTEN) (HIDE (-1 -2 -3)) (SKEEP)
        (EXPAND "beval") (EXPAND "BEval")
        (SPREAD (CASE "Proper?(Eval(r1,box)) AND  Proper?(Eval(r2,box))")
         ((THEN (FLATTEN) (ASSERT) (LEMMA "Eval_inclusion_Proper") (COPY -1)
           (INST? -1 :WHERE -3) (INST? -1) (INST? -2 :WHERE -4) (INST? -2)
           (ASSERT) (TYPEPRED "rel")
           (SPREAD (CASE "rel(0,1)")
            ((THEN (ASSERT) (LIFT-IF 1)
              (SPREAD (SPLIT)
               ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                (THEN (FLATTEN) (ASSERT)
                 (SPREAD (SPLIT 2)
                  ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                   (THEN (FLATTEN) (ASSERT))))))))
             (THEN (ASSERT) (LIFT-IF 2)
              (SPREAD (SPLIT)
               ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                (THEN (FLATTEN) (ASSERT)
                 (SPREAD (SPLIT)
                  ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                   (THEN (FLATTEN) (ASSERT)))))))))))
          (THEN (HIDE 2) (GROUND))))))
      (("" (INDUCT "bexpr")
        (("1" (ASSERT) NIL NIL)
         ("2" (TYPEPRED "bexpr!1") (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)
         ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)
         ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL)
         ("12" (ASSERT) NIL NIL) ("13" (ASSERT) NIL NIL)
         ("14" (ASSERT) NIL NIL) ("15" (ASSERT) NIL NIL)
         ("16" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
          (("16" (FLATTEN)
            (("16" (SKEEP)
              (("16" (EXPAND "beval" 1)
                (("16" (EXPAND "BEval" (-2 1)) (("16" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("17" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
          (("17" (REPLACES -)
            (("17" (FLATTEN)
              (("17" (SKEEP)
                (("17" (INSTEEP -)
                  (("17" (EXPAND "beval" 1)
                    (("17" (EXPAND "BEval" (-2 1))
                      (("17" (LIFT-IF) (("17" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("18" (CLOSE_BRANCH_BE_BE) NIL NIL)
         ("19" (CLOSE_BRANCH_BE_BE) NIL NIL)
         ("20" (CLOSE_BRANCH_BE_BE) NIL NIL)
         ("21" (CLOSE_BRANCH_OR_RE_RE) NIL NIL)
         ("22" (SKOLEM 1 ("r" "R"))
          (("22" (FLATTEN)
            (("22" (HIDE -1 -2)
              (("22" (SKEEP)
                (("22" (EXPAND "beval")
                  (("22" (EXPAND "BEval")
                    (("22" (CASE "Proper?(Eval(r,box)) AND Proper?(R)")
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (LEMMA "Eval_inclusion_Proper")
                            (("1" (INST? -1)
                              (("1" (ASSERT)
                                (("1" (CASE "Eval(r, box) << R")
                                  (("1" (ASSERT)
                                    (("1" (GRIND :EXCLUDE ("Eval" "eval")) NIL
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (LIFT-IF 2)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1)
                                              (("1"
                                                (GRIND :EXCLUDE
                                                 ("Eval" "eval"))
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2) (("2" (GROUND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("23" (SKOLEM 1 ("be1" "be2" "b3") :SKOLEM-TYPEPREDS? T)
          (("23" (REPLACES -)
            (("23" (FLATTEN)
              (("23" (SKEEP)
                (("23" (INSTEEP -)
                  (("23" (INSTEEP -)
                    (("23" (INSTEEP -)
                      (("23" (EXPAND "beval" 1)
                        (("23" (EXPAND "BEval" (-4 1))
                          (("23" (CASE-REPLACE "some?(BEval(be1, box))")
                            (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)
                             ("2" (REPLACE 1)
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("24" (SKOLEM 1 ("blet" "bin") :SKOLEM-TYPEPREDS? T)
          (("24" (REPLACES -)
            (("24" (FLATTEN)
              (("24" (SKEEP)
                (("24" (CASE "realexpr?(blet)")
                  (("1" (HIDE -2)
                    (("1" (EXPAND "beval" 1)
                      (("1" (EXPAND "BEval" (-3 1))
                        (("1" (REPLACE -1)
                          (("1" (LIFT-IF)
                            (("1" (CASE-REPLACE "Proper?(Eval(blet, box))")
                              (("1" (INST? -)
                                (("1"
                                  (CASE
                                      "length(append(box, (: Eval(blet, box) :))) = length(box) + 1")
                                  (("1"
                                    (INST -4
                                     "vs WITH [(length(box)) := eval(blet, vs,length(box))]")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE -4 2)
                                      (("2" (TYPEPRED "vs")
                                        (("2" (EXPAND "vars_in_box?")
                                          (("2" (SKEEP :PREDS? T)
                                            (("2" (REPLACE -3)
                                              (("2"
                                                (CASE-REPLACE "i=length(box)")
                                                (("1" (ASSERT)
                                                  (("1" (REWRITE "nth_append")
                                                    (("1" (EXPAND "nth" 1)
                                                      (("1"
                                                        (LEMMA
                                                         "Eval_inclusion_Proper")
                                                        (("1" (INST? -1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (INST? -2)
                                                    (("2"
                                                      (REWRITE "nth_append")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (REWRITE "length_append")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL)
                               ("3" (EXPAND "realexpr?")
                                (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "real_bool_expr")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "boolexpr?")
                          (("2" (REPLACE -1)
                            (("2" (EXPAND "beval" 2)
                              (("2" (EXPAND "BEval" (-4 2))
                                (("2"
                                  (NAME-REPLACE "nbox" "append(box,
                                               (: IF none?(BEval(blet, box)) THEN [|-1, 1|]
                                                  ELSIF val(BEval(blet, box)) THEN [|1/2, 1|]
                                                  ELSE [|-1, -1 / 2|]
                                                  ENDIF :))"
                                   :HIDE? NIL)
                                  (("1" (CASE "length(nbox) = 1+length(box)")
                                    (("1" (INST? -5)
                                      (("1"
                                        (INST -5 "vs WITH [(length(box))
                                                             := IF beval(blet, vs, length(box)) THEN 1
                                                                ELSE -1
                                                                ENDIF]")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (HIDE 3)
                                          (("2" (TYPEPRED "vs")
                                            (("2" (EXPAND "vars_in_box?")
                                              (("2" (SKEEP :PREDS? T)
                                                (("2" (REPLACE -3)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "i=length(box)")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (REPLACES -5 :DIR RL)
                                                        (("1"
                                                          (REWRITE
                                                           "nth_append")
                                                          (("1"
                                                            (EXPAND "nth" 1)
                                                            (("1" (INSTEEP -6)
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "some?(BEval(blet, box))")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REPLACES
                                                                     -7)
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       1)
                                                                      (("1"
                                                                        (GRIND
                                                                         :EXCLUDE
                                                                         "beval")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (HIDE-ALL-BUT
                                                                     2)
                                                                    (("2"
                                                                      (GRIND
                                                                       :EXCLUDE
                                                                       "beval")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3" (FLATTEN)
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (INST? -2)
                                                        (("2"
                                                          (REPLACES -4 :DIR RL)
                                                          (("2"
                                                            (REWRITE
                                                             "nth_append")
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REPLACES -1 :DIR RL)
                                      (("2" (REWRITE "length_append")
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                                   ("3" (FLATTEN) (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("25" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| NIL)
    (|vars_in_box?| CONST-DECL "bool" |box| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|beval| DEF-DECL "bool" |interval_bexpr| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|BEval| DEF-DECL "Maybe[bool]" |interval_bexpr| NIL)
    (|IntervalExpr_induction| FORMULA-DECL NIL |IntervalExpr_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Eval_inclusion_Proper| FORMULA-DECL NIL |interval_expr| NIL)
    (|neg_rel| CONST-DECL "bool" |real_orders| |reals|)
    (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Proper?| CONST-DECL "bool" |interval| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|Eval| DEF-DECL "Interval" |interval_expr| NIL)
    (<< CONST-DECL "bool" |interval| NIL)
    (|real_bool_expr| FORMULA-DECL NIL |interval_expr| NIL)
    (|nbox| SKOLEM-CONST-DECL "list[Interval]" |interval_bexpr| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|[\|\|]| CONST-DECL "Interval" |interval| NIL)
    (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|boolexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|eval| DEF-DECL "real" |interval_expr| NIL)
    (|vs| SKOLEM-CONST-DECL "(vars_in_box?(box))" |interval_bexpr| NIL)
    (|blet| SKOLEM-CONST-DECL "IntervalExpr" |interval_bexpr| NIL)
    (|box| SKOLEM-CONST-DECL "Box" |interval_bexpr| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL))
   SHOSTAK)
  (|BEval_inclusion-3| |nil| 3683884532
   (""
    (DEFTACTIC CLOSE_BRANCH_BE_BE
     (THEN (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T) (REPLACES -) (FLATTEN)
      (SKEEP) (INSTEEP -) (INSTEEP -) (EXPAND "beval" 1)
      (EXPAND "BEval" (-3 1)) (LIFT-IF) (GROUND)))
    ((""
      (DEFTACTIC CLOSE_BRANCH_OR_RE_RE
       (THEN (SKOLEM 1 ("rel" "r1" "r2")) (FLATTEN) (HIDE (-1 -2 -3)) (SKEEP)
        (EXPAND "beval") (EXPAND "BEval")
        (SPREAD (CASE "Proper?(Eval(r1,box)) AND  Proper?(Eval(r2,box))")
         ((THEN (FLATTEN) (ASSERT) (LEMMA "Eval_inclusion_Proper") (COPY -1)
           (INST? -1 :WHERE -3) (INST? -1) (INST? -2 :WHERE -4) (INST? -2)
           (ASSERT) (TYPEPRED "rel")
           (SPREAD (CASE "rel(0,1)")
            ((THEN (ASSERT) (LIFT-IF 1)
              (SPREAD (SPLIT)
               ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                (THEN (FLATTEN) (ASSERT)
                 (SPREAD (SPLIT 2)
                  ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                   (THEN (FLATTEN) (ASSERT))))))))
             (THEN (ASSERT) (LIFT-IF 2)
              (SPREAD (SPLIT)
               ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                (THEN (FLATTEN) (ASSERT)
                 (SPREAD (SPLIT)
                  ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                   (THEN (FLATTEN) (ASSERT)))))))))))
          (THEN (HIDE 2) (GROUND))))))
      (("" (INDUCT "bexpr")
        (("1" (ASSERT) NIL NIL)
         ("2" (TYPEPRED "bexpr!1") (("2" (ASSERT) NIL NIL)) NIL)
         ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)
         ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)
         ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL)
         ("12" (ASSERT) NIL NIL) ("13" (ASSERT) NIL NIL)
         ("14" (ASSERT) NIL NIL) ("15" (ASSERT) NIL NIL)
         ("16" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
          (("16" (FLATTEN)
            (("16" (SKEEP)
              (("16" (EXPAND "beval" 1)
                (("16" (EXPAND "BEval" (-2 1)) (("16" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("17" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
          (("17" (REPLACES -)
            (("17" (FLATTEN)
              (("17" (SKEEP)
                (("17" (INSTEEP -)
                  (("17" (EXPAND "beval" 1)
                    (("17" (EXPAND "BEval" (-2 1))
                      (("17" (LIFT-IF) (("17" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("18" (CLOSE_BRANCH_BE_BE) NIL NIL)
         ("19" (CLOSE_BRANCH_BE_BE) NIL NIL)
         ("20" (CLOSE_BRANCH_BE_BE) NIL NIL)
         ("21" (CLOSE_BRANCH_OR_RE_RE) NIL NIL)
         ("22" (SKOLEM 1 ("r" "R"))
          (("22" (FLATTEN)
            (("22" (HIDE -1 -2)
              (("22" (SKEEP)
                (("22" (EXPAND "beval")
                  (("22" (EXPAND "BEval")
                    (("22" (CASE "Proper?(Eval(r,box)) AND Proper?(R)")
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (LEMMA "Eval_inclusion_Proper")
                            (("1" (INST? -1)
                              (("1" (ASSERT)
                                (("1" (CASE "Eval(r, box) << R")
                                  (("1" (ASSERT)
                                    (("1" (GRIND :EXCLUDE ("Eval" "eval")) NIL
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT)
                                    (("2" (LIFT-IF 2)
                                      (("2" (SPLIT 2)
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1)
                                              (("1"
                                                (GRIND :EXCLUDE
                                                 ("Eval" "eval"))
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2) (("2" (GROUND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("23" (SKOLEM 1 ("be1" "be2" "b3") :SKOLEM-TYPEPREDS? T)
          (("23" (REPLACES -)
            (("23" (FLATTEN)
              (("23" (SKEEP)
                (("23" (INSTEEP -)
                  (("23" (INSTEEP -)
                    (("23" (INSTEEP -)
                      (("23" (EXPAND "beval" 1)
                        (("23" (EXPAND "BEval" (-4 1))
                          (("23" (CASE-REPLACE "some?(BEval(be1, box))")
                            (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)
                             ("2" (REPLACE 1)
                              (("2" (LIFT-IF)
                                (("2" (GROUND)
                                  (("2" (ASSERT)
                                    (("2" (LIFT-IF) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("24" (SKOLEM 1 ("blet" "bin") :SKOLEM-TYPEPREDS? T)
          (("24" (REPLACES -)
            (("24" (FLATTEN)
              (("24" (SKEEP)
                (("24" (CASE "realexpr?(blet)")
                  (("1" (HIDE -2)
                    (("1" (EXPAND "beval" 1)
                      (("1" (EXPAND "BEval" (-3 1))
                        (("1" (REPLACE -1)
                          (("1" (LIFT-IF)
                            (("1" (CASE-REPLACE "Proper?(Eval(blet, box))")
                              (("1" (INST? -)
                                (("1"
                                  (CASE
                                      "length(append(box, (: Eval(blet, box) :))) = length(box) + 1")
                                  (("1"
                                    (INST -4
                                     "vs WITH [(length(box)) := eval(blet, vs,length(box))]")
                                    (("1" (ASSERT) NIL NIL)
                                     ("2" (HIDE -4 2)
                                      (("2" (TYPEPRED "vs")
                                        (("2" (EXPAND "vars_in_box?")
                                          (("2" (SKEEP :PREDS? T)
                                            (("2" (REPLACE -3)
                                              (("2"
                                                (CASE-REPLACE "i=length(box)")
                                                (("1" (ASSERT)
                                                  (("1" (REWRITE "nth_append")
                                                    (("1" (EXPAND "nth" 1)
                                                      (("1"
                                                        (LEMMA
                                                         "Eval_inclusion_Proper")
                                                        (("1" (INST? -1)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (INST? -2)
                                                    (("2"
                                                      (REWRITE "nth_append")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT 1)
                                    (("2" (REWRITE "length_append")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL)
                               ("3" (EXPAND "realexpr?")
                                (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "real_bool_expr")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "boolexpr?")
                          (("2" (REPLACE -1)
                            (("2" (EXPAND "beval" 2)
                              (("2" (EXPAND "BEval" (-4 2))
                                (("2"
                                  (NAME-REPLACE "nbox" "append(box,
                                               (: IF none?(BEval(blet, box)) THEN [|-1, 1|]
                                                  ELSIF val(BEval(blet, box)) THEN [|1/2, 1|]
                                                  ELSE [|-1, -1 / 2|]
                                                  ENDIF :))"
                                   :HIDE? NIL)
                                  (("1" (CASE "length(nbox) = 1+length(box)")
                                    (("1" (INST? -5)
                                      (("1"
                                        (INST -5 "vs WITH [(length(box))
                                                             := IF beval(blet, vs, length(box)) THEN 1
                                                                ELSE -1
                                                                ENDIF]")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (HIDE 3)
                                          (("2" (TYPEPRED "vs")
                                            (("2" (EXPAND "vars_in_box?")
                                              (("2" (SKEEP :PREDS? T)
                                                (("2" (REPLACE -3)
                                                  (("2"
                                                    (CASE-REPLACE
                                                     "i=length(box)")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (REPLACES -5 :DIR RL)
                                                        (("1"
                                                          (REWRITE
                                                           "nth_append")
                                                          (("1"
                                                            (EXPAND "nth" 1)
                                                            (("1" (INSTEEP -6)
                                                              (("1"
                                                                (CASE-REPLACE
                                                                 "some?(BEval(blet, box))")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REPLACES
                                                                     -7)
                                                                    (("1"
                                                                      (HIDE-ALL-BUT
                                                                       1)
                                                                      (("1"
                                                                        (GRIND
                                                                         :EXCLUDE
                                                                         "beval")
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (HIDE-ALL-BUT
                                                                     2)
                                                                    (("2"
                                                                      (GRIND
                                                                       :EXCLUDE
                                                                       "beval")
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("3" (FLATTEN)
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT)
                                                      (("2" (INST? -2)
                                                        (("2"
                                                          (REPLACES -4 :DIR RL)
                                                          (("2"
                                                            (REWRITE
                                                             "nth_append")
                                                            (("1" (FLATTEN)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REPLACES -1 :DIR RL)
                                      (("2" (REWRITE "length_append")
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                                   ("3" (FLATTEN) (("3" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("25" (ASSERT) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|realexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|eval| DEF-DECL "real" |interval_expr| NIL)
    (|boolexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|real_bool_expr| FORMULA-DECL NIL |interval_expr| NIL)
    (<< CONST-DECL "bool" |interval| NIL)
    (|Proper?| CONST-DECL "bool" |interval| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|Eval| DEF-DECL "Interval" |interval_expr| NIL)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| NIL)
    (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|neg_rel| CONST-DECL "bool" |real_orders| |reals|)
    (|Eval_inclusion_Proper| FORMULA-DECL NIL |interval_expr| NIL)
    (|IntervalExpr_induction| FORMULA-DECL NIL |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL))
   NIL)
  (|BEval_inclusion-2| |nil| 3683884357
   (""
    (DEFTACTIC CLOSE_BRANCH_OR_RE_RE
     (THEN (SKOLEM 1 ("rel" "r1" "r2")) (FLATTEN) (HIDE (-1 -2 -3)) (SKEEP)
      (EXPAND "beval") (EXPAND "BEval")
      (SPREAD (CASE "Proper?(Eval(r1,box)) AND  Proper?(Eval(r2,box))")
       ((THEN (FLATTEN) (ASSERT) (LEMMA "Eval_inclusion_Proper") (COPY -1)
         (INST? -1 :WHERE -3) (INST? -1) (INST? -2 :WHERE -4) (INST? -2)
         (ASSERT) (TYPEPRED "rel")
         (SPREAD (CASE "rel(0,1)")
          ((THEN (ASSERT) (LIFT-IF 1)
            (SPREAD (SPLIT)
             ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
              (THEN (FLATTEN) (ASSERT)
               (SPREAD (SPLIT 2)
                ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                 (THEN (FLATTEN) (ASSERT))))))))
           (THEN (ASSERT) (LIFT-IF 2)
            (SPREAD (SPLIT)
             ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
              (THEN (FLATTEN) (ASSERT)
               (SPREAD (SPLIT)
                ((THEN (FLATTEN) (ASSERT) (GRIND :EXCLUDE ("Eval" "eval")))
                 (THEN (FLATTEN) (ASSERT)))))))))))
        (THEN (HIDE 2) (GROUND))))))
    (("" (INDUCT "bexpr")
      (("1" (ASSERT) NIL) ("2" (TYPEPRED "bexpr!1") (("2" (ASSERT) NIL)))
       ("3" (ASSERT) NIL) ("4" (ASSERT) NIL) ("5" (ASSERT) NIL)
       ("6" (ASSERT) NIL) ("7" (ASSERT) NIL) ("8" (ASSERT) NIL)
       ("9" (ASSERT) NIL) ("10" (ASSERT) NIL) ("11" (ASSERT) NIL)
       ("12" (ASSERT) NIL) ("13" (ASSERT) NIL) ("14" (ASSERT) NIL)
       ("15" (SKEEP) (("15" (HIDE -1) (("15" (EXPAND* "BEval" "beval") NIL)))))
       ("16" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
        (("16" (REPLACES -)
          (("16" (FLATTEN)
            (("16" (SKEEP)
              (("16" (INSTEEP -)
                (("16" (EXPAND "beval" 1)
                  (("16" (EXPAND "BEval" (-2 1))
                    (("16" (LIFT-IF) (("16" (GROUND) NIL)))))))))))))))))
       ("17" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
        (("17" (REPLACES -)
          (("17" (FLATTEN)
            (("17" (SKEEP)
              (("17" (INSTEEP -)
                (("17" (INSTEEP -)
                  (("17" (EXPAND "beval" 1)
                    (("17" (EXPAND "BEval" (-3 1))
                      (("17" (LIFT-IF) (("17" (GROUND) NIL)))))))))))))))))))
       ("18" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
        (("18" (REPLACES -)
          (("18" (FLATTEN)
            (("18" (SKEEP)
              (("18" (INSTEEP -)
                (("18" (INSTEEP -)
                  (("18" (EXPAND "beval" 1)
                    (("18" (EXPAND "BEval" (-3 1))
                      (("18" (LIFT-IF) (("18" (GROUND) NIL)))))))))))))))))))
       ("19" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
        (("19" (REPLACES -)
          (("19" (FLATTEN)
            (("19" (SKEEP)
              (("19" (INSTEEP -)
                (("19" (INSTEEP -)
                  (("19" (EXPAND "beval" 1)
                    (("19" (EXPAND "BEval" (-3 1))
                      (("19" (LIFT-IF) (("19" (GROUND) NIL)))))))))))))))))))
       ("20" (CLOSE_BRANCH_OR_RE_RE) NIL)
       ("21" (SKOLEM 1 ("r" "R"))
        (("21" (FLATTEN)
          (("21" (HIDE -1 -2)
            (("21" (SKEEP)
              (("21" (EXPAND "beval")
                (("21" (EXPAND "BEval")
                  (("21" (CASE "Proper?(Eval(r,box)) AND Proper?(R)")
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (LEMMA "Eval_inclusion_Proper")
                          (("1" (INST? -1)
                            (("1" (ASSERT)
                              (("1" (CASE "Eval(r, box) << R")
                                (("1" (ASSERT)
                                  (("1" (GRIND :EXCLUDE ("Eval" "eval")) NIL)))
                                 ("2" (ASSERT)
                                  (("2" (LIFT-IF 2)
                                    (("2" (SPLIT 2)
                                      (("1" (FLATTEN)
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1)
                                            (("1"
                                              (GRIND :EXCLUDE ("Eval" "eval"))
                                              NIL)))))))
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT) NIL)))))))))))))))))))))
                     ("2" (HIDE 2) (("2" (GROUND) NIL)))))))))))))))))
       ("22" (SKOLEM 1 ("be1" "be2" "b3") :SKOLEM-TYPEPREDS? T)
        (("22" (REPLACES -)
          (("22" (FLATTEN)
            (("22" (SKEEP)
              (("22" (INSTEEP -)
                (("22" (INSTEEP -)
                  (("22" (INSTEEP -)
                    (("22" (EXPAND "beval" 1)
                      (("22" (EXPAND "BEval" (-4 1))
                        (("22" (CASE-REPLACE "some?(BEval(be1, box))")
                          (("1" (LIFT-IF) (("1" (GROUND) NIL)))
                           ("2" (REPLACE 1)
                            (("2" (LIFT-IF)
                              (("2" (GROUND)
                                (("2" (ASSERT)
                                  (("2" (LIFT-IF)
                                    (("2" (GROUND)
                                      NIL)))))))))))))))))))))))))))))))
       ("23" (SKOLEM 1 ("blet" "bin") :SKOLEM-TYPEPREDS? T)
        (("23" (REPLACES -)
          (("23" (FLATTEN)
            (("23" (SKEEP)
              (("23" (CASE "realexpr?(blet)")
                (("1" (HIDE -2)
                  (("1" (EXPAND "beval" 1)
                    (("1" (EXPAND "BEval" (-3 1))
                      (("1" (REPLACE -1)
                        (("1" (LIFT-IF)
                          (("1" (CASE-REPLACE "Proper?(Eval(blet, box))")
                            (("1" (INST? -)
                              (("1"
                                (CASE
                                    "length(append(box, (: Eval(blet, box) :))) = length(box) + 1")
                                (("1"
                                  (INST -4
                                   "vs WITH [(length(box)) := eval(blet, vs,length(box))]")
                                  (("1" (ASSERT) NIL)
                                   ("2" (HIDE -4 2)
                                    (("2" (TYPEPRED "vs")
                                      (("2" (EXPAND "vars_in_box?")
                                        (("2" (SKEEP :PREDS? T)
                                          (("2" (REPLACE -3)
                                            (("2"
                                              (CASE-REPLACE "i=length(box)")
                                              (("1" (ASSERT)
                                                (("1" (REWRITE "nth_append")
                                                  (("1" (EXPAND "nth" 1)
                                                    (("1"
                                                      (LEMMA
                                                       "Eval_inclusion_Proper")
                                                      (("1" (INST? -1)
                                                        (("1" (ASSERT)
                                                          NIL)))))))))))
                                               ("2" (ASSERT)
                                                (("2" (INST? -2)
                                                  (("2" (REWRITE "nth_append")
                                                    NIL)))))))))))))))))))
                                 ("2" (HIDE-ALL-BUT 1)
                                  (("2" (REWRITE "length_append")
                                    (("2" (ASSERT) NIL)))))))))
                             ("2" (ASSERT) NIL)
                             ("3" (EXPAND "realexpr?")
                              (("3" (PROPAX) NIL)))))))))))))))
                 ("2" (LEMMA "real_bool_expr")
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (EXPAND "boolexpr?")
                        (("2" (REPLACE -1)
                          (("2" (EXPAND "beval" 2)
                            (("2" (EXPAND "BEval" (-4 2))
                              (("2"
                                (NAME-REPLACE "nbox" "append(box,
                                               (: IF none?(BEval(blet, box)) THEN [|-1, 1|]
                                                  ELSIF val(BEval(blet, box)) THEN [|1/2, 1|]
                                                  ELSE [|-1, -1 / 2|]
                                                  ENDIF :))"
                                 :HIDE? NIL)
                                (("1" (CASE "length(nbox) = 1+length(box)")
                                  (("1" (INST? -5)
                                    (("1"
                                      (INST -5 "vs WITH [(length(box))
                                                             := IF beval(blet, vs, length(box)) THEN 1
                                                                ELSE -1
                                                                ENDIF]")
                                      (("1" (ASSERT)
                                        (("1" (REPLACE -1)
                                          (("1" (PROPAX) NIL)))))
                                       ("2" (HIDE 3)
                                        (("2" (TYPEPRED "vs")
                                          (("2" (EXPAND "vars_in_box?")
                                            (("2" (SKEEP :PREDS? T)
                                              (("2" (REPLACE -3)
                                                (("2"
                                                  (CASE-REPLACE
                                                   "i=length(box)")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACES -5 :DIR RL)
                                                      (("1"
                                                        (REWRITE "nth_append")
                                                        (("1" (EXPAND "nth" 1)
                                                          (("1" (INSTEEP -6)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "some?(BEval(blet, box))")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (REPLACES -7)
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("1"
                                                                      (GRIND
                                                                       :EXCLUDE
                                                                       "beval")
                                                                      NIL)))))))
                                                               ("2" (ASSERT)
                                                                (("2"
                                                                  (HIDE-ALL-BUT
                                                                   2)
                                                                  (("2"
                                                                    (GRIND
                                                                     :EXCLUDE
                                                                     "beval")
                                                                    NIL)))))))))))
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL)))
                                                         ("3" (FLATTEN)
                                                          (("3" (ASSERT)
                                                            NIL)))))))))
                                                   ("2" (ASSERT)
                                                    (("2" (INST? -2)
                                                      (("2"
                                                        (REPLACES -4 :DIR RL)
                                                        (("2"
                                                          (REWRITE
                                                           "nth_append")
                                                          (("1" (FLATTEN)
                                                            (("1" (ASSERT)
                                                              NIL)))
                                                           ("2" (FLATTEN)
                                                            (("2" (ASSERT)
                                                              NIL)))))))))))))))))))))))))))
                                   ("2" (REPLACES -1 :DIR RL)
                                    (("2" (REWRITE "length_append")
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL)))
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT) NIL)))))))))
                                 ("2" (FLATTEN) (("2" (ASSERT) NIL)))
                                 ("3" (FLATTEN)
                                  (("3" (ASSERT)
                                    NIL))))))))))))))))))))))))))))))))
    NIL)
   NIL NIL)
  (|BEval_inclusion-1| |nil| 3568996643
   ("" (INDUCT "bexpr")
    (("1" (ASSERT) NIL NIL)
     ("2" (TYPEPRED "bexpr!1") (("2" (ASSERT) NIL NIL)) NIL)
     ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)
     ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)
     ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL)
     ("12" (ASSERT) NIL NIL) ("13" (ASSERT) NIL NIL) ("14" (ASSERT) NIL NIL)
     ("15" (SKEEP)
      (("15" (HIDE -1) (("15" (EXPAND* "BEval" "beval") NIL NIL)) NIL)) NIL)
     ("16" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
      (("16" (REPLACES -)
        (("16" (FLATTEN)
          (("16" (SKEEP)
            (("16" (INSTEEP -)
              (("16" (EXPAND "beval" 1)
                (("16" (EXPAND "BEval" (-2 1))
                  (("16" (LIFT-IF) (("16" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("17" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("17" (REPLACES -)
        (("17" (FLATTEN)
          (("17" (SKEEP)
            (("17" (INSTEEP -)
              (("17" (INSTEEP -)
                (("17" (EXPAND "beval" 1)
                  (("17" (EXPAND "BEval" (-3 1))
                    (("17" (LIFT-IF) (("17" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("18" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("18" (REPLACES -)
        (("18" (FLATTEN)
          (("18" (SKEEP)
            (("18" (INSTEEP -)
              (("18" (INSTEEP -)
                (("18" (EXPAND "beval" 1)
                  (("18" (EXPAND "BEval" (-3 1))
                    (("18" (LIFT-IF) (("18" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("19" (REPLACES -)
        (("19" (FLATTEN)
          (("19" (SKEEP)
            (("19" (INSTEEP -)
              (("19" (INSTEEP -)
                (("19" (EXPAND "beval" 1)
                  (("19" (EXPAND "BEval" (-3 1))
                    (("19" (LIFT-IF) (("19" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOLEM 1 ("rel" "r1" "r2"))
      (("20" (FLATTEN)
        (("20" (HIDE (-1 -2 -3))
          (("20" (SKEEP)
            (("20" (EXPAND "beval")
              (("20" (EXPAND "BEval")
                (("20"
                  (CASE "Proper?(Eval(r1,box)) AND  Proper?(Eval(r2,box))")
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (LEMMA "Eval_inclusion_Proper")
                        (("1" (COPY -1)
                          (("1" (INST? -1 :WHERE -3)
                            (("1" (INST? -1)
                              (("1" (INST? -2 :WHERE -4)
                                (("1" (INST? -2)
                                  (("1" (ASSERT)
                                    (("1" (TYPEPRED "rel")
                                      (("1" (CASE "rel(0,1)")
                                        (("1" (ASSERT)
                                          (("1" (LIFT-IF 1)
                                            (("1" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (GRIND :EXCLUDE
                                                     ("Eval" "eval"))
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2" (SPLIT 2)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (GRIND :EXCLUDE
                                                           ("Eval" "eval"))
                                                          NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2" (LIFT-IF 2)
                                            (("2" (SPLIT)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (GRIND :EXCLUDE
                                                     ("Eval" "eval"))
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (ASSERT)
                                                  (("2" (SPLIT)
                                                    (("1" (FLATTEN)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (GRIND :EXCLUDE
                                                           ("Eval" "eval"))
                                                          NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (FLATTEN)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2) (("2" (GROUND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (SKOLEM 1 ("r" "R"))
      (("21" (FLATTEN)
        (("21" (HIDE -1 -2)
          (("21" (SKEEP)
            (("21" (EXPAND "beval")
              (("21" (EXPAND "BEval")
                (("21" (CASE "Proper?(Eval(r,box)) AND Proper?(R)")
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (LEMMA "Eval_inclusion_Proper")
                        (("1" (INST? -1)
                          (("1" (ASSERT)
                            (("1" (CASE "Eval(r, box) << R")
                              (("1" (ASSERT)
                                (("1" (GRIND :EXCLUDE ("Eval" "eval")) NIL
                                  NIL))
                                NIL)
                               ("2" (ASSERT)
                                (("2" (LIFT-IF 2)
                                  (("2" (SPLIT 2)
                                    (("1" (FLATTEN)
                                      (("1" (ASSERT)
                                        (("1" (REPLACE -1)
                                          (("1"
                                            (GRIND :EXCLUDE ("Eval" "eval"))
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2) (("2" (GROUND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("22" (SKOLEM 1 ("be1" "be2" "b3") :SKOLEM-TYPEPREDS? T)
      (("22" (REPLACES -)
        (("22" (FLATTEN)
          (("22" (SKEEP)
            (("22" (INSTEEP -)
              (("22" (INSTEEP -)
                (("22" (INSTEEP -)
                  (("22" (EXPAND "beval" 1)
                    (("22" (EXPAND "BEval" (-4 1))
                      (("22" (CASE-REPLACE "some?(BEval(be1, box))")
                        (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL)
                         ("2" (REPLACE 1)
                          (("2" (LIFT-IF)
                            (("2" (GROUND)
                              (("2" (ASSERT)
                                (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("23" (SKOLEM 1 ("blet" "bin") :SKOLEM-TYPEPREDS? T)
      (("23" (REPLACES -)
        (("23" (FLATTEN)
          (("23" (SKEEP)
            (("23" (CASE "realexpr?(blet)")
              (("1" (HIDE -2)
                (("1" (EXPAND "beval" 1)
                  (("1" (EXPAND "BEval" (-3 1))
                    (("1" (REPLACE -1)
                      (("1" (LIFT-IF)
                        (("1" (CASE-REPLACE "Proper?(Eval(blet, box))")
                          (("1" (INST? -)
                            (("1"
                              (CASE
                                  "length(append(box, (: Eval(blet, box) :))) = length(box) + 1")
                              (("1"
                                (INST -4
                                 "vs WITH [(length(box)) := eval(blet, vs,length(box))]")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (HIDE -4 2)
                                  (("2" (TYPEPRED "vs")
                                    (("2" (EXPAND "vars_in_box?")
                                      (("2" (SKEEP :PREDS? T)
                                        (("2" (REPLACE -3)
                                          (("2" (CASE-REPLACE "i=length(box)")
                                            (("1" (ASSERT)
                                              (("1" (REWRITE "nth_append")
                                                (("1" (EXPAND "nth" 1)
                                                  (("1"
                                                    (LEMMA
                                                     "Eval_inclusion_Proper")
                                                    (("1" (INST? -1)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (ASSERT)
                                              (("2" (INST? -2)
                                                (("2" (REWRITE "nth_append")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT 1)
                                (("2" (REWRITE "length_append")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL)
                           ("3" (EXPAND "realexpr?") (("3" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "real_bool_expr")
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (EXPAND "boolexpr?")
                      (("2" (REPLACE -1)
                        (("2" (EXPAND "beval" 2)
                          (("2" (EXPAND "BEval" (-4 2))
                            (("2"
                              (NAME-REPLACE "nbox" "append(box,
                                         (: IF none?(BEval(blet, box)) THEN [|-1, 1|]
                                            ELSIF val(BEval(blet, box)) THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF :))"
                               :HIDE? NIL)
                              (("1" (CASE "length(nbox) = 1+length(box)")
                                (("1" (INST? -5)
                                  (("1"
                                    (INST -5 "vs WITH [(length(box))
                                                   := IF beval(blet, vs, length(box)) THEN 1
                                                      ELSE -1
                                                      ENDIF]")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (HIDE 3)
                                      (("2" (TYPEPRED "vs")
                                        (("2" (EXPAND "vars_in_box?")
                                          (("2" (SKEEP :PREDS? T)
                                            (("2" (REPLACE -3)
                                              (("2"
                                                (CASE-REPLACE "i=length(box)")
                                                (("1" (ASSERT)
                                                  (("1" (REPLACES -5 :DIR RL)
                                                    (("1"
                                                      (REWRITE "nth_append")
                                                      (("1" (EXPAND "nth" 1)
                                                        (("1" (INSTEEP -6)
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "some?(BEval(blet, box))")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REPLACES -7)
                                                                (("1"
                                                                  (HIDE-ALL-BUT
                                                                   1)
                                                                  (("1"
                                                                    (GRIND
                                                                     :EXCLUDE
                                                                     "beval")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (ASSERT)
                                                              (("2"
                                                                (HIDE-ALL-BUT
                                                                 2)
                                                                (("2"
                                                                  (GRIND
                                                                   :EXCLUDE
                                                                   "beval")
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("3" (FLATTEN)
                                                        (("3" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (INST? -2)
                                                    (("2" (REPLACES -4 :DIR RL)
                                                      (("2"
                                                        (REWRITE "nth_append")
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACES -1 :DIR RL)
                                  (("2" (REWRITE "length_append")
                                    (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                      NIL)
                                     ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|realexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|eval| DEF-DECL "real" |interval_expr| NIL)
    (|boolexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|real_bool_expr| FORMULA-DECL NIL |interval_expr| NIL)
    (<< CONST-DECL "bool" |interval| NIL)
    (|Proper?| CONST-DECL "bool" |interval| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|Eval| DEF-DECL "Interval" |interval_expr| NIL)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| NIL)
    (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|neg_rel| CONST-DECL "bool" |real_orders| |reals|)
    (|Eval_inclusion_Proper| FORMULA-DECL NIL |interval_expr| NIL)
    (|IntervalExpr_induction| FORMULA-DECL NIL |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|vars_in_box?| CONST-DECL "bool" |box| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| NIL) (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL))
   SHOSTAK))
 (|BEval_inclusion_Proper| 0
  (|BEval_inclusion_Proper-1| |nil| 3576919950
   ("" (SKEEP)
    (("" (BETA)
      (("" (FLATTEN)
        (("" (IFF)
          (("" (LEMMA "BEval_inclusion")
            (("" (INST -1 "pox" _ "bexpr")
              (("" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (SKEEP) (("1" (INST? -) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (INST -1 "midvars(pox)")
                      (("2" (INST -2 "midvars(pox)") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|midvars| CONST-DECL "(vars_in_box?(pox))" |box| NIL)
    (|vars_in_box?| CONST-DECL "bool" |box| NIL)
    (|Env| TYPE-EQ-DECL NIL |box| NIL))
   NIL))
 (|BEval_fundamental| 0
  (|BEval_fundamental-2| |nil| 3576854177
   ("" (INDUCT "bexpr")
    (("1" (ASSERT) NIL NIL)
     ("2" (TYPEPRED "bexpr!1") (("2" (ASSERT) NIL NIL)) NIL)
     ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)
     ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)
     ("9" (ASSERT) NIL NIL) ("10" (ASSERT) NIL NIL) ("11" (ASSERT) NIL NIL)
     ("12" (ASSERT) NIL NIL) ("13" (ASSERT) NIL NIL) ("14" (ASSERT) NIL NIL)
     ("15" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("15" (REPLACES (-1 -2)) NIL NIL)) NIL)
     ("16" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
      (("16" (FLATTEN)
        (("16" (SKEEP)
          (("16" (ASSERT)
            (("16" (EXPAND "BEval" (-3 1)) (("16" (PROPAX) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("17" (SKOLEM 1 "be" :SKOLEM-TYPEPREDS? T)
      (("17" (REPLACES -1)
        (("17" (FLATTEN)
          (("17" (SKEEP)
            (("17" (INSTEEP -)
              (("17" (ASSERT)
                (("17" (EXPAND "BEval" (-3 1))
                  (("17" (LIFT-IF) (("17" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("18" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("18" (REPLACES (-1 -2))
        (("18" (FLATTEN)
          (("18" (SKEEP)
            (("18" (INSTEEP -)
              (("18" (INSTEEP -)
                (("18" (EXPAND "BEval" (-4 1))
                  (("18" (LIFT-IF) (("18" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("19" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("19" (REPLACES (-1 -2))
        (("19" (FLATTEN)
          (("19" (SKEEP)
            (("19" (INSTEEP -)
              (("19" (INSTEEP -)
                (("19" (ASSERT)
                  (("19" (EXPAND "BEval" (-4 1))
                    (("19" (LIFT-IF) (("19" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("20" (SKOLEM 1 ("be1" "be2") :SKOLEM-TYPEPREDS? T)
      (("20" (REPLACES (-1 -2))
        (("20" (FLATTEN)
          (("20" (SKEEP)
            (("20" (INSTEEP -)
              (("20" (INSTEEP -)
                (("20" (ASSERT)
                  (("20" (EXPAND "BEval" (-4 1))
                    (("20" (LIFT-IF) (("20" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("21" (SKOLEM 1 ("rel" "r1" "r2"))
      (("21" (FLATTEN)
        (("21" (HIDE -)
          (("21" (SKEEP)
            (("21"
              (NAME-REPLACE "beb" "BEval(BREL(rel, r1, r2), box)" :HIDE? NIL)
              (("21"
                (NAME-REPLACE "bep" "BEval(BREL(rel, r1, r2), pox)" :HIDE? NIL)
                (("21" (LEMMA "Proper_Inclusion")
                  (("21" (INST?)
                    (("21" (ASSERT)
                      (("21" (EXPAND "BEval")
                        (("21" (CASE "Proper?(Eval(r1,box))")
                          (("1" (ASSERT)
                            (("1" (COPY -2)
                              (("1" (INST? -)
                                (("1" (ASSERT)
                                  (("1" (CASE "Proper?(Eval(r2,box))")
                                    (("1" (ASSERT)
                                      (("1" (INST? - :WHERE -1)
                                        (("1" (ASSERT)
                                          (("1" (TYPEPRED "rel")
                                            (("1"
                                              (LEMMA "Eval_fundamental_proper")
                                              (("1" (INST?)
                                                (("1" (ASSERT)
                                                  (("1" (COPY -1)
                                                    (("1" (INST? -1 :WHERE -6)
                                                      (("1"
                                                        (INST? -2 :WHERE -4)
                                                        (("1" (ASSERT)
                                                          (("1" (HIDE -11)
                                                            (("1"
                                                              (GRIND :EXCLUDE
                                                               "Eval")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("22" (SKOLEM 1 ("r" "R"))
      (("22" (FLATTEN)
        (("22" (HIDE -)
          (("22" (SKEEP)
            (("22"
              (NAME-REPLACE "bep" "BEval(BINCLUDES(r, R), pox)" :HIDE? NIL)
              (("22"
                (NAME-REPLACE "beb" "BEval(BINCLUDES(r, R), box)" :HIDE? NIL)
                (("22" (LEMMA "Proper_Inclusion")
                  (("22" (INST?)
                    (("22" (ASSERT)
                      (("22" (INST?)
                        (("22" (EXPAND "BEval")
                          (("22" (CASE "Proper?(Eval(r, box))")
                            (("1" (ASSERT)
                              (("1" (CASE "Proper?(R)")
                                (("1" (ASSERT)
                                  (("1" (LEMMA "Eval_fundamental_proper")
                                    (("1" (INST?)
                                      (("1" (ASSERT)
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1" (HIDE -8)
                                              (("1" (GRIND :EXCLUDE "Eval") NIL
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("23" (SKOLEM 1 ("be1" "be2" "be3") :SKOLEM-TYPEPREDS? T)
      (("23" (REPLACES (-1 -2 -3))
        (("23" (FLATTEN)
          (("23" (SKEEP)
            (("23" (INSTEEP -)
              (("23" (INSTEEP -)
                (("23" (INSTEEP -)
                  (("23" (ASSERT)
                    (("23" (CASE "some?(BEval(be1, box))")
                      (("1" (ASSERT)
                        (("1" (FLATTEN)
                          (("1" (EXPAND "BEval" (-7 1))
                            (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (EXPAND "BEval" (-5 2))
                        (("2" (ASSERT)
                          (("2" (CASE "NOT some?(BEval(be1,pox))")
                            (("1" (ASSERT)
                              (("1" (LIFT-IF) (("1" (GROUND) NIL NIL)) NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("24" (SKOLEM 1 ("blet" "bin") :SKOLEM-TYPEPREDS? T)
      (("24" (REPLACES -1)
        (("24" (FLATTEN)
          (("24" (SKEEP)
            (("24" (LEMMA "real_bool_expr")
              (("24" (INST?)
                (("24" (CASE "realexpr?(blet)")
                  (("1" (HIDE -2 -3)
                    (("1" (EXPAND "BEval" (-4 1))
                      (("1" (ASSERT)
                        (("1" (CASE-REPLACE "Proper?(Eval(blet, box))")
                          (("1" (LEMMA "Proper_Inclusion")
                            (("1" (INST? -)
                              (("1" (ASSERT)
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1"
                                      (INST -4
                                       "append(box, (: Eval(blet, box) :))"
                                       "append(pox, (: Eval(blet, pox) :))")
                                      (("1" (REPLACE -6)
                                        (("1" (REPLACE 1)
                                          (("1" (HIDE 2)
                                            (("1" (EXPAND "Inclusion?")
                                              (("1" (FLATTEN)
                                                (("1"
                                                  (CASE
                                                      "length(append(pox, (: Eval(blet, pox) :))) = length(pox) + 1")
                                                  (("1"
                                                    (CASE
                                                        "length(append(box, (: Eval(blet, box) :))) = length(box) + 1")
                                                    (("1" (ASSERT)
                                                      (("1" (SKEEP :PREDS? T)
                                                        (("1" (REPLACE -3)
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "i=length(pox)")
                                                            (("1"
                                                              (REWRITE
                                                               "nth_append")
                                                              (("1"
                                                                (EXPAND "nth" 1
                                                                        1)
                                                                (("1"
                                                                  (REPLACE -8)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "nth_append")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "nth" 1)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "Eval_fundamental_proper")
                                                                        (("1"
                                                                          (INSTEEP
                                                                           -)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (INST?
                                                                               -)
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REWRITE
                                                               "nth_append")
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (REWRITE
                                                                   "nth_append")
                                                                  (("2"
                                                                    (INSTEEP
                                                                     -8)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2"
                                                        (REWRITE
                                                         "length_append")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2"
                                                      (REWRITE "length_append")
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -5 2)
                                        (("2" (REWRITE "proper_append")
                                          (("2" (HIDE 2)
                                            (("2" (EXPAND "ProperBox?")
                                              (("2" (EXPAND "every")
                                                (("2" (EXPAND "every")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL)
                           ("3" (HIDE 2)
                            (("3" (EXPAND "realexpr?")
                              (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT)
                    (("2" (EXPAND "boolexpr?")
                      (("2" (REPLACE -1)
                        (("2" (EXPAND "BEval" (-5 2))
                          (("2"
                            (NAME-REPLACE "nbox" "append(box,
                                     cons(IF none?(BEval(blet, box)) THEN [|-1, 1|]
                                          ELSIF val(BEval(blet, box)) THEN [|1/2, 1|]
                                          ELSE [|-1, -1 / 2|]
                                          ENDIF,
                                          null))"
                             :HIDE? NIL)
                            (("1"
                              (NAME-REPLACE "npox" "append(pox,
                                         cons(IF none?(BEval(blet, pox)) THEN [|-1, 1|]
                                              ELSIF val(BEval(blet, pox)) THEN [|1/2, 1|]
                                              ELSE [|-1, -1 / 2|]
                                              ENDIF,
                                              null))"
                               :HIDE? NIL)
                              (("1" (CASE "length(npox) = 1+length(pox)")
                                (("1" (CASE "length(nbox) = 1+length(box)")
                                  (("1" (INSTEEP -6)
                                    (("1" (ASSERT)
                                      (("1" (INST -7 "nbox" "npox")
                                        (("1" (REPLACE -9)
                                          (("1" (REPLACE 2)
                                            (("1" (HIDE 3)
                                              (("1" (EXPAND "Inclusion?")
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1" (SKEEP :PREDS? T)
                                                      (("1"
                                                        (CASE-REPLACE
                                                         "i=length(pox)")
                                                        (("1"
                                                          (REPLACES (-5 -6) 2
                                                           :DIR RL :HIDE? NIL)
                                                          (("1"
                                                            (REWRITE
                                                             "nth_append")
                                                            (("1"
                                                              (EXPAND "nth" 2
                                                                      1)
                                                              (("1"
                                                                (REWRITE
                                                                 "nth_append")
                                                                (("1"
                                                                  (EXPAND "nth"
                                                                          2 1)
                                                                  (("1"
                                                                    (HIDE -5
                                                                     -6)
                                                                    (("1"
                                                                      (CASE
                                                                          "some?(BEval(blet, box))")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (REPLACES
                                                                               -8)
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 2)
                                                                                (("1"
                                                                                  (GRIND
                                                                                   :EXCLUDE
                                                                                   "BEval")
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (HIDE-ALL-BUT
                                                                           3)
                                                                          (("2"
                                                                            (GRIND
                                                                             :EXCLUDE
                                                                             "BEval")
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("3"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("3" (FLATTEN)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("3" (FLATTEN)
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (REPLACES (-4 -5) 3
                                                           :DIR RL :HIDE? NIL)
                                                          (("2"
                                                            (REWRITE
                                                             "nth_append")
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REWRITE
                                                                 "nth_append")
                                                                (("1"
                                                                  (INST? -9)
                                                                  NIL NIL)
                                                                 ("2" (FLATTEN)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("3" (FLATTEN)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (FLATTEN)
                                                              (("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL)
                                                             ("3" (FLATTEN)
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (REPLACES -3 1 :DIR RL)
                                          (("2" (REWRITE "proper_append")
                                            (("1" (HIDE 2)
                                              (("1" (EXPAND "ProperBox?")
                                                (("1" (EXPAND "every")
                                                  (("1" (HIDE-ALL-BUT 1)
                                                    (("1" (EXPAND "every")
                                                      (("1"
                                                        (GRIND :EXCLUDE
                                                         "BEval")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT) NIL NIL)) NIL)
                                             ("3" (FLATTEN)
                                              (("3" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE-ALL-BUT (-3 -4 1))
                                    (("2" (REPLACES -1 :DIR RL)
                                      (("2" (REWRITE "length_append")
                                        (("1" (FLATTEN)
                                          (("1" (ASSERT) NIL NIL)) NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE-ALL-BUT (-1 -3 1))
                                  (("2" (REPLACES -1 :DIR RL)
                                    (("2" (REWRITE "length_append")
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                              NIL)
                             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
                             ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("25" (ASSERT) NIL NIL))
    NIL)
   ((|real_bool_expr| FORMULA-DECL NIL |interval_expr| NIL)
    (|realexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|proper_append| FORMULA-DECL NIL |box| NIL)
    (|boolexpr?| CONST-DECL "bool" |interval_expr| NIL)
    (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]"
     |IntervalExpr_adt| NIL)
    (|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]"
     |IntervalExpr_adt| NIL)
    (|Proper_Inclusion| FORMULA-DECL NIL |interval_expr| NIL)
    (|Proper?| CONST-DECL "bool" |interval| NIL)
    (|Eval| DEF-DECL "Interval" |interval_expr| NIL)
    (|Eval_fundamental_proper| FORMULA-DECL NIL |interval_expr| NIL)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< CONST-DECL "bool" |interval| NIL)
    (|neg_rel| CONST-DECL "bool" |real_orders| |reals|)
    (|IntervalExpr_induction| FORMULA-DECL NIL |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|Inclusion?| CONST-DECL "bool" |box| NIL)
    (|ProperBox| TYPE-EQ-DECL NIL |box| NIL)
    (|ProperBox?| CONST-DECL "bool" |box| NIL)
    (|Box| TYPE-EQ-DECL NIL |box| NIL)
    (|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL))
   NIL))
 (|max_local_vars_count_TCC1| 0
  (|max_local_vars_count_TCC1-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (198 24 198 49))))
 (|max_local_vars_count_TCC2| 0
  (|max_local_vars_count_TCC2-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (198 51 198 76))))
 (|max_local_vars_count_TCC3| 0
  (|max_local_vars_count_TCC3-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op)" "NIL"
    (199 15 199 39))))
 (|max_local_vars_count_TCC4| 0
  (|max_local_vars_count_TCC4-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op)" "NIL"
    (200 15 200 39))))
 (|max_local_vars_count_TCC5| 0
  (|max_local_vars_count_TCC5-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (201 24 201 49))))
 (|max_local_vars_count_TCC6| 0
  (|max_local_vars_count_TCC6-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (201 51 201 76))))
 (|max_local_vars_count_TCC7| 0
  (|max_local_vars_count_TCC7-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (202 25 202 50))))
 (|max_local_vars_count_TCC8| 0
  (|max_local_vars_count_TCC8-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (202 52 202 77))))
 (|max_local_vars_count_TCC9| 0
  (|max_local_vars_count_TCC9-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op)" "NIL"
    (203 14 203 38))))
 (|max_local_vars_count_TCC10| 0
  (|max_local_vars_count_TCC10-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op)" "NIL"
    (204 19 204 43))))
 (|max_local_vars_count_TCC11| 0
  (|max_local_vars_count_TCC11-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (205 24 205 49))))
 (|max_local_vars_count_TCC12| 0
  (|max_local_vars_count_TCC12-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (205 51 205 76))))
 (|max_local_vars_count_TCC13| 0
  (|max_local_vars_count_TCC13-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op)" "NIL"
    (206 28 206 52))))
 (|max_local_vars_count_TCC14| 0
  (|max_local_vars_count_TCC14-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.rlet)" "NIL"
    (208 21 208 47))))
 (|max_local_vars_count_TCC15| 0
  (|max_local_vars_count_TCC15-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.rin)" "NIL"
    (208 49 208 74))))
 (|max_local_vars_count_TCC16| 0
  (|max_local_vars_count_TCC16-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop)" "NIL"
    (210 17 210 42))))
 (|max_local_vars_count_TCC17| 0
  (|max_local_vars_count_TCC17-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop1)" "NIL"
    (212 24 212 50))))
 (|max_local_vars_count_TCC18| 0
  (|max_local_vars_count_TCC18-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop2)" "NIL"
    (212 52 212 78))))
 (|max_local_vars_count_TCC19| 0
  (|max_local_vars_count_TCC19-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop1)" "NIL"
    (214 24 214 50))))
 (|max_local_vars_count_TCC20| 0
  (|max_local_vars_count_TCC20-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop2)" "NIL"
    (214 52 214 78))))
 (|max_local_vars_count_TCC21| 0
  (|max_local_vars_count_TCC21-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop1)" "NIL"
    (216 24 216 50))))
 (|max_local_vars_count_TCC22| 0
  (|max_local_vars_count_TCC22-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bop2)" "NIL"
    (216 52 216 78))))
 (|max_local_vars_count_TCC23| 0
  (|max_local_vars_count_TCC23-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (218 26 218 51))))
 (|max_local_vars_count_TCC24| 0
  (|max_local_vars_count_TCC24-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|realorder?| CONST-DECL "bool" |real_orders| |reals|)
    (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (218 53 218 78))))
 (|max_local_vars_count_TCC25| 0
  (|max_local_vars_count_TCC25-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op)" "NIL"
    (219 24 219 48))))
 (|max_local_vars_count_TCC26| 0
  (|max_local_vars_count_TCC26-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bif)" "NIL"
    (220 28 220 53))))
 (|max_local_vars_count_TCC27| 0
  (|max_local_vars_count_TCC27-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bthen)" "NIL"
    (221 20 221 47))))
 (|max_local_vars_count_TCC28| 0
  (|max_local_vars_count_TCC28-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.belse)" "NIL"
    (221 49 221 76))))
 (|max_local_vars_count_TCC29| 0
  (|max_local_vars_count_TCC29-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.blet)" "NIL"
    (223 21 223 47))))
 (|max_local_vars_count_TCC30| 0
  (|max_local_vars_count_TCC30-1| |nil| 3645972876
   ("" (TERMINATION-TCC) NIL NIL)
   ((|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.bin)" "NIL"
    (223 49 223 74))))
 (|max_local_vars_count_TCC31| 0
  (|max_local_vars_count_TCC31-1| |nil| 3679234753
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Precondition2?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion2?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental2?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (225 26 225 51))))
 (|max_local_vars_count_TCC32| 0
  (|max_local_vars_count_TCC32-1| |nil| 3683886133
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Precondition2?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion2?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental2?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (225 53 225 78))))
 (|max_local_vars_count_TCC33| 0
  (|max_local_vars_count_TCC33-1| |nil| 3684336546
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Precondition2?| CONST-DECL "bool" |interval| NIL)
    (|Precondition3?| CONST-DECL "bool" |interval| NIL)
    (|Precondition4?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion4?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental4?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op1)" "NIL"
    (228 12 228 37))))
 (|max_local_vars_count_TCC34| 0
  (|max_local_vars_count_TCC34-1| |nil| 3684336546
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Precondition2?| CONST-DECL "bool" |interval| NIL)
    (|Precondition3?| CONST-DECL "bool" |interval| NIL)
    (|Precondition4?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion4?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental4?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op2)" "NIL"
    (228 39 228 64))))
 (|max_local_vars_count_TCC35| 0
  (|max_local_vars_count_TCC35-1| |nil| 3684336546
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Precondition2?| CONST-DECL "bool" |interval| NIL)
    (|Precondition3?| CONST-DECL "bool" |interval| NIL)
    (|Precondition4?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion4?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental4?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op3)" "NIL"
    (229 12 229 37))))
 (|max_local_vars_count_TCC36| 0
  (|max_local_vars_count_TCC36-1| |nil| 3684336546
   ("" (TERMINATION-TCC) NIL NIL)
   ((|Interval| TYPE-EQ-DECL NIL |interval| NIL)
    (|Precondition?| CONST-DECL "bool" |interval| NIL)
    (|Precondition2?| CONST-DECL "bool" |interval| NIL)
    (|Precondition3?| CONST-DECL "bool" |interval| NIL)
    (|Precondition4?| CONST-DECL "bool" |interval| NIL)
    (|Inclusion4?| CONST-DECL "bool" |interval| NIL)
    (|Fundamental4?| CONST-DECL "bool" |interval| NIL)
    (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| NIL)
    (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]"
     |IntervalExpr_adt| NIL)
    (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt|
     NIL)
    (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[IntervalExpr])" |IntervalExpr_adt|
     NIL)
    (|##| CONST-DECL "bool" |interval| NIL)
    (<< CONST-DECL "bool" |interval| NIL))
   NIL
   (|max_local_vars_count| TERMINATION
    "interval_bexpr.max_local_vars_count(interval_bexpr.op4)" "NIL"
    (229 39 229 64)))))

