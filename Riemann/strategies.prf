(strategies
 (junk_TCC1 0
  (junk_TCC1-1 nil 3679757974 ("" (subtype-tcc) nil nil) nil nil))
 (junk 0
  (junk-1 nil 3679752460
   ("" (riemann-numerical "exp * cos" "[|0, 1|]") nil nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp "lnexp_fnd/")
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp_fnd/")
    (cos const-decl "real" sincos_def "trig_fnd/")
    (RiemannExpr type-decl nil RiemannExpr_adt nil)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval nil)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]"
     RiemannExpr_adt nil)
    (MULT adt-constructor-decl
     "[[RiemannExpr, RiemannExpr] -> (mult?)]" RiemannExpr_adt nil)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]"
     RiemannExpr_adt nil)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt nil)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]"
     RiemannExpr_adt nil)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (StrictInterval? const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (StrictInterval type-eq-decl nil interval "interval_arith/")
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (below type-eq-decl nil nat_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx nil)
    (subrange type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (R const-decl "Interval" Riemann_integ_interval_approx nil)
    (RiemannSum_R2I def-decl "Interval" Riemann_integ_interval_approx
     nil)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx nil)
    (subrange type-eq-decl nil subrange_type nil)
    (<< const-decl "bool" interval "interval_arith/")
    (integrable? const-decl "bool" integral_def "analysis/")
    (integral? const-decl "bool" integral_def "analysis/")
    (integral const-decl "{S: real | integral?(a, b, ff, S)}"
     integral_def "analysis/")
    (Incl_Member formula-decl nil interval "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Eval_inclusion formula-decl nil riemann_expr_eval nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (Eval_cont_fun formula-decl nil riemann_expr_eval nil)
    (fundamental_indef formula-decl nil indefinite_integral
     "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element_real formula-decl nil deriv_domain "analysis/")
    (Simple_Riemann_Soundness formula-decl nil
     Riemann_integ_interval_approx nil))
   shostak)))

