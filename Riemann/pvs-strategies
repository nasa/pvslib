;; Advanced strategies by
;; Greg Anderson
;; Mariano Moscato.
;;

(defparameter *r-builtin*
  '(("*real*" "CONST")
    ("+" "ADD")
    ("*" "MULT")
    ("exp" "EXP")
    ("neg" "NEG")
    ("^" "POW")
    ("-" "SUB")
    ("sin" "SIN")
    ("cos" "COS")
    ("idr" "ID")
    ("o" "COMP")
    ("O" "COMP")))

(defparameter *r-extended* nil)

(defun r-expr (expr)
  (let ((subs *r-builtin*))
    (ia-interval-expr expr 0 nil subs)))

(defstep prove-integrable? ()
  (then
   (match "integrable?(%1, %2, %3)" step
	  (prove-integrable?_ "%3" "%1" "%2"))
   ;; if that didn't work, let's try a fully instantiated call
   (match "integrable?[real](%1, %2, %3)" step
	  (prove-integrable?_ "%3" "%1" "%2")))
  "[Riemann] Tries to close branches with 'integrable?(A,B,EXPR)' goals."
  "Proving an expression to be integrable...")

(defhelper prove-integrable?_ (expr lowerb upperb)
  (let((r-expr   (r-expr (extra-get-expr expr))))
    (spread
     (let ((case-str
	    (format nil
		    "integrable?(~a,~a,riemann_expr_eval.Eval_real(~a))"
		    lowerb upperb
		    r-expr)))
       (case case-str))
     ((then
       (expand "r2E")
       (repeat (expand "Eval_real"))
       (expand "idr")
       (expand "+") (expand "*") (expand "-") (expand "o") (assert))
      (then
       (then (conts-Integ "Eval_cont_fun") (inst? -1)(Integ-integ-exp))))))
  "[Riemann] Helper for prove-integrable?"
  "")

(defstep riemann-numerical (&optional (breaks 12) (precision 2))
  (match "integral(%1, %2, %3)" step
	 (riemann-numerical_$ "%3" "%1" "%2" :breaks breaks :precision precision))
  "[Riemann] If the sequent contains un expression of form 'integral(A, B, EXPR)',
the strategy computes an interval containing the value of the integral of EXPR
over the interval [A,B]. PRECISION is used to determine the size of the output interval
and BREAKS indicates the number of regions to use in the Riemann sum. In
particular, the sum will use 2^BREAKS regions."
  "Computing numerical integration.")

(defmacro remove-inner-blanks (string)
  "Removes inner blank spaces in the parameter."
  `(format nil "~{~A~}" (uiop:split-string ,string)))

(defhelper riemann-numerical_ (expr lowerb upperb &optional (breaks 12) (precision 2))
  (let (#+:strat-debug
	(dummy    (format t "~%RUNNIG riemann-numerical with precision ~a~%" precision))
	(req-ths  (no-qualified-name "strategies.RiemannStrategies__"))
	(lowerb   (when (stringp lowerb) (read-from-string (remove-inner-blanks lowerb))))
	#+:strat-debug
	(dummy    (format t "~%RUNNIG riemann-numerical with upperb ~a~%" (show upperb)))
	(upperb   (when (stringp upperb) (read-from-string (remove-inner-blanks upperb))))
	#+:strat-debug
	(dummy    (format t "~%RUNNIG riemann-numerical with upperb ~a~%" (show upperb)))
	#+:strat-debug
	(dummy    (format t "~%RUNNIG riemann-numerical with upperb ~a~%" upperb))
	(interval (format nil "[|~a,~a|]" lowerb upperb))
	(r-expr   (r-expr (extra-get-expr expr)))
	(error    (when (listp r-expr) (car r-expr)))
	(int-expr (format nil "riemann_expr_eval.Eval(~a)" r-expr))
	(re-expr  (format nil "riemann_expr_eval.Eval_real(~a)" r-expr))
	#+:strat-debug
	(dummy    (format t "~a~%" re-expr))
	(b-str    (format nil "~a" breaks))
	(p-str    (format nil "~a" precision))
	(prec     (* precision 4))
	(pr-str   (format nil "~a" prec))
	(r-name   (freshname "r"))
	(epsilon  (format nil "((~a-~a)/(2^(~a*8)))" upperb lowerb breaks)))
    (if req-ths
	(printf "This strategy requires theory ~a to be imported in the current context" req-ths)
      (if error
	  (printf error)
      (then
       (lemma "Simple_Riemann_Soundness")
       (branch
	(inst -1 interval re-expr b-str p-str)
	((then
	  (assert)
	  (branch
	   (inst -1 int-expr)
	   ((then
	     (branch
	      (use "tr_Riemann_correctness" ("epsilon" epsilon))
	      ((then 
		(assert)
		(hide -2)
		(invoke (eval-expr "%1") (! -1 2))
		(replace -1 :hide? t)
		(then
		 (branch
		  (let ((case-str (format nil "~a = ~a" re-expr expr))) (case case-str))
		  ((then (replace -1 :hide? t) (expand "##")(flatten)(assert))
		   (then
		    (expand "r2E")
		    (repeat (expand "Eval_real"))
		    (expand "idr")
		    (expand "+") (expand "*") (expand "-") (expand "o"))))))
	       (then
		(hide-all-but 1)
		(expand "locallyProper?")
		(skeep)
		(lemma "f_bound_determines_locally_proper_results")
		(inst? -1 :subst ("a" lowerb "b" upperb))
		(assert)
		(inst? -1 :where 1)
		(inst -1 re-expr)
		(assert)
		(hide-all-but 1)
		(inclus-fun "riemann_expr_eval.Eval_inclusion"))
	       (eval-formula))))
	    (inclus-fun "riemann_expr_eval.Eval_inclusion"))))
	 (then (expand "r2E") (soundness1$ "riemann_expr_eval.Eval_inclusion" "Eval_cont_fun"))
	 (then (expand "StrictInterval?") (ground))))))))
  "[Riemann] Compute an interval containing the value of the integral of EXPR
over INTERVAL. PRECISION is used to determine the size of the output interval
and BREAKS indicates the number of regions to use in the Riemann sum. In
particular, the sum will use 2^BREAKS regions."
  "Computing the integral of ~a over the given region")

;; Basic strategies by Amer Tahat.
;;

;; Unused/deprecated strategies and helpers are commented out. They are mantained here for historical reasons.

;;****
;; Copyright (C) 2016, Michigan Technological University and Amer Tahat.
;; GNU LGPL information:
;; ---------------------
;; This code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation.This code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
;; without even the impliedwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
;;****


;;****
;; auxiliary step 1:  
;;****

;; (defhelper simple-integral-inclusion ()   
;;           (then (lemma "Simple_Riemann_Soundness")(skosimp*)
;;                 (ground)
;;                 (invoke (inst -1 "%1" "%2" "%3" "%4")(? 1  "integral(lb(%1), ub(%1), %2) ## RiemannSum_R2I(lb(%1), ub(%1), %3, 2 ^ m!1, %4, %5, R)")))
;;             "A" " need to inst Eval")

;;****
;;auxiliary step 2: 
;;****

;; (defhelper inst-Eval() (then (invoke (inst -1 "%5")
;;     (? 1
;;      "integral(lb(%1), ub(%1), %2) ## RiemannSum_R2I(lb(%1), ub(%1), %3, 2 ^ m!1, %4, %5, R)"))(postpone)) " combine this with simple-integral-inclusion""need to prove TCCs 1 and 2")

;;****
;;Combine step 1 and 2: 
;;
;;****

;; (defstep integral-inclusion-soundness ()
;;       (then (simple-integral-inclusion)
;;             (inst-Eval)) "This proves soundness" "need to prove two TCCs")

;;****
;; auxiliary step to help discharge the first TCCs. 
;;****

(defhelper inclus-fun (lemma1) 
  (then
   (expand "F_Bound?")
   (skosimp*)
   (lemma lemma1)
   (inst?) 
   (assert)
   (typepred "x!1")
   (ground)
   (expand "##")
   (propax))
  "" "there exist an inclusion function")


(defhelper inclus-ref (lemma) 
  (then
   (skosimp*)
   (lemma lemma)
   (inst? -1 :where 1)
   (if (= (length (bindings (extra-get-formula-from-fnum -1))) 3)
       (invoke (inst? -1 ("p" "%1") :where 1) (? 1 "F(%1)(%2)"))
     (skip))  ;; This if was added to accommodate riemann-numerical
   (assert)
   (inst? -1 :where 1)
   (inst? 1)
   (skosimp*)
   (inst -1 "x!1")
   (typepred "x!1")
   (expand "##")
   (propax))
  "" " ")

;;****
;; the auxiliary steps for cont-numerical-Riemann.
;;****

;;****
;;Major auxiliary step-very reusable: "continuous -> Integrable"
;;The parameter is a lemma for continuity which needs to be proved by the user previously.  
;;****


;; (defstep cont-Integ (lemma1)  
;;   (then (lemma "fundamental_indef[real]") 
;;         (skosimp*)
;;         (invoke (inst -1  "lb(%1)" "ub(%1)" "%2")(? 2 "integrable?(lb(%1), ub(%1), %2 )"))
;;         (assert)
;;         (let ((lemma-step (list 'lemma lemma1 )))         
;;           (then  lemma-step (propax)        
;;                  (assert)(expand 'connected? '1)(propax))))"" "")

(defhelper conts-Integ (lemma1)  
  (then (lemma "fundamental_indef[real]") 
        (skosimp*)
        (invoke (inst -1  "%1" "%2" "%3") (! 1 1) (! 1 2) (! 1 3))  ; Changed for riemann-numerical
        (assert)
        (let ((lemma-step (list 'lemma lemma1 )))         
          (then  lemma-step (propax)        
                 (assert)(expand 'connected? '1)(propax))))"" "")




;;****
;;auxiliary step: discharge a TCSS: for using [real]
;;****
;; (defstep conts-integ-[real] (lemma1)  
;; (then
;;  (then (lemma "fundamental_indef[real]")
;;   (invoke (inst -1 "%1" "%2" "%3")
;;    (? 1 "integrable?[real](%1,%2,%3 )")))
;;  (let ((lemma-step (list 'lemma lemma1)))
;;    (then lemma-step (propax) (assert) (expand 'connected? '1)
;;     (propax)))
;;  (invoke (inst -1 "%1" "%2" "%3") (? 1 "integrable?[real](%1,%2,%3 )"))
;;  (expand "Integrable?" -1) (propax)) "" "")



;;****
;;Integ-integ-exp:auxiliary step. 
;;****

(defhelper Integ-integ-exp () 
  (then (ground)
	(expand "Integrable?")
	(invoke (typepred "%1") (? (! 1 1) "lb(%1)")) 
	(expand "StrictInterval?")
	(ground))"" "")



;;****
;;Integ-integ:auxiliary step to show Integ is integ.
;;****

;; (defhelper Integ-integ () 
;;   (invoke (case "Integrable?(lb(%1),ub(%1),%2)") (? 1 "integrable?(lb(%1), ub(%1), %2)"))
;;   "" "")


;;**********

;;****
;; Integ-intg:  Shows that if f is Integrable then it's integrable for cont-fun. 
;;****

;;  (defstep Integ-intg (lemma2) 
;;     (then (spread  
;;      (Integ-integ)
;;      ((Integ-integ-exp)(conts-Integ lemma2)))) "" "")


;;****
;; splt-tcs:auxiliary step.
;;****

(defhelper splt-tcs ()(then (hide 2) (skosimp*) (expand "integ_inclus_fun?" 1) (split)) "" "")

;;*****
;; soundness1:Major auxiliary step to discharge the soundness tccs for continuous function.
;;*****
(defhelper soundness1 (lemma1 lemma2)
  (spread
   (splt-tcs)
   ((then (conts-Integ lemma2) (inst? -1)(Integ-integ-exp))
    (inclus-ref$ lemma1)))
  ""
  "" )

;;*****
;; cont-soundness: to show soundness lemmas of the form integ(a,b,f) ## Riemann_R2I(,,,F,) where 
;; f is cont-function and F is its interval reflection. 
;;*****

;; ( defstep cont-soundness (lemma1 lemma2) 
;;             (spread (integral-inclusion-soundness) ((inclus-fun lemma1)(soundness1 lemma1 lemma2)))"" "")



;;****
;;auxiliary mult-cont :helps to define prod-cont to show product of cont is cont(see below).
;;****
;; (defhelper cont-mult ()
;;   (spread
;;    (then (lemma "prod_cont_fun")
;;          (invoke (inst -1 "%1" "%2") (? 1 "continuous?(%1*%2) "))
;;          (invoke (case "continuous?(%1) and continuous?(%2)")
;;                  (? 1 "continuous?(%1*%2)"))) 
;;    ((assert) (postpone))) """")

;;****
;;  Major auxiliary - very reusable step: product of conts functions is continuous. 
;;****

;; (defstep cont-prod (lemma1 lemma2 ) 
;;   (then (cont-mult)
;;         (assert)
;;         (spread (split)
;;                 ((lemma lemma1)
;;                  (lemma lemma2)))) " " "" )

;;*****
;; The Major strategy: (conts-numerical-Riemann) is a one line command proof-str 
;; It's developed to autoamte the proof of the exprs of the form integ(a,b,f) ## [A,B] --(*1) where 
;; f is cont-function which is inclusive. 
;; This proof strategy reduces significantly the proofs of lemmas of form (*1)
;; from about 1000 proof command to 1 line proof command. Yet at this stage the user still need to prove lemma 1,2 
;; for continuity and inclusion. Some auxiliary strategies have been developed -like prod-cont- 
;; to help the user. 
;; See examples_numerical_Riemann.pvs file. 
;;  
;;*****

;; (defstep conts-numerical-Riemann (expr lemma1 lemma2 &rest exprs2)
;;   (try 
;;    (then 
;;     (then 
;;      (let ((lemma-step (list 'lemma "Simple_Riemann_Soundness" ))
;;            (inst-step (cons 'inst (cons -1 exprs2)))
;;            (inst-Eval (cons 'inst (cons -1 expr))))
;;        (then lemma-step 
;;              (spread inst-step 
;;                      ((then (assert) 
;;                             (spread inst-Eval
;;                                     ( (spread (eval-step)
;;                                               ((spread (conts-integ-[real] lemma2)
;;                                                        ((then (Integ-integ-exp)
;;                                                               (expand "connected?"))))))  ;; Added for riemann-numerical
;;                                      (inclus-fun lemma1))))
;;                       (soundness1 lemma1 lemma2)
;;                       (then (expand "StrictInterval?")
;;                             (ground)))))))
;;     (fail))
;;    (skip)
;;    (skip-msg " Use rational representations for the endpoints of the parameter [|a,b|]; if you have this already you may want to use more subdivisions; recommended: 14> m >=12,n>=2" t)) "nmerical integral inclusion" "")

;; (defhelper  eval-step () 
;;   (spread (invoke (case "%1  << %2") (! -1 2) (! 1 2))
;;           (
;;            (then 
;;             (lemma "Incl_Member")
;;             (invoke (inst -1 "%1" "%2") (! -2 1) (! -2 2))
;;             (assert)
;;             (invoke (inst -1 "%1") (! -3 1))
;;             (ground))
;;            (then (hide-all-but 1) (eval-formula)) ) ) "" "" )
