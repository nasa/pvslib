;; -*-Lisp-*-
;; Advanced strategies by
;; Greg Anderson
;; Mariano Moscato.
;;

(defparameter *r-builtin*
  '(("*real*" "CONST")
    ("+" "ADD")
    ("*" "MULT")
    ("exp" "EXP")
    ("neg" "NEG")
    ("^" "POW")
    ("-" "SUB")
    ("sin" "SIN")
    ("cos" "COS")
    ("idr" "ID")
    ("o" "COMP")
    ("O" "COMP")))

(defparameter *r-extended* nil)

(defun r-expr (expr)
  (let ((subs *r-builtin*))
    (ia-interval-expr expr 0 nil subs)))

(defstep prove-integrable? ()
  (then
   (match "integrable?(%1, %2, %3)" step
	  (prove-integrable?_ "%3" "%1" "%2"))
   ;; if that didn't work, let's try a fully instantiated call
   (match "integrable?[real](%1, %2, %3)" step
	  (prove-integrable?_ "%3" "%1" "%2")))
  "[Riemann] Tries to close branches with 'integrable?(A,B,EXPR)' goals."
  "Proving an expression to be integrable...")

(defhelper prove-integrable?_ (expr lowerb upperb)
  (let((r-expr   (r-expr (extra-get-expr expr))))
    (spread
     (let ((case-str
	    (format nil
		    "integrable?(~a,~a,riemann_expr_eval.Eval_real(~a))"
		    lowerb upperb
		    r-expr)))
       (case case-str))
     ((then
       (expand "r2E")
       (repeat (expand "Eval_real"))
       (expand "idr")
       (expand "+") (expand "*") (expand "-") (expand "o") (assert))
      (then
       (then (conts-Integ "Eval_cont_fun") (inst? -1)(Integ-integ-exp))))))
  "[Riemann] Helper for prove-integrable?"
  "")

(defstep riemann (&optional (breaks 12) (precision 2))
  (if-match "integral(%1, %2, %3)"
	    (riemann_$ "%3" "%1" "%2" :breaks breaks :precision precision))
  "[Riemann] If the sequent contains un expression of form 'integral(A, B, EXPR)',
the strategy computes an interval containing the value of the integral of EXPR
over the interval [A,B]. PRECISION is used to determine the size of the output interval
and BREAKS indicates the number of regions to use in the Riemann sum. In
particular, the sum will use 2^BREAKS regions."
  "Computing numerical integration.")

(defmacro remove-inner-blanks (string)
  "Removes inner blank spaces in the parameter."
  `(format nil "~{~A~}" (uiop:split-string ,string)))

(defhelper riemann_ (expr lowerb upperb &optional (breaks 12) (precision 2))
  (let ((req-ths  (no-qualified-name "strategies.RiemannStrategies__"))
	(lowerb   (when (stringp lowerb) (read-from-string (remove-inner-blanks lowerb))))
	(upperb   (when (stringp upperb) (read-from-string (remove-inner-blanks upperb))))
	(interval (format nil "[|~a,~a|]" lowerb upperb))
	(r-expr   (r-expr (extra-get-expr expr)))
	(an-error (when (listp r-expr) (car r-expr)))
	(int-expr (format nil "riemann_expr_eval.Eval(~a)" r-expr))
	(re-expr  (format nil "riemann_expr_eval.Eval_real(~a)" r-expr))
	(b-str    (format nil "~a" breaks))
	(p-str    (format nil "~a" precision))
	(prec     (* precision 4))
	(pr-str   (format nil "~a" prec))
	(epsilon  (format nil "((~a-~a)/(2^(~a*8)))" upperb lowerb breaks)))
    (if req-ths
	(printf "This strategy requires theory ~a to be imported in the current context" req-ths)
      (if an-error
	  (printf an-error)
      (quietly
       (lemma "Simple_Riemann_Soundness")
       (branch
	(inst -1 interval re-expr b-str p-str)
	((then
	  (assert)
	  (branch
	   (inst -1 int-expr)
	   ((then
	     (branch
	      (use "tr_Riemann_correctness" ("epsilon" epsilon))
	      ((then 
		(assert)
		(hide -2)
		(invoke (eval-expr "%1") (! -1 2))
		(replace -1 :hide? t)
		(branch
		 (let ((case-str (format nil "~a = ~a" re-expr expr))) (case case-str))
		 ((then (replace -1 :hide? t) (expand "##")(flatten)(assert))
		  (with-fresh-labels
		   (f! 1)
		   (expand-names f! "r2E" "Eval_real" "idr" "+" "*" "-" "o")))))
	       (then
		(hide-all-but 1)
		(expand "locallyProper?")
		(skeep)
		(lemma "f_bound_determines_locally_proper_results")
		(inst? -1 :subst ("a" lowerb "b" upperb))
		(assert)
		(inst? -1 :where 1)
		(inst -1 re-expr)
		(assert)
		(hide-all-but 1)
		(inclus-fun "riemann_expr_eval.Eval_inclusion"))
	       (eval-formula))))
	    (inclus-fun "riemann_expr_eval.Eval_inclusion"))))
	 (then (expand "r2E") (soundness1$ "riemann_expr_eval.Eval_inclusion" "Eval_cont_fun"))
	 (then (expand "StrictInterval?") (ground))))))))
  "[Riemann] Compute an interval containing the value of the integral of EXPR
over INTERVAL. PRECISION is used to determine the size of the output interval
and BREAKS indicates the number of regions to use in the Riemann sum. In
particular, the sum will use 2^BREAKS regions."
  "Computing the integral of ~a over the given region")

;; Basic strategies by Amer Tahat.
;; Unused/deprecated strategies and helpers are removed from the repository

;;****
;; Copyright (C) 2016, Michigan Technological University and Amer Tahat.
;; GNU LGPL information:
;; ---------------------
;; This code is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation.This code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
;; without even the impliedwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
;;****

;;****
;; auxiliary step to help discharge the first TCCs. 
;;****

(defhelper inclus-fun (lemma1) 
  (then
   (expand "F_Bound?")
   (skosimp*)
   (lemma lemma1)
   (inst?) 
   (assert)
   (typepred "x!1")
   (ground)
   (expand "##")
   )
  "" "there exist an inclusion function")


(defhelper inclus-ref (lemma) 
  (then
   (skosimp*)
   (lemma lemma)
   (inst? -1 :where 1)
   (if (= (length (bindings (extra-get-formula-from-fnum -1))) 3)
       (invoke (inst? -1 ("p" "%1") :where 1) (? 1 "F(%1)(%2)"))
     (skip))  ;; This if was added to accommodate riemann
   (assert)
   (inst? -1 :where 1)
   (inst? 1)
   (skosimp*)
   (inst -1 "x!1")
   (typepred "x!1")
   (expand "##")
   )
  "" "")

(defhelper conts-Integ (lemma1)  
  (then (lemma "fundamental_indef[real]") 
        (skosimp*)
        (invoke (inst -1  "%1" "%2" "%3") (! 1 1) (! 1 2) (! 1 3))  ; Changed for riemann
        (assert)
        (let ((lemma-step (list 'lemma lemma1 )))         
          (then
	   lemma-step
           (assert)
	   (expand connected? 1)
	   )))
  "" "")


;;****
;;Integ-integ-exp:auxiliary step. 
;;****

(defhelper Integ-integ-exp () 
  (then (ground)
	(expand "Integrable?")
	(invoke (typepred "%1") (? (! 1 1) "lb(%1)")) 
	(expand "StrictInterval?")
	(ground))
  "" "")

;;****
;; splt-tcs:auxiliary step.
;;****

(defhelper splt-tcs ()(then (hide 2) (skosimp*) (expand "integ_inclus_fun?" 1) (split)) "" "")

;;*****
;; soundness1:Major auxiliary step to discharge the soundness tccs for continuous function.
;;*****
(defhelper soundness1 (lemma1 lemma2)
  (spread
   (splt-tcs)
   ((then (conts-Integ lemma2) (inst? -1)(Integ-integ-exp))
    (inclus-ref$ lemma1)))
  "" "" )
