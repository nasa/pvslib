(|tarski_examples|
 (|example_1_TCC1| 0
  (|example_1_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_1| SUBTYPE "3"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1_TCC2| 0
  (|example_1_TCC2-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_1| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_1| 0
  (|example_1-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|PolyRelExpr| TYPE-DECL NIL |PolyRelExpr_adt| |Tarski|)
    (PREL? ADT-RECOGNIZER-DECL "[PolyRelExpr -> boolean]" |PolyRelExpr_adt|
     |Tarski|)
    (PNOT? ADT-RECOGNIZER-DECL "[PolyRelExpr -> boolean]" |PolyRelExpr_adt|
     |Tarski|)
    (PNOT ADT-CONSTRUCTOR-DECL "[PolyRelExpr -> (PNOT?)]" |PolyRelExpr_adt|
     |Tarski|)
    (POR? ADT-RECOGNIZER-DECL "[PolyRelExpr -> boolean]" |PolyRelExpr_adt|
     |Tarski|)
    (POR ADT-CONSTRUCTOR-DECL "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     |PolyRelExpr_adt| |Tarski|)
    (|TarskiRel| TYPE-DECL NIL |poly_system_strategy| |Tarski|)
    (PREL ADT-CONSTRUCTOR-DECL
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" |PolyRelExpr_adt|
     |Tarski|)
    (|plt?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|plt| ADT-CONSTRUCTOR-DECL "(plt?)" |poly_system_strategy| |Tarski|)
    (|pgt?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|pgt| ADT-CONSTRUCTOR-DECL "(pgt?)" |poly_system_strategy| |Tarski|)
    (|peq?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|peq| ADT-CONSTRUCTOR-DECL "(peq?)" |poly_system_strategy| |Tarski|)
    (|eval_rel| CONST-DECL "bool" |dnf_polynomials| |Tarski|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|rel_to_tarski| CONST-DECL "bool" |dnf_strategy| |Tarski|)
    (|rel_to_tarski_sound| FORMULA-DECL NIL |dnf_strategy| |Tarski|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_2_TCC1| 0
  (|example_2_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_2| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_2| 0
  (|example_2-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|))
   SHOSTAK))
 (|example_3_TCC1| 0
  (|example_3_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 2)) /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC2| 0
  (|example_3_TCC2-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC3| 0
  (|example_3_TCC3-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_3| SUBTYPE "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 3)) /= 0, reals.>=(i, 0))}")))
 (|example_3_TCC4| 0
  (|example_3_TCC4-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_3| SUBTYPE "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 11/12)) = 0), reals.>=(i, 0))}")))
 (|example_3_TCC5| 0
  (|example_3_TCC5-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_3| SUBTYPE "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 41/10)) = 0), reals.>=(i, 0))}")))
 (|example_3| 0
  (|example_3-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_4_TCC1| 0
  (|example_4_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_4| SUBTYPE "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_4_TCC2| 0
  (|example_4_TCC2-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_4| SUBTYPE "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_4| 0
  (|example_4-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|))
   SHOSTAK))
 (|example_5| 0
  (|example_5-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|ppow| DEF-DECL "Polylist" |polylist| |Sturm|)
    (|pneg| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_pow| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_neg| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|example_6_TCC1| 0
  (|example_6_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "5"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC2| 0
  (|example_6_TCC2-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC3| 0
  (|example_6_TCC3-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "11"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC4| 0
  (|example_6_TCC4-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "10"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC5| 0
  (|example_6_TCC5-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "8"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC6| 0
  (|example_6_TCC6-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "7"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC7| 0
  (|example_6_TCC7-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC8| 0
  (|example_6_TCC8-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC9| 0
  (|example_6_TCC9-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC10| 0
  (|example_6_TCC10-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "22"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6_TCC11| 0
  (|example_6_TCC11-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_6| SUBTYPE "20"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_6| 0
  (|example_6-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|))
   SHOSTAK))
 (|example_7_TCC1| 0
  (|example_7_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_7| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_7| 0
  (|example_7-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_ge| FORMULA-DECL NIL |abs_lems| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK))
 (|example_8_TCC1| 0
  (|example_8_TCC1-1| |nil| 3771772352 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|example_8| SUBTYPE "9"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|example_8| 0
  (|example_8-1| |nil| 3771772463 ("" (TARSKI) NIL)
   ((|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|))
   SHOSTAK))
 (|legendre_4_TCC1| 0
  (|legendre_4_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|legendre_4| SUBTYPE "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|legendre_6_TCC1| 0
  (|legendre_6_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|legendre_6| SUBTYPE "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (|Legendre_2_6| 0
  (|Legendre_2_6-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pdiv| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|rel5| CONST-DECL "bool" |preprocessing_univariate| |Tarski|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_div| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|))
   SHOSTAK))
 (|conflict?_TCC1| 0
  (|conflict?_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|conflict?| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (|yes_conflict_TCC1| 0
  (|yes_conflict_TCC1-1| |nil| 3771772352 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|yes_conflict| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (|yes_conflict| 0
  (|yes_conflict-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|)
    (* CONST-DECL "real" |vectors_2D| |vectors|)
    (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|)
    (* CONST-DECL "Vector" |vectors_2D| |vectors|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|eval_rel| CONST-DECL "bool" |dnf_polynomials| |Tarski|)
    (|rel_to_tarski| CONST-DECL "bool" |dnf_strategy| |Tarski|)
    (|rel_to_tarski_sound| FORMULA-DECL NIL |dnf_strategy| |Tarski|)
    (|PolyRelExpr| TYPE-DECL NIL |PolyRelExpr_adt| |Tarski|)
    (PREL? ADT-RECOGNIZER-DECL "[PolyRelExpr -> boolean]" |PolyRelExpr_adt|
     |Tarski|)
    (PAND? ADT-RECOGNIZER-DECL "[PolyRelExpr -> boolean]" |PolyRelExpr_adt|
     |Tarski|)
    (PAND ADT-CONSTRUCTOR-DECL "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]"
     |PolyRelExpr_adt| |Tarski|)
    (|TarskiRel| TYPE-DECL NIL |poly_system_strategy| |Tarski|)
    (PREL ADT-CONSTRUCTOR-DECL
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" |PolyRelExpr_adt|
     |Tarski|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|ple?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|ple| ADT-CONSTRUCTOR-DECL "(ple?)" |poly_system_strategy| |Tarski|)
    (|pge?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|pge| ADT-CONSTRUCTOR-DECL "(pge?)" |poly_system_strategy| |Tarski|)
    (|plt?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|plt| ADT-CONSTRUCTOR-DECL "(plt?)" |poly_system_strategy| |Tarski|)
    (|pgt?| ADT-RECOGNIZER-DECL "[TarskiRel -> boolean]" |poly_system_strategy|
     |Tarski|)
    (|pgt| ADT-CONSTRUCTOR-DECL "(pgt?)" |poly_system_strategy| |Tarski|))
   SHOSTAK))
 (|no_conflict_TCC1| 0
  (|no_conflict_TCC1-1| |nil| 3703615086 ("" (SUBTYPE-TCC) NIL) NIL NIL
   (|no_conflict| SUBTYPE "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (|no_conflict| 0
  (|no_conflict-1| |nil| 3703615086 ("" (TARSKI) NIL)
   ((|pmonom| DEF-DECL "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     |polylist| |Sturm|)
    (|pprod| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|pconst| CONST-DECL "Polylist" |polylist| |Sturm|)
    (|psum| DEF-DECL "{pql: Polylist |
   FORALL (x): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     |polylist| |Sturm|)
    (|polylist| CONST-DECL "real" |polylist| |Sturm|)
    (|Polylist| TYPE-EQ-DECL NIL |polylist| |Sturm|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|zero_pol| CONST-DECL "rat" |polylist| |Sturm|)
    (|list2array| DEF-DECL "T" |array2list| |structures|)
    (|tarski| CONST-DECL "bool" |poly_system_strategy| |Tarski|)
    (|for| CONST-DECL "T" |for_iterate| |structures|)
    (|iterate_left| CONST-DECL "T" |for_iterate| |structures|)
    (|for_it| DEF-DECL
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}" |for_iterate|
     |structures|)
    (|polylist_minus| FORMULA-DECL NIL |polylist| |Sturm|)
    (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|abs_lt| FORMULA-DECL NIL |abs_lems| |reals|)
    (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)
    (|polylist_monom| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_prod| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_const| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_sum| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polylist_eval| FORMULA-DECL NIL |polylist| |Sturm|)
    (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|)
    (|##| CONST-DECL "bool" |interval| |interval_arith|)
    (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|)
    (* CONST-DECL "Vector" |vectors_2D| |vectors|)
    (|Vect2| TYPE-EQ-DECL NIL |vectors_2D_def| |vectors|)
    (* CONST-DECL "real" |vectors_2D| |vectors|)
    (|Vector| TYPE-EQ-DECL NIL |vectors_2D| |vectors|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|tarski_def| FORMULA-DECL NIL |poly_system_strategy| |Tarski|)
    (|pminus| CONST-DECL "Polylist" |polylist| |Sturm|))
   SHOSTAK)))

