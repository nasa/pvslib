(|preprocessing_univariate| (|polynomialDomMonomCoeffOne_TCC1| 0 (|polynomialDomMonomCoeffOne_TCC1-1| |nil| 3767617229 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|polynomialDomMonomCoeffOne| SUBTYPE "((number_fields.+)(preprocessing_univariate.n, 1))" "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}"))) (|polynomialDomMonomCoeffOne_TCC2| 0 (|polynomialDomMonomCoeffOne_TCC2-1| |nil| 3767609157 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|polynomialDomMonomCoeffOne| SUBTYPE "preprocessing_univariate.n" "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}"))) (|polynomialDomMonomCoeffOne| 0 (|polynomialDomMonomCoeffOne-1| |nil| 3767609177 ("" (SKEEP) (("" (INDUCT "n") (("1" (SIMPLIFY) (("1" (INST 1 "max(ceiling(a + 1), 1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (SIMPLIFY) (("2" (INST 1 "max(m!1, 2)") (("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (SIMPLIFY) (("2" (CASE "x!1 >= m!1") (("1" (SPLIT) (("1" (LEMMA BOTH_SIDES_DIV_POS_LT1) (("1" (INST -1 "x!1" " a * x!1 ^ (1 + j!1)" "x!1 ^ (2 + j!1)") (("1" (CASE "a * x!1 ^ (1 + j!1) / x!1 < x!1 ^ (2 + j!1) / x!1") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE " x!1 ^ (1 + j!1) / x!1 = x!1 ^ j!1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|a| SKOLEM-CONST-DECL "real" |preprocessing_univariate| NIL) (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "real" |preprocessing_univariate| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)) SHOSTAK)) (|polynomialDominationCoeff1| 0 (|polynomialDominationCoeff1-1| |nil| 3767617134 ("" (SKEEP) (("" (INDUCT "n") (("1" (SIMPLIFY) (("1" (LEMMA POLYNOMIALDOMMONOMCOEFFONE) (("1" (INST -1 "a(0)" "0") (("1" (SIMPLIFY) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (SIMPLIFY) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONE) (("2" (INST -1 "2" "1 + j!1") (("2" (SKOSIMP*) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONE) (("2" (INST -1 "1 + a(1 + j!1)" "1 + j!1") (("2" (SIMPLIFY) (("2" (SKOSIMP*) (("2" (HIDE -2) (("2" (INST 1 "max(m!1, m!3)") (("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (INST -2 "x!1") (("2" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (CASE "x!1 ^ (2 + j!1) > a(1 + j!1) * x!1 ^ (1 + j!1) +  polynomial(a, j!1)(x!1)") (("1" (CASE "a(1 + j!1) * x!1 ^ (1 + j!1) + polynomial(a, j!1)(x!1) = polynomial(a, 1 + j!1)(x!1)") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|polynomialDomMonomCoeffOne| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|polynomialDomLC| 0 (|polynomialDomLC-1| |nil| 3767628539 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMINATIONCOEFF1) (("" (INST -1 "(1/a(n+1))*a" "n") (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (SKOSIMP*) (("1" (INST -1 "x!1") (("1" (SPLIT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "(1 / a(n + 1))" "n" "x!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (DIV-BY 1 " a(n + 1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|a| SKOLEM-CONST-DECL "sequence[real]" |preprocessing_univariate| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polynomialDominationCoeff1| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polynomialDomLC2| 0 (|polynomialDomLC2-1| |nil| 3767690948 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMINATIONCOEFF1) (("" (INST -1 "(1/a(n+1))*(-1*a)" "n") (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (SKOSIMP*) (("1" (INST -1 "x!1") (("1" (SPLIT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "(-1*a)" "(1 / a(n + 1))" "n" "x!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (DIV-BY 1 "a(n+1)") (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "n" "x!1") (("1" (REPLACE -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|a| SKOLEM-CONST-DECL "sequence[real]" |preprocessing_univariate| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_div_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div_cancel1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polynomialDominationCoeff1| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polynomialDomLC3| 0 (|polynomialDomLC3-1| |nil| 3768325394 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMLC2) (("" (INST -1 "a" "n") (("" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (LEMMA POLYNOMIAL_REC) (("1" (INST -1 "a" "n+1" "x") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (|polynomialDomLC2| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polynomialDomLC2Neg| 0 (|polynomialDomLC2Neg-2| |nil| 3768323740 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMLC2) (("" (INST -1 "-1*a" "n") (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "n" "x") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "-1 * (-1 * polynomial(a, n)(x)) = polynomial(a, n)(x) ") (("1" (REPLACE -1 -2) (("1" (HIDE -1 -3 -4) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "-1" "-1 * (a(1 + n) * x ^ (1 + n))" "polynomial(a, n)(x)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA POLYNOMIAL_REC) (("1" (INST -1 "a" "1 + n" "x") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE " -1 * a(1 + n) * x ^ (1 + n) =  -1 * (a(1 + n) * x ^ (1 + n))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE " (-1 * a(1 + n) * x ^ (1 + n)) =  -1 * a(1 + n) * x ^ (1 + n)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE " -1 * (a(1 + n) * x ^ (1 + n)) = -1 * a(1 + n) * x ^ (1 + n)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "polynomial(a, n)(x) >= -1 * a(1 + n) * x ^ (1 + n)") (("1" (ASSERT) (("1" (CASE "-1 * (a(1 + n) * x ^ (1 + n)) > polynomial(a, n)(x)") (("1" (ASSERT) NIL NIL) ("2" (CASE "NOT -1 * a(1 + n) * x ^ (1 + n) = -1 * (a(1 + n) * x ^ (1 + n))") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "-1 * a(1 + n) * x ^ (1 + n) = (-1*a(1+n))*x^(1+n)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polynomialDomLC2| FORMULA-DECL NIL |preprocessing_univariate| NIL)) NIL) (|polynomialDomLC2Neg-1| |nil| 3768320866 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMLC2) (("" (INST -1 "-1*a" "n") (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "n" "x") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "-1 * (-1 * polynomial(a, n)(x)) = polynomial(a, n)(x) ") (("1" (REPLACE -1 -2) (("1" (HIDE -1 -3 -4) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "-1" "-1 * a(1 + n) * x ^ (1 + n)" "polynomial(a, n)(x)") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE " -1 * a(1 + n) * x ^ (1 + n) =  -1 * (a(1 + n) * x ^ (1 + n))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE " (-1 * a(1 + n) * x ^ (1 + n)) =  -1 * a(1 + n) * x ^ (1 + n)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (HIDE 2) (("1" (CASE " -1 * (a(1 + n) * x ^ (1 + n)) = -1 * a(1 + n) * x ^ (1 + n)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (EXPAND ">") (("1" (ASSERT) (("1" (CASE "-1 * a(1 + n) * x ^ (1 + n) = -1 * (a(1 + n) * x ^ (1 + n))") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (LEMMA ASSOCIATIVE_MULT) (("1" (INST -1 "-1" "a(1 + n)" "x ^ (1 + n)") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|polyLCPos| 0 (|polyLCPos-1| |nil| 3767628373 ("" (SKEEP) (("" (SKEEP) (("" (CASE "n = 0") (("1" (ASSERT) (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (INST 1 "0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "n > 0") (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "a" "n-1") (("1" (SPLIT) (("1" (ASSERT) (("1" (HIDE 1) (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (INST -1 "m!1") (("1" (SPLIT) (("1" (CASE "a(n) * m!1 ^ n + polynomial(a, n - 1)(m!1) > -1 * polynomial(a, n - 1)(m!1) + polynomial(a, n - 1)(m!1)") (("1" (SIMPLIFY) (("1" (LEMMA POLYNOMIAL_REC) (("1" (INST -1 "a" "n" "m!1") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((> CONST-DECL "bool" |reals| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|polynomialDomLC2| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|testcase_TCC1| 0 (|testcase_TCC1-1| |nil| 3767705700 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|testcase| SUBTYPE "5" "{i: integers.int | booleans.OR(preprocessing_univariate.p /= 0, reals.>=(i, 0))}"))) (|testcase_TCC2| 0 (|testcase_TCC2-1| |nil| 3767705700 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|testcase| SUBTYPE "4" "{i: integers.int | booleans.OR(preprocessing_univariate.p /= 0, reals.>=(i, 0))}"))) (|testcase| 0 (|testcase-1| |nil| 3767705703 ("" (LEMMA POLYLCPOS) (("" (INST -1 "list2array[rat](0)((:-3000, 0, 0, 0, -4000, 5:))" "5") (("" (SIMPLIFY) (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list2array| DEF-DECL "T" |array2list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|listn_0| NAME-JUDGEMENT "listn[int](0)" |gcd_coeff| |Sturm|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|polyLCPos| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polyLCPosUniv| 0 (|polyLCPosUniv-1| |nil| 3767694055 ("" (LEMMA POLYLCPOS) (("" (SKOSIMP*) (("" (INST -1 "a!1" "n!1") (("" (SPLIT) (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST -3 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|polyLCPos| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polyLCNeg| 0 (|polyLCNeg-1| |nil| 3767697159 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYLCPOS) (("" (INST -1 "-1*a" "n") (("" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "p!1") (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "n" "p!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|polyLCPos| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|evenPowerEquivalence_TCC1| 0 (|evenPowerEquivalence_TCC1-1| |nil| 3767713281 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|evenPowerEquivalence| SUBTYPE "(number_fields.*(2, preprocessing_univariate.k))" "{i: integers.int | booleans.OR(((number_fields.-)(preprocessing_univariate.x)) /= 0, reals.>=(i, 0))}"))) (|evenPowerEquivalence_TCC2| 0 (|evenPowerEquivalence_TCC2-1| |nil| 3767713281 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|evenPowerEquivalence| SUBTYPE "(number_fields.*(2, preprocessing_univariate.k))" "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}"))) (|evenPowerEquivalence| 0 (|evenPowerEquivalence-1| |nil| 3767713283 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "^") (("" (LEMMA EXPT_TIMES_AUX) (("" (INST -1 "2" "k" "-x") (("1" (REPLACE -1 1) (("1" (CASE "expt(-x, 2) = x*x") (("1" (REPLACE -1 1) (("1" (CASE "x*x = expt(x, 2)") (("1" (REPLACE -1 1) (("1" (HIDE -1 -2) (("1" (LEMMA EXPT_TIMES_AUX) (("1" (INST -1 "2" "k" "x") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_times_aux| FORMULA-DECL NIL |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|x| SKOLEM-CONST-DECL "real" |preprocessing_univariate| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|oddPowerEquivalence_TCC1| 0 (|oddPowerEquivalence_TCC1-1| |nil| 3767714547 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|oddPowerEquivalence| SUBTYPE "((number_fields.+)(number_fields.*(2, preprocessing_univariate.k), 1))" "{i: integers.int | booleans.OR(((number_fields.-)(preprocessing_univariate.x)) /= 0, reals.>=(i, 0))}"))) (|oddPowerEquivalence_TCC2| 0 (|oddPowerEquivalence_TCC2-1| |nil| 3767714547 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|oddPowerEquivalence| SUBTYPE "((number_fields.+)(number_fields.*(2, preprocessing_univariate.k), 1))" "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}"))) (|oddPowerEquivalence| 0 (|oddPowerEquivalence-1| |nil| 3767714549 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "^") (("" (LEMMA EXPT_PLUS_AUX) (("" (INST -1 "1" "2*k" "-x") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA EVENPOWEREQUIVALENCE) (("1" (INST -1 "x" "k") (("1" (EXPAND "^") (("1" (REPLACE -1 1) (("1" (CASE "expt(-x, 1) = -expt(x, 1)") (("1" (REPLACE -1 1) (("1" (LEMMA EXPT_PLUS_AUX) (("1" (INST -1 "1" "2*k" "x") (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_plus_aux| FORMULA-DECL NIL |exponentiation| NIL) (|evenPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|x| SKOLEM-CONST-DECL "real" |preprocessing_univariate| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|polyEvalAtExtReal_TCC1| 0 (|polyEvalAtExtReal_TCC1-1| |nil| 3768555504 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|polyEvalAtExtReal| SUBTYPE "2" "{i: integers.int | booleans.OR(preprocessing_univariate.x /= 0, reals.>=(i, 0))}"))) (|polyEvalAtExtReal| 0 (|polyEvalAtExtReal-1| |nil| 3768052316 ("" (INST 1 "2") (("" (ASSERT) NIL NIL)) NIL) ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|polynomialDomMonomCoeffOneOdd| 0 (|polynomialDomMonomCoeffOneOdd-1| |nil| 3767710804 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONE) (("" (INST -1 "-a" "2*k") (("" (SKOSIMP*) (("" (INST 1 "-1*m!1") (("" (SKOSIMP*) (("" (INST -1 "-x!1") (("" (SPLIT) (("1" (LEMMA EVENPOWEREQUIVALENCE) (("1" (INST -1 "x!1" "k") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (HIDE -2) (("1" (LEMMA ODDPOWEREQUIVALENCE) (("1" (INST -1 "x!1" "k") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|evenPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|oddPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|polynomialDomMonomCoeffOne| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polynomialDomMonomCoeffOneOddNeg| 0 (|polynomialDomMonomCoeffOneOddNeg-1| |nil| 3768563437 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (INST -1 "a" "k") (("" (SKEEP) (("" (INST 1 "-1*m") (("" (SKEEP) (("" (INST -1 "-x") (("" (SPLIT) (("1" (LEMMA EVENPOWEREQUIVALENCE) (("1" (LEMMA ODDPOWEREQUIVALENCE) (("1" (INST? -1) (("1" (INST? -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|evenPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|oddPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|polynomialDomMonomCoeffOneOdd| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polynomialDomMonomCoeffOneOddNegCoeff| 0 (|polynomialDomMonomCoeffOneOddNegCoeff-1| |nil| 3768563547 ("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (HIDE -1) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODDNEG) (("" (INST -1 "a/(-1*c)" "k") (("1" (SKEEP) (("1" (INST 1 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (LEMMA BOTH_SIDES_TIMES_POS_LT2) (("1" (CASE "-1 * x ^ (2 * k + 1) = a / (-1 * c) * x ^ (2 * k)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "-1 * x ^ (1 + 2 * k) < a / (-1 * c) * x ^ (2 * k)") (("1" (HIDE 1) (("1" (HIDE -3) (("1" (INST -2 "-1*c" "-1 * x ^ (1 + 2 * k)" "a / (-1 * c) * x ^ (2 * k)") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|polynomialDomMonomCoeffOneOddNeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|c| SKOLEM-CONST-DECL "real" |preprocessing_univariate| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|polynomialDomMonomCoeffOneOdd| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|sequenceRelHelper| 0 (|sequenceRelHelper-2| "" 3884557430 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (INDUCT "j") (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (SPLIT) (("1" (CASE "polynomial(a, j!1 + 1)(x!1) = polynomial(a, j!1)(x!1) + a(j!1+1)*x!1^(j!1+1)") (("1" (REWRITE -1 1) (("1" (HIDE -1) (("1" (CASE "polynomial(insert(k, p, a), j!1 + 1)(x!1) = polynomial(insert(k, p, a), j!1)(x!1) +  insert(k, p, a)(j!1+1)*x!1 ^(1 + j!1)") (("1" (REPLACE -1 1) (("1" (REPLACE -2 1) (("1" (CASE "insert(k, p, a)(j!1 + 1) = a(j!1+1)") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|sequenceRelHelper-1| |nil| 3768141111 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (INDUCT J) (("1" (SKEEP) (("1" (GRIND) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -1 "x!1") (("2" (SPLIT) (("1" (CASE "polynomial(a, j!1 + 1)(x!1) = polynomial(a, j!1)(x!1) + a(j!1+1)*x!1^(j!1+1)") (("1" (REWRITE -1 1) (("1" (HIDE -1) (("1" (CASE "polynomial(insert(k, p, a), j!1 + 1)(x!1) = polynomial(insert(k, p, a), j!1)(x!1) +  insert(k, p, a)(j!1+1)*x!1 ^(1 + j!1)") (("1" (REPLACE -1 1) (("1" (REPLACE -2 1) (("1" (CASE "insert(k, p, a)(j!1 + 1) = a(j!1+1)") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|insert| CONST-DECL "sequence" |sequences| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|sequenceRelation| 0 (|sequenceRelation-2| "" 3768139446 ("" (SKEEP) (("" (INDUCT "k") (("1" (INST 1 "a") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "odd?(j!1 + 1)") (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST 1 "insert(-a(j!1 + 1), j!1 + 1, b!1)") (("1" (SKOSIMP*) (("1" (INST -2 "x!1") (("1" (CASE "polynomial(insert(-a(j!1 + 1), j!1 + 1, b!1), j!1 + 1)(-x!1) = -a(j!1+1)*(-x!1)^(j!1+1) + polynomial(b!1, j!1)(-x!1)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA ODDPOWEREQUIVALENCE) (("1" (INST -1 "x!1" "j!2") (("1" (REPLACE -2 1) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (CASE "2*j!2 = j!1") (("1" (REPLACE -1 1) (("1" (CASE "polynomial(b!1, j!1)(-x!1) = polynomial(a, j!1)(x!1)") (("1" (REPLACE -1 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (HIDE -1) (("2" (HIDE -1) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "insert(-a(1 + j!1), 1 + j!1, b!1)" "1 + j!1" "-x!1") (("2" (SPLIT) (("1" (SIMPLIFY) (("1" (CASE "polynomial(insert(-a(1 + j!1), 1 + j!1, b!1), j!1)(-x!1) = polynomial(b!1, j!1)(-x!1) + -a(1 + j!1)") (("1" (ASSERT) (("1" (REWRITE -1 -2) (("1" (CASE "insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) =  -a(1 + j!1) ") (("1" (REWRITE -1 -2) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA POLYNOMIAL_REC) (("1" (INST -1 "insert(-a(1 + j!1), 1 + j!1, b!1)" "1 + j!1" "-x!1") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (SIMPLIFY) (("1" (CASE "polynomial(insert(-a(1 + j!1), 1 + j!1, b!1), j!1)(-x!1) = polynomial(b!1, j!1)(-x!1)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE " insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) * (-x!1) ^ (1 + j!1) =  -a(1 + j!1) * (-x!1) ^ (1 + j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA SEQUENCERELHELPER) (("2" (INST -1 "b!1" "-a(1 + j!1)" "j!1 + 1" "j!1" "-x!1") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (HIDE 1) (("2" (LEMMA SEQUENCERELHELPER) (("2" (INST -1 "b!1" "-a(1 + j!1)" "1 + j!1" "j!1" "-x!1") (("2" (SPLIT) (("1" (ASSERT) (("1" (LEMMA POLYNOMIAL_REC) (("1" (INST -1 "insert(-a(1 + j!1), 1 + j!1, b!1)" "1+j!1" "-x!1") (("1" (SPLIT) (("1" (REWRITE -1 1) (("1" (HIDE -1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE " insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) = -a(1 + j!1)") (("1" (REWRITE -1 1) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 1) (("2" (REWRITE -1 1) (("2" (LEMMA SEQUENCERELHELPER) (("2" (INST -1 "b!1" "-a(1+j!1)" "1+j!1" "j!1" "-x!1") (("2" (SPLIT) (("1" (REWRITE -1 1) (("1" (CASE "insert(-a(1 + j!1), 1 + j!1, b!1)(1 + j!1) = -a(1 + j!1)") (("1" (REWRITE -1 1) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "even?(j!1 + 1)") (("1" (HIDE 1) (("1" (EXPAND "even?") (("1" (SKOSIMP*) (("1" (INST 1 "insert(a(j!1 + 1), j!1 + 1, b!1)") (("1" (SKOSIMP*) (("1" (INST -2 "x!1") (("1" (LEMMA POLYNOMIAL_REC) (("1" (INST -1 "insert(a(j!1 + 1), j!1 + 1, b!1)" "j!1+1" "-x!1") (("1" (SPLIT) (("1" (REWRITE -1 1) (("1" (HIDE -1) (("1" (CASE "insert(a(1 + j!1), 1 + j!1, b!1)(1 + j!1) = a(1+j!1)") (("1" (REWRITE -1 1) (("1" (LEMMA EVENPOWEREQUIVALENCE) (("1" (INST -1 "x!1" "j!2") (("1" (REPLACE -2 1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "2 * j!2 = 1 + j!1") (("1" (REPLACE -1 1) (("1" (LEMMA SEQUENCERELHELPER) (("1" (INST -1 "b!1" "a(1 + j!1)" "1 + j!1" "j!1" "-x!1") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA POLYNOMIAL_REC) (("1" (CASE "polynomial(b!1, j!1)(-x!1) = polynomial(a, j!1)(x!1)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (INST -1 "a" "1 + j!1" "x!1") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 3) (("2" (EXPAND "even?") (("2" (EXPAND "odd?") (("2" (ASSERT) (("2" (LEMMA EUCLID_NAT) (("2" (INST -1 "j!1" "2") (("2" (SKOSIMP*) (("2" (INST 2 "q!1") (("2" (INST 1 "q!1 + 1") (("2" (SIMPLIFY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|j!2| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|oddPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|sequenceRelHelper| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (|insert| CONST-DECL "sequence" |sequences| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|euclid_nat| FORMULA-DECL NIL |euclidean_division| NIL) (|j!2| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|evenPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) SHOSTAK) (|sequenceRelation-1| |nil| 3768137318 ("" (SKEEP) (("" (INDUCT "k") (("1" (INST 1 "a") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "odd?(j!1 + 1)") (("1" (POSTPONE) NIL NIL) ("2" (CASE "even?(j!1 + 1)") (("1" (HIDE 1) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 3) (("2" (EXPAND "even?") (("2" (EXPAND "odd?") (("2" (ASSERT) (("2" (LEMMA EUCLID_NAT) (("2" (INST -1 "j!1" "2") (("2" (SKOSIMP*) (("2" (INST 2 "q!1") (("2" (INST 1 "q!1 + 1") (("2" (SIMPLIFY) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|polynomialDomMonomNegEvenDeg_TCC1| 0 (|polynomialDomMonomNegEvenDeg_TCC1-1| |nil| 3768145431 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|polynomialDomMonomNegEvenDeg| SUBTYPE "(number_fields.-)(number_fields.*(2, preprocessing_univariate.k), 1)" "nat"))) (|polynomialDomMonomNegEvenDeg| 0 (|polynomialDomMonomNegEvenDeg-2| "" 3768146016 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA SEQUENCERELATION) (("" (INST -1 "a" "2*k-1") (("1" (SKOSIMP*) (("1" (LEMMA POLYNOMIALDOMINATIONCOEFF1) (("1" (INST -1 "-1*b!1" "2*k-1") (("1" (SKOSIMP*) (("1" (INST 1 "min(-1, -m!1)") (("1" (SKEEP) (("1" (INST -1 "-x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "b!1" "-1" "2*k-1" "-x") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (LEMMA EVENPOWEREQUIVALENCE) (("1" (INST -1 "x" "k") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > -1 > -1* polynomial(a, 2 * k - 1)(x)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|k| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|polynomialDominationCoeff1| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|evenPowerEquivalence| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|sequenceRelation| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK) (|polynomialDomMonomNegEvenDeg-1| |nil| 3768144705 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMINATIONCOEFF1) (("" (LEMMA SEQUENCERELATION) (("" (INST -1 "a" "2*k") (("" (SKOSIMP*) (("" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|polynomialDomMonomNegEvenDeg1_TCC1| 0 (|polynomialDomMonomNegEvenDeg1_TCC1-1| |nil| 3768564411 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|polynomialDomMonomNegEvenDeg1| SUBTYPE "(number_fields.-)(number_fields.*(2, preprocessing_univariate.k), 1)" "nat"))) (|polynomialDomMonomNegEvenDeg1| 0 (|polynomialDomMonomNegEvenDeg1-1| |nil| 3768564412 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMINATIONCOEFF1) (("" (INST -1 "-1*a" "2*k-1") (("1" (SIMPLIFY) (("1" (SKEEP) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST 1 "m") (("1" (SKEEP) (("1" (INST -2 "x") (("1" (INST -1 "a" "-1" "2*k-1" "x") (("1" (REPLACE -1 -2) (("1" (SPLIT) (("1" (HIDE -2 -3 -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|k| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|polynomialDominationCoeff1| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|polynomialOddDegLessThanZero| 0 (|polynomialOddDegLessThanZero-5| "very close" 3768211263 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("" (CASE "k=0") (("1" (HIDE -2 -3) (("1" (REPLACE -1 -2) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "x < -a(0)/a(1)") (("1" (LEMMA DIV_MULT_POS_LT2) (("1" (INST -1 "a(1)" "x" "-a(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k > 0") (("1" (HIDE 1) (("1" (INST -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k") (("1" (SKOSIMP*) (("1" (INST -2 "-1*a" "k") (("1" (SKOSIMP*) (("1" (INST 1 "min(m!1, m!2)") (("1" (SKEEP) (("1" (INST -2 "x") (("1" (INST -3 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "a(1+2*k)*x ^ (1 + 2 * k) <= (-1 - a(2 * k))*x^(2*k)") (("1" (ASSERT) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0") (("1" (HIDE -2) (("1" (HIDE -2) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)") (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "2*k-1" "x") (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
                                                         a(2 * k) * x ^ (2 * k) < 0") (("1" (HIDE -2 -3 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -4 -5 -1 -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -5) (("2" (HIDE -1) (("2" (ASSERT) (("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST -1 "a" "-1" "2*k-1" "x") (("2" (REPLACE -1 -2) (("2" (HIDE -1) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "-1" "x^(2*k)" "polynomial(a, 2 * k - 1)(x)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3 -5) (("2" (HIDE 2) (("2" (LEMMA DIV_MULT_POS_LT2) (("2" (INST -1 "a(1 + 2 * k)" " x ^ (1 + 2 * k)" "(-1 - a(2 * k))*x^(2*k)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|polynomialDomMonomNegEvenDeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|k| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|a| SKOLEM-CONST-DECL "sequence[real]" |preprocessing_univariate| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|polynomialDomMonomCoeffOneOdd| FORMULA-DECL NIL |preprocessing_univariate| NIL)) NIL) (|polynomialOddDegLessThanZero-4| "very close" 3768211178 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("" (CASE "k=0") (("1" (HIDE -2 -3) (("1" (REPLACE -1 -2) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "x < -a(0)/a(1)") (("1" (LEMMA DIV_MULT_POS_LT2) (("1" (INST -1 "a(1)" "x" "-a(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k > 0") (("1" (HIDE 1) (("1" (INST -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k") (("1" (SKOSIMP*) (("1" (INST -2 "-1*a" "k") (("1" (SKOSIMP*) (("1" (INST 1 "min(m!1, m!2)") (("1" (SKEEP) (("1" (INST -2 "x") (("1" (INST -3 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "a(1+2*k)*x ^ (1 + 2 * k) <= (-1 - a(2 * k))*x^(2*k)") (("1" (ASSERT) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0") (("1" (HIDE -2) (("1" (HIDE -2) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)") (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "2*k-1" "x") (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
                                a(2 * k) * x ^ (2 * k) < 0") (("1" (HIDE -2 -3 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -4 -5 -1 -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -5) (("2" (HIDE -1) (("2" (ASSERT) (("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST -1 "a" "-1" "2*k-1" "x") (("2" (REPLACE -1 -2) (("2" (HIDE -1) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "-1" "x^(2*k)" "polynomial(a, 2 * k - 1)(x)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3 -5) (("2" (HIDE 2) (("2" (LEMMA DIV_MULT_POS_LT2) (("2" (INST -1 "a(1 + 2 * k)" " x ^ (1 + 2 * k)" "(1 - a(2 * k))*x^(2*k)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegLessThanZero-3| "very close" 3768153090 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("" (CASE "k=0") (("1" (HIDE -2 -3) (("1" (REPLACE -1 -2) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "x < -a(0)/a(1)") (("1" (LEMMA DIV_MULT_POS_LT2) (("1" (INST -1 "a(1)" "x" "-a(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k > 0") (("1" (HIDE 1) (("1" (INST -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k") (("1" (SKOSIMP*) (("1" (INST -2 "-1*a" "k") (("1" (SKOSIMP*) (("1" (INST 1 "min(m!1, m!2)") (("1" (SKEEP) (("1" (INST -2 "x") (("1" (INST -3 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "a(1+2*k)*x ^ (1 + 2 * k) <= (1 + a(2 * k))*x^(2*k)") (("1" (ASSERT) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0") (("1" (HIDE -2) (("1" (HIDE -2) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)") (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "2*k-1" "x") (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
       a(2 * k) * x ^ (2 * k) < 0") (("1" (HIDE -2 -3 -4) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -4 -5 -1 -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -5) (("2" (HIDE -1) (("2" (ASSERT) (("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST -1 "a" "-1" "2*k-1" "x") (("2" (REPLACE -1 -2) (("2" (HIDE -1) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "-1" "x^(2*k)" "polynomial(a, 2 * k - 1)(x)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (HIDE -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3 -5) (("2" (HIDE 2) (("2" (LEMMA DIV_MULT_POS_LT2) (("2" (INST -1 "a(1 + 2 * k)" " x ^ (1 + 2 * k)" "(1 - a(2 * k))*x^(2*k)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegLessThanZero-2| "very close" 3768152865 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("" (CASE "k=0") (("1" (HIDE -2 -3) (("1" (REPLACE -1 -2) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "x < -a(0)/a(1)") (("1" (LEMMA DIV_MULT_POS_LT2) (("1" (INST -1 "a(1)" "x" "-a(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k > 0") (("1" (HIDE 1) (("1" (INST -3 "-1*(a(2*k) + 1)/(a(2*k+1))" "k") (("1" (SKOSIMP*) (("1" (INST -2 "a" "k") (("1" (SKOSIMP*) (("1" (INST 1 "min(m!1, m!2)") (("1" (SKEEP) (("1" (INST -2 "x") (("1" (INST -3 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "a(1+2*k)*x ^ (1 + 2 * k) <= (1 + a(2 * k))*x^(2*k)") (("1" (ASSERT) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0") (("1" (HIDE -2) (("1" (HIDE -2) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + x ^ (2 * k) + a(2 * k) * x ^ (2 * k)") (("1" (POSTPONE) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -5) (("2" (HIDE -1) (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3 -5) (("2" (HIDE 2) (("2" (LEMMA DIV_MULT_POS_LT2) (("2" (INST -1 "a(1 + 2 * k)" " x ^ (1 + 2 * k)" "(1 - a(2 * k))*x^(2*k)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegLessThanZero-veryclose| "very close" 3768151074 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("" (CASE "k=0") (("1" (HIDE -2 -3) (("1" (REPLACE -1 -2) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "x < -a(0)/a(1)") (("1" (LEMMA DIV_MULT_POS_LT2) (("1" (INST -1 "a(1)" "x" "-a(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k > 0") (("1" (HIDE 1) (("1" (INST -3 "-1*(a(2*k) - 1)/(a(2*k+1))" "k") (("1" (SKOSIMP*) (("1" (INST -2 "a" "k") (("1" (SKOSIMP*) (("1" (INST 1 "min(m!1, m!2)") (("1" (SKEEP) (("1" (INST -2 "x") (("1" (INST -3 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "a(1+2*k)*x ^ (1 + 2 * k) <= (1 - a(2 * k))*x^(2*k)") (("1" (ASSERT) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) - x ^ (2 * k) + a(2 * k) * x ^ (2 * k) <= 0") (("1" (HIDE -2) (("1" (HIDE -2) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) - x ^ (2 * k) + a(2 * k) * x ^ (2 * k) < a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + a(2 * k) * x ^ (2 * k)") (("1" (POSTPONE) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -2 -3 -5) (("2" (HIDE 2) (("2" (LEMMA DIV_MULT_POS_LT2) (("2" (INST -1 "a(1 + 2 * k)" " x ^ (1 + 2 * k)" "(1 - a(2 * k))*x^(2*k)") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|polynomialOddDegLessThanZero-1| |nil| 3768132709 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("" (CASE "k=0") (("1" (HIDE -2 -3) (("1" (REPLACE -1 -2) (("1" (REPLACE -1 1) (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (CASE "x < -a(0)/a(1)") (("1" (LEMMA DIV_MULT_POS_LT2) (("1" (INST -1 "a(1)" "x" "-a(0)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "k > 0") (("1" (HIDE 1) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|polynomialOddDegGreaterThanZero| 0 (|polynomialOddDegGreaterThanZero-7| |nil| 3768564978 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (HIDE -1) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODDNEGCOEFF) (("2" (INST -1 "-a(2*k)-1" "k" "a(2 * k + 1)") (("2" (SPLIT) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("1" (INST -1 "-1*a" "k") (("1" (SKEEP) (("1" (INST 2 "max(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) +
                                     x ^ (2 * k) + x ^ (2 * k) * a(2 * k) <= 0") (("1" (HIDE -2) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + x ^ (2 * k) * a(2 * k) < 0") (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial(a, 2*k-1)(x)") (("1" (REPLACE -1 -4) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -5) (("1" (HIDE -2) (("1" (CASE "polynomial(a, 1 + 2 * k)(x) = a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) +
       x ^ (2 * k) * a(2 * k)") (("1" (REPLACE -1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE " polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial(a, 2 * k - 1)(x)") (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST? -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|polynomialDomMonomCoeffOneOddNegCoeff| FORMULA-DECL NIL |preprocessing_univariate| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|polynomialDomMonomNegEvenDeg1| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|ceiling| CONST-DECL "{i | x <= i & i < x + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|a| SKOLEM-CONST-DECL "sequence[real]" |preprocessing_univariate| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL) (|polynomialOddDegGreaterThanZero-6| |nil| 3768564926 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (HIDE -1) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODDNEGCOEFF) (("2" (INST -1 "-a(2*k)-1" "k" "a(2 * k + 1)") (("2" (SPLIT) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("1" (INST -1 "a" "k") (("1" (SKEEP) (("1" (INST 2 "max(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) +
                      x ^ (2 * k) + x ^ (2 * k) * a(2 * k) <= 0") (("1" (HIDE -2) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + x ^ (2 * k) * a(2 * k) < 0") (("1" (POSTPONE) NIL NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero-5| |nil| 3768564697 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (HIDE -1) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODDNEGCOEFF) (("2" (INST -1 "-a(2*k)+1" "k" "a(2 * k + 1)") (("2" (SPLIT) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("1" (INST -1 "a" "k") (("1" (SKEEP) (("1" (INST 2 "max(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (ASSERT) (("1" (CASE " a(1 + 2 * k) * x ^ (1 + 2 * k) -
       x ^ (2 * k) + x ^ (2 * k) * a(2 * k) <= 0") (("1" (HIDE -2) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + polynomial(a, 2 * k - 1)(x) + x ^ (2 * k) * a(2 * k) < 0") (("1" (POSTPONE) NIL NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero-4| |nil| 3768562653 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (HIDE -1) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODDNEGCOEFF) (("2" (INST -1 "-a(2*k)+1" "k" "a(2 * k + 1)") (("2" (SPLIT) (("1" (ASSERT) (("1" (SKEEP) (("1" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero-3| |nil| 3768562427 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (HIDE -3) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (POSTPONE) NIL)))))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero-2| |nil| 3768562407 ("" (SKEEP) (("" (CASE "k = 0") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (HIDE -3) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (POSTPONE) NIL)))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero-1| |nil| 3768560940 ("" (SKEEP) (("" (INDUCT "k") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (INST 1 "ceiling(-a(0)/a(1) + 1)") (("1" (SKEEP) (("1" (CASE "x > -a(0)/a(1)") (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (HIDE -3) (("1" (ASSERT) (("1" (GRIND) (("1" (CASE "a(1)*x < -a(0)") (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST?) (("2" (INST -1 "-a(0)/a(1)") (("2" (SIMPLIFY) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|polynomialOddDegGreaterThanZero1| 0 (|polynomialOddDegGreaterThanZero1-15| "" 3768572381 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (SIMPLIFY) (("1" (ASSERT) (("1" (HIDE -2) (("1" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) + a(2 * k) * x ^ (2 * k) + polynomial(a, 2 * k - 1)(x) > 0") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "a(1 + 2 * k)" "x ^ (1 + 2 * k)" "(1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("2" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) = x ^ (2 * k) - a(2 * k) * x ^ (2 * k)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|polynomialDomMonomNegEvenDeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|k| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polynomialDomMonomCoeffOneOdd| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|floor| CONST-DECL "{i | i <= x & x < i + 1}" |floor_ceil| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|a| SKOLEM-CONST-DECL "sequence[real]" |preprocessing_univariate| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) NIL) (|polynomialOddDegGreaterThanZero1-14| "" 3768572129 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("2" (INST -1 "a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (SIMPLIFY) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "a(1 + 2 * k)" "x ^ (1 + 2 * k)" "(1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("2" (CASE "a(1 + 2 * k) * x ^ (1 + 2 * k) = x ^ (2 * k) - a(2 * k) * x ^ (2 * k)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (ASSERT) (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-13| "" 3768572091 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("2" (INST -1 "a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (HIDE -1) (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-12| "" 3768572048 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("2" (INST -1 "a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-11| "" 3768571951 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("2" (INST -1 "a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)") (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|polynomialOddDegGreaterThanZero1-10| "" 3768571932 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL))))))))))))))))))) ("2" (ASSERT) NIL))) ("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("2" (INST -1 "a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)") (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL))))) ("2" (GRIND) NIL))))))) ("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST? -1) (("2" (ASSERT) NIL))))) ("3" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (SIMPLIFY) (("2" (CASE " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (ASSERT) NIL) ("2" (CASE "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (HIDE -3) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1 + 2 * k)" "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)" "x ^ (1 + 2 * k)") (("1" (ASSERT) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) NIL)))))))))))))))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-9| "" 3768571896 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL))))))))))))))))))) ("2" (ASSERT) NIL))) ("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG1) (("2" (INST -1 "-1*a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)") (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL))))) ("2" (GRIND) NIL))))))) ("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST? -1) (("2" (ASSERT) NIL))))) ("3" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (SIMPLIFY) (("2" (CASE " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (ASSERT) NIL) ("2" (CASE "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (HIDE -3) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1 + 2 * k)" "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)" "x ^ (1 + 2 * k)") (("1" (ASSERT) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) NIL)))))))))))))))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-8| "" 3768571892 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "-1*a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)") (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SIMPLIFY) (("2" (CASE " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (CASE "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (HIDE -3) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1 + 2 * k)" "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)" "x ^ (1 + 2 * k)") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|polynomialOddDegGreaterThanZero1-7| |nil| 3768571834 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL))))))))))))))))))) ("2" (ASSERT) NIL))) ("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "-1*a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) + 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) + 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) - 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)") (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL))))) ("2" (GRIND) NIL))))))) ("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST? -1) (("2" (ASSERT) NIL))))) ("3" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (SIMPLIFY) (("2" (CASE " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (ASSERT) NIL) ("2" (CASE "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (HIDE -3) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1 + 2 * k)" "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)" "x ^ (1 + 2 * k)") (("1" (ASSERT) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) NIL)))))))))))))))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-6| |nil| 3768570859 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (CASE "x < -a(0)/a(1)") (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "-1*a" "k") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALDOMMONOMCOEFFONEODD) (("2" (INST -1 "(-1*a(2*k) - 1)/a(2*k+1)" "k") (("1" (SKEEP) (("1" (INST 2 "min(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (CASE "a(2*k+1)*x^(2 * k + 1) >= (-1 * a(2 * k) - 1)* x ^ (2 * k)") (("1" (HIDE -3) (("1" (CASE "a(2 * k + 1) * x ^ (2 * k + 1) +  (a(2 * k) + 1) * x ^ (2 * k) >= 0") (("1" (HIDE -2) (("1" (CASE "polynomial(-1 * a, 2 * k - 1)(x) = -1*polynomial( a, 2 * k - 1)(x)") (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (CASE "x ^ (2 * k) > polynomial(a, 2 * k - 1)(x)") (("1" (HIDE -3) (("1" (SIMPLIFY) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SIMPLIFY) (("2" (CASE " x ^ (1 + 2 * k) = (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (ASSERT) NIL NIL) ("2" (CASE "x ^ (1 + 2 * k) < (-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)") (("1" (HIDE -3) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1 + 2 * k)" "(-1 - a(2 * k)) / a(1 + 2 * k) * x ^ (2 * k)" "x ^ (1 + 2 * k)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-5| |nil| 3768570839 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (FLATTEN) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (CASE "x < -a(0)/a(1)") (("1" (HIDE -3) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL))))))))))))))))))))) ("2" (ASSERT) NIL))))) ("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (POSTPONE) NIL)))))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-4| |nil| 3768570810 ("" (SKEEP) (("" (SKEEP) (("" (CASE "k = 0") (("1" (SIMPLIFY) (("1" (FLATTEN) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "x < -a(0)/a(1)") (("1" (HIDE -3) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL))))))))))))))))))))) ("2" (ASSERT) NIL))))))) ("2" (GRIND) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (POSTPONE) NIL)))))) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-3| |nil| 3768570588 ("" (SKEEP) (("" (INDUCT "k") (("1" (SIMPLIFY) (("1" (FLATTEN) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "x < -a(0)/a(1)") (("1" (HIDE -3) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "a(1)" "-a(0) / a(1)" "x") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-2| |nil| 3768570244 ("" (SKEEP) (("" (INDUCT "k") (("1" (SIMPLIFY) (("1" (FLATTEN) (("1" (INST 1 "floor(-a(0)/a(1) - 1)") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "x < -a(0)/a(1)") (("1" (HIDE -3) (("1" (GRIND) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST? -1) (("1" (INST -1 "-a(0)/a(1)") (("1" (FLATTEN) (("1" (SIMPLIFY) (("1" (ASSERT) (("1" (GRIND) (("1" (GRIND) (("1" (CASE "a(1) * (-a(0) / a(1)) = -a(0)") (("1" (REPLACE -1 1) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL NIL) (|polynomialOddDegGreaterThanZero1-1| |nil| 3768569992 ("" (SKEEP) (("" (INDUCT "k") (("1" (SIMPLIFY) (("1" (FLATTEN) (("1" (INST 1 "floor(-a(0)/a(1))") (("1" (SKEEP) (("1" (CASE "polynomial(a, 1)(x) = a(1)*x + a(0)") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|polyOddDegPos| 0 (|polyOddDegPos-1| |nil| 3768211686 ("" (SKEEP) (("" (SKEEP) (("" (CASE "a(2*k + 1) > 0") (("1" (HIDE 1) (("1" (LEMMA POLYLCPOS) (("1" (INST -1 "a" "2*k+1") (("1" (SPLIT) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST 1 "p!1") NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a(2*k+1) < 0") (("1" (HIDE 1 2) (("1" (LEMMA POLYNOMIALODDDEGLESSTHANZERO) (("1" (INST -1 "-1*a" "k") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (INST -1 "m!1") (("1" (SPLIT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1" "2*k+1" "m!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("1" (INST -1 "-1" "polynomial(a, 2 * k + 1)(m!1)" "0") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "-1" "0" "a(1 + 2*k)") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (SPLIT) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((< CONST-DECL "bool" |reals| NIL) (|polynomialOddDegLessThanZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polyLCPos| FORMULA-DECL NIL |preprocessing_univariate| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK)) (|polyOddDegNeg| 0 (|polyOddDegNeg-1| |nil| 3768211455 ("" (SKEEP) (("" (SKEEP) (("" (CASE " a(2 * k + 1) > 0") (("1" (HIDE 1) (("1" (LEMMA POLYNOMIALODDDEGLESSTHANZERO) (("1" (INST -1 "a" "k") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (ASSERT) (("1" (INST -1 "m!1") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE " a(2 * k + 1) < 0") (("1" (HIDE 1 2) (("1" (LEMMA POLYLCNEG) (("1" (INST -1 "a" "2*k+1") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "p!1") NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((< CONST-DECL "bool" |reals| NIL) (|polyLCNeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|polynomialOddDegLessThanZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK)) (|polyOddDegZero| 0 (|polyOddDegZero-1| |nil| 3768212299 ("" (SKEEP) (("" (SKEEP) (("" (LEMMA POLYODDDEGPOS) (("" (LEMMA POLYODDDEGNEG) (("" (INST -1 "a" "k") (("" (INST -2 "a" "k") (("" (SPLIT) (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (CASE "x!1 >= x!2") (("1" (LEMMA POLY_INTERMEDIATE_VALUE_INCREASING_0) (("1" (INST -1 "a" "2*k+1" "x!2" "x!1") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 2 "cc!1") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!2 >= x!1") (("1" (HIDE 1) (("1" (LEMMA POLY_INTERMEDIATE_VALUE_DEC) (("1" (INST -1 "a" "0" "2*k+1" "x!1" "x!2") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 2 "cc!1") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|polyOddDegNeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|poly_intermediate_value_increasing_0| FORMULA-DECL NIL |polynomials| |reals|) (|poly_intermediate_value_dec| FORMULA-DECL NIL |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|polyOddDegPos| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|figuringOutModsBidir| 0 (|figuringOutModsBidir-1| |nil| 3768222639 ("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "odd?") (("1" (SKOLEM -1 "j") (("1" (INST 1 "j") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "odd?") (("2" (SKOLEM -1 "k") (("2" (INST 1 "k") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|j| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK)) (|polyPlugInZero| 0 (|polyPlugInZero-1| |nil| 3768302533 ("" (SKEEP) (("" (INDUCT "d") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "a" "j+1" "0") (("2" (SPLIT) (("1" (SIMPLIFY) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "0 ^ (1 + j) = 0") (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (CASE "1 + j > 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (> CONST-DECL "bool" |reals| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK)) (|preprocessingLemma1_TCC1| 0 (|preprocessingLemma1_TCC1-1| |nil| 3768301136 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|preprocessingLemma1| SUBTYPE "preprocessing_univariate.i" "subrange(0, 5)"))) (|preprocessingLemma1| 0 (|preprocessingLemma1-1| |nil| 3768301137 ("" (SKEEP) (("" (EXPAND "rel5") (("" (SIMPLIFY) (("" (CASE "pList(d) > 0") (("1" (HIDE 1) (("1" (LEMMA POLYLCPOS) (("1" (INST -1 "pList" "d") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "pList(d) < 0") (("1" (HIDE 1 2) (("1" (LEMMA POLYLCNEG) (("1" (INST -1 "pList" "d") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "p!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|polyLCPos| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|polyLCNeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (< CONST-DECL "bool" |reals| NIL)) SHOSTAK)) (|preprocessingLemma2| 0 (|preprocessingLemma2-1| |nil| 3768301321 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "odd?") (("" (SKOLEM -1 "j") (("" (EXPAND "rel5") (("" (CASE "i = 0") (("1" (LEMMA POLYODDDEGZERO) (("1" (INST -1 "pList" "j") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 2 "x!1") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i = 1 OR i = 4 OR i = 3") (("1" (LEMMA POLYODDDEGPOS) (("1" (INST -1 "pList" "j") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 3 "x!1") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (REPLACE -3 3) (("2" (HIDE 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i = 2 OR i = 5") (("1" (HIDE 1) (("1" (LEMMA POLYODDDEGNEG) (("1" (INST -1 "pList" "j") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 3 "x!1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|j| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polyOddDegZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|polyOddDegNeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|polyOddDegPos| FORMULA-DECL NIL |preprocessing_univariate| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|preprocessingLemma3| 0 (|preprocessingLemma3-1| |nil| 3768302275 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "rel5") (("" (SPLIT) (("1" (LEMMA POLYLCPOS) (("1" (INST -1 "pList" "d") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 2 "p!1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 2 "0") (("2" (CASE "polynomial(pList, d)(0) = pList(0)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (ASSERT) (("2" (LEMMA POLYPLUGINZERO) (("2" (INST -1 "pList" "d") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|polyLCPos| FORMULA-DECL NIL |preprocessing_univariate| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|polyPlugInZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL)) SHOSTAK)) (|preprocessingLemma4| 0 (|preprocessingLemma4-1| |nil| 3768302737 ("" (SKEEP) (("" (SKEEP) (("" (SPLIT) (("1" (LEMMA POLYLCNEG) (("1" (INST -1 "pList" "d") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 2 "p!1") (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "rel5") (("2" (INST 2 "0") (("2" (CASE "polynomial(pList, d)(0) = pList(0)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (LEMMA POLYPLUGINZERO) (("2" (INST -1 "pList" "d") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|polyPlugInZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|polyLCNeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|preprocessingLemmaOddGeneralize| 0 (|preprocessingLemmaOddGeneralize-3| |nil| 3768738385 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN -1) (("1" (SPLIT -2) (("1" (LEMMA POLYNOMIALODDDEGLESSTHANZERO) (("1" (EXPAND "odd?") (("1" (SKEEP -3) (("1" (INST -1 "a" "j") (("1" (SPLIT) (("1" (SKEEP -1) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALODDDEGGREATERTHANZERO1) (("2" (INST -1 "a" "j") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (EXPAND "even?") (("2" (SKEEP) (("2" (SPLIT) (("1" (FLATTEN -1) (("1" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("1" (INST -1 "1/a(k)*a" "j") (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (CASE "x^(2*j) + polynomial(1 / a(k) * a, 2 * j - 1)(x) > 0") (("1" (HIDE -2) (("1" (CASE "a(k)*(x ^ (2 * j) + polynomial(1 / a(k) * a, 2 * j - 1)(x)) > 0") (("1" (CASE "polynomial(1 / a(k) * a, 2 * j - 1)(x) = 1/a(k)*polynomial(a, 2*j-1)(x)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (SIMPLIFY -1) (("1" (CASE "a(k) * (1 / a(k)) = 1") (("1" (CASE "a(k) * x ^ (2 * j) + polynomial(a, 2 * j - 1)(x) >0") (("1" (HIDE -2 -3) (("1" (REPLACE -5 -2) (("1" (REPLACE -5 2) (("1" (HIDE -2) (("1" (REPLACE -4 -1) (("1" (CASE "polynomial(a, 2 * j)(x) > 0") (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "a" "2*j" "x") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SCAL_POLYNOMIAL2) (("2" (INST -1 "a" "1/a(k)" "2*j-1" "x") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA BOTH_SIDES_TIMES_POS_LT2) (("2" (INST -1 "a(k)" "0" "x ^ (2 * j) + polynomial(1 / a(k) * a, 2 * j - 1)(x)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "(1/a(k))*a" "j") (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "1 / a(k)" "2*j-1" "x") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (CASE "-x ^ (2 * j) - 1 / a(k) * polynomial(a, 2 * j - 1)(x) < 0") (("1" (CASE "-1*(-x ^ (2 * j) - 1 / a(k) * polynomial(a, 2 * j - 1)(x)) > 0") (("1" (SIMPLIFY -1) (("1" (CASE "- -x ^ (2 * j) = x^(2*j)") (("1" (REPLACE -1 -2) (("1" (CASE "polynomial(a, 2 * j - 1)(x) * (1 / a(k)) + x ^ (2 * j) > 0") (("1" (HIDE -2 -3) (("1" (HIDE -2 3) (("1" (CASE "a(k)*(polynomial(a, 2 * j - 1)(x) * (1 / a(k)) + x ^ (2 * j)) < 0") (("1" (HIDE -2) (("1" (SIMPLIFY -1) (("1" (CASE "  a(k) * (1 / a(k)) = 1") (("1" (CASE " a(k) * x ^ (2 * j) + polynomial(a, 2 * j - 1)(x) < 0") (("1" (HIDE -2 -3) (("1" (CASE "polynomial(a, 2 * j)(x) < 0") (("1" (EXPAND "rel5") (("1" (REPLACE -6 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 -1) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "a" "2*j" "x") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA BOTH_SIDES_TIMES_NEG_LT2) (("2" (INST -1 "a(k)" "(polynomial(a, 2 * j - 1)(x) * (1 / a(k)) + x ^ (2 * j))" "0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|j| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|polynomialOddDegLessThanZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|j| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (|polynomialOddDegGreaterThanZero1| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|polynomialDomMonomNegEvenDeg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|scal_polynomial2| FORMULA-DECL NIL |polynomials| |reals|) (> CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|a| SKOLEM-CONST-DECL "sequence[real]" |preprocessing_univariate| NIL) (|k| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|j| SKOLEM-CONST-DECL "int" |preprocessing_univariate| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_neg_lt2| FORMULA-DECL NIL |real_props| NIL)) NIL) (|preprocessingLemmaOddGeneralize-2| |nil| 3768737050 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN -1) (("1" (SPLIT -2) (("1" (LEMMA POLYNOMIALODDDEGLESSTHANZERO) (("1" (EXPAND "odd?") (("1" (SKEEP -3) (("1" (INST -1 "a" "j") (("1" (SPLIT) (("1" (SKEEP -1) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALODDDEGGREATERTHANZERO1) (("2" (INST -1 "a" "j") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (EXPAND "even?") (("2" (SKEEP) (("2" (SPLIT) (("1" (POSTPONE) NIL NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "(-1/a(k))*a" "j") (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (LEMMA SCAL_POLYNOMIAL2) (("1" (INST -1 "a" "-1 / a(k)" "2*j-1" "x") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (CASE "-x ^ (2 * j) + 1 / a(k) * polynomial(a, 2 * j - 1)(x) < 0") (("1" (POSTPONE) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|preprocessingLemmaOddGeneralize-1| |nil| 3768736241 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SPLIT) (("1" (FLATTEN -1) (("1" (SPLIT -2) (("1" (LEMMA POLYNOMIALODDDEGLESSTHANZERO) (("1" (EXPAND "odd?") (("1" (SKEEP -3) (("1" (INST -1 "a" "j") (("1" (SPLIT) (("1" (SKEEP -1) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?") (("2" (SKEEP) (("2" (LEMMA POLYNOMIALODDDEGGREATERTHANZERO1) (("2" (INST -1 "a" "j") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (EXPAND "even?") (("2" (SKEEP) (("2" (SPLIT) (("1" (POSTPONE) NIL NIL) ("2" (LEMMA POLYNOMIALDOMMONOMNEGEVENDEG) (("2" (INST -1 "-1/a(k)*a" "j") (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|preprocessingLemma5| 0 (|preprocessingLemma5-1| |nil| 3768302873 ("" (SKEEP) (("" (SKEEP) (("" (INST 2 "0") (("" (EXPAND "rel5") (("" (CASE "polynomial(pList, d)(0) = pList(0)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 3) (("2" (LEMMA POLYPLUGINZERO) (("2" (INST -1 "pList" "d") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|polyPlugInZero| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|preprocessingTheorem| 0 (|preprocessingTheorem-1| |nil| 3768300075 ("" (SKEEP) (("" (SKEEP) (("" (EXPAND "preprocessingStep") (("" (CASE "i = 3 OR odd?(d) OR ((pList(d) > 0 OR pList(0) > 0) AND (i = 1 OR i = 4)) OR ((pList(d) < 0 OR pList(0) < 0) AND (i = 2 OR i = 5)) OR (pList(0) = 0 AND i = 0)") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGLEMMA1) (("1" (INST -1 "d" "i" "pList") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA PREPROCESSINGLEMMA2) (("2" (INST -1 "d" "pList") (("2" (ASSERT) (("2" (INST -1 "i") NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (LEMMA PREPROCESSINGLEMMA3) (("3" (INST -1 "d" "pList") (("3" (SPLIT) (("1" (INST -1 "i") (("1" (ASSERT) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA PREPROCESSINGLEMMA4) (("4" (INST -1 "d" "pList") (("4" (SPLIT) (("1" (INST -1 "i") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (LEMMA PREPROCESSINGLEMMA5) (("5" (INST -1 "d" "pList") (("5" (SPLIT) (("1" (INST -1 "i") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|preprocessingLemma5| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|preprocessingLemma4| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|preprocessingLemma3| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|preprocessingLemma2| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|preprocessingLemma1| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|preprocessingStep| CONST-DECL "bool" |preprocessing_univariate| NIL)) SHOSTAK)) (|polyLCPosConj| 0 (|polyLCPosConj-4| |nil| 3768314201 ("" (INDUCT "q") (("1" (SKEEP) (("1" (CASE " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0") (("1" (HIDE -2) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SIMPLIFY) (("1" (SPLIT) (("1" (SKOLEM -1 "m") (("1" (INST 1 "m") (("1" (SKOLEM 1 "x") (("1" (INST -1 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE " polynomial(listOfpLists(0), dList(0))(x) > 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKOSIMP*) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(j_1+1)" "dList(j_1 + 1) -1") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "max(m!1, m!2)") (("1" (SKOLEM 1 "x") (("1" (FLATTEN) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (CASE "(FORALL (j: upto(j_1)):
        polynomial(listOfpLists(j), dList(j))(x) > 0) AND
         polynomial(listOfpLists(1 + j_1), dList(1 + j_1))(x) > 0") (("1" (HIDE -2 -3 -4 -5) (("1" (SKEEP :PREDS? T) (("1" (CASE "j < 1 + j_1") (("1" (HIDE -2) (("1" (HIDE -3) (("1" (INST -2 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "j = 1 + j_1") (("1" (HIDE -2) (("1" (HIDE -2) (("1" (REPLACE -1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(1+j_1)" "dList(1+j_1)" "x") (("2" (SPLIT) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -3 "1 + j_1") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (INST -1 "j_1 + 1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST -1 "j!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j_1| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|dList| SKOLEM-CONST-DECL "[nat -> nat]" |preprocessing_univariate| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|j| SKOLEM-CONST-DECL "upto(1 + j_1)" |preprocessing_univariate| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|dList| SKOLEM-CONST-DECL "[nat -> nat]" |preprocessing_univariate| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polynomialDomLC2| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL) (|polyLCPosConj-3| |nil| 3768314146 ("" (INDUCT "q") (("1" (SKEEP) (("1" (CASE " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0") (("1" (HIDE -2) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SIMPLIFY) (("1" (SPLIT) (("1" (SKOLEM -1 "m") (("1" (INST 1 "m") (("1" (SKOLEM 1 "x") (("1" (INST -1 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE " polynomial(listOfpLists(0), dList(0))(x) > 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKOSIMP*) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(j_1+1)" "dList(j_1)") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "max(m!1, m!2)") (("1" (SKOLEM 1 "x") (("1" (FLATTEN) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (INST -1 "j_1 + 1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST -1 "j!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polyLCPosConj-2| |nil| 3768313993 ("" (INDUCT "q") (("1" (SKEEP) (("1" (CASE " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0") (("1" (HIDE -2) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SIMPLIFY) (("1" (SPLIT) (("1" (SKOLEM -1 "m") (("1" (INST 1 "m") (("1" (SKOLEM 1 "x") (("1" (INST -1 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE " polynomial(listOfpLists(0), dList(0))(x) > 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKOSIMP*) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(j_1+1)" "dList(j_1) - 1") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "max(m!1, m!2)") (("1" (SKOLEM 1 "x") (("1" (FLATTEN) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (INST -1 "j_1 + 1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST -1 "j!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|polyLCPosConj-1| |nil| 3768312409 ("" (INDUCT "q") (("1" (SKEEP) (("1" (CASE " listOfpLists(0)(dList(0)) > 0 AND dList(0) > 0") (("1" (HIDE -2) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SIMPLIFY) (("1" (SPLIT) (("1" (SKOLEM -1 "m") (("1" (INST 1 "m") (("1" (SKOLEM 1 "x") (("1" (INST -1 "x") (("1" (SPLIT) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE " polynomial(listOfpLists(0), dList(0))(x) > 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKOSIMP*) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(j_1+1)" "dList(j_1)") (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "max(m!1, m!2)") (("1" (SKOLEM 1 "x") (("1" (FLATTEN) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (POSTPONE) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (INST -1 "j_1 + 1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST -1 "j!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|polyLCNegConj| 0 (|polyLCNegConj-1| |nil| 3768320168 ("" (INDUCT "q") (("1" (SKEEP) (("1" (CASE " listOfpLists(0)(dList(0)) < 0 AND dList(0) > 0") (("1" (HIDE -2) (("1" (LEMMA POLYNOMIALDOMLC2NEG) (("1" (INST -1 "listOfpLists(0)" "dList(0) -1") (("1" (SIMPLIFY) (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (INST 1 "m!1") (("1" (SKOSIMP*) (("1" (INST -1 "x!1") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKEEP) (("1" (LEMMA POLYNOMIALDOMLC2NEG) (("1" (INST -1 "listOfpLists(j_1+1)" "dList(j_1+1)-1") (("1" (SIMPLIFY) (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "max(m, m!1)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (SKEEP) (("1" (TYPEPRED "j") (("1" (CASE "j = 1 + j_1") (("1" (REPLACE -1 1) (("1" (HIDE -1 -2 -3 -5 -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "j < 1 + j_1") (("1" (HIDE -2) (("1" (INST -2 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (TYPEPRED "j") (("2" (INST -2 "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j_1| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|dList| SKOLEM-CONST-DECL "[nat -> nat]" |preprocessing_univariate| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j| SKOLEM-CONST-DECL "upto(1 + j_1)" |preprocessing_univariate| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|dList| SKOLEM-CONST-DECL "[nat -> nat]" |preprocessing_univariate| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polynomialDomLC2Neg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|preprocessingConjLemmaOddGeneralize| 0 (|preprocessingConjLemmaOddGeneralize-1| |nil| 3768739166 ("" (INDUCT "numPolys") (("1" (SKEEP) (("1" (INST -1 "0") (("1" (INST -2 "0") (("1" (LEMMA PREPROCESSINGLEMMAODDGENERALIZE) (("1" (INST -1 "listOfpLists(0)" "RelF6(0)" "dList(0)") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "RelF6" "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKEEP -1) (("1" (INST -2 "1 + j_1") (("1" (INST -3 "1 + j_1") (("1" (LEMMA PREPROCESSINGLEMMAODDGENERALIZE) (("1" (INST?) (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "min(m, m!1)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -2 "x") (("1" (SPLIT) (("1" (SPLIT) (("1" (SKEEP) (("1" (CASE "j = 1 + j_1") (("1" (ASSERT) NIL NIL) ("2" (CASE "j <= j_1") (("1" (INST -2 "j") NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (INST -2 "j") (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (INST -1 "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|j| SKOLEM-CONST-DECL "upto(1 + j_1)" |preprocessing_univariate| NIL) (|j_1| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|preprocessingLemmaOddGeneralize| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|preprocessingConjLC| 0 (|preprocessingConjLC-4| |nil| 3768666903 ("" (INDUCT "numPolys") (("1" (SKEEP) (("1" (INST -1 "0") (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (FLATTEN -1) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SIMPLIFY -1) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (CASE "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0") (("1" (CASE "polynomial(listOfpLists(0), dList(0))(x) > 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SIMPLIFY -2) (("2" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (LEMMA POLYNOMIALDOMLC2NEG) (("2" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST -1 "RelF6" "dList" "listOfpLists") (("2" (SPLIT) (("1" (SKEEP -1) (("1" (INST -3 "1 + j_1") (("1" (SPLIT -3) (("1" (FLATTEN -1) (("1" (INST -4 "1 + j_1") (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(1 + j_1)" "dList(1 + j_1) - 1") (("1" (SPLIT) (("1" (SKEEP -1) (("1" (INST 2 "max(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -4 "x") (("1" (SPLIT -1) (("1" (SPLIT -4) (("1" (SKEEP) (("1" (CASE "j = 1 + j_1") (("1" (REPLACE -1 2) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (CASE "listOfpLists(1 + j_1)(dList(1 + j_1)) * x ^ dList(1 + j_1) + polynomial(listOfpLists(1 + j_1), dList(1 + j_1) - 1)(x) > 0") (("1" (CASE "  polynomial(listOfpLists(1 + j_1), dList(1 + j_1))(x) > 0") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA POLYNOMIAL_REC) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j <= j_1") (("1" (INST -2 "j") NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (INST -4 "1 + j_1") (("2" (LEMMA POLYNOMIALDOMLC2NEG) (("2" (INST -1 "listOfpLists(1 + j_1)" "dList(1 + j_1) - 1") (("1" (SPLIT) (("1" (SKEEP -1) (("1" (INST 2 "max(m!1, m)") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (INST -4 "x") (("1" (SPLIT -1) (("1" (SPLIT -4) (("1" (SKEEP) (("1" (CASE " j = 1 + j_1") (("1" (REPLACE -1 2) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "j <= j_1") (("1" (INST -2 "j") NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (INST -2 "j") (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP 1) (("3" (INST -1 "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|j_1| SKOLEM-CONST-DECL "nat" |preprocessing_univariate| NIL) (|dList| SKOLEM-CONST-DECL "[nat -> nat]" |preprocessing_univariate| NIL) (|j| SKOLEM-CONST-DECL "upto(1 + j_1)" |preprocessing_univariate| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|j| SKOLEM-CONST-DECL "upto(1 + j_1)" |preprocessing_univariate| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|polynomialDomLC2Neg| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|dList| SKOLEM-CONST-DECL "[nat -> nat]" |preprocessing_univariate| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polynomial_rec| FORMULA-DECL NIL |polynomials| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|polynomialDomLC2| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL) (|preprocessingConjLC-3| |nil| 3768666801 ("" (INDUCT "numPolys") (("1" (SKEEP) (("1" (INST -1 "0") (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (FLATTEN -1) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SIMPLIFY -1) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (CASE "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0") (("1" (CASE "polynomial(listOfpLists(0), dList(0))(m) > 0") (("1" (POSTPONE) NIL) ("2" (HIDE 2 3) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SIMPLIFY -2) (("2" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL))) ("2" (PROPAX) NIL))))))))))))) ("2" (HIDE 3 2) (("2" (ASSERT) NIL))))))))))))) ("2" (PROPAX) NIL))))))))))) ("2" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))) ("2" (FLATTEN -1) (("2" (LEMMA POLYNOMIALDOMLC2NEG) (("2" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL))))))) ("2" (PROPAX) NIL))))))))))) ("2" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))))))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (POSTPONE) NIL)))))) NIL) NIL NIL) (|preprocessingConjLC-2| |nil| 3768666755 ("" (INDUCT "numPolys") (("1" (SKEEP) (("1" (INST -1 "0") (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (FLATTEN -1) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SIMPLIFY -1) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (CASE "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0") (("1" (CASE "polynomial(listOfpLists(0), dList(0))(m) > 0") (("1" (POSTPONE) NIL) ("2" (HIDE 2 3) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SIMPLIFY -2) (("2" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL))) ("2" (PROPAX) NIL))))))))))))) ("2" (HIDE 3 2) (("2" (ASSERT) NIL))))))))))))) ("2" (PROPAX) NIL))))))))))) ("2" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))) ("2" (FLATTEN -1) (("2" (LEMMA POLYNOMIALDOMLC2NEG) (("2" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "x") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL))))))) ("2" (PROPAX) NIL))))))))))) ("2" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))))))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (POSTPONE) NIL)))))) NIL) NIL NIL) (|preprocessingConjLC-1| |nil| 3768664377 ("" (INDUCT "numPolys") (("1" (SKEEP) (("1" (INST -1 "0") (("1" (INST -2 "0") (("1" (SPLIT -2) (("1" (FLATTEN -1) (("1" (LEMMA POLYNOMIALDOMLC2) (("1" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SIMPLIFY -1) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (CASE "listOfpLists(0)(dList(0) - 1 + 1) * x ^ (dList(0) - 1 + 1) +  polynomial(listOfpLists(0), dList(0) - 1)(x) > 0") (("1" (CASE "polynomial(listOfpLists(0), dList(0))(m) > 0") (("1" (POSTPONE) NIL NIL) ("2" (HIDE 2 3) (("2" (LEMMA POLYNOMIAL_REC) (("2" (INST -1 "listOfpLists(0)" "dList(0)" "x") (("2" (SIMPLIFY -2) (("2" (SPLIT) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (LEMMA POLYNOMIALDOMLC2NEG) (("2" (INST -1 "listOfpLists(0)" "dList(0) - 1") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (SKEEP) (("1" (INST -1 "x") (("1" (SPLIT) (("1" (SKEEP) (("1" (EXPAND "rel5") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|preprocessingConjLemma5| 0 (|preprocessingConjLemma5-1| |nil| 3768310658 ("" (SKEEP) (("" (INST 1 "0") (("" (SKEEP) (("" (INST -1 "j") (("" (INST -2 "j") (("" (CASE "polynomial(listOfpLists(j), dList(j))(0) = listOfpLists(j)(0)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA POLYPLUGINZERO) (("2" (INST -1 "listOfpLists(j)" "dList(j)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|polyPlugInZero| FORMULA-DECL NIL |preprocessing_univariate| NIL)) SHOSTAK)) (|preprocessingConjTheorem| 0 (|preprocessingConjTheorem-14| "" 3768741917 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): listOfpLists(q)(dList(q))/=0 AND dList(q)>0) IMPLIES  (FORALL (q:upto(numPolys)): (odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (
(even?(dList(q)) AND dList(q) > 0) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODDGENERALIZE) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|preprocessingStepConj| CONST-DECL "bool" |preprocessing_univariate| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|preprocessingConjLemmaOddGeneralize| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|preprocessingConjLC| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|preprocessingConjLemma5| FORMULA-DECL NIL |preprocessing_univariate| NIL) (|rel5| CONST-DECL "bool" |preprocessing_univariate| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL) (|preprocessingConjTheorem-13| "" 3768741711 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODDGENERALIZE) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-12| "" 3768741608 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODDGENERALIZE) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-11| "" 3768667923 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODD) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|preprocessingConjTheorem-10| "" 3768667856 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): (listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3))) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODD) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (GRIND) NIL))))))) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-9| "" 3768667488 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODD) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (GRIND) NIL))))))) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-8| "" 3768667423 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODD) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLC) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -2 -3 -4 -5) (("2" (GRIND) NIL))))))))))) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA5) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-7| "" 3768664150 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMAODD) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA PREPROCESSINGCONJLEMMA4) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -2 -3 -4 -5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA PREPROCESSINGCONJLEMMA3) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -1 "q") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA PREPROCESSINGCONJLEMMA5) (("4" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("4" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|preprocessingConjTheorem-6| "" 3768664079 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLEMMA4) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -2 -3 -4 -5) (("2" (GRIND) NIL))))))))))) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA3) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -1 "q") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL))))))))) ("3" (PROPAX) NIL))))))) ("4" (LEMMA PREPROCESSINGCONJLEMMA5) (("4" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("4" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-5| "" 3768663995 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q:upto(numPolys)): odd?(dList(q)) AND ((listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 3 OR RelF6(q) = 5)) OR (listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 3 OR RelF6(q) = 4)))) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA1) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("2" (LEMMA PREPROCESSINGCONJLEMMA2NOINF) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL))))))) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))) ("3" (LEMMA PREPROCESSINGCONJLEMMA4) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -2 -3 -4 -5) (("2" (GRIND) NIL))))))))))) ("3" (PROPAX) NIL))))))) ("4" (LEMMA PREPROCESSINGCONJLEMMA3) (("4" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("4" (SPLIT) (("1" (PROPAX) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -1 "q") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL))))))))) ("3" (PROPAX) NIL))))))) ("5" (LEMMA PREPROCESSINGCONJLEMMA5) (("5" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("5" (SPLIT) (("1" (PROPAX) NIL) ("2" (PROPAX) NIL) ("3" (PROPAX) NIL))))))))) ("2" (ASSERT) (("2" (GRIND) NIL)))))))) NIL) NIL NIL) (|preprocessingConjTheorem-4| "" 3768574735 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (CASE "(FORALL (q: upto(numPolys)): odd?(dList(q)) AND listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 2 OR RelF6(q) = 5)) OR (FORALL (q: upto(numPolys)): odd?(dList(q)) AND listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 1 OR RelF6(q) = 4)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) > 0 AND (RelF6(q) = 1 OR RelF6(q) = 4 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): listOfpLists(q)(dList(q)) < 0 AND (RelF6(q) = 2 OR RelF6(q) = 5 OR RelF6(q) = 3)) OR (FORALL (q: upto(numPolys)): rel5(RelF6(q))(listOfpLists(q)(0), 0))") (("1" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA1) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA PREPROCESSINGCONJLEMMA2NOINF) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA PREPROCESSINGCONJLEMMA4) (("3" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("3" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE -2 -3 -4 -5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA PREPROCESSINGCONJLEMMA3) (("4" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("4" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -1 "q") (("2" (HIDE -2 -3 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (LEMMA PREPROCESSINGCONJLEMMA5) (("5" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("5" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|preprocessingConjTheorem-3| "" 3768574580 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA1) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (ASSERT) (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA2NOINF) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (INST -1 "m") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA3) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA4) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (GROUND) (("2" (REVEAL -1) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (CASE "1 = 1") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA5) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|preprocessingConjTheorem-2| "" 3768574449 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA1) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (ASSERT) (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA2NOINF) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (INST -1 "m") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA3) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (LEMMA PREPROCESSINGCONJLEMMA3) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (LEMMA PREPROCESSINGCONJLEMMA4) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA4) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (GROUND) (("2" (REVEAL -1) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (CASE "1 = 1") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA5) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|preprocessingConjTheorem-1| |nil| 3768573445 ("" (SKEEP) (("" (EXPAND "preprocessingStepConj") (("" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA1) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (ASSERT) (("1" (SPLIT) (("1" (SKEEP) (("1" (INST 1 "m") (("1" (INST -1 "m") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA2NOINF) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (SKEEP) (("1" (SKEEP) (("1" (INST 2 "m") (("1" (INST -1 "m") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA3) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (LEMMA PREPROCESSINGCONJLEMMA3) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (LEMMA PREPROCESSINGCONJLEMMA4) (("2" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA4) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (GROUND) (("2" (POSTPONE) NIL NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (LEMMA PREPROCESSINGCONJLEMMA5) (("1" (INST -1 "RelF6" "dList" "listOfpLists" "numPolys") (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sum_squares_rec_TCC1| 0 (|sum_squares_rec_TCC1-1| |nil| 3771066495 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|sum_squares_rec| SUBTYPE "(number_fields.-)(((number_fields.+)(preprocessing_univariate.numPolys, 1)), preprocessing_univariate.rec)" "naturalnumber"))) (|sum_squares_rec_TCC2| 0 (|sum_squares_rec_TCC2-1| |nil| 3771066495 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|sum_squares_rec| SUBTYPE "(number_fields.+)(preprocessing_univariate.rec, 1)" "{rec | reals.<=(preprocessing_univariate.rec, (number_fields.+)(1, preprocessing_univariate.numPolys))}"))) (|sum_squares_rec_TCC3| 0 (|sum_squares_rec_TCC3-1| |nil| 3771066495 ("" (TERMINATION-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|sum_squares_rec| TERMINATION "preprocessing_univariate.sum_squares_rec(preprocessing_univariate.numPolys, preprocessing_univariate.listOfpLists, preprocessing_univariate.dList, LAMBDA (i: naturalnumbers.nat): ((number_fields.+)(preprocessing_univariate.pListAcc(i), polynomials.polynomial_prod(preprocessing_univariate.listOfpLists(preprocessing_univariate.rec), preprocessing_univariate.dList(preprocessing_univariate.rec), preprocessing_univariate.listOfpLists(preprocessing_univariate.rec), preprocessing_univariate.dList(preprocessing_univariate.rec))(i))), real_defs.max(preprocessing_univariate.acc, number_fields.*(2, preprocessing_univariate.dList(preprocessing_univariate.rec))), (number_fields.+)(preprocessing_univariate.rec, 1))" "NIL"))) (|sum_squares_TCC1| 0 (|sum_squares_TCC1-1| |nil| 3771066495 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sum_squares| SUBTYPE "1" "{rec | reals.<=(preprocessing_univariate.rec, (number_fields.+)(1, preprocessing_univariate.numPolys))}"))))
